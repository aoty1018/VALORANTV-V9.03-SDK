																/* VALORANT V9.03*/
																/* QQ 1787174068  */
																/* QQ 2278616922*/
// ScriptStruct  CoreUObject.JoinabilitySettings
// Struct Size::0x0018
struct FJoinabilitySettings
{
    FName                                         SessionName;                                                  // 0x0000(0x000C)
    bool                                          bPublicSearchable;                                            // 0x000C(0x0001)
    bool                                          bAllowInvites;                                                // 0x000D(0x0001)
    bool                                          bJoinViaPresence;                                             // 0x000E(0x0001)
    bool                                          bJoinViaPresenceFriendsOnly;                                  // 0x000F(0x0001)
    int32_t                                       MaxPlayers;                                                   // 0x0010(0x0004)
    int32_t                                       MaxPartySize;                                                 // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.Default
// Struct Size::0x0000
struct FDefault
{
};


// ScriptStruct  CoreUObject.UniqueNetIdWrapper
// Struct Size::0x0001
struct FUniqueNetIdWrapper
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  CoreUObject.Guid
// Struct Size::0x0010
struct FGuid
{
    int32_t                                       A;                                                            // 0x0000(0x0004)
    int32_t                                       B;                                                            // 0x0004(0x0004)
    int32_t                                       C;                                                            // 0x0008(0x0004)
    int32_t                                       D;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.Vector
// Struct Size::0x000C
struct FVector
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
    float                                         Z;                                                            // 0x0008(0x0004)
};


// ScriptStruct  CoreUObject.Vector4
// Struct Size::0x0010
struct FVector4
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
    float                                         Z;                                                            // 0x0008(0x0004)
    float                                         W;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.Vector2D
// Struct Size::0x0008
struct FVector2D
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.TwoVectors
// Struct Size::0x0018
struct FTwoVectors
{
    FVector                                       v1;                                                           // 0x0000(0x000C)
    FVector                                       v2;                                                           // 0x000C(0x000C)
};


// ScriptStruct  CoreUObject.Plane
// Struct Size::0x0010
struct FPlane : public FVector
{
    float                                         W;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.Rotator
// Struct Size::0x000C
struct FRotator
{
    float                                         Pitch;                                                        // 0x0000(0x0004)
    float                                         Yaw;                                                          // 0x0004(0x0004)
    float                                         Roll;                                                         // 0x0008(0x0004)
};


// ScriptStruct  CoreUObject.Quat
// Struct Size::0x0010
struct FQuat
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
    float                                         Z;                                                            // 0x0008(0x0004)
    float                                         W;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.PackedNormal
// Struct Size::0x0004
struct FPackedNormal
{
    char                                          X;                                                            // 0x0000(0x0001)
    char                                          Y;                                                            // 0x0001(0x0001)
    char                                          Z;                                                            // 0x0002(0x0001)
    char                                          W;                                                            // 0x0003(0x0001)
};


// ScriptStruct  CoreUObject.PackedRGB10A2N
// Struct Size::0x0004
struct FPackedRGB10A2N
{
    int32_t                                       Packed;                                                       // 0x0000(0x0004)
};


// ScriptStruct  CoreUObject.PackedRGBA16N
// Struct Size::0x0008
struct FPackedRGBA16N
{
    int32_t                                       XY;                                                           // 0x0000(0x0004)
    int32_t                                       ZW;                                                           // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.IntPoint
// Struct Size::0x0008
struct FIntPoint
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.IntVector
// Struct Size::0x000C
struct FIntVector
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
    int32_t                                       Z;                                                            // 0x0008(0x0004)
};


// ScriptStruct  CoreUObject.Color
// Struct Size::0x0004
struct FColor
{
    char                                          B;                                                            // 0x0000(0x0001)
    char                                          G;                                                            // 0x0001(0x0001)
    char                                          R;                                                            // 0x0002(0x0001)
    char                                          A;                                                            // 0x0003(0x0001)
};


// ScriptStruct  CoreUObject.LinearColor
// Struct Size::0x0010
struct FLinearColor
{
    float                                         R;                                                            // 0x0000(0x0004)
    float                                         G;                                                            // 0x0004(0x0004)
    float                                         B;                                                            // 0x0008(0x0004)
    float                                         A;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.Box
// Struct Size::0x001C
struct FBox
{
    FVector                                       Min;                                                          // 0x0000(0x000C)
    FVector                                       Max;                                                          // 0x000C(0x000C)
    char                                          IsValid;                                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  CoreUObject.Box2D
// Struct Size::0x0014
struct FBox2D
{
    FVector2D                                     Min;                                                          // 0x0000(0x0008)
    FVector2D                                     Max;                                                          // 0x0008(0x0008)
    char                                          bIsValid;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  CoreUObject.BoxSphereBounds
// Struct Size::0x001C
struct FBoxSphereBounds
{
    FVector                                       Origin;                                                       // 0x0000(0x000C)
    FVector                                       BoxExtent;                                                    // 0x000C(0x000C)
    float                                         SphereRadius;                                                 // 0x0018(0x0004)
};


// ScriptStruct  CoreUObject.OrientedBox
// Struct Size::0x003C
struct FOrientedBox
{
    FVector                                       Center;                                                       // 0x0000(0x000C)
    FVector                                       AxisX;                                                        // 0x000C(0x000C)
    FVector                                       AxisY;                                                        // 0x0018(0x000C)
    FVector                                       AxisZ;                                                        // 0x0024(0x000C)
    float                                         ExtentX;                                                      // 0x0030(0x0004)
    float                                         ExtentY;                                                      // 0x0034(0x0004)
    float                                         ExtentZ;                                                      // 0x0038(0x0004)
};


// ScriptStruct  CoreUObject.Matrix
// Struct Size::0x0040
struct FMatrix
{
    FPlane                                        XPlane;                                                       // 0x0000(0x0010)
    FPlane                                        YPlane;                                                       // 0x0010(0x0010)
    FPlane                                        ZPlane;                                                       // 0x0020(0x0010)
    FPlane                                        WPlane;                                                       // 0x0030(0x0010)
};


// ScriptStruct  CoreUObject.InterpCurvePointFloat
// Struct Size::0x0014
struct FInterpCurvePointFloat
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    float                                         OutVal;                                                       // 0x0004(0x0004)
    float                                         ArriveTangent;                                                // 0x0008(0x0004)
    float                                         LeaveTangent;                                                 // 0x000C(0x0004)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  CoreUObject.InterpCurveFloat
// Struct Size::0x0018
struct FInterpCurveFloat
{
    TArray<FInterpCurvePointFloat>                Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointVector2D
// Struct Size::0x0020
struct FInterpCurvePointVector2D
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    FVector2D                                     OutVal;                                                       // 0x0004(0x0008)
    FVector2D                                     ArriveTangent;                                                // 0x000C(0x0008)
    FVector2D                                     LeaveTangent;                                                 // 0x0014(0x0008)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  CoreUObject.InterpCurveVector2D
// Struct Size::0x0018
struct FInterpCurveVector2D
{
    TArray<FInterpCurvePointVector2D>             Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointVector
// Struct Size::0x002C
struct FInterpCurvePointVector
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    FVector                                       OutVal;                                                       // 0x0004(0x000C)
    FVector                                       ArriveTangent;                                                // 0x0010(0x000C)
    FVector                                       LeaveTangent;                                                 // 0x001C(0x000C)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
};


// ScriptStruct  CoreUObject.InterpCurveVector
// Struct Size::0x0018
struct FInterpCurveVector
{
    TArray<FInterpCurvePointVector>               Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointQuat
// Struct Size::0x0050
struct FInterpCurvePointQuat
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FQuat                                         OutVal;                                                       // 0x0010(0x0010)
    FQuat                                         ArriveTangent;                                                // 0x0020(0x0010)
    FQuat                                         LeaveTangent;                                                 // 0x0030(0x0010)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0040(0x0001)
    char                                          pa_0041[0x000F]                                               // 0x0041(0x000F)
};


// ScriptStruct  CoreUObject.InterpCurveQuat
// Struct Size::0x0018
struct FInterpCurveQuat
{
    TArray<FInterpCurvePointQuat>                 Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointTwoVectors
// Struct Size::0x0050
struct FInterpCurvePointTwoVectors
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    FTwoVectors                                   OutVal;                                                       // 0x0004(0x0018)
    FTwoVectors                                   ArriveTangent;                                                // 0x001C(0x0018)
    FTwoVectors                                   LeaveTangent;                                                 // 0x0034(0x0018)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
};


// ScriptStruct  CoreUObject.InterpCurveTwoVectors
// Struct Size::0x0018
struct FInterpCurveTwoVectors
{
    TArray<FInterpCurvePointTwoVectors>           Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointLinearColor
// Struct Size::0x0038
struct FInterpCurvePointLinearColor
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    FLinearColor                                  OutVal;                                                       // 0x0004(0x0010)
    FLinearColor                                  ArriveTangent;                                                // 0x0014(0x0010)
    FLinearColor                                  LeaveTangent;                                                 // 0x0024(0x0010)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
};


// ScriptStruct  CoreUObject.InterpCurveLinearColor
// Struct Size::0x0018
struct FInterpCurveLinearColor
{
    TArray<FInterpCurvePointLinearColor>          Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.Transform
// Struct Size::0x0030
struct FTransform
{
    FQuat                                         Rotation;                                                     // 0x0000(0x0010)
    FVector                                       Translation;                                                  // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FVector                                       Scale3D;                                                      // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  CoreUObject.RandomStream
// Struct Size::0x0018
struct FRandomStream
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    int32_t                                       InitialSeed;                                                  // 0x0010(0x0004)
    int32_t                                       Seed;                                                         // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.DateTime
// Struct Size::0x0008
struct FDateTime
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  CoreUObject.FrameNumber
// Struct Size::0x0004
struct FFrameNumber
{
    int32_t                                       Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  CoreUObject.FrameRate
// Struct Size::0x0008
struct FFrameRate
{
    int32_t                                       Numerator;                                                    // 0x0000(0x0004)
    int32_t                                       Denominator;                                                  // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.FrameTime
// Struct Size::0x0008
struct FFrameTime
{
    FFrameNumber                                  FrameNumber;                                                  // 0x0000(0x0004)
    float                                         SubFrame;                                                     // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.QualifiedFrameTime
// Struct Size::0x0010
struct FQualifiedFrameTime
{
    FFrameTime                                    Time;                                                         // 0x0000(0x0008)
    FFrameRate                                    Rate;                                                         // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.Timecode
// Struct Size::0x0014
struct FTimecode
{
    int32_t                                       Hours;                                                        // 0x0000(0x0004)
    int32_t                                       Minutes;                                                      // 0x0004(0x0004)
    int32_t                                       Seconds;                                                      // 0x0008(0x0004)
    int32_t                                       Frames;                                                       // 0x000C(0x0004)
    bool                                          bDropFrameFormat;                                             // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  CoreUObject.Timespan
// Struct Size::0x0008
struct FTimespan
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  CoreUObject.SoftObjectPath
// Struct Size::0x0020
struct FSoftObjectPath
{
    FName                                         AssetPathName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       SubPathString;                                                // 0x0010(0x0010)
};


// ScriptStruct  CoreUObject.SoftClassPath
// Struct Size::0x0020
struct FSoftClassPath : public FSoftObjectPath
{
};


// ScriptStruct  CoreUObject.PrimaryAssetType
// Struct Size::0x000C
struct FPrimaryAssetType
{
    FName                                         Name;                                                         // 0x0000(0x000C)
};


// ScriptStruct  CoreUObject.PrimaryAssetId
// Struct Size::0x0018
struct FPrimaryAssetId
{
    FPrimaryAssetType                             PrimaryAssetType;                                             // 0x0000(0x000C)
    FName                                         PrimaryAssetName;                                             // 0x000C(0x000C)
};


// ScriptStruct  CoreUObject.FallbackStruct
// Struct Size::0x0001
struct FFallbackStruct
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  CoreUObject.FloatRangeBound
// Struct Size::0x0008
struct FFloatRangeBound
{
    enum class ERangeBoundTypes                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.FloatRange
// Struct Size::0x0010
struct FFloatRange
{
    FFloatRangeBound                              LowerBound;                                                   // 0x0000(0x0008)
    FFloatRangeBound                              UpperBound;                                                   // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.Int32RangeBound
// Struct Size::0x0008
struct FInt32RangeBound
{
    enum class ERangeBoundTypes                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.Int32Range
// Struct Size::0x0010
struct FInt32Range
{
    FInt32RangeBound                              LowerBound;                                                   // 0x0000(0x0008)
    FInt32RangeBound                              UpperBound;                                                   // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.FrameNumberRangeBound
// Struct Size::0x0008
struct FFrameNumberRangeBound
{
    enum class ERangeBoundTypes                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FFrameNumber                                  Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.FrameNumberRange
// Struct Size::0x0010
struct FFrameNumberRange
{
    FFrameNumberRangeBound                        LowerBound;                                                   // 0x0000(0x0008)
    FFrameNumberRangeBound                        UpperBound;                                                   // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.FloatInterval
// Struct Size::0x0008
struct FFloatInterval
{
    float                                         Min;                                                          // 0x0000(0x0004)
    float                                         Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.Int32Interval
// Struct Size::0x0008
struct FInt32Interval
{
    int32_t                                       Min;                                                          // 0x0000(0x0004)
    int32_t                                       Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.PolyglotTextData
// Struct Size::0x00B8
struct FPolyglotTextData
{
    enum class ELocalizedTextSourceCategory       Category;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       NativeCulture;                                                // 0x0008(0x0010)
    FString                                       Namespace;                                                    // 0x0018(0x0010)
    FString                                       Key;                                                          // 0x0028(0x0010)
    FString                                       NativeString;                                                 // 0x0038(0x0010)
    TMap<FString,FString>                         LocalizedStrings;                                             // 0x0048(0x0050)
    bool                                          bIsMinimalPatch;                                              // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
    FText                                         CachedText;                                                   // 0x00A0(0x0018)
};


// ScriptStruct  CoreUObject.AutomationEvent
// Struct Size::0x0038
struct FAutomationEvent
{
    enum class EAutomationEventType               Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Message;                                                      // 0x0008(0x0010)
    FString                                       Context;                                                      // 0x0018(0x0010)
    FGuid                                         Artifact;                                                     // 0x0028(0x0010)
};


// ScriptStruct  CoreUObject.AutomationExecutionEntry
// Struct Size::0x0058
struct FAutomationExecutionEntry
{
    FAutomationEvent                              Event;                                                        // 0x0000(0x0038)
    FString                                       Filename;                                                     // 0x0038(0x0010)
    int32_t                                       LineNumber;                                                   // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FDateTime                                     Timestamp;                                                    // 0x0050(0x0008)
};


// ScriptStruct  CoreUObject.ARFilter
// Struct Size::0x00F0
struct FARFilter
{
    TArray<FName>                                 PackageNames;                                                 // 0x0000(0x0010)
    TArray<FName>                                 PackagePaths;                                                 // 0x0010(0x0010)
    TArray<FName>                                 ObjectPaths;                                                  // 0x0020(0x0010)
    TArray<FName>                                 ClassNames;                                                   // 0x0030(0x0010)
    char                                          pa_0040[0x0050]                                               // 0x0040(0x0050)
    TSet<FName>                                   RecursiveClassesExclusionSet;                                 // 0x0090(0x0050)
    bool                                          bRecursivePaths;                                              // 0x00E0(0x0001)
    bool                                          bRecursiveClasses;                                            // 0x00E1(0x0001)
    bool                                          bIncludeOnlyOnDiskAssets;                                     // 0x00E2(0x0001)
    char                                          pa_00E3[0x000D]                                               // 0x00E3(0x000D)
};


// ScriptStruct  CoreUObject.AssetBundleEntry
// Struct Size::0x0020
struct FAssetBundleEntry
{
    FName                                         BundleName;                                                   // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FSoftObjectPath>                       BundleAssets;                                                 // 0x0010(0x0010)
};


// ScriptStruct  CoreUObject.AssetBundleData
// Struct Size::0x0010
struct FAssetBundleData
{
    TArray<FAssetBundleEntry>                     Bundles;                                                      // 0x0000(0x0010)
};


// ScriptStruct  CoreUObject.AssetData
// Struct Size::0x0078
struct FAssetData
{
    FName                                         ObjectPath;                                                   // 0x0000(0x000C)
    FName                                         PackageName;                                                  // 0x000C(0x000C)
    FName                                         PackagePath;                                                  // 0x0018(0x000C)
    FName                                         AssetName;                                                    // 0x0024(0x000C)
    FName                                         AssetClass;                                                   // 0x0030(0x000C)
    char                                          pa_003C[0x003C]                                               // 0x003C(0x003C)
};


// ScriptStruct  CoreUObject.TestUninitializedScriptStructMembersTest
// Struct Size::0x0018
struct FTestUninitializedScriptStructMembersTest
{
    UObject*                                      UninitializedObjectReference;                                 // 0x0000(0x0008)
    UObject*                                      InitializedObjectReference;                                   // 0x0008(0x0008)
    float                                         UnusedValue;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.UnicodeStringLength
// Struct Size::0x0008
struct FUnicodeStringLength
{
    enum class EStringMeasurementUnits            Units;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Length;                                                       // 0x0004(0x0004)
};


// ScriptStruct  Engine.DistributionLookupTable
// Struct Size::0x0020
struct FDistributionLookupTable
{
    float                                         TimeScale;                                                    // 0x0000(0x0004)
    float                                         TimeBias;                                                     // 0x0004(0x0004)
    TArray<float>                                 Values;                                                       // 0x0008(0x0010)
    char                                          Op;                                                           // 0x0018(0x0001)
    char                                          EntryCount;                                                   // 0x0019(0x0001)
    char                                          EntryStride;                                                  // 0x001A(0x0001)
    char                                          SubEntryStride;                                               // 0x001B(0x0001)
    char                                          LockFlag;                                                     // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.RawDistribution
// Struct Size::0x0020
struct FRawDistribution
{
    FDistributionLookupTable                      Table;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.FloatDistribution
// Struct Size::0x0020
struct FFloatDistribution
{
    FDistributionLookupTable                      Table;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.VectorDistribution
// Struct Size::0x0020
struct FVectorDistribution
{
    FDistributionLookupTable                      Table;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.Vector4Distribution
// Struct Size::0x0020
struct FVector4Distribution
{
    FDistributionLookupTable                      Table;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.FloatRK4SpringInterpolator
// Struct Size::0x0008
struct FFloatRK4SpringInterpolator
{
    float                                         StiffnessConstant;                                            // 0x0000(0x0004)
    float                                         DampeningRatio;                                               // 0x0004(0x0004)
};


// ScriptStruct  Engine.VectorRK4SpringInterpolator
// Struct Size::0x0008
struct FVectorRK4SpringInterpolator
{
    float                                         StiffnessConstant;                                            // 0x0000(0x0004)
    float                                         DampeningRatio;                                               // 0x0004(0x0004)
};


// ScriptStruct  Engine.FormatArgumentData
// Struct Size::0x0040
struct FFormatArgumentData
{
    FString                                       ArgumentName;                                                 // 0x0000(0x0010)
    enum class EFormatArgumentType                ArgumentValueType;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FText                                         ArgumentValue;                                                // 0x0018(0x0018)
    int32_t                                       ArgumentValueInt;                                             // 0x0030(0x0004)
    float                                         ArgumentValueFloat;                                           // 0x0034(0x0004)
    enum class ETextGender                        ArgumentValueGender;                                          // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Engine.ExpressionInput
// Struct Size::0x001C
struct FExpressionInput
{
    int32_t                                       OutputIndex;                                                  // 0x0000(0x0004)
    FName                                         InputName;                                                    // 0x0004(0x000C)
    FName                                         ExpressionName;                                               // 0x0010(0x000C)
};


// ScriptStruct  Engine.MaterialAttributesInput
// Struct Size::0x0028
struct FMaterialAttributesInput : public FExpressionInput
{
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    int64_t                                       PropertyConnectedBitmask;                                     // 0x0020(0x0008)
};


// ScriptStruct  Engine.ExpressionOutput
// Struct Size::0x000C
struct FExpressionOutput
{
    FName                                         OutputName;                                                   // 0x0000(0x000C)
};


// ScriptStruct  Engine.MaterialInput
// Struct Size::0x001C
struct FMaterialInput
{
    int32_t                                       OutputIndex;                                                  // 0x0000(0x0004)
    FName                                         InputName;                                                    // 0x0004(0x000C)
    FName                                         ExpressionName;                                               // 0x0010(0x000C)
};


// ScriptStruct  Engine.ColorMaterialInput
// Struct Size::0x001C
struct FColorMaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.ScalarMaterialInput
// Struct Size::0x001C
struct FScalarMaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.ShadingModelMaterialInput
// Struct Size::0x001C
struct FShadingModelMaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.VectorMaterialInput
// Struct Size::0x001C
struct FVectorMaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.Vector2MaterialInput
// Struct Size::0x001C
struct FVector2MaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.HitResult
// Struct Size::0x0090
struct FHitResult
{
    int32_t                                       FaceIndex;                                                    // 0x0000(0x0004)
    float                                         Time;                                                         // 0x0004(0x0004)
    float                                         Distance;                                                     // 0x0008(0x0004)
    FVector                                       Location;                                                     // 0x000C(0x000C)
    FVector                                       ImpactPoint;                                                  // 0x0018(0x000C)
    FVector                                       Normal;                                                       // 0x0024(0x000C)
    FVector                                       ImpactNormal;                                                 // 0x0030(0x000C)
    FVector                                       TraceStart;                                                   // 0x003C(0x000C)
    FVector                                       TraceEnd;                                                     // 0x0048(0x000C)
    float                                         PenetrationDepth;                                             // 0x0054(0x0004)
    int32_t                                       Item;                                                         // 0x0058(0x0004)
    char                                          ElementIndex;                                                 // 0x005C(0x0001)
    char                                          bBlockingHit;                                                 // 0x005D(0x0001)
    char                                          bStartPenetrating;                                            // 0x005D(0x0001)
    char                                          pa_005E[0x0002]                                               // 0x005E(0x0002)
    TWeakObjectPtr<FPhysicalMaterial>             PhysMaterial;                                                 // 0x0060(0x0008)
    TWeakObjectPtr<AActor>                        Actor;                                                        // 0x0068(0x0008)
    TWeakObjectPtr<UPrimitiveComponent>           Component;                                                    // 0x0070(0x0008)
    FName                                         BoneName;                                                     // 0x0078(0x000C)
    FName                                         MyBoneName;                                                   // 0x0084(0x000C)
};


// ScriptStruct  Engine.Vector
// Struct Size::0x000C
struct FVector : public FVector
{
};


// ScriptStruct  Engine.Vector
// Struct Size::0x000C
struct FVector : public FVector
{
};


// ScriptStruct  InputCore.Key
// Struct Size::0x0020
struct FKey
{
    FName                                         KeyName;                                                      // 0x0000(0x000C)
    char                                          pa_000C[0x0014]                                               // 0x000C(0x0014)
};


// ScriptStruct  Engine.BranchingPointNotifyPayload
// Struct Size::0x0020
struct FBranchingPointNotifyPayload
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  Engine.SimpleMemberReference
// Struct Size::0x0028
struct FSimpleMemberReference
{
    UObject*                                      MemberParent;                                                 // 0x0000(0x0008)
    FName                                         MemberName;                                                   // 0x0008(0x000C)
    FGuid                                         MemberGuid;                                                   // 0x0014(0x0010)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.TickFunction
// Struct Size::0x0028
struct FTickFunction
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    enum class ETickingGroup                      TickGroup;                                                    // 0x0008(0x0001)
    enum class ETickingGroup                      EndTickGroup;                                                 // 0x0009(0x0001)
    char                                          bTickEvenWhenPaused;                                          // 0x000A(0x0001)
    char                                          bCanEverTick;                                                 // 0x000A(0x0001)
    char                                          bStartWithTickEnabled;                                        // 0x000A(0x0001)
    char                                          bAllowTickOnDedicatedServer;                                  // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
    float                                         TickInterval;                                                 // 0x000C(0x0004)
    char                                          pa_0010[0x0018]                                               // 0x0010(0x0018)
};


// ScriptStruct  Engine.ActorComponentTickFunction
// Struct Size::0x0030
struct FActorComponentTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.SubtitleCue
// Struct Size::0x0020
struct FSubtitleCue
{
    FText                                         Text;                                                         // 0x0000(0x0018)
    float                                         Time;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.InterpControlPoint
// Struct Size::0x001C
struct FInterpControlPoint
{
    FVector                                       PositionControlPoint;                                         // 0x0000(0x000C)
    bool                                          bPositionIsRelative;                                          // 0x000C(0x0001)
    char                                          pa_000D[0x000F]                                               // 0x000D(0x000F)
};


// ScriptStruct  Engine.PlatformInterfaceDelegateResult
// Struct Size::0x0038
struct FPlatformInterfaceDelegateResult
{
    bool                                          bSuccessful;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FPlatformInterfaceData                        Data;                                                         // 0x0008(0x0030)
};


// ScriptStruct  Engine.PlatformInterfaceData
// Struct Size::0x0030
struct FPlatformInterfaceData
{
    FName                                         DataName;                                                     // 0x0000(0x000C)
    enum class EPlatformInterfaceDataType         Type;                                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       IntValue;                                                     // 0x0010(0x0004)
    float                                         FloatValue;                                                   // 0x0014(0x0004)
    FString                                       StringValue;                                                  // 0x0018(0x0010)
    UObject*                                      ObjectValue;                                                  // 0x0028(0x0008)
};


// ScriptStruct  Engine.DebugFloatHistory
// Struct Size::0x0020
struct FDebugFloatHistory
{
    TArray<float>                                 Samples;                                                      // 0x0000(0x0010)
    float                                         MaxSamples;                                                   // 0x0010(0x0004)
    float                                         MinValue;                                                     // 0x0014(0x0004)
    float                                         MaxValue;                                                     // 0x0018(0x0004)
    bool                                          bAutoAdjustMinMax;                                            // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.LatentActionInfo
// Struct Size::0x0020
struct FLatentActionInfo
{
    int32_t                                       Linkage;                                                      // 0x0000(0x0004)
    int32_t                                       UUID;                                                         // 0x0004(0x0004)
    FName                                         ExecutionFunction;                                            // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UObject*                                      CallbackTarget;                                               // 0x0018(0x0008)
};


// ScriptStruct  Engine.TimerHandle
// Struct Size::0x0008
struct FTimerHandle
{
    uint64_t                                      Handle;                                                       // 0x0000(0x0008)
};


// ScriptStruct  Engine.CollisionProfileName
// Struct Size::0x000C
struct FCollisionProfileName
{
    FName                                         Name;                                                         // 0x0000(0x000C)
};


// ScriptStruct  Engine.GenericStruct
// Struct Size::0x0004
struct FGenericStruct
{
    int32_t                                       Data;                                                         // 0x0000(0x0004)
};


// ScriptStruct  Engine.UserActivity
// Struct Size::0x0018
struct FUserActivity
{
    FString                                       ActionName;                                                   // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayEffectHandle
// Struct Size::0x0008
struct FActiveGameplayEffectHandle
{
    int32_t                                       Handle;                                                       // 0x0000(0x0004)
    bool                                          bPassedFiltersAndWasExecuted;                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  GameplayAbilities.GameplayEffectSpecHandle
// Struct Size::0x0010
struct FGameplayEffectSpecHandle
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayTagRequirements
// Struct Size::0x0040
struct FGameplayTagRequirements
{
    FGameplayTagContainer                         RequireTags;                                                  // 0x0000(0x0020)
    FGameplayTagContainer                         IgnoreTags;                                                   // 0x0020(0x0020)
};


// ScriptStruct  GameplayTags.GameplayTagContainer
// Struct Size::0x0020
struct FGameplayTagContainer
{
    TArray<FGameplayTag>                          GameplayTags;                                                 // 0x0000(0x0010)
    TArray<FGameplayTag>                          ParentTags;                                                   // 0x0010(0x0010)
};


// ScriptStruct  GameplayTags.GameplayTag
// Struct Size::0x000C
struct FGameplayTag
{
    FName                                         TagName;                                                      // 0x0000(0x000C)
};


// ScriptStruct  GameplayAbilities.GameplayTargetDataFilterHandle
// Struct Size::0x0010
struct FGameplayTargetDataFilterHandle
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayEventData
// Struct Size::0x00B8
struct FGameplayEventData
{
    FGameplayTag                                  EventTag;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    AActor*                                       Instigator;                                                   // 0x0010(0x0008)
    AActor*                                       Target;                                                       // 0x0018(0x0008)
    UObject*                                      OptionalObject;                                               // 0x0020(0x0008)
    UObject*                                      OptionalObject2;                                              // 0x0028(0x0008)
    FGameplayEffectContextHandle                  ContextHandle;                                                // 0x0030(0x0018)
    FGameplayTagContainer                         InstigatorTags;                                               // 0x0048(0x0020)
    FGameplayTagContainer                         TargetTags;                                                   // 0x0068(0x0020)
    float                                         EventMagnitude;                                               // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    FGameplayAbilityTargetDataHandle              TargetData;                                                   // 0x0090(0x0028)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetDataHandle
// Struct Size::0x0028
struct FGameplayAbilityTargetDataHandle
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  GameplayAbilities.GameplayEffectContextHandle
// Struct Size::0x0018
struct FGameplayEffectContextHandle
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Engine.FastArraySerializerItem
// Struct Size::0x000C
struct FFastArraySerializerItem
{
    int32_t                                       ReplicationID;                                                // 0x0000(0x0004)
    int32_t                                       ReplicationKey;                                               // 0x0004(0x0004)
    int32_t                                       MostRecentArrayReplicationKey;                                // 0x0008(0x0004)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayEffect
// Struct Size::0x0368
struct FActiveGameplayEffect : public FFastArraySerializerItem
{
    char                                          pa_000C[0x000C]                                               // 0x000C(0x000C)
    FGameplayEffectSpec                           Spec;                                                         // 0x0018(0x0298)
    FPredictionKey                                PredictionKey;                                                // 0x02B0(0x0010)
    float                                         StartServerWorldTime;                                         // 0x02C0(0x0004)
    float                                         CachedStartServerWorldTime;                                   // 0x02C4(0x0004)
    float                                         StartWorldTime;                                               // 0x02C8(0x0004)
    bool                                          bIsInhibited;                                                 // 0x02CC(0x0001)
    char                                          pa_02CD[0x009B]                                               // 0x02CD(0x009B)
};


// ScriptStruct  GameplayAbilities.PredictionKey
// Struct Size::0x0010
struct FPredictionKey
{
    FPackageMap*                                  PredictiveConnection;                                         // 0x0000(0x0008)
    int16_t                                       Current;                                                      // 0x0008(0x0002)
    int16_t                                       Base;                                                         // 0x000A(0x0002)
    bool                                          bIsStale;                                                     // 0x000C(0x0001)
    bool                                          bIsServerInitiated;                                           // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  GameplayAbilities.GameplayEffectSpec
// Struct Size::0x0298
struct FGameplayEffectSpec
{
    FGameplayEffect*                              Def;                                                          // 0x0000(0x0008)
    TArray<FGameplayEffectModifiedAttribute>      ModifiedAttributes;                                           // 0x0008(0x0010)
    FGameplayEffectAttributeCaptureSpecContainer  CapturedRelevantAttributes;                                   // 0x0018(0x0028)
    char                                          pa_0040[0x0010]                                               // 0x0040(0x0010)
    float                                         Duration;                                                     // 0x0050(0x0004)
    float                                         Period;                                                       // 0x0054(0x0004)
    float                                         ChanceToApplyToTarget;                                        // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FTagContainerAggregator                       CapturedSourceTags;                                           // 0x0060(0x0088)
    FTagContainerAggregator                       CapturedTargetTags;                                           // 0x00E8(0x0088)
    FGameplayTagContainer                         DynamicGrantedTags;                                           // 0x0170(0x0020)
    FGameplayTagContainer                         DynamicAssetTags;                                             // 0x0190(0x0020)
    TArray<FModifierSpec>                         Modifiers;                                                    // 0x01B0(0x0010)
    int32_t                                       StackCount;                                                   // 0x01C0(0x0004)
    char                                          bCompletedSourceAttributeCapture;                             // 0x01C4(0x0001)
    char                                          bCompletedTargetAttributeCapture;                             // 0x01C4(0x0001)
    char                                          bDurationLocked;                                              // 0x01C4(0x0001)
    char                                          pa_01C5[0x0003]                                               // 0x01C5(0x0003)
    TArray<FGameplayAbilitySpecDef>               GrantedAbilitySpecs;                                          // 0x01C8(0x0010)
    char                                          pa_01D8[0x00A0]                                               // 0x01D8(0x00A0)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0278(0x0018)
    float                                         Level;                                                        // 0x0290(0x0004)
    char                                          pa_0294[0x0004]                                               // 0x0294(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpecDef
// Struct Size::0x00A8
struct FGameplayAbilitySpecDef
{
    FGameplayAbility*                             Ability;                                                      // 0x0000(0x0008)
    FScalableFloat                                LevelScalableFloat;                                           // 0x0008(0x0038)
    int32_t                                       InputID;                                                      // 0x0040(0x0004)
    enum class EGameplayEffectGrantedAbilityRemovePolicyRemovalPolicy;                                          // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    UObject*                                      SourceObject;                                                 // 0x0048(0x0008)
    char                                          pa_0050[0x0050]                                               // 0x0050(0x0050)
    FGameplayAbilitySpecHandle                    AssignedHandle;                                               // 0x00A0(0x0004)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpecHandle
// Struct Size::0x0004
struct FGameplayAbilitySpecHandle
{
    int32_t                                       Handle;                                                       // 0x0000(0x0004)
};


// ScriptStruct  GameplayAbilities.ScalableFloat
// Struct Size::0x0038
struct FScalableFloat
{
    float                                         Value;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FCurveTableRowHandle                          Curve;                                                        // 0x0008(0x0018)
    FDataRegistryType                             RegistryType;                                                 // 0x0020(0x000C)
    char                                          pa_002C[0x000C]                                               // 0x002C(0x000C)
};


// ScriptStruct  DataRegistry.DataRegistryLookup
// Struct Size::0x0020
struct FDataRegistryLookup
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  DataRegistry.DataRegistryId
// Struct Size::0x0018
struct FDataRegistryId
{
    FDataRegistryType                             RegistryType;                                                 // 0x0000(0x000C)
    FName                                         ItemName;                                                     // 0x000C(0x000C)
};


// ScriptStruct  DataRegistry.DataRegistryType
// Struct Size::0x000C
struct FDataRegistryType
{
    FName                                         Name;                                                         // 0x0000(0x000C)
};


// ScriptStruct  Engine.CurveTableRowHandle
// Struct Size::0x0018
struct FCurveTableRowHandle
{
    FCurveTable*                                  CurveTable;                                                   // 0x0000(0x0008)
    FName                                         RowName;                                                      // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  GameplayAbilities.ModifierSpec
// Struct Size::0x0004
struct FModifierSpec
{
    float                                         EvaluatedMagnitude;                                           // 0x0000(0x0004)
};


// ScriptStruct  GameplayAbilities.TagContainerAggregator
// Struct Size::0x0088
struct FTagContainerAggregator
{
    FGameplayTagContainer                         CapturedActorTags;                                            // 0x0000(0x0020)
    FGameplayTagContainer                         CapturedSpecTags;                                             // 0x0020(0x0020)
    FGameplayTagContainer                         ScopedTags;                                                   // 0x0040(0x0020)
    char                                          pa_0060[0x0028]                                               // 0x0060(0x0028)
};


// ScriptStruct  GameplayAbilities.GameplayEffectAttributeCaptureSpecContainer
// Struct Size::0x0028
struct FGameplayEffectAttributeCaptureSpecContainer
{
    TArray<FGameplayEffectAttributeCaptureSpec>   SourceAttributes;                                             // 0x0000(0x0010)
    TArray<FGameplayEffectAttributeCaptureSpec>   TargetAttributes;                                             // 0x0010(0x0010)
    bool                                          bHasNonSnapshottedAttributes;                                 // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayEffectAttributeCaptureSpec
// Struct Size::0x0050
struct FGameplayEffectAttributeCaptureSpec
{
    FGameplayEffectAttributeCaptureDefinition     BackingDefinition;                                            // 0x0000(0x0040)
    char                                          pa_0040[0x0010]                                               // 0x0040(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayEffectAttributeCaptureDefinition
// Struct Size::0x0040
struct FGameplayEffectAttributeCaptureDefinition
{
    FGameplayAttribute                            AttributeToCapture;                                           // 0x0000(0x0038)
    enum class EGameplayEffectAttributeCaptureSourceAttributeSource;                                            // 0x0038(0x0001)
    bool                                          bSnapshot;                                                    // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
};


// ScriptStruct  GameplayAbilities.GameplayAttribute
// Struct Size::0x0038
struct FGameplayAttribute
{
    FString                                       AttributeName;                                                // 0x0000(0x0010)
    Attribute                                     Attribute;                                                    // 0x0010(0x0020)
    FStruct*                                      AttributeOwner;                                               // 0x0030(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayEffectModifiedAttribute
// Struct Size::0x0040
struct FGameplayEffectModifiedAttribute
{
    FGameplayAttribute                            Attribute;                                                    // 0x0000(0x0038)
    float                                         TotalMagnitude;                                               // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayEffectRemovalInfo
// Struct Size::0x0020
struct FGameplayEffectRemovalInfo
{
    bool                                          bPrematureRemoval;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       StackCount;                                                   // 0x0004(0x0004)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0008(0x0018)
};


// ScriptStruct  GameplayTasks.GameplayResourceSet
// Struct Size::0x0002
struct FGameplayResourceSet
{
    char                                          pa_0000[0x0002]                                               // 0x0000(0x0002)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityActivationInfo
// Struct Size::0x0018
struct FGameplayAbilityActivationInfo
{
    enum class EGameplayAbilityActivationMode     ActivationMode;                                               // 0x0000(0x0001)
    char                                          bCanBeEndedByOtherInstance;                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FPredictionKey                                PredictionKeyWhenActivated;                                   // 0x0008(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayEffectQuery
// Struct Size::0x0158
struct FGameplayEffectQuery
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
    FGameplayTagQuery                             OwningTagQuery;                                               // 0x0028(0x0048)
    FGameplayTagQuery                             EffectTagQuery;                                               // 0x0070(0x0048)
    FGameplayTagQuery                             SourceTagQuery;                                               // 0x00B8(0x0048)
    FGameplayAttribute                            ModifyingAttribute;                                           // 0x0100(0x0038)
    UObject*                                      EffectSource;                                                 // 0x0138(0x0008)
    FGameplayEffect*                              EffectDefinition;                                             // 0x0140(0x0008)
    char                                          pa_0148[0x0010]                                               // 0x0148(0x0010)
};


// ScriptStruct  GameplayTags.GameplayTagQuery
// Struct Size::0x0048
struct FGameplayTagQuery
{
    int32_t                                       TokenStreamVersion;                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FGameplayTag>                          TagDictionary;                                                // 0x0008(0x0010)
    TArray<char>                                  QueryTokenStream;                                             // 0x0018(0x0010)
    FString                                       UserDescription;                                              // 0x0028(0x0010)
    FString                                       AutoDescription;                                              // 0x0038(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayCueParameters
// Struct Size::0x00C8
struct FGameplayCueParameters
{
    float                                         NormalizedMagnitude;                                          // 0x0000(0x0004)
    float                                         RawMagnitude;                                                 // 0x0004(0x0004)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0008(0x0018)
    FGameplayTag                                  MatchedTagName;                                               // 0x0020(0x000C)
    FGameplayTag                                  OriginalTag;                                                  // 0x002C(0x000C)
    FGameplayTagContainer                         AggregatedSourceTags;                                         // 0x0038(0x0020)
    FGameplayTagContainer                         AggregatedTargetTags;                                         // 0x0058(0x0020)
    FVector                                       Location;                                                     // 0x0078(0x000C)
    FVector                                       Normal;                                                       // 0x0084(0x000C)
    TWeakObjectPtr<AActor>                        Instigator;                                                   // 0x0090(0x0008)
    TWeakObjectPtr<AActor>                        EffectCauser;                                                 // 0x0098(0x0008)
    TWeakObjectPtr<UObject>                       SourceObject;                                                 // 0x00A0(0x0008)
    TWeakObjectPtr<FPhysicalMaterial>             PhysicalMaterial;                                             // 0x00A8(0x0008)
    int32_t                                       GameplayEffectLevel;                                          // 0x00B0(0x0004)
    int32_t                                       AbilityLevel;                                                 // 0x00B4(0x0004)
    TWeakObjectPtr<USceneComponent>               TargetAttachComponent;                                        // 0x00B8(0x0008)
    bool                                          bReplicateLocationWhenUsingMinimalRepProxy;                   // 0x00C0(0x0001)
    char                                          pa_00C1[0x0007]                                               // 0x00C1(0x0007)
};


// ScriptStruct  Engine.Vector
// Struct Size::0x000C
struct FVector : public FVector
{
};


// ScriptStruct  GameplayAbilities.GameplayEffectSpecForRPC
// Struct Size::0x0078
struct FGameplayEffectSpecForRPC
{
    FGameplayEffect*                              Def;                                                          // 0x0000(0x0008)
    TArray<FGameplayEffectModifiedAttribute>      ModifiedAttributes;                                           // 0x0008(0x0010)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0018(0x0018)
    FGameplayTagContainer                         AggregatedSourceTags;                                         // 0x0030(0x0020)
    FGameplayTagContainer                         AggregatedTargetTags;                                         // 0x0050(0x0020)
    float                                         Level;                                                        // 0x0070(0x0004)
    float                                         AbilityLevel;                                                 // 0x0074(0x0004)
};


// ScriptStruct  GameplayAbilities.ServerAbilityRPCBatch
// Struct Size::0x0048
struct FServerAbilityRPCBatch
{
    FGameplayAbilitySpecHandle                    AbilitySpecHandle;                                            // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FPredictionKey                                PredictionKey;                                                // 0x0008(0x0010)
    FGameplayAbilityTargetDataHandle              TargetData;                                                   // 0x0018(0x0028)
    bool                                          InputPressed;                                                 // 0x0040(0x0001)
    bool                                          Ended;                                                        // 0x0041(0x0001)
    bool                                          Started;                                                      // 0x0042(0x0001)
    char                                          pa_0043[0x0005]                                               // 0x0043(0x0005)
};


// ScriptStruct  Engine.Vector
// Struct Size::0x000C
struct FVector : public FVector
{
};


// ScriptStruct  Engine.FastArraySerializer
// Struct Size::0x0108
struct FFastArraySerializer
{
    char                                          pa_0000[0x0054]                                               // 0x0000(0x0054)
    int32_t                                       ArrayReplicationKey;                                          // 0x0054(0x0004)
    char                                          pa_0058[0x00A8]                                               // 0x0058(0x00A8)
    enum class EFastArraySerializerDeltaFlags     DeltaFlags;                                                   // 0x0100(0x0001)
    char                                          pa_0101[0x0007]                                               // 0x0101(0x0007)
};


// ScriptStruct  GameplayAbilities.ReplicatedPredictionKeyMap
// Struct Size::0x0118
struct FReplicatedPredictionKeyMap : public FFastArraySerializer
{
    TArray<FReplicatedPredictionKeyItem>          PredictionKeys;                                               // 0x0108(0x0010)
};


// ScriptStruct  GameplayAbilities.ReplicatedPredictionKeyItem
// Struct Size::0x0020
struct FReplicatedPredictionKeyItem : public FFastArraySerializerItem
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FPredictionKey                                PredictionKey;                                                // 0x0010(0x0010)
};


// ScriptStruct  GameplayAbilities.MinimalReplicationTagCountMap
// Struct Size::0x0060
struct FMinimalReplicationTagCountMap
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
    UAbilitySystemComponent*                      Owner;                                                        // 0x0050(0x0008)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayCueContainer
// Struct Size::0x0128
struct FActiveGameplayCueContainer : public FFastArraySerializer
{
    TArray<FActiveGameplayCue>                    GameplayCues;                                                 // 0x0108(0x0010)
    char                                          pa_0118[0x0008]                                               // 0x0118(0x0008)
    UAbilitySystemComponent*                      Owner;                                                        // 0x0120(0x0008)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayCue
// Struct Size::0x00F8
struct FActiveGameplayCue : public FFastArraySerializerItem
{
    FGameplayTag                                  GameplayCueTag;                                               // 0x000C(0x000C)
    FPredictionKey                                PredictionKey;                                                // 0x0018(0x0010)
    FGameplayCueParameters                        Parameters;                                                   // 0x0028(0x00C8)
    bool                                          bPredictivelyRemoved;                                         // 0x00F0(0x0001)
    char                                          pa_00F1[0x0007]                                               // 0x00F1(0x0007)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayEffectsContainer
// Struct Size::0x0478
struct FActiveGameplayEffectsContainer : public FFastArraySerializer
{
    char                                          pa_0108[0x0028]                                               // 0x0108(0x0028)
    TArray<FActiveGameplayEffect>                 GameplayEffects;                                              // 0x0130(0x0010)
    char                                          pa_0140[0x0310]                                               // 0x0140(0x0310)
    TArray<FGameplayEffect*>                      ApplicationImmunityQueryEffects;                              // 0x0450(0x0010)
    char                                          pa_0460[0x0018]                                               // 0x0460(0x0018)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityLocalAnimMontage
// Struct Size::0x0028
struct FGameplayAbilityLocalAnimMontage
{
    FAnimMontage*                                 AnimMontage;                                                  // 0x0000(0x0008)
    bool                                          PlayBit;                                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FPredictionKey                                PredictionKey;                                                // 0x0010(0x0010)
    FGameplayAbility*                             AnimatingAbility;                                             // 0x0020(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityRepAnimMontage
// Struct Size::0x0030
struct FGameplayAbilityRepAnimMontage
{
    FAnimMontage*                                 AnimMontage;                                                  // 0x0000(0x0008)
    float                                         PlayRate;                                                     // 0x0008(0x0004)
    float                                         Position;                                                     // 0x000C(0x0004)
    float                                         BlendTime;                                                    // 0x0010(0x0004)
    char                                          NextSectionID;                                                // 0x0014(0x0001)
    char                                          bRepPosition;                                                 // 0x0015(0x0001)
    char                                          IsStopped;                                                    // 0x0015(0x0001)
    char                                          ForcePlayBit;                                                 // 0x0015(0x0001)
    char                                          SkipPositionCorrection;                                       // 0x0015(0x0001)
    char                                          bSkipPlayRate;                                                // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    FPredictionKey                                PredictionKey;                                                // 0x0018(0x0010)
    char                                          SectionIdToPlay;                                              // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpecContainer
// Struct Size::0x0120
struct FGameplayAbilitySpecContainer : public FFastArraySerializer
{
    TArray<FGameplayAbilitySpec>                  Items;                                                        // 0x0108(0x0010)
    UAbilitySystemComponent*                      Owner;                                                        // 0x0118(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpec
// Struct Size::0x00E0
struct FGameplayAbilitySpec : public FFastArraySerializerItem
{
    FGameplayAbilitySpecHandle                    Handle;                                                       // 0x000C(0x0004)
    FGameplayAbility*                             Ability;                                                      // 0x0010(0x0008)
    int32_t                                       Level;                                                        // 0x0018(0x0004)
    int32_t                                       InputID;                                                      // 0x001C(0x0004)
    UObject*                                      SourceObject;                                                 // 0x0020(0x0008)
    char                                          ActiveCount;                                                  // 0x0028(0x0001)
    char                                          InputPressed;                                                 // 0x0029(0x0001)
    char                                          RemoveAfterActivation;                                        // 0x0029(0x0001)
    char                                          PendingRemove;                                                // 0x0029(0x0001)
    char                                          bActivateOnce;                                                // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    FGameplayAbilityActivationInfo                ActivationInfo;                                               // 0x0030(0x0018)
    FGameplayTagContainer                         DynamicAbilityTags;                                           // 0x0048(0x0020)
    TArray<FGameplayAbility*>                     NonReplicatedInstances;                                       // 0x0068(0x0010)
    TArray<FGameplayAbility*>                     ReplicatedInstances;                                          // 0x0078(0x0010)
    FActiveGameplayEffectHandle                   GameplayEffectHandle;                                         // 0x0088(0x0008)
    char                                          pa_0090[0x0050]                                               // 0x0090(0x0050)
};


// ScriptStruct  GameplayAbilities.AttributeDefaults
// Struct Size::0x0010
struct FAttributeDefaults
{
    FAttributeSet*                                Attributes;                                                   // 0x0000(0x0008)
    FDataTable*                                   DefaultStartingTable;                                         // 0x0008(0x0008)
};


// ScriptStruct  OnlineSubsystemUtils.BlueprintSessionResult
// Struct Size::0x0108
struct FBlueprintSessionResult
{
    char                                          pa_0000[0x0108]                                               // 0x0000(0x0108)
};


// ScriptStruct  OnlineSubsystem.InAppPurchaseProductInfo
// Struct Size::0x00A8
struct FInAppPurchaseProductInfo
{
    FString                                       Identifier;                                                   // 0x0000(0x0010)
    FString                                       TransactionIdentifier;                                        // 0x0010(0x0010)
    FString                                       DisplayName;                                                  // 0x0020(0x0010)
    FString                                       DisplayDescription;                                           // 0x0030(0x0010)
    FString                                       DisplayPrice;                                                 // 0x0040(0x0010)
    float                                         RawPrice;                                                     // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       CurrencyCode;                                                 // 0x0058(0x0010)
    FString                                       CurrencySymbol;                                               // 0x0068(0x0010)
    FString                                       DecimalSeparator;                                             // 0x0078(0x0010)
    FString                                       GroupingSeparator;                                            // 0x0088(0x0010)
    FString                                       ReceiptData;                                                  // 0x0098(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseReceiptInfo2
// Struct Size::0x0030
struct FInAppPurchaseReceiptInfo2
{
    FString                                       ItemName;                                                     // 0x0000(0x0010)
    FString                                       ItemId;                                                       // 0x0010(0x0010)
    FString                                       ValidationInfo;                                               // 0x0020(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.OnlineProxyStoreOffer
// Struct Size::0x0110
struct FOnlineProxyStoreOffer
{
    FString                                       OfferId;                                                      // 0x0000(0x0010)
    FText                                         Title;                                                        // 0x0010(0x0018)
    FText                                         Description;                                                  // 0x0028(0x0018)
    FText                                         LongDescription;                                              // 0x0040(0x0018)
    FText                                         RegularPriceText;                                             // 0x0058(0x0018)
    int32_t                                       RegularPrice;                                                 // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FText                                         PriceText;                                                    // 0x0078(0x0018)
    int32_t                                       NumericPrice;                                                 // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    FString                                       CurrencyCode;                                                 // 0x0098(0x0010)
    FDateTime                                     ReleaseDate;                                                  // 0x00A8(0x0008)
    FDateTime                                     ExpirationDate;                                               // 0x00B0(0x0008)
    enum class EOnlineProxyStoreOfferDiscountType DiscountType;                                                 // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
    TMap<FString,FString>                         DynamicFields;                                                // 0x00C0(0x0050)
};


// ScriptStruct  OnlineSubsystem.InAppPurchaseRestoreInfo
// Struct Size::0x0030
struct FInAppPurchaseRestoreInfo
{
    FString                                       Identifier;                                                   // 0x0000(0x0010)
    FString                                       ReceiptData;                                                  // 0x0010(0x0010)
    FString                                       TransactionIdentifier;                                        // 0x0020(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseRestoreInfo2
// Struct Size::0x0030
struct FInAppPurchaseRestoreInfo2
{
    FString                                       ItemName;                                                     // 0x0000(0x0010)
    FString                                       ItemId;                                                       // 0x0010(0x0010)
    FString                                       ValidationInfo;                                               // 0x0020(0x0010)
};


// ScriptStruct  AppleImageUtils.AppleImageUtilsImageConversionResult
// Struct Size::0x0020
struct FAppleImageUtilsImageConversionResult
{
    FString                                       Error;                                                        // 0x0000(0x0010)
    TArray<char>                                  ImageData;                                                    // 0x0010(0x0010)
};


// ScriptStruct  AkAudio.AKWaapiJsonObject
// Struct Size::0x0010
struct FAKWaapiJsonObject
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkWaapiSubscriptionId
// Struct Size::0x0008
struct FAkWaapiSubscriptionId
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  SlateCore.Geometry
// Struct Size::0x0038
struct FGeometry
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  SlateCore.SlateBrush
// Struct Size::0x0090
struct FSlateBrush
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FVector2D                                     ImageSize;                                                    // 0x0008(0x0008)
    FMargin                                       Margin;                                                       // 0x0010(0x0010)
    FSlateColor                                   TintColor;                                                    // 0x0020(0x0028)
    UObject*                                      ResourceObject;                                               // 0x0048(0x0008)
    FName                                         ResourceName;                                                 // 0x0050(0x000C)
    FBox2D                                        UVRegion;                                                     // 0x005C(0x0014)
    enum class ESlateBrushDrawType                DrawAs;                                                       // 0x0070(0x0001)
    enum class ESlateBrushTileType                Tiling;                                                       // 0x0071(0x0001)
    enum class ESlateBrushMirrorType              Mirroring;                                                    // 0x0072(0x0001)
    enum class ESlateBrushImageType               ImageType;                                                    // 0x0073(0x0001)
    char                                          pa_0074[0x0014]                                               // 0x0074(0x0014)
    char                                          bIsDynamicallyLoaded;                                         // 0x0088(0x0001)
    char                                          bHasUObject;                                                  // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
};


// ScriptStruct  SlateCore.SlateColor
// Struct Size::0x0028
struct FSlateColor
{
    FLinearColor                                  SpecifiedColor;                                               // 0x0000(0x0010)
    enum class ESlateColorStylingMode             ColorUseRule;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0017]                                               // 0x0011(0x0017)
};


// ScriptStruct  SlateCore.Margin
// Struct Size::0x0010
struct FMargin
{
    float                                         Left;                                                         // 0x0000(0x0004)
    float                                         Top;                                                          // 0x0004(0x0004)
    float                                         Right;                                                        // 0x0008(0x0004)
    float                                         Bottom;                                                       // 0x000C(0x0004)
};


// ScriptStruct  UMG.EventReply
// Struct Size::0x00C0
struct FEventReply
{
    char                                          pa_0000[0x00C0]                                               // 0x0000(0x00C0)
};


// ScriptStruct  SlateCore.InputEvent
// Struct Size::0x0018
struct FInputEvent
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  SlateCore.PointerEvent
// Struct Size::0x0078
struct FPointerEvent : public FInputEvent
{
    char                                          pa_0018[0x0060]                                               // 0x0018(0x0060)
};


// ScriptStruct  UMG.WidgetTransform
// Struct Size::0x001C
struct FWidgetTransform
{
    FVector2D                                     Translation;                                                  // 0x0000(0x0008)
    FVector2D                                     Scale;                                                        // 0x0008(0x0008)
    FVector2D                                     Shear;                                                        // 0x0010(0x0008)
    float                                         Angle;                                                        // 0x0018(0x0004)
};


// ScriptStruct  UMG.PaintContext
// Struct Size::0x0030
struct FPaintContext
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  SlateCore.CharacterEvent
// Struct Size::0x0020
struct FCharacterEvent : public FInputEvent
{
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
};


// ScriptStruct  SlateCore.KeyEvent
// Struct Size::0x0040
struct FKeyEvent : public FInputEvent
{
    char                                          pa_0018[0x0028]                                               // 0x0018(0x0028)
};


// ScriptStruct  SlateCore.NavigationEvent
// Struct Size::0x0020
struct FNavigationEvent : public FInputEvent
{
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
};


// ScriptStruct  SlateCore.AnalogInputEvent
// Struct Size::0x0048
struct FAnalogInputEvent : public FKeyEvent
{
    char                                          pa_0040[0x0008]                                               // 0x0040(0x0008)
};


// ScriptStruct  SlateCore.SlateFontInfo
// Struct Size::0x0060
struct FSlateFontInfo
{
    UObject*                                      FontObject;                                                   // 0x0000(0x0008)
    UObject*                                      FontMaterial;                                                 // 0x0008(0x0008)
    FFontOutlineSettings                          OutlineSettings;                                              // 0x0010(0x0020)
    char                                          pa_0030[0x0010]                                               // 0x0030(0x0010)
    FName                                         TypefaceFontName;                                             // 0x0040(0x000C)
    int32_t                                       Size;                                                         // 0x004C(0x0004)
    int32_t                                       LetterSpacing;                                                // 0x0050(0x0004)
    int32_t                                       Tracking;                                                     // 0x0054(0x0004)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  SlateCore.FontOutlineSettings
// Struct Size::0x0020
struct FFontOutlineSettings
{
    int32_t                                       OutlineSize;                                                  // 0x0000(0x0004)
    bool                                          bSeparateFillAlpha;                                           // 0x0004(0x0001)
    bool                                          bApplyOutlineToDropShadows;                                   // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    UObject*                                      OutlineMaterial;                                              // 0x0008(0x0008)
    FLinearColor                                  OutlineColor;                                                 // 0x0010(0x0010)
};


// ScriptStruct  SlateCore.SlateWidgetStyle
// Struct Size::0x0008
struct FSlateWidgetStyle
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  SlateCore.TableRowStyle
// Struct Size::0x0838
struct FTableRowStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   SelectorFocusedBrush;                                         // 0x0008(0x0090)
    FSlateBrush                                   ActiveHoveredBrush;                                           // 0x0098(0x0090)
    FSlateBrush                                   ActiveBrush;                                                  // 0x0128(0x0090)
    FSlateBrush                                   InactiveHoveredBrush;                                         // 0x01B8(0x0090)
    FSlateBrush                                   InactiveBrush;                                                // 0x0248(0x0090)
    FSlateBrush                                   EvenRowBackgroundHoveredBrush;                                // 0x02D8(0x0090)
    FSlateBrush                                   EvenRowBackgroundBrush;                                       // 0x0368(0x0090)
    FSlateBrush                                   OddRowBackgroundHoveredBrush;                                 // 0x03F8(0x0090)
    FSlateBrush                                   OddRowBackgroundBrush;                                        // 0x0488(0x0090)
    FSlateColor                                   TextColor;                                                    // 0x0518(0x0028)
    FSlateColor                                   SelectedTextColor;                                            // 0x0540(0x0028)
    FSlateBrush                                   DropIndicator;                                                // 0x0568(0x0090)
    FSlateBrush                                   DropIndicator;                                                // 0x05F8(0x0090)
    FSlateBrush                                   DropIndicator;                                                // 0x0688(0x0090)
    FSlateBrush                                   ActiveHighlightedBrush;                                       // 0x0718(0x0090)
    FSlateBrush                                   InactiveHighlightedBrush;                                     // 0x07A8(0x0090)
};


// ScriptStruct  SlateCore.ComboBoxStyle
// Struct Size::0x0440
struct FComboBoxStyle : public FSlateWidgetStyle
{
    FComboButtonStyle                             ComboButtonStyle;                                             // 0x0008(0x03F8)
    FSlateSound                                   PressedSlateSound;                                            // 0x0400(0x0020)
    FSlateSound                                   SelectionChangeSlateSound;                                    // 0x0420(0x0020)
};


// ScriptStruct  SlateCore.SlateSound
// Struct Size::0x0020
struct FSlateSound
{
    UObject*                                      ResourceObject;                                               // 0x0000(0x0008)
    char                                          pa_0008[0x0018]                                               // 0x0008(0x0018)
};


// ScriptStruct  SlateCore.ComboButtonStyle
// Struct Size::0x03F8
struct FComboButtonStyle : public FSlateWidgetStyle
{
    FButtonStyle                                  ButtonStyle;                                                  // 0x0008(0x02A8)
    FSlateBrush                                   DownArrowImage;                                               // 0x02B0(0x0090)
    FVector2D                                     ShadowOffset;                                                 // 0x0340(0x0008)
    FLinearColor                                  ShadowColorAndOpacity;                                        // 0x0348(0x0010)
    FSlateBrush                                   MenuBorderBrush;                                              // 0x0358(0x0090)
    FMargin                                       MenuBorderPadding;                                            // 0x03E8(0x0010)
};


// ScriptStruct  SlateCore.ButtonStyle
// Struct Size::0x02A8
struct FButtonStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   Normal;                                                       // 0x0008(0x0090)
    FSlateBrush                                   Hovered;                                                      // 0x0098(0x0090)
    FSlateBrush                                   Pressed;                                                      // 0x0128(0x0090)
    FSlateBrush                                   Disabled;                                                     // 0x01B8(0x0090)
    FMargin                                       NormalPadding;                                                // 0x0248(0x0010)
    FMargin                                       PressedPadding;                                               // 0x0258(0x0010)
    FSlateSound                                   PressedSlateSound;                                            // 0x0268(0x0020)
    FSlateSound                                   HoveredSlateSound;                                            // 0x0288(0x0020)
};


// ScriptStruct  UMG.ShapedTextOptions
// Struct Size::0x0003
struct FShapedTextOptions
{
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    enum class ETextShapingMethod                 TextShapingMethod;                                            // 0x0001(0x0001)
    enum class ETextFlowDirection                 TextFlowDirection;                                            // 0x0002(0x0001)
};


// ScriptStruct  Slate.VirtualKeyboardOptions
// Struct Size::0x0001
struct FVirtualKeyboardOptions
{
    bool                                          bEnableAutocorrect;                                           // 0x0000(0x0001)
};


// ScriptStruct  SlateCore.EditableTextStyle
// Struct Size::0x0240
struct FEditableTextStyle : public FSlateWidgetStyle
{
    FSlateFontInfo                                Font;                                                         // 0x0008(0x0060)
    FSlateColor                                   ColorAndOpacity;                                              // 0x0068(0x0028)
    FSlateBrush                                   BackgroundImageSelected;                                      // 0x0090(0x0090)
    FSlateBrush                                   BackgroundImageComposing;                                     // 0x0120(0x0090)
    FSlateBrush                                   CaretImage;                                                   // 0x01B0(0x0090)
};


// ScriptStruct  SlateCore.EditableTextBoxStyle
// Struct Size::0x0868
struct FEditableTextBoxStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   BackgroundImageNormal;                                        // 0x0008(0x0090)
    FSlateBrush                                   BackgroundImageHovered;                                       // 0x0098(0x0090)
    FSlateBrush                                   BackgroundImageFocused;                                       // 0x0128(0x0090)
    FSlateBrush                                   BackgroundImageReadOnly;                                      // 0x01B8(0x0090)
    FMargin                                       Padding;                                                      // 0x0248(0x0010)
    FSlateFontInfo                                Font;                                                         // 0x0258(0x0060)
    FSlateColor                                   ForegroundColor;                                              // 0x02B8(0x0028)
    FSlateColor                                   BackgroundColor;                                              // 0x02E0(0x0028)
    FSlateColor                                   ReadOnlyForegroundColor;                                      // 0x0308(0x0028)
    FMargin                                       HScrollBarPadding;                                            // 0x0330(0x0010)
    FMargin                                       VScrollBarPadding;                                            // 0x0340(0x0010)
    FScrollBarStyle                               ScrollBarStyle;                                               // 0x0350(0x0518)
};


// ScriptStruct  SlateCore.ScrollBarStyle
// Struct Size::0x0518
struct FScrollBarStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   HorizontalBackgroundImage;                                    // 0x0008(0x0090)
    FSlateBrush                                   VerticalBackgroundImage;                                      // 0x0098(0x0090)
    FSlateBrush                                   VerticalTopSlotImage;                                         // 0x0128(0x0090)
    FSlateBrush                                   HorizontalTopSlotImage;                                       // 0x01B8(0x0090)
    FSlateBrush                                   VerticalBottomSlotImage;                                      // 0x0248(0x0090)
    FSlateBrush                                   HorizontalBottomSlotImage;                                    // 0x02D8(0x0090)
    FSlateBrush                                   NormalThumbImage;                                             // 0x0368(0x0090)
    FSlateBrush                                   HoveredThumbImage;                                            // 0x03F8(0x0090)
    FSlateBrush                                   DraggedThumbImage;                                            // 0x0488(0x0090)
};


// ScriptStruct  Slate.InputChord
// Struct Size::0x0028
struct FInputChord
{
    FKey                                          Key;                                                          // 0x0000(0x0020)
    char                                          bShift;                                                       // 0x0020(0x0001)
    char                                          bCtrl;                                                        // 0x0020(0x0001)
    char                                          bAlt;                                                         // 0x0020(0x0001)
    char                                          bCmd;                                                         // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    char                                          bGamepadShift;                                                // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  SlateCore.TextBlockStyle
// Struct Size::0x0290
struct FTextBlockStyle : public FSlateWidgetStyle
{
    FSlateFontInfo                                Font;                                                         // 0x0008(0x0060)
    FSlateColor                                   ColorAndOpacity;                                              // 0x0068(0x0028)
    FVector2D                                     ShadowOffset;                                                 // 0x0090(0x0008)
    FLinearColor                                  ShadowColorAndOpacity;                                        // 0x0098(0x0010)
    FSlateColor                                   SelectedBackgroundColor;                                      // 0x00A8(0x0028)
    FLinearColor                                  HighlightColor;                                               // 0x00D0(0x0010)
    FSlateBrush                                   HighlightShape;                                               // 0x00E0(0x0090)
    FSlateBrush                                   StrikeBrush;                                                  // 0x0170(0x0090)
    FSlateBrush                                   UnderlineBrush;                                               // 0x0200(0x0090)
};


// ScriptStruct  SlateCore.SpinBoxStyle
// Struct Size::0x0310
struct FSpinBoxStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   BackgroundBrush;                                              // 0x0008(0x0090)
    FSlateBrush                                   HoveredBackgroundBrush;                                       // 0x0098(0x0090)
    FSlateBrush                                   ActiveFillBrush;                                              // 0x0128(0x0090)
    FSlateBrush                                   InactiveFillBrush;                                            // 0x01B8(0x0090)
    FSlateBrush                                   ArrowsImage;                                                  // 0x0248(0x0090)
    FSlateColor                                   ForegroundColor;                                              // 0x02D8(0x0028)
    FMargin                                       TextPadding;                                                  // 0x0300(0x0010)
};


// ScriptStruct  Engine.DataTableRowHandle
// Struct Size::0x0018
struct FDataTableRowHandle
{
    FDataTable*                                   DataTable;                                                    // 0x0000(0x0008)
    FName                                         RowName;                                                      // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  CommonUI.CommonNumberFormattingOptions
// Struct Size::0x0014
struct FCommonNumberFormattingOptions
{
    enum class ERoundingMode                      RoundingMode;                                                 // 0x0000(0x0001)
    bool                                          UseGrouping;                                                  // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       MinimumIntegralDigits;                                        // 0x0004(0x0004)
    int32_t                                       MaximumIntegralDigits;                                        // 0x0008(0x0004)
    int32_t                                       MinimumFractionalDigits;                                      // 0x000C(0x0004)
    int32_t                                       MaximumFractionalDigits;                                      // 0x0010(0x0004)
};


// ScriptStruct  Slate.Anchors
// Struct Size::0x0010
struct FAnchors
{
    FVector2D                                     Minimum;                                                      // 0x0000(0x0008)
    FVector2D                                     Maximum;                                                      // 0x0008(0x0008)
};


// ScriptStruct  SlateCore.FocusEvent
// Struct Size::0x0008
struct FFocusEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  SlateCore.MotionEvent
// Struct Size::0x0048
struct FMotionEvent : public FInputEvent
{
    char                                          pa_0018[0x0030]                                               // 0x0018(0x0030)
};


// ScriptStruct  UMG.AnimationEventBinding
// Struct Size::0x0030
struct FAnimationEventBinding
{
    FWidgetAnimation*                             Animation;                                                    // 0x0000(0x0008)
    FDelegate                                     Delegate;                                                     // 0x0008(0x0014)
    enum class EWidgetAnimationEvent              AnimationEvent;                                               // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FName                                         UserTag;                                                      // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UMG.NamedSlotBinding
// Struct Size::0x0018
struct FNamedSlotBinding
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FWidget*                                      Content;                                                      // 0x0010(0x0008)
};


// ScriptStruct  CommonUI.CommonRegisteredTabInfo
// Struct Size::0x0018
struct FCommonRegisteredTabInfo
{
    int32_t                                       TabIndex;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FCommonButtonBase*                            TabButton;                                                    // 0x0008(0x0008)
    FWidget*                                      ContentInstance;                                              // 0x0010(0x0008)
};


// ScriptStruct  RGIFriends.RGIFriendsFriendRequests
// Struct Size::0x0050
struct FRGIFriendsFriendRequests
{
    TMap<FString,FRGIFriendsFriendRequest>        MapOfRequests;                                                // 0x0000(0x0050)
};


// ScriptStruct  RGIFriends.RGIFriendsFriendRequest
// Struct Size::0x0038
struct FRGIFriendsFriendRequest
{
    FString                                       PlayerName;                                                   // 0x0000(0x0010)
    FString                                       PlayerTag;                                                    // 0x0010(0x0010)
    FString                                       Puuid;                                                        // 0x0020(0x0010)
    enum class ERGIFriendRequestType              RequestType;                                                  // 0x0030(0x0001)
    enum class ERGIFriendsPlatform                Platform;                                                     // 0x0031(0x0001)
    char                                          pa_0032[0x0006]                                               // 0x0032(0x0006)
};


// ScriptStruct  RGIFriends.RGIFriendsPlayer
// Struct Size::0x00B0
struct FRGIFriendsPlayer
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       PreferredDisplayName;                                         // 0x0010(0x0010)
    FString                                       GameTag;                                                      // 0x0020(0x0010)
    FString                                       ProductPresenceName;                                          // 0x0030(0x0010)
    FString                                       Product;                                                      // 0x0040(0x0010)
    enum class ERGIFriendsFriendStatus            Status;                                                       // 0x0050(0x0001)
    enum class ERGIFriendsPlatform                Platform;                                                     // 0x0051(0x0001)
    char                                          pa_0052[0x0006]                                               // 0x0052(0x0006)
    FString                                       Puuid;                                                        // 0x0058(0x0010)
    FString                                       Note;                                                         // 0x0068(0x0010)
    bool                                          bIsInParty;                                                   // 0x0078(0x0001)
    bool                                          bIsPartyLeader;                                               // 0x0079(0x0001)
    bool                                          bIsRiotFriend;                                                // 0x007A(0x0001)
    bool                                          bIsActivePlatformFriend;                                      // 0x007B(0x0001)
    bool                                          bIsRiotBlocked;                                               // 0x007C(0x0001)
    bool                                          bIsActivePlatformBlocked;                                     // 0x007D(0x0001)
    char                                          pa_007E[0x0002]                                               // 0x007E(0x0002)
    FString                                       FirstPartyAAlias;                                             // 0x0080(0x0010)
    FString                                       FirstPartyBAlias;                                             // 0x0090(0x0010)
    TArray<FRGIFriendsCommunicationPermission>    CommunicationPermissions;                                     // 0x00A0(0x0010)
};


// ScriptStruct  RGIFriends.RGIFriendsCommunicationPermission
// Struct Size::0x0003
struct FRGIFriendsCommunicationPermission
{
    char                                          pa_0000[0x0003]                                               // 0x0000(0x0003)
};


// ScriptStruct  RGIFriends.RGIFriendsPlayers
// Struct Size::0x0050
struct FRGIFriendsPlayers
{
    TMap<FString,FRGIFriendsPlayer>               MapOfPlayers;                                                 // 0x0000(0x0050)
};


// ScriptStruct  RGIFriends.RGIFriendsPuuidGameNameAndTagMapping
// Struct Size::0x0050
struct FRGIFriendsPuuidGameNameAndTagMapping
{
    TMap<FString,FRGIFriendsGameNameAndTag>       MapOfPuuidsToGameNameAndTag;                                  // 0x0000(0x0050)
};


// ScriptStruct  RGIFriends.RGIFriendsGameNameAndTag
// Struct Size::0x0040
struct FRGIFriendsGameNameAndTag
{
    FString                                       GameName;                                                     // 0x0000(0x0010)
    FString                                       Tag;                                                          // 0x0010(0x0010)
    FString                                       FirstPartyAAlias;                                             // 0x0020(0x0010)
    FString                                       FirstPartyBAlias;                                             // 0x0030(0x0010)
};


// ScriptStruct  RGIFriends.RGIFriendsUsersCommunicationPermissions
// Struct Size::0x0050
struct FRGIFriendsUsersCommunicationPermissions
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  VTSPlugin.VTSTimeStampIndex
// Struct Size::0x0004
struct FVTSTimeStampIndex
{
    uint32_t                                      Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  DynamicVolume.GroundVolumeFragment
// Struct Size::0x0080
struct FGroundVolumeFragment : public FFastArraySerializerItem
{
    bool                                          bIsActive;                                                    // 0x000C(0x0001)
    enum class EGroundVolumeFragmentStatus        Status;                                                       // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    TArray<FGroundVolumeExteriorLineSegment>      ExteriorSegments;                                             // 0x0010(0x0010)
    TArray<FVector>                               ConvexHullPoints;                                             // 0x0020(0x0010)
    FIntPoint                                     GridPos;                                                      // 0x0030(0x0008)
    float                                         TravelDistance;                                               // 0x0038(0x0004)
    FBox                                          InsideBoundingBox;                                            // 0x003C(0x001C)
    FVector                                       Center;                                                       // 0x0058(0x000C)
    FVector                                       Normal;                                                       // 0x0064(0x000C)
    float                                         Ceiling;                                                      // 0x0070(0x0004)
    float                                         Floor;                                                        // 0x0074(0x0004)
    float                                         Area;                                                         // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  DynamicVolume.GroundVolumeExteriorLineSegment
// Struct Size::0x0008
struct FGroundVolumeExteriorLineSegment
{
    char                                          Begin;                                                        // 0x0000(0x0001)
    char                                          End;                                                          // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         Dist;                                                         // 0x0004(0x0004)
};


// ScriptStruct  PlayerFeedbackToolModule.PlayerFeedbackSurvey
// Struct Size::0x0068
struct FPlayerFeedbackSurvey
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Title;                                                        // 0x0008(0x0010)
    FString                                       Caption;                                                      // 0x0018(0x0010)
    FString                                       Url;                                                          // 0x0028(0x0010)
    TArray<FPlayerFeedbackQuestion>               Questions;                                                    // 0x0038(0x0010)
    char                                          pa_0048[0x0020]                                               // 0x0048(0x0020)
};


// ScriptStruct  PlayerFeedbackToolModule.PlayerFeedbackQuestion
// Struct Size::0x0038
struct FPlayerFeedbackQuestion
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    enum class EPlayerFeedbackQuestionType        Type;                                                         // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FString                                       Question;                                                     // 0x0008(0x0010)
    FString                                       ResponseKey;                                                  // 0x0018(0x0010)
    FString                                       ResponseValue;                                                // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.GenericSourceDelegate
// Struct Size::0x0001
struct FGenericSourceDelegate
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.AresSocialExperienceDelegates
// Struct Size::0x0001
struct FAresSocialExperienceDelegates
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.WildcardDelegates
// Struct Size::0x0001
struct FWildcardDelegates
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.AresMonitorInfo
// Struct Size::0x0078
struct FAresMonitorInfo
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    bool                                          bIsPrimary;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TArray<FAresResolutionInfo>                   ResolutionInfo;                                               // 0x0018(0x0010)
    int32_t                                       NativeWidth;                                                  // 0x0028(0x0004)
    int32_t                                       NativeHeight;                                                 // 0x002C(0x0004)
    int32_t                                       MaxResolutionWidth;                                           // 0x0030(0x0004)
    int32_t                                       MaxResolutionHeight;                                          // 0x0034(0x0004)
    char                                          pa_0038[0x0040]                                               // 0x0038(0x0040)
};


// ScriptStruct  ShooterGame.AresResolutionInfo
// Struct Size::0x000C
struct FAresResolutionInfo
{
    int32_t                                       Width;                                                        // 0x0000(0x0004)
    int32_t                                       Height;                                                       // 0x0004(0x0004)
    int32_t                                       RefreshRate;                                                  // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.DisplayName
// Struct Size::0x0030
struct FDisplayName
{
    FString                                       FullName;                                                     // 0x0000(0x0010)
    FString                                       GameName;                                                     // 0x0010(0x0010)
    FString                                       TagLine;                                                      // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.AresAssist
// Struct Size::0x0010
struct FAresAssist
{
    enum class EAresAssistType                    AssistType;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FShooterPlayerState*                          Assister;                                                     // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.FiringResults
// Struct Size::0x0018
struct FFiringResults
{
    FVector                                       FiringDirection;                                              // 0x0000(0x000C)
    FVector                                       StartLocation;                                                // 0x000C(0x000C)
};


// ScriptStruct  Engine.DamageEvent
// Struct Size::0x0010
struct FDamageEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FDamageType*                                  DamageTypeClass;                                              // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.ActionChord
// Struct Size::0x0028
struct FActionChord
{
    FKey                                          Key;                                                          // 0x0000(0x0020)
    bool                                          bShift;                                                       // 0x0020(0x0001)
    bool                                          bCtrl;                                                        // 0x0021(0x0001)
    bool                                          bAlt;                                                         // 0x0022(0x0001)
    bool                                          bCmd;                                                         // 0x0023(0x0001)
    bool                                          bGamepadShift;                                                // 0x0024(0x0001)
    enum class EActionChordTapHoldType            TapHoldType;                                                  // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
};


// ScriptStruct  ShooterGame.AresMatchResult
// Struct Size::0x0010
struct FAresMatchResult
{
    FBaseTeamComponent*                           WinningTeam;                                                  // 0x0000(0x0008)
    enum class EMatchCompletionState              CompletionState;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  AIModule.AIRequestID
// Struct Size::0x0004
struct FAIRequestID
{
    uint32_t                                      RequestID;                                                    // 0x0000(0x0004)
};


// ScriptStruct  AIModule.AIStimulus
// Struct Size::0x0048
struct FAIStimulus
{
    float                                         Age;                                                          // 0x0000(0x0004)
    float                                         ExpirationAge;                                                // 0x0004(0x0004)
    float                                         Strength;                                                     // 0x0008(0x0004)
    FVector                                       StimulusLocation;                                             // 0x000C(0x000C)
    FVector                                       ReceiverLocation;                                             // 0x0018(0x000C)
    FName                                         Tag;                                                          // 0x0024(0x000C)
    float                                         InitialSensedTime;                                            // 0x0030(0x0004)
    char                                          pa_0034[0x0010]                                               // 0x0034(0x0010)
    char                                          bSuccessfullySensed;                                          // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
};


// ScriptStruct  AIModule.ActorPerceptionUpdateInfo
// Struct Size::0x0054
struct FActorPerceptionUpdateInfo
{
    int32_t                                       TargetId;                                                     // 0x0000(0x0004)
    TWeakObjectPtr<AActor>                        Target;                                                       // 0x0004(0x0008)
    FAIStimulus                                   Stimulus;                                                     // 0x000C(0x0048)
};


// ScriptStruct  ShooterGame.CinematicCameraData
// Struct Size::0x0060
struct FCinematicCameraData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FVector                                       Position;                                                     // 0x0010(0x000C)
    FRotator                                      Rotation;                                                     // 0x001C(0x000C)
    FVector                                       Forward;                                                      // 0x0028(0x000C)
    FBox                                          ViewBox;                                                      // 0x0034(0x001C)
    FName                                         Layer;                                                        // 0x0050(0x000C)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  ShooterGame.AresTrackedReward
// Struct Size::0x0050
struct FAresTrackedReward
{
    FAresGameReward                               TotalReward;                                                  // 0x0000(0x0024)
    FName                                         RewardName;                                                   // 0x0024(0x000C)
    FText                                         LocalizedRewardName;                                          // 0x0030(0x0018)
    int32_t                                       InstancesOfReward;                                            // 0x0048(0x0004)
    enum class EAresRewardGrantStrategy           RewardGrantStrategy;                                          // 0x004C(0x0001)
    enum class ERewardSource                      Source;                                                       // 0x004D(0x0001)
    char                                          pa_004E[0x0002]                                               // 0x004E(0x0002)
};


// ScriptStruct  ShooterGame.AresGameReward
// Struct Size::0x0024
struct FAresGameReward
{
    int32_t                                       Rewards;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0020]                                               // 0x0004(0x0020)
};


// ScriptStruct  ShooterGame.DestructionEffect
// Struct Size::0x0010
struct FDestructionEffect
{
    FEffectContainer*                             FXC;                                                          // 0x0000(0x0008)
    enum class EDestructionEffectPlayType         PlayType;                                                     // 0x0008(0x0001)
    bool                                          bOnlyPlayOnDeathOrDestroy;                                    // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  ShooterGame.SpawnPointData
// Struct Size::0x0078
struct FSpawnPointData
{
    FShooterTeamStart*                            SpawnPoint;                                                   // 0x0000(0x0008)
    TMap<enum class EAresTeamRole,FSpawnPointTeamRoleData>TeamRoleData;                                         // 0x0008(0x0050)
    int32_t                                       ArrayIndex;                                                   // 0x0058(0x0004)
    float                                         LastUpdateTimestamp;                                          // 0x005C(0x0004)
    TArray<int32_t>                               SpawnPointIndicesInVision;                                    // 0x0060(0x0010)
    int32_t                                       NumTicksUntilUpdate;                                          // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  ShooterGame.SpawnPointTeamRoleData
// Struct Size::0x000C
struct FSpawnPointTeamRoleData
{
    float                                         Score;                                                        // 0x0000(0x0004)
    int32_t                                       NumVisibleEnemyCharacters;                                    // 0x0004(0x0004)
    bool                                          bSpawnPointDataStale;                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  ShooterGame.NPEObjectiveEvent
// Struct Size::0x0068
struct FNPEObjectiveEvent
{
    enum class EObjectiveEventType                EventType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       ModuleName;                                                   // 0x0008(0x0010)
    FString                                       MissionName;                                                  // 0x0018(0x0010)
    FString                                       ObjectiveName;                                                // 0x0028(0x0010)
    float                                         TotalTimeTaken;                                               // 0x0038(0x0004)
    float                                         TimeAFK;                                                      // 0x003C(0x0004)
    int32_t                                       Retries;                                                      // 0x0040(0x0004)
    int32_t                                       ShotsFired;                                                   // 0x0044(0x0004)
    int32_t                                       ShotsLanded;                                                  // 0x0048(0x0004)
    int32_t                                       Headshots;                                                    // 0x004C(0x0004)
    int32_t                                       Deaths;                                                       // 0x0050(0x0004)
    float                                         DamageTaken;                                                  // 0x0054(0x0004)
    float                                         StartTime;                                                    // 0x0058(0x0004)
    float                                         LastAFKStart;                                                 // 0x005C(0x0004)
    bool                                          bIsComplete;                                                  // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  ShooterGame.AresGunRequest
// Struct Size::0x0010
struct FAresGunRequest
{
    FAresPurchasableEquippable*                   RequestedGun;                                                 // 0x0000(0x0008)
    enum class EAresGunRequestState               RequestState;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ShooterGame.EquippableAttachmentHandles
// Struct Size::0x0050
struct FEquippableAttachmentHandles
{
    TMap<FEquippableAttachmentDataAsset*,FEquippableAttachmentHandle*>Handles;                                  // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.EquippableSkinChromaHandles
// Struct Size::0x0050
struct FEquippableSkinChromaHandles
{
    TMap<FEquippableSkinChromaDataAsset*,FEquippableSkinChromaHandle*>Handles;                                  // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.EquippableSkinLevelHandles
// Struct Size::0x0050
struct FEquippableSkinLevelHandles
{
    TMap<FEquippableSkinLevelDataAsset*,FEquippableSkinLevelHandle*>Handles;                                    // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.EquippableSkinHandles
// Struct Size::0x0050
struct FEquippableSkinHandles
{
    TMap<FEquippableSkinDataAsset*,FEquippableSkinHandle*>Handles;                                              // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.EquippableHandles
// Struct Size::0x0050
struct FEquippableHandles
{
    TMap<FEquippableDataAsset*,FEquippableHandle*>Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.SprayHandles
// Struct Size::0x0050
struct FSprayHandles
{
    TMap<FSprayDataAsset*,FSprayHandle*>          Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.SprayLevelHandles
// Struct Size::0x0050
struct FSprayLevelHandles
{
    TMap<FSprayLevelDataAsset*,FSprayLevelHandle*>Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.SprayEquipSlotHandles
// Struct Size::0x0050
struct FSprayEquipSlotHandles
{
    TMap<FSprayEquipSlotDataAsset*,FSprayEquipSlotHandle*>Handles;                                              // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.TotemHandles
// Struct Size::0x0050
struct FTotemHandles
{
    TMap<FTotemDataAsset*,FTotemHandle*>          Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.ExpressionEquipSlotHandles
// Struct Size::0x0050
struct FExpressionEquipSlotHandles
{
    TMap<FExpressionEquipSlotDataAsset*,FExpressionEquipSlotHandle*>Handles;                                    // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.CharacterRoleHandles
// Struct Size::0x0050
struct FCharacterRoleHandles
{
    TMap<FCharacterRoleDataAsset*,FCharacterRoleHandle*>Handles;                                                // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.CharacterHandles
// Struct Size::0x0050
struct FCharacterHandles
{
    TMap<FCharacterDataAsset*,FCharacterHandle*>  Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.ThemeHandles
// Struct Size::0x0050
struct FThemeHandles
{
    TMap<FThemeDataAsset*,FThemeHandle*>          Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.CurrencyHandles
// Struct Size::0x0050
struct FCurrencyHandles
{
    TMap<FCurrencyDataAsset*,FCurrencyHandle*>    Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.JuiceBoxHandles
// Struct Size::0x0050
struct FJuiceBoxHandles
{
    TMap<FJuiceBoxDataAsset*,FJuiceBoxHandle*>    Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.EquippableCharmHandles
// Struct Size::0x0050
struct FEquippableCharmHandles
{
    TMap<FEquippableCharmDataAsset*,FEquippableCharmHandle*>Handles;                                            // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.EquippableCharmLevelHandles
// Struct Size::0x0050
struct FEquippableCharmLevelHandles
{
    TMap<FEquippableCharmLevelDataAsset*,FEquippableCharmLevelHandle*>Handles;                                  // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.EquippableCharmInstanceHandles
// Struct Size::0x0010
struct FEquippableCharmInstanceHandles
{
    TArray<FEquippableCharmInstanceHandle*>       Handles;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.MapHandles
// Struct Size::0x0050
struct FMapHandles
{
    TMap<FMapDataAsset*,FMapHandle*>              Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.GameModeHandles
// Struct Size::0x0050
struct FGameModeHandles
{
    TMap<FGameModeDataAsset*,FGameModeHandle*>    Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.MatchmakingQueueHandles
// Struct Size::0x0050
struct FMatchmakingQueueHandles
{
    TMap<FMatchmakingQueueDataAsset*,FMatchmakingQueueHandle*>Handles;                                          // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.PlayerCardHandles
// Struct Size::0x0050
struct FPlayerCardHandles
{
    TMap<FPlayerCardDataAsset*,FPlayerCardHandle*>Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.StorefrontItemHandles
// Struct Size::0x0050
struct FStorefrontItemHandles
{
    TMap<FStorefrontItemDataAsset*,FStorefrontItemHandle*>Handles;                                              // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.MissionHandles
// Struct Size::0x0050
struct FMissionHandles
{
    TMap<FMissionDataAsset*,FMissionHandle*>      Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.ObjectiveHandles
// Struct Size::0x0050
struct FObjectiveHandles
{
    TMap<FObjectiveDataAsset*,FObjectiveHandle*>  Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.ArmorHandles
// Struct Size::0x0050
struct FArmorHandles
{
    TMap<FArmorDataAsset*,FArmorHandle*>          Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.PlayerTitleHandles
// Struct Size::0x0050
struct FPlayerTitleHandles
{
    TMap<FPlayerTitleDataAsset*,FPlayerTitleHandle*>Handles;                                                    // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.ContractV2Handles
// Struct Size::0x0050
struct FContractV2Handles
{
    TMap<FContractDataAssetV2*,FContractV2Handle*>Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.EventHandles
// Struct Size::0x0050
struct FEventHandles
{
    TMap<FEventDataAsset*,FEventHandle*>          Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.ContentTierHandles
// Struct Size::0x0050
struct FContentTierHandles
{
    TMap<FContentTierDataAsset*,FContentTierHandle*>Handles;                                                    // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.SeasonHandles
// Struct Size::0x0050
struct FSeasonHandles
{
    TMap<FSeasonDataAsset*,FSeasonHandle*>        Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.CompetitiveSeasonHandles
// Struct Size::0x0050
struct FCompetitiveSeasonHandles
{
    TMap<FCompetitiveSeasonDataAsset*,FCompetitiveSeasonHandle*>Handles;                                        // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.PremierSeasonHandles
// Struct Size::0x0050
struct FPremierSeasonHandles
{
    TMap<FPremierSeasonDataAsset*,FPremierSeasonHandle*>Handles;                                                // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.PremierConferenceHandles
// Struct Size::0x0050
struct FPremierConferenceHandles
{
    TMap<FPremierConferenceDataAsset*,FPremierConferenceHandle*>Handles;                                        // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.SubscriptionHandles
// Struct Size::0x0050
struct FSubscriptionHandles
{
    TMap<FSubscriptionDataAsset*,FSubscriptionHandle*>Handles;                                                  // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.ActRankBorderHandles
// Struct Size::0x0050
struct FActRankBorderHandles
{
    TMap<FActRankBorderDataAsset*,FActRankBorderHandle*>Handles;                                                // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.LevelBorderHandles
// Struct Size::0x0050
struct FLevelBorderHandles
{
    TMap<FLevelBorderDataAsset*,FLevelBorderHandle*>Handles;                                                    // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.BaseHandles
// Struct Size::0x0050
struct FBaseHandles
{
    TMap<FAresBasePrimaryDataAsset*,FBaseHandle*> Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.TournamentsTeamIconHandles
// Struct Size::0x0050
struct FTournamentsTeamIconHandles
{
    TMap<FTournamentsTeamIconDataAsset*,FTournamentsTeamIconHandle*>Handles;                                    // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.MassRewardsCeremonyHandles
// Struct Size::0x0050
struct FMassRewardsCeremonyHandles
{
    TMap<FMassRewardsCeremonyDataAsset*,FMassRewardsCeremonyHandle*>Handles;                                    // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.BTEHandles
// Struct Size::0x0050
struct FBTEHandles
{
    TMap<FBTEDataAsset*,FBTEHandle*>              Handles;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.MMRPlayer
// Struct Size::0x00C0
struct FMMRPlayer
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    bool                                          NewPlayerExperienceFinished;                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FMMRMatchInfo                                 LatestCompetitiveUpdate;                                      // 0x0018(0x0030)
    int64_t                                       Version;                                                      // 0x0048(0x0008)
    TMap<FString,FMMRQueueSkill>                  QueueSkills;                                                  // 0x0050(0x0050)
    bool                                          IsLeaderboardAnonymized;                                      // 0x00A0(0x0001)
    bool                                          IsActRankBadgeHidden;                                         // 0x00A1(0x0001)
    char                                          pa_00A2[0x0006]                                               // 0x00A2(0x0006)
    FString                                       OnboardingStatus;                                             // 0x00A8(0x0010)
    bool                                          OnboardingFlowV2Enabled;                                      // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
};


// ScriptStruct  ShooterGame.MMRQueueSkill
// Struct Size::0x0068
struct FMMRQueueSkill
{
    int32_t                                       CompetitiveTier;                                              // 0x0000(0x0004)
    int32_t                                       TotalGamesNeededForRating;                                    // 0x0004(0x0004)
    int32_t                                       RecentGamesNeededForRating;                                   // 0x0008(0x0004)
    int32_t                                       CurrentSeasonGamesNeededForRating;                            // 0x000C(0x0004)
    int32_t                                       TotalGamesNeededForLeaderboard;                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TMap<FGuid,FMMRSeasonInfo>                    SeasonalInfoBySeasonID;                                       // 0x0018(0x0050)
};


// ScriptStruct  ShooterGame.MMRSeasonInfo
// Struct Size::0x0088
struct FMMRSeasonInfo
{
    FGuid                                         SeasonID;                                                     // 0x0000(0x0010)
    int32_t                                       NumberOfWins;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TMap<int32_t,int32_t>                         WinsByTier;                                                   // 0x0018(0x0050)
    int32_t                                       CapstoneWins;                                                 // 0x0068(0x0004)
    int32_t                                       Rank;                                                         // 0x006C(0x0004)
    int32_t                                       TotalWinsNeededForRank;                                       // 0x0070(0x0004)
    int32_t                                       LeaderboardRank;                                              // 0x0074(0x0004)
    int32_t                                       RankedRating;                                                 // 0x0078(0x0004)
    int32_t                                       CompetitiveTier;                                              // 0x007C(0x0004)
    int32_t                                       GamesNeededForRating;                                         // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  ShooterGame.MMRMatchInfo
// Struct Size::0x0030
struct FMMRMatchInfo
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    int32_t                                       TierBeforeUpdate;                                             // 0x0010(0x0004)
    int32_t                                       TierAfterUpdate;                                              // 0x0014(0x0004)
    int32_t                                       RankedRatingBeforeUpdate;                                     // 0x0018(0x0004)
    int32_t                                       RankedRatingAfterUpdate;                                      // 0x001C(0x0004)
    int32_t                                       RankedRatingEarned;                                           // 0x0020(0x0004)
    int32_t                                       AFKPenalty;                                                   // 0x0024(0x0004)
    int32_t                                       RankedRatingPerformanceBonus;                                 // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.Leaderboard
// Struct Size::0x0088
struct FLeaderboard
{
    FGuid                                         SeasonId;                                                     // 0x0000(0x0010)
    TMap<int32_t,FLeaderboardTierDetails>         TierDetails;                                                  // 0x0010(0x0050)
    int32_t                                       TotalPlayers;                                                 // 0x0060(0x0004)
    int32_t                                       StartIndex;                                                   // 0x0064(0x0004)
    FString                                       Query;                                                        // 0x0068(0x0010)
    TArray<FLeaderboardPlayer>                    Players;                                                      // 0x0078(0x0010)
};


// ScriptStruct  ShooterGame.LeaderboardPlayer
// Struct Size::0x0068
struct FLeaderboardPlayer
{
    FString                                       Puuid;                                                        // 0x0000(0x0010)
    FString                                       GameName;                                                     // 0x0010(0x0010)
    FString                                       Tagline;                                                      // 0x0020(0x0010)
    FGuid                                         PlayerCardId;                                                 // 0x0030(0x0010)
    FGuid                                         TitleId;                                                      // 0x0040(0x0010)
    int32_t                                       RankedRating;                                                 // 0x0050(0x0004)
    int32_t                                       CompetitiveTier;                                              // 0x0054(0x0004)
    int32_t                                       LeaderboardRank;                                              // 0x0058(0x0004)
    int32_t                                       NumberOfWins;                                                 // 0x005C(0x0004)
    bool                                          IsAnonymized;                                                 // 0x0060(0x0001)
    bool                                          IsBanned;                                                     // 0x0061(0x0001)
    char                                          pa_0062[0x0006]                                               // 0x0062(0x0006)
};


// ScriptStruct  ShooterGame.LeaderboardTierDetails
// Struct Size::0x000C
struct FLeaderboardTierDetails
{
    int32_t                                       RankedRatingThreshold;                                        // 0x0000(0x0004)
    int32_t                                       StartingPage;                                                 // 0x0004(0x0004)
    int32_t                                       StartingIndex;                                                // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.MMRCompetitiveUpdates
// Struct Size::0x0028
struct FMMRCompetitiveUpdates
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    TArray<FMMRMatchInfo>                         Matches;                                                      // 0x0010(0x0010)
    int64_t                                       Version;                                                      // 0x0020(0x0008)
};


// ScriptStruct  ShooterGame.PartyMemberSeasonalInfo
// Struct Size::0x0030
struct FPartyMemberSeasonalInfo
{
    FGuid                                         SeasonID;                                                     // 0x0000(0x0010)
    int32_t                                       NumberOfWins;                                                 // 0x0010(0x0004)
    int32_t                                       RankTier;                                                     // 0x0014(0x0004)
    int32_t                                       CapstoneTier;                                                 // 0x0018(0x0004)
    int32_t                                       CapstoneWins;                                                 // 0x001C(0x0004)
    TArray<int32_t>                               TopWins;                                                      // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.PingInfo
// Struct Size::0x0018
struct FPingInfo
{
    FString                                       GamePodID;                                                    // 0x0000(0x0010)
    int32_t                                       Ping;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.UnorderedMapModelChangeEventData
// Struct Size::0x0038
struct FUnorderedMapModelChangeEventData
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
    bool                                          bIsReset;                                                     // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  ShooterGame.PreferredGamePodMap
// Struct Size::0x0050
struct FPreferredGamePodMap
{
    TMap<FString,bool>                            PreferredGamePods;                                            // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.TournamentData
// Struct Size::0x00D0
struct FTournamentData
{
    FString                                       RosterID;                                                     // 0x0000(0x0010)
    FString                                       TournamentID;                                                 // 0x0010(0x0010)
    FString                                       EventID;                                                      // 0x0020(0x0010)
    FString                                       PremierEventID;                                               // 0x0030(0x0010)
    FString                                       PremierSeasonID;                                              // 0x0040(0x0010)
    TArray<FIneligibleRosterPartyMember>          IneligibleRosterPartyMembers;                                 // 0x0050(0x0010)
    TArray<FString>                               RosterEventIneligibilities;                                   // 0x0060(0x0010)
    FPremierScheduledEventDTO                     PremierScheduledEvent;                                        // 0x0070(0x0060)
};


// ScriptStruct  ShooterGame.PremierScheduledEventDTO
// Struct Size::0x0060
struct FPremierScheduledEventDTO
{
    FGuid                                         EventID;                                                      // 0x0000(0x0010)
    FString                                       EventType;                                                    // 0x0010(0x0010)
    FString                                       Conference;                                                   // 0x0020(0x0010)
    FString                                       DivisionGroup;                                                // 0x0030(0x0010)
    FString                                       EventPresetName;                                              // 0x0040(0x0010)
    FDateTime                                     StartDateTime;                                                // 0x0050(0x0008)
    FDateTime                                     EndDateTime;                                                  // 0x0058(0x0008)
};


// ScriptStruct  ShooterGame.IneligibleRosterPartyMember
// Struct Size::0x0020
struct FIneligibleRosterPartyMember
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       Reason;                                                       // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.AresTouchEventInfo
// Struct Size::0x0088
struct FAresTouchEventInfo
{
    FPointerEvent                                 ParentPointerEvent;                                           // 0x0000(0x0078)
    enum class ETouchIndex                        TouchIndex;                                                   // 0x0078(0x0001)
    char                                          pa_0079[0x0003]                                               // 0x0079(0x0003)
    FVector2D                                     TouchLocation;                                                // 0x007C(0x0008)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  ShooterGame.AresTouchTrackingData
// Struct Size::0x00A8
struct FAresTouchTrackingData
{
    enum class ETouchIndex                        TouchIndex;                                                   // 0x0000(0x0001)
    enum class EAresTouchState                    TouchState;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    FVector2D                                     Location;                                                     // 0x0004(0x0008)
    FVector2D                                     StartLocation;                                                // 0x000C(0x0008)
    FVector2D                                     PreviousLocation;                                             // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FAresTouchEventInfo                           TouchInfo;                                                    // 0x0020(0x0088)
};


// ScriptStruct  ShooterGame.AresTouchHoldGestureData
// Struct Size::0x0028
struct FAresTouchHoldGestureData
{
    enum class ETouchIndex                        TouchIndex;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector2D                                     Location;                                                     // 0x0004(0x0008)
    FVector2D                                     StartLocation;                                                // 0x000C(0x0008)
    enum class EAresTouchState                    TouchState;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0013]                                               // 0x0015(0x0013)
};


// ScriptStruct  ShooterGame.AresTouchDoubleTapGestureData
// Struct Size::0x0018
struct FAresTouchDoubleTapGestureData
{
    enum class ETouchIndex                        TouchIndex;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector2D                                     Location;                                                     // 0x0004(0x0008)
    FVector2D                                     StartLocation;                                                // 0x000C(0x0008)
    bool                                          bHold;                                                        // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  ShooterGame.TriggerInput
// Struct Size::0x0002
struct FTriggerInput
{
    enum class EAresEquippableInput               TriggerInput;                                                 // 0x0000(0x0001)
    enum class EAresEquippableInputAction         TriggerAction;                                                // 0x0001(0x0001)
};


// ScriptStruct  ShooterGame.MenuMusic
// Struct Size::0x0010
struct FMenuMusic
{
    FAkAudioEvent*                                Default;                                                      // 0x0000(0x0008)
    FAkAudioEvent*                                FindMatch;                                                    // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.ForceModuleHandle
// Struct Size::0x0008
struct FForceModuleHandle
{
    uint32_t                                      HandleNumber;                                                 // 0x0000(0x0004)
    enum class EForceModuleType                   ModuleType;                                                   // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  ShooterGame.OrderResponse
// Struct Size::0x00C0
struct FOrderResponse
{
    FGuid                                         OrderID;                                                      // 0x0000(0x0010)
    FString                                       Status;                                                       // 0x0010(0x0010)
    FOrderRewards                                 OrderRewards;                                                 // 0x0020(0x00A0)
};


// ScriptStruct  ShooterGame.OrderRewards
// Struct Size::0x00A0
struct FOrderRewards
{
    TArray<FOrderReward>                          SkinLevels;                                                   // 0x0000(0x0010)
    TArray<FOrderReward>                          Variants;                                                     // 0x0010(0x0010)
    TArray<FOrderReward>                          Sprays;                                                       // 0x0020(0x0010)
    TArray<FOrderReward>                          Cards;                                                        // 0x0030(0x0010)
    TArray<FOrderReward>                          Buddies;                                                      // 0x0040(0x0010)
    TArray<FOrderReward>                          GunShards;                                                    // 0x0050(0x0010)
    TArray<FOrderReward>                          Titles;                                                       // 0x0060(0x0010)
    TArray<FOrderReward>                          Characters;                                                   // 0x0070(0x0010)
    TArray<FOrderReward>                          JuiceBoxes;                                                   // 0x0080(0x0010)
    TArray<FOrderReward>                          Currencies;                                                   // 0x0090(0x0010)
};


// ScriptStruct  ShooterGame.OrderReward
// Struct Size::0x0014
struct FOrderReward
{
    FGuid                                         RewardID;                                                     // 0x0000(0x0010)
    int32_t                                       Amount;                                                       // 0x0010(0x0004)
};


// ScriptStruct  ShooterGame.AmbassadorError
// Struct Size::0x0038
struct FAmbassadorError
{
    int32_t                                       HTTPStatus;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       ErrorCode;                                                    // 0x0008(0x0010)
    FString                                       Message;                                                      // 0x0018(0x0010)
    FString                                       Details;                                                      // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.AntiAddictionToken
// Struct Size::0x0010
struct FAntiAddictionToken
{
    FString                                       Token;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.AVSSuccessData
// Struct Size::0x0020
struct FAVSSuccessData
{
    enum class EAVSConfirmationResponseType       ResponseType;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FDateTime                                     PinExpiryDateTime;                                            // 0x0008(0x0008)
    FString                                       PhoneNumberObfuscated;                                        // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PurchaseResponse
// Struct Size::0x0010
struct FPurchaseResponse
{
    FGuid                                         OrderID;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.EventScheduleDTO
// Struct Size::0x0090
struct FEventScheduleDTO
{
    FString                                       LeagueID;                                                     // 0x0000(0x0010)
    FString                                       LeagueName;                                                   // 0x0010(0x0010)
    FString                                       LeagueSlug;                                                   // 0x0020(0x0010)
    FString                                       TournamentID;                                                 // 0x0030(0x0010)
    FString                                       TournamentName;                                               // 0x0040(0x0010)
    FString                                       TournamentSlug;                                               // 0x0050(0x0010)
    FString                                       TournamentState;                                              // 0x0060(0x0010)
    FDateTime                                     StartTime;                                                    // 0x0070(0x0008)
    FDateTime                                     EndTime;                                                      // 0x0078(0x0008)
    TArray<FMatchDTO>                             Matches;                                                      // 0x0080(0x0010)
};


// ScriptStruct  ShooterGame.MatchDTO
// Struct Size::0x0098
struct FMatchDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FDateTime                                     StartTime;                                                    // 0x0010(0x0008)
    FString                                       StageName;                                                    // 0x0018(0x0010)
    FString                                       StageSlug;                                                    // 0x0028(0x0010)
    FString                                       Stage;                                                        // 0x0038(0x0010)
    FString                                       Status;                                                       // 0x0048(0x0010)
    FString                                       StructuralID;                                                 // 0x0058(0x0010)
    TArray<FTeamDTO>                              Teams;                                                        // 0x0068(0x0010)
    TArray<FGameDTO>                              Games;                                                        // 0x0078(0x0010)
    TArray<FStreamDTO>                            Streams;                                                      // 0x0088(0x0010)
};


// ScriptStruct  ShooterGame.StreamDTO
// Struct Size::0x0060
struct FStreamDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       Locale;                                                       // 0x0010(0x0010)
    FString                                       ProviderURL;                                                  // 0x0020(0x0010)
    FMediaLocaleDTO                               MediaLocale;                                                  // 0x0030(0x0030)
};


// ScriptStruct  ShooterGame.MediaLocaleDTO
// Struct Size::0x0030
struct FMediaLocaleDTO
{
    FString                                       Locale;                                                       // 0x0000(0x0010)
    FString                                       EnglishName;                                                  // 0x0010(0x0010)
    FString                                       TranslatedName;                                               // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.GameDTO
// Struct Size::0x0028
struct FGameDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    int32_t                                       Number;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FVODDTO>                               VODs;                                                         // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.VODDTO
// Struct Size::0x0030
struct FVODDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       Locale;                                                       // 0x0010(0x0010)
    FString                                       ProviderURL;                                                  // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.TeamDTO
// Struct Size::0x0180
struct FTeamDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       Code;                                                         // 0x0020(0x0010)
    FString                                       CodeSanitized;                                                // 0x0030(0x0010)
    FString                                       ImageURL;                                                     // 0x0040(0x0010)
    FString                                       ImageLowResURL;                                               // 0x0050(0x0010)
    FString                                       ImageHighResURL;                                              // 0x0060(0x0010)
    FString                                       AlternativeImageURL;                                          // 0x0070(0x0010)
    FString                                       BackgroundImageURL;                                           // 0x0080(0x0010)
    FString                                       PrimaryColor;                                                 // 0x0090(0x0010)
    FString                                       SecondaryColor;                                               // 0x00A0(0x0010)
    FMatchOutcomeDTO                              MatchOutcome;                                                 // 0x00B0(0x0038)
    FOriginDTO                                    Origin;                                                       // 0x00E8(0x0028)
    TArray<FPlayerDTO>                            Players;                                                      // 0x0110(0x0010)
    FTeamRecordDTO                                Record;                                                       // 0x0120(0x000C)
    char                                          pa_012C[0x0004]                                               // 0x012C(0x0004)
    FHomeLeagueDTO                                HomeLeague;                                                   // 0x0130(0x0040)
    FString                                       BundleID;                                                     // 0x0170(0x0010)
};


// ScriptStruct  ShooterGame.HomeLeagueDTO
// Struct Size::0x0040
struct FHomeLeagueDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       ImageURL;                                                     // 0x0020(0x0010)
    FString                                       Region;                                                       // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.TeamRecordDTO
// Struct Size::0x000C
struct FTeamRecordDTO
{
    int32_t                                       Wins;                                                         // 0x0000(0x0004)
    int32_t                                       Losses;                                                       // 0x0004(0x0004)
    int32_t                                       Ties;                                                         // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.PlayerDTO
// Struct Size::0x0080
struct FPlayerDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       SummonerName;                                                 // 0x0010(0x0010)
    FString                                       Handle;                                                       // 0x0020(0x0010)
    FString                                       FirstName;                                                    // 0x0030(0x0010)
    FString                                       LastName;                                                     // 0x0040(0x0010)
    FString                                       Image;                                                        // 0x0050(0x0010)
    FString                                       Status;                                                       // 0x0060(0x0010)
    TArray<FPlayerRoleDTO>                        Roles;                                                        // 0x0070(0x0010)
};


// ScriptStruct  ShooterGame.PlayerRoleDTO
// Struct Size::0x0020
struct FPlayerRoleDTO
{
    FString                                       Type;                                                         // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.OriginDTO
// Struct Size::0x0028
struct FOriginDTO
{
    FString                                       StructuralID;                                                 // 0x0000(0x0010)
    FString                                       Type;                                                         // 0x0010(0x0010)
    int32_t                                       Slot;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ShooterGame.MatchOutcomeDTO
// Struct Size::0x0038
struct FMatchOutcomeDTO
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    FString                                       TeamID;                                                       // 0x0010(0x0010)
    FString                                       Outcome;                                                      // 0x0020(0x0010)
    int32_t                                       GameWins;                                                     // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.EventScheduleListDTO
// Struct Size::0x0010
struct FEventScheduleListDTO
{
    TArray<FEventScheduleDTO>                     EventScheduleList;                                            // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.TeamsDTO
// Struct Size::0x0010
struct FTeamsDTO
{
    TArray<FTeamDTO>                              Teams;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.TournamentStandingsDTO
// Struct Size::0x0010
struct FTournamentStandingsDTO
{
    TArray<FTournamentStandingDTO>                TournamentStandings;                                          // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.TournamentStandingDTO
// Struct Size::0x00D0
struct FTournamentStandingDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FDateTime                                     StartTime;                                                    // 0x0020(0x0008)
    FDateTime                                     EndTime;                                                      // 0x0028(0x0008)
    TMap<FString,FTournamentSectionDTO>           TournamentSections;                                           // 0x0030(0x0050)
    TMap<FString,FTournamentSectionDTO>           TournamentSectionsV2;                                         // 0x0080(0x0050)
};


// ScriptStruct  ShooterGame.TournamentSectionDTO
// Struct Size::0x00C0
struct FTournamentSectionDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    int32_t                                       SectionIndex;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       LeagueID;                                                     // 0x0018(0x0010)
    FString                                       Name;                                                         // 0x0028(0x0010)
    FString                                       StageName;                                                    // 0x0038(0x0010)
    int32_t                                       StageIndex;                                                   // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FString                                       StageSlug;                                                    // 0x0050(0x0010)
    TArray<FMatchDTO>                             Matches;                                                      // 0x0060(0x0010)
    FString                                       Type;                                                         // 0x0070(0x0010)
    FStandingDTO                                  Standing;                                                     // 0x0080(0x0040)
};


// ScriptStruct  ShooterGame.StandingDTO
// Struct Size::0x0040
struct FStandingDTO
{
    FGroupStandingDTO                             Group;                                                        // 0x0000(0x0030)
    FBracketStandingDTO                           Bracket;                                                      // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.BracketStandingDTO
// Struct Size::0x0010
struct FBracketStandingDTO
{
    TArray<FColumnDTO>                            Columns;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ColumnDTO
// Struct Size::0x0010
struct FColumnDTO
{
    TArray<FCellDTO>                              Cells;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.CellDTO
// Struct Size::0x0048
struct FCellDTO
{
    FString                                       Stage;                                                        // 0x0000(0x0010)
    FString                                       Type;                                                         // 0x0010(0x0010)
    int32_t                                       RoundNumber;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FMatchDTO>                             Matches;                                                      // 0x0028(0x0010)
    TArray<FString>                               MatchIDs;                                                     // 0x0038(0x0010)
};


// ScriptStruct  ShooterGame.GroupStandingDTO
// Struct Size::0x0030
struct FGroupStandingDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    TArray<FTeamRankingDTO>                       Rankings;                                                     // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.TeamRankingDTO
// Struct Size::0x0018
struct FTeamRankingDTO
{
    int32_t                                       Rank;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FTeamDTO>                              Teams;                                                        // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.EsportsPlayerStatsListDTO
// Struct Size::0x0010
struct FEsportsPlayerStatsListDTO
{
    TArray<FEsportsPlayerStatsDTO>                PlayerStatsList;                                              // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.EsportsPlayerStatsDTO
// Struct Size::0x0078
struct FEsportsPlayerStatsDTO
{
    FString                                       Handle;                                                       // 0x0000(0x0010)
    FString                                       FirstName;                                                    // 0x0010(0x0010)
    FString                                       LastName;                                                     // 0x0020(0x0010)
    int32_t                                       Year;                                                         // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       ID;                                                           // 0x0038(0x0010)
    int32_t                                       TotalGames;                                                   // 0x0048(0x0004)
    float                                         AvgCombatScore;                                               // 0x004C(0x0004)
    float                                         KDA;                                                          // 0x0050(0x0004)
    float                                         KD;                                                           // 0x0054(0x0004)
    float                                         HeadshotPercent;                                              // 0x0058(0x0004)
    float                                         AvgDamagePerRound;                                            // 0x005C(0x0004)
    float                                         AvgKillsPerRound;                                             // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    TArray<FEsportsPlayerAgentStatsDTO>           StatsPerAgent;                                                // 0x0068(0x0010)
};


// ScriptStruct  ShooterGame.EsportsPlayerAgentStatsDTO
// Struct Size::0x0030
struct FEsportsPlayerAgentStatsDTO
{
    FString                                       AgentGuid;                                                    // 0x0000(0x0010)
    int32_t                                       NumAgentGames;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       MostPlayedMap;                                                // 0x0018(0x0010)
    int32_t                                       MostPlayedMapGames;                                           // 0x0028(0x0004)
    float                                         MostPlayedMapWinrate;                                         // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.MatchDetailsDTO
// Struct Size::0x0138
struct FMatchDetailsDTO
{
    FMatchInfoDTO                                 MatchInfo;                                                    // 0x0000(0x00F8)
    TArray<FPlayerDetailsDTO>                     Players;                                                      // 0x00F8(0x0010)
    TArray<FBotDetailsDTO>                        Bots;                                                         // 0x0108(0x0010)
    TArray<FTeamDetailsDTO>                       Teams;                                                        // 0x0118(0x0010)
    TArray<FRoundResultDTO>                       RoundResults;                                                 // 0x0128(0x0010)
};


// ScriptStruct  ShooterGame.RoundResultDTO
// Struct Size::0x00A0
struct FRoundResultDTO
{
    FName                                         WinningTeam;                                                  // 0x0000(0x000C)
    int32_t                                       RoundNum;                                                     // 0x000C(0x0004)
    FString                                       RoundResult;                                                  // 0x0010(0x0010)
    FString                                       RoundCeremony;                                                // 0x0020(0x0010)
    FString                                       BombPlanter;                                                  // 0x0030(0x0010)
    int32_t                                       PlantRoundTime;                                               // 0x0040(0x0004)
    FMapLocationDTO                               PlantLocation;                                                // 0x0044(0x0008)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<FPlayerLocationDTO>                    PlantPlayerLocations;                                         // 0x0050(0x0010)
    FString                                       BombDefuser;                                                  // 0x0060(0x0010)
    int32_t                                       DefuseRoundTime;                                              // 0x0070(0x0004)
    FMapLocationDTO                               DefuseLocation;                                               // 0x0074(0x0008)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    TArray<FPlayerLocationDTO>                    DefusePlayerLocations;                                        // 0x0080(0x0010)
    TArray<FPlayerStatDTO>                        PlayerStats;                                                  // 0x0090(0x0010)
};


// ScriptStruct  ShooterGame.PlayerStatDTO
// Struct Size::0x01B8
struct FPlayerStatDTO
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    TArray<FKillDetailsDTO>                       Kills;                                                        // 0x0010(0x0010)
    TArray<FPlayerRoundDamageDTOV2>               Damage;                                                       // 0x0020(0x0010)
    int32_t                                       Score;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FPlayerRoundEconomyInfoDTO                    Economy;                                                      // 0x0038(0x0040)
    FAbilityEffectDTO                             Ability;                                                      // 0x0078(0x0140)
};


// ScriptStruct  ShooterGame.AbilityEffectDTO
// Struct Size::0x0140
struct FAbilityEffectDTO
{
    TMap<FString,int32_t>                         GrenadeEffects;                                               // 0x0000(0x0050)
    TMap<FString,int32_t>                         Ability1Effects;                                              // 0x0050(0x0050)
    TMap<FString,int32_t>                         Ability2Effects;                                              // 0x00A0(0x0050)
    TMap<FString,int32_t>                         UltimateEffects;                                              // 0x00F0(0x0050)
};


// ScriptStruct  ShooterGame.PlayerRoundEconomyInfoDTO
// Struct Size::0x0040
struct FPlayerRoundEconomyInfoDTO
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    int32_t                                       LoadoutValue;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Weapon;                                                       // 0x0018(0x0010)
    FString                                       Armor;                                                        // 0x0028(0x0010)
    int32_t                                       Remaining;                                                    // 0x0038(0x0004)
    int32_t                                       Spent;                                                        // 0x003C(0x0004)
};


// ScriptStruct  ShooterGame.PlayerRoundDamageDTOV2
// Struct Size::0x0020
struct FPlayerRoundDamageDTOV2
{
    FString                                       Receiver;                                                     // 0x0000(0x0010)
    int32_t                                       Damage;                                                       // 0x0010(0x0004)
    int32_t                                       Headshots;                                                    // 0x0014(0x0004)
    int32_t                                       Bodyshots;                                                    // 0x0018(0x0004)
    int32_t                                       Legshots;                                                     // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.KillDetailsDTO
// Struct Size::0x0080
struct FKillDetailsDTO
{
    int64_t                                       GameTime;                                                     // 0x0000(0x0008)
    int32_t                                       RoundTime;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Killer;                                                       // 0x0010(0x0010)
    FString                                       Victim;                                                       // 0x0020(0x0010)
    FMapLocationDTO                               VictimLocation;                                               // 0x0030(0x0008)
    TArray<FString>                               Assistants;                                                   // 0x0038(0x0010)
    TArray<FPlayerLocationDTO>                    PlayerLocations;                                              // 0x0048(0x0010)
    FDamageInfoDTO                                FinishingDamage;                                              // 0x0058(0x0028)
};


// ScriptStruct  ShooterGame.DamageInfoDTO
// Struct Size::0x0028
struct FDamageInfoDTO
{
    FString                                       DamageType;                                                   // 0x0000(0x0010)
    FString                                       DamageItem;                                                   // 0x0010(0x0010)
    bool                                          bIsSecondaryFireMode;                                         // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ShooterGame.PlayerLocationDTO
// Struct Size::0x0020
struct FPlayerLocationDTO
{
    FMapLocationDTO                               Location;                                                     // 0x0000(0x0008)
    float                                         ViewRadians;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Subject;                                                      // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.MapLocationDTO
// Struct Size::0x0008
struct FMapLocationDTO
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.TeamDetailsDTO
// Struct Size::0x00A0
struct FTeamDetailsDTO
{
    FName                                         TeamID;                                                       // 0x0000(0x000C)
    bool                                          Won;                                                          // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int64_t                                       RoundsPlayed;                                                 // 0x0010(0x0008)
    int32_t                                       RoundsWon;                                                    // 0x0018(0x0004)
    int32_t                                       NumPoints;                                                    // 0x001C(0x0004)
    FTournamentRosterInfo                         RosterInfo;                                                   // 0x0020(0x0080)
};


// ScriptStruct  ShooterGame.TournamentRosterInfo
// Struct Size::0x0080
struct FTournamentRosterInfo
{
    FString                                       RosterID;                                                     // 0x0000(0x0010)
    TArray<FTournamentRosterMember>               Members;                                                      // 0x0010(0x0010)
    FString                                       Name;                                                         // 0x0020(0x0010)
    FString                                       Tag;                                                          // 0x0030(0x0010)
    FString                                       Icon;                                                         // 0x0040(0x0010)
    FString                                       PrimaryColor;                                                 // 0x0050(0x0010)
    FString                                       SecondaryColor;                                               // 0x0060(0x0010)
    FString                                       TertiaryColor;                                                // 0x0070(0x0010)
};


// ScriptStruct  ShooterGame.TournamentRosterMember
// Struct Size::0x0010
struct FTournamentRosterMember
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.BotDetailsDTO
// Struct Size::0x0068
struct FBotDetailsDTO
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FName                                         TeamID;                                                       // 0x0010(0x000C)
    FGuid                                         CharacterID;                                                  // 0x001C(0x0010)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FPlayerStatsDTO                               Stats;                                                        // 0x0030(0x0038)
};


// ScriptStruct  ShooterGame.PlayerStatsDTO
// Struct Size::0x0038
struct FPlayerStatsDTO
{
    int32_t                                       Score;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    int64_t                                       RoundsPlayed;                                                 // 0x0008(0x0008)
    int32_t                                       Kills;                                                        // 0x0010(0x0004)
    int32_t                                       Deaths;                                                       // 0x0014(0x0004)
    int32_t                                       Assists;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    int64_t                                       PlaytimeMillis;                                               // 0x0020(0x0008)
    FAbilityUsageDTO                              AbilityCasts;                                                 // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.AbilityUsageDTO
// Struct Size::0x0010
struct FAbilityUsageDTO
{
    int32_t                                       GrenadeCasts;                                                 // 0x0000(0x0004)
    int32_t                                       Ability1Casts;                                                // 0x0004(0x0004)
    int32_t                                       Ability2Casts;                                                // 0x0008(0x0004)
    int32_t                                       UltimateCasts;                                                // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.PlayerDetailsDTO
// Struct Size::0x00D8
struct FPlayerDetailsDTO
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       GameName;                                                     // 0x0010(0x0010)
    FString                                       TagLine;                                                      // 0x0020(0x0010)
    FName                                         TeamID;                                                       // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       PartyID;                                                      // 0x0040(0x0010)
    FGuid                                         CharacterID;                                                  // 0x0050(0x0010)
    FPlayerStatsDTO                               Stats;                                                        // 0x0060(0x0038)
    int32_t                                       CompetitiveTier;                                              // 0x0098(0x0004)
    bool                                          IsObserver;                                                   // 0x009C(0x0001)
    char                                          pa_009D[0x0003]                                               // 0x009D(0x0003)
    FGuid                                         PlayerCard;                                                   // 0x00A0(0x0010)
    FGuid                                         PlayerTitle;                                                  // 0x00B0(0x0010)
    FGuid                                         PreferredLevelBorder;                                         // 0x00C0(0x0010)
    int32_t                                       AccountLevel;                                                 // 0x00D0(0x0004)
    char                                          pa_00D4[0x0004]                                               // 0x00D4(0x0004)
};


// ScriptStruct  ShooterGame.MatchInfoDTO
// Struct Size::0x00F8
struct FMatchInfoDTO
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    FString                                       MapID;                                                        // 0x0010(0x0010)
    FString                                       GameMode;                                                     // 0x0020(0x0010)
    int32_t                                       MatchType;                                                    // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       GamePodID;                                                    // 0x0038(0x0010)
    FString                                       GameVersion;                                                  // 0x0048(0x0010)
    int64_t                                       GameLengthMillis;                                             // 0x0058(0x0008)
    int64_t                                       GameStartMillis;                                              // 0x0060(0x0008)
    FString                                       ProvisioningFlowID;                                           // 0x0068(0x0010)
    enum class EProvisioningFlowID                ProvisioningFlowEnum;                                         // 0x0078(0x0001)
    char                                          pa_0079[0x0007]                                               // 0x0079(0x0007)
    FString                                       QueueID;                                                      // 0x0080(0x0010)
    FString                                       TournamentID;                                                 // 0x0090(0x0010)
    FPremierMatchInfoDTO                          PremierMatchInfo;                                             // 0x00A0(0x0040)
    FGuid                                         SeasonID;                                                     // 0x00E0(0x0010)
    bool                                          IsCompleted;                                                  // 0x00F0(0x0001)
    bool                                          IsRanked;                                                     // 0x00F1(0x0001)
    char                                          pa_00F2[0x0006]                                               // 0x00F2(0x0006)
};


// ScriptStruct  ShooterGame.PremierMatchInfoDTO
// Struct Size::0x0040
struct FPremierMatchInfoDTO
{
    FString                                       TournamentID;                                                 // 0x0000(0x0010)
    FString                                       MatchupID;                                                    // 0x0010(0x0010)
    FGuid                                         PremierSeasonID;                                              // 0x0020(0x0010)
    FGuid                                         PremierEventID;                                               // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.FullMatchHistory
// Struct Size::0x0020
struct FFullMatchHistory
{
    TArray<FMatchDetailsDTO>                      History;                                                      // 0x0000(0x0010)
    FString                                       Subject;                                                      // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PatchNotes
// Struct Size::0x0040
struct FPatchNotes
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       BuildVersion;                                                 // 0x0010(0x0010)
    FString                                       Language;                                                     // 0x0020(0x0010)
    TArray<FTopLevelPatchNoteElement>             Content;                                                      // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.TopLevelPatchNoteElement
// Struct Size::0x0038
struct FTopLevelPatchNoteElement
{
    FString                                       Type;                                                         // 0x0000(0x0010)
    FString                                       Content;                                                      // 0x0010(0x0010)
    bool                                          Title;                                                        // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FPatchNoteListItem>                    Items;                                                        // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.PatchNoteListItem
// Struct Size::0x0020
struct FPatchNoteListItem
{
    FString                                       Type;                                                         // 0x0000(0x0010)
    FString                                       Content;                                                      // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.FriendRequestItemModel
// Struct Size::0x0030
struct FFriendRequestItemModel
{
    FString                                       PlayerName;                                                   // 0x0000(0x0010)
    FString                                       PlayerTag;                                                    // 0x0010(0x0010)
    FString                                       Subject;                                                      // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.PartyData
// Struct Size::0x0058
struct FPartyData
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       PartyLeaderID;                                                // 0x0010(0x0010)
    TArray<FPartyMemberData>                      MemberList;                                                   // 0x0020(0x0010)
    int32_t                                       PartySize;                                                    // 0x0030(0x0004)
    int32_t                                       MaxPartySize;                                                 // 0x0034(0x0004)
    enum class EAresPartyAccessibility            PartyAccessibility;                                           // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FString                                       ClientVersion;                                                // 0x0040(0x0010)
    enum class EAresTempType                      PrecisePlatformTypes;                                         // 0x0050(0x0001)
    bool                                          IsCrossPlayEnabled;                                           // 0x0051(0x0001)
    char                                          pa_0052[0x0006]                                               // 0x0052(0x0006)
};


// ScriptStruct  ShooterGame.PartyMemberData
// Struct Size::0x0028
struct FPartyMemberData
{
    FString                                       Id;                                                           // 0x0000(0x0010)
    FString                                       FullName;                                                     // 0x0010(0x0010)
    FAresSocialPresenceState                      PresenceState;                                                // 0x0020(0x0005)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  ShooterGame.AresSocialPresenceState
// Struct Size::0x0005
struct FAresSocialPresenceState
{
    enum class EAresSocialPresenceType            PresenceType;                                                 // 0x0000(0x0001)
    enum class EAresSocialStatusTemplate          StatusTemplate;                                               // 0x0001(0x0001)
    enum class EAresSocialPartyCompatibility      PartyJoinCompatibility;                                       // 0x0002(0x0001)
    enum class EAresSocialPartyCompatibility      PartyInviteCompatibility;                                     // 0x0003(0x0001)
    bool                                          bIsInParty;                                                   // 0x0004(0x0001)
};


// ScriptStruct  ShooterGame.PartyMessageItemModel
// Struct Size::0x0040
struct FPartyMessageItemModel
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       PartyID;                                                      // 0x0010(0x0010)
    FPlatformPlayer*                              Sender;                                                       // 0x0020(0x0008)
    FPlatformPlayer*                              Receiver;                                                     // 0x0028(0x0008)
    enum class EPartyMessageType                  MessageType;                                                  // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    FDateTime                                     CreatedAt;                                                    // 0x0038(0x0008)
};


// ScriptStruct  ShooterGame.MUCMessage
// Struct Size::0x00D0
struct FMUCMessage
{
    FText                                         Body;                                                         // 0x0000(0x0018)
    FString                                       Pid;                                                          // 0x0018(0x0010)
    FString                                       Time;                                                         // 0x0028(0x0010)
    FString                                       Cid;                                                          // 0x0038(0x0010)
    FString                                       Id;                                                           // 0x0048(0x0010)
    FText                                         Name;                                                         // 0x0058(0x0018)
    bool                                          Read;                                                         // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
    FString                                       GameName;                                                     // 0x0078(0x0010)
    FString                                       GameTag;                                                      // 0x0088(0x0010)
    enum class ETextChatRoomType                  MessageType;                                                  // 0x0098(0x0001)
    bool                                          UicEvent;                                                     // 0x0099(0x0001)
    bool                                          DroppedDueToThrottle;                                         // 0x009A(0x0001)
    char                                          pa_009B[0x0005]                                               // 0x009B(0x0005)
    FString                                       Type;                                                         // 0x00A0(0x0010)
    FString                                       game;                                                         // 0x00B0(0x0010)
    FString                                       game;                                                         // 0x00C0(0x0010)
};


// ScriptStruct  ShooterGame.UnifiedChatMessage
// Struct Size::0x00D8
struct FUnifiedChatMessage
{
    FText                                         SenderDisplayName;                                            // 0x0000(0x0018)
    FString                                       SenderSubject;                                                // 0x0018(0x0010)
    bool                                          SenderIsMe;                                                   // 0x0028(0x0001)
    enum class EMessageContentType                ContentType;                                                  // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    FText                                         DisplayMessage;                                               // 0x0030(0x0018)
    TArray<FMessagePart>                          MessageParts;                                                 // 0x0048(0x0010)
    TArray<FMessagePart>                          OriginalMessageParts;                                         // 0x0058(0x0010)
    FDateTime                                     Timestamp;                                                    // 0x0068(0x0008)
    enum class EAresAlliance                      SenderTeamAlliance;                                           // 0x0070(0x0001)
    enum class EChatRoomType                      RoomType;                                                     // 0x0071(0x0001)
    char                                          pa_0072[0x0002]                                               // 0x0072(0x0002)
    FName                                         Team;                                                         // 0x0074(0x000C)
    FString                                       ConversationID;                                               // 0x0080(0x0010)
    FString                                       MessageID;                                                    // 0x0090(0x0010)
    FString                                       RecipientDisplayName;                                         // 0x00A0(0x0010)
    bool                                          bRead;                                                        // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
    FString                                       OriginatingSystem;                                            // 0x00B8(0x0010)
    bool                                          bNotificationShown;                                           // 0x00C8(0x0001)
    char                                          pa_00C9[0x0007]                                               // 0x00C9(0x0007)
    FEmojiMapping*                                EmojiMapping;                                                 // 0x00D0(0x0008)
};


// ScriptStruct  ShooterGame.MessagePart
// Struct Size::0x0040
struct FMessagePart
{
    enum class EMessagePartType                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Message;                                                      // 0x0008(0x0010)
    FText                                         NotificationTarget;                                           // 0x0018(0x0018)
    FString                                       EmojiKey;                                                     // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.PremierLeaderboard
// Struct Size::0x0050
struct FPremierLeaderboard
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
    int32_t                                       StartRank;                                                    // 0x0030(0x0004)
    int32_t                                       EndRank;                                                      // 0x0034(0x0004)
    int32_t                                       Size;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<FPremierLeaderboardEntry>              Entries;                                                      // 0x0040(0x0010)
};


// ScriptStruct  ShooterGame.PremierLeaderboardEntry
// Struct Size::0x0090
struct FPremierLeaderboardEntry
{
    FString                                       RosterID;                                                     // 0x0000(0x0010)
    float                                         Score;                                                        // 0x0010(0x0004)
    enum class ETournamentPlacement               PlayoffResult;                                                // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    int32_t                                       Rank;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       RosterName;                                                   // 0x0020(0x0010)
    FString                                       Tag;                                                          // 0x0030(0x0010)
    FPremierRosterCustomization                   Customization;                                                // 0x0040(0x0040)
    int32_t                                       Wins;                                                         // 0x0080(0x0004)
    int32_t                                       Losses;                                                       // 0x0084(0x0004)
    int32_t                                       RoundWins;                                                    // 0x0088(0x0004)
    int32_t                                       RoundLosses;                                                  // 0x008C(0x0004)
};


// ScriptStruct  ShooterGame.PremierRosterCustomization
// Struct Size::0x0040
struct FPremierRosterCustomization
{
    FString                                       Icon;                                                         // 0x0000(0x0010)
    FString                                       PrimaryColor;                                                 // 0x0010(0x0010)
    FString                                       SecondaryColor;                                               // 0x0020(0x0010)
    FString                                       TertiaryColor;                                                // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.PremierEligibility
// Struct Size::0x0048
struct FPremierEligibility
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    bool                                          AccountVerificationStatus;                                    // 0x0010(0x0001)
    bool                                          LevelRequirementStatus;                                       // 0x0011(0x0001)
    bool                                          RankedPlacementCompletionStatus;                              // 0x0012(0x0001)
    char                                          pa_0013[0x0005]                                               // 0x0013(0x0005)
    FPlayerRestrictions                           PlayerRestrictions;                                           // 0x0018(0x0030)
};


// ScriptStruct  ShooterGame.PlayerRestrictions
// Struct Size::0x0030
struct FPlayerRestrictions
{
    int64_t                                       TimeUntilIneligibilityExpiresInSeconds;                       // 0x0000(0x0008)
    int64_t                                       TimeUntilDisqualificationExpiresInSeconds;                    // 0x0008(0x0008)
    FString                                       DisqualificationSeasonID;                                     // 0x0010(0x0010)
    TArray<FString>                               Sources;                                                      // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.PremierPlayerCrests
// Struct Size::0x0068
struct FPremierPlayerCrests
{
    FString                                       Puuid;                                                        // 0x0000(0x0010)
    FDateTime                                     ContenderEligibilityExpiry;                                   // 0x0010(0x0008)
    TMap<FGuid,FPremierPlayerSeason>              Seasons;                                                      // 0x0018(0x0050)
};


// ScriptStruct  ShooterGame.PremierPlayerSeason
// Struct Size::0x00C0
struct FPremierPlayerSeason
{
    FString                                       SeasonID;                                                     // 0x0000(0x0010)
    FString                                       RosterID;                                                     // 0x0010(0x0010)
    FString                                       RosterName;                                                   // 0x0020(0x0010)
    FString                                       RosterTag;                                                    // 0x0030(0x0010)
    FString                                       Conference;                                                   // 0x0040(0x0010)
    int32_t                                       Division;                                                     // 0x0050(0x0004)
    bool                                          IsProvisionalDivision;                                        // 0x0054(0x0001)
    bool                                          PromotionApplied;                                             // 0x0055(0x0001)
    char                                          pa_0056[0x0002]                                               // 0x0056(0x0002)
    int64_t                                       Points;                                                       // 0x0058(0x0008)
    TMap<enum class EPremierEventType,int64_t>    GamesPlayedByEventType;                                       // 0x0060(0x0050)
    enum class EPremierCrestType                  Crest;                                                        // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
    int64_t                                       ChampionshipPointRequirement;                                 // 0x00B8(0x0008)
};


// ScriptStruct  ShooterGame.Roster
// Struct Size::0x00F8
struct FRoster
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Tag;                                                          // 0x0010(0x0010)
    FString                                       RosterID;                                                     // 0x0020(0x0010)
    int64_t                                       Version;                                                      // 0x0030(0x0008)
    FString                                       Realm;                                                        // 0x0038(0x0010)
    TArray<FRosterMember>                         Members;                                                      // 0x0048(0x0010)
    TArray<FRosterInvite>                         Invites;                                                      // 0x0058(0x0010)
    FRosterMetadata                               Metadata;                                                     // 0x0068(0x0070)
    TArray<FRosterLock>                           Locks;                                                        // 0x00D8(0x0010)
    int64_t                                       UpdatedAt;                                                    // 0x00E8(0x0008)
    int64_t                                       CreatedAt;                                                    // 0x00F0(0x0008)
};


// ScriptStruct  ShooterGame.RosterLock
// Struct Size::0x0030
struct FRosterLock
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       ClientName;                                                   // 0x0010(0x0010)
    int64_t                                       CreatedAt;                                                    // 0x0020(0x0008)
    int64_t                                       ExpiresAt;                                                    // 0x0028(0x0008)
};


// ScriptStruct  ShooterGame.RosterMetadata
// Struct Size::0x0070
struct FRosterMetadata
{
    FRosterVerifiedMetadata                       Verified;                                                     // 0x0000(0x0030)
    FRosterUnverifiedMetadata                     Unverified;                                                   // 0x0030(0x0040)
};


// ScriptStruct  ShooterGame.RosterUnverifiedMetadata
// Struct Size::0x0040
struct FRosterUnverifiedMetadata
{
    FUnverifiedMetadataPersonalization            Personalization;                                              // 0x0000(0x0040)
};


// ScriptStruct  ShooterGame.UnverifiedMetadataPersonalization
// Struct Size::0x0040
struct FUnverifiedMetadataPersonalization
{
    FString                                       Icon;                                                         // 0x0000(0x0010)
    FString                                       PrimaryColor;                                                 // 0x0010(0x0010)
    FString                                       SecondaryColor;                                               // 0x0020(0x0010)
    FString                                       TertiaryColor;                                                // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.RosterVerifiedMetadata
// Struct Size::0x0030
struct FRosterVerifiedMetadata
{
    FRosterProductAffinityMetadata                ProductAffinity;                                              // 0x0000(0x0030)
};


// ScriptStruct  ShooterGame.RosterProductAffinityMetadata
// Struct Size::0x0030
struct FRosterProductAffinityMetadata
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       GameShardZone;                                                // 0x0010(0x0010)
    FString                                       Affinity;                                                     // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.RosterInvite
// Struct Size::0x0058
struct FRosterInvite
{
    FString                                       RosterID;                                                     // 0x0000(0x0010)
    FString                                       RosterName;                                                   // 0x0010(0x0010)
    FString                                       RosterTag;                                                    // 0x0020(0x0010)
    FString                                       Puuid;                                                        // 0x0030(0x0010)
    FString                                       SenderPuuid;                                                  // 0x0040(0x0010)
    int64_t                                       CreatedAt;                                                    // 0x0050(0x0008)
};


// ScriptStruct  ShooterGame.RosterMember
// Struct Size::0x0030
struct FRosterMember
{
    FString                                       Puuid;                                                        // 0x0000(0x0010)
    FString                                       Role;                                                         // 0x0010(0x0010)
    enum class ERosterMemberRole                  RoleEnum;                                                     // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    int64_t                                       CreatedAt;                                                    // 0x0028(0x0008)
};


// ScriptStruct  ShooterGame.TournamentOverview
// Struct Size::0x0080
struct FTournamentOverview
{
    FTournament                                   Tournament;                                                   // 0x0000(0x0050)
    TArray<FParticipant>                          Participants;                                                 // 0x0050(0x0010)
    TArray<FMatchup>                              Matchups;                                                     // 0x0060(0x0010)
    TArray<FRoundConfig>                          Rounds;                                                       // 0x0070(0x0010)
};


// ScriptStruct  ShooterGame.RoundConfig
// Struct Size::0x0020
struct FRoundConfig
{
    int32_t                                       RoundNumber;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    int64_t                                       ScheduledStartDateEpochSeconds;                               // 0x0008(0x0008)
    int64_t                                       ScheduledEndDateEpochSeconds;                                 // 0x0010(0x0008)
    int32_t                                       BestOfN;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.Matchup
// Struct Size::0x0060
struct FMatchup
{
    FString                                       MatchupID;                                                    // 0x0000(0x0010)
    int32_t                                       RoundNumber;                                                  // 0x0010(0x0004)
    enum class EMatchupBracketType                BracketType;                                                  // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    int32_t                                       WinnersNextMatchupNumber;                                     // 0x0018(0x0004)
    int32_t                                       LosersNextMatchupNumber;                                      // 0x001C(0x0004)
    int32_t                                       MatchupNumber;                                                // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FMatchupParticipant>                   Participants;                                                 // 0x0028(0x0010)
    enum class EMatchupStatus                     Status;                                                       // 0x0038(0x0001)
    bool                                          Complete;                                                     // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
    int64_t                                       ScheduledStartDateInEpochSeconds;                             // 0x0040(0x0008)
    TArray<FMatchupGame>                          Games;                                                        // 0x0048(0x0010)
    int32_t                                       BestOfN;                                                      // 0x0058(0x0004)
    bool                                          Bye;                                                          // 0x005C(0x0001)
    char                                          pa_005D[0x0003]                                               // 0x005D(0x0003)
};


// ScriptStruct  ShooterGame.MatchupGame
// Struct Size::0x00A0
struct FMatchupGame
{
    FString                                       GameId;                                                       // 0x0000(0x0010)
    int32_t                                       GameIndex;                                                    // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Metadata;                                                     // 0x0018(0x0010)
    int64_t                                       ScheduledStartDateInEpochSeconds;                             // 0x0028(0x0008)
    TArray<FMatchupGameScore>                     Scores;                                                       // 0x0030(0x0010)
    TArray<FMatchupGamePlacement>                 Placements;                                                   // 0x0040(0x0010)
    char                                          pa_0050[0x0050]                                               // 0x0050(0x0050)
};


// ScriptStruct  ShooterGame.MatchupGamePlacement
// Struct Size::0x0018
struct FMatchupGamePlacement
{
    FString                                       ParticipantID;                                                // 0x0000(0x0010)
    int32_t                                       Placement;                                                    // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.MatchupGameScore
// Struct Size::0x0018
struct FMatchupGameScore
{
    FString                                       ParticipantID;                                                // 0x0000(0x0010)
    int32_t                                       Score;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.MatchupParticipant
// Struct Size::0x0038
struct FMatchupParticipant
{
    FString                                       ParticipantID;                                                // 0x0000(0x0010)
    bool                                          IsBye;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    int64_t                                       Points;                                                       // 0x0018(0x0008)
    int64_t                                       Seed;                                                         // 0x0020(0x0008)
    int64_t                                       PreviousMatchupNumber;                                        // 0x0028(0x0008)
    enum class EMatchupParticipantOutcome         Outcome;                                                      // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  ShooterGame.Participant
// Struct Size::0x00A0
struct FParticipant
{
    FString                                       ParticipantID;                                                // 0x0000(0x0010)
    int64_t                                       Seed;                                                         // 0x0010(0x0008)
    int32_t                                       TournamentPoints;                                             // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       Metadata;                                                     // 0x0020(0x0010)
    FParticipantInfo                              ParticipantInfo;                                              // 0x0030(0x0060)
    FString                                       CurrentMatchupID;                                             // 0x0090(0x0010)
};


// ScriptStruct  ShooterGame.ParticipantInfo
// Struct Size::0x0060
struct FParticipantInfo
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Tag;                                                          // 0x0010(0x0010)
    FPremierRosterCustomization                   Customization;                                                // 0x0020(0x0040)
};


// ScriptStruct  ShooterGame.Tournament
// Struct Size::0x0050
struct FTournament
{
    FString                                       TournamentID;                                                 // 0x0000(0x0010)
    FString                                       OrganizerID;                                                  // 0x0010(0x0010)
    FString                                       Name;                                                         // 0x0020(0x0010)
    FString                                       Region;                                                       // 0x0030(0x0010)
    enum class ETournamentType                    Type;                                                         // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    int32_t                                       TournamentSize;                                               // 0x0044(0x0004)
    int32_t                                       BestOfN;                                                      // 0x0048(0x0004)
    enum class ETournamentStatus                  Status;                                                       // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
};


// ScriptStruct  ShooterGame.TournamentMatchupScores
// Struct Size::0x0070
struct FTournamentMatchupScores
{
    int32_t                                       GameIndex;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       GameID;                                                       // 0x0008(0x0010)
    int64_t                                       UpdateDate;                                                   // 0x0018(0x0008)
    TMap<FString,int64_t>                         Scores;                                                       // 0x0020(0x0050)
};


// ScriptStruct  ShooterGame.VoiceSessionParticipant
// Struct Size::0x0038
struct FVoiceSessionParticipant
{
    int32_t                                       Energy;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Id;                                                           // 0x0008(0x0010)
    bool                                          IsMuted;                                                      // 0x0018(0x0001)
    bool                                          IsSpeaking;                                                   // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    FString                                       Name;                                                         // 0x0020(0x0010)
    int32_t                                       Volume;                                                       // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.ViewTargetInfo
// Struct Size::0x0010
struct FViewTargetInfo
{
    AActor*                                       TargetActor;                                                  // 0x0000(0x0008)
    enum class EAresPlayerViewTargetMode          Mode;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Engine.ViewTargetTransitionParams
// Struct Size::0x0010
struct FViewTargetTransitionParams
{
    float                                         BlendTime;                                                    // 0x0000(0x0004)
    enum class EViewTargetBlendFunction           BlendFunction;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         BlendExp;                                                     // 0x0008(0x0004)
    char                                          bLockOutgoing;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  ShooterGame.PregameCastVote
// Struct Size::0x0030
struct FPregameCastVote
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FGuid                                         MapGuid;                                                      // 0x0010(0x0010)
    FName                                         Team;                                                         // 0x0020(0x000C)
    enum class EStepType                          StepType;                                                     // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  ShooterGame.PregameStep
// Struct Size::0x0008
struct FPregameStep
{
    int32_t                                       Team;                                                         // 0x0000(0x0004)
    enum class EStepType                          StepType;                                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  ShooterGame.TournamentMetadata
// Struct Size::0x0088
struct FTournamentMetadata
{
    FString                                       TournamentID;                                                 // 0x0000(0x0010)
    FString                                       MatchupID;                                                    // 0x0010(0x0010)
    FString                                       EventID;                                                      // 0x0020(0x0010)
    int32_t                                       TournamentsGameIndex;                                         // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TMap<FString,int64_t>                         Seeds;                                                        // 0x0038(0x0050)
};


// ScriptStruct  ShooterGame.TournamentRosterMetadata
// Struct Size::0x0070
struct FTournamentRosterMetadata
{
    TMap<FString,FTournamentRosterInfo>           RostersByPartyID;                                             // 0x0000(0x0050)
    FString                                       EventID;                                                      // 0x0050(0x0010)
    FString                                       PremierSeasonID;                                              // 0x0060(0x0010)
};


// ScriptStruct  ShooterGame.JanusEventResponse
// Struct Size::0x0038
struct FJanusEventResponse
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       Group;                                                        // 0x0010(0x0010)
    FString                                       Metadata;                                                     // 0x0020(0x0010)
    int32_t                                       Time1;                                                        // 0x0030(0x0004)
    int32_t                                       Time2;                                                        // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.AnimationCueSource
// Struct Size::0x0010
struct FAnimationCueSource
{
    int32_t                                       SequenceNumber;                                               // 0x0000(0x0004)
    FName                                         CueName;                                                      // 0x0004(0x000C)
};


// ScriptStruct  ShooterGame.ProgressModelState
// Struct Size::0x0002
struct FProgressModelState
{
    enum class EProgressModelStage                Stage;                                                        // 0x0000(0x0001)
    bool                                          bHasError;                                                    // 0x0001(0x0001)
};


// ScriptStruct  ShooterGame.NumericProgressValue
// Struct Size::0x0010
struct FNumericProgressValue
{
    int64_t                                       Current;                                                      // 0x0000(0x0008)
    int64_t                                       Maximum;                                                      // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.ScopedAnimationCueSource
// Struct Size::0x001C
struct FScopedAnimationCueSource : public FAnimationCueSource
{
    FName                                         ScopeName;                                                    // 0x0010(0x000C)
};


// ScriptStruct  ShooterGame.BracketLineLayout
// Struct Size::0x0050
struct FBracketLineLayout
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.BracketWinLoss
// Struct Size::0x0008
struct FBracketWinLoss
{
    int32_t                                       Wins;                                                         // 0x0000(0x0004)
    int32_t                                       Losses;                                                       // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.AresMenuUrl
// Struct Size::0x0060
struct FAresMenuUrl
{
    TArray<FName>                                 Url;                                                          // 0x0000(0x0010)
    TMap<FName,FWildcard>                         Parameters;                                                   // 0x0010(0x0050)
};


// ScriptStruct  ShooterGame.Wildcard
// Struct Size::0x0040
struct FWildcard
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
    UObject*                                      Object;                                                       // 0x0038(0x0008)
};


// ScriptStruct  ShooterGame.RGICommonNavBarDetails
// Struct Size::0x0078
struct FRGICommonNavBarDetails
{
    FText                                         Text;                                                         // 0x0000(0x0018)
    FTexture2D*                                   Icon;                                                         // 0x0018(0x0008)
    FAresCommonButton*                            ButtonClass;                                                  // 0x0020(0x0008)
    FString                                       NavUrl;                                                       // 0x0028(0x0010)
    FWildcard                                     Data;                                                         // 0x0038(0x0040)
};


// ScriptStruct  ShooterGame.ShellWidgetVisibilityOptions
// Struct Size::0x0009
struct FShellWidgetVisibilityOptions
{
    enum class EWidgetVisibilityOption            BreadcrumbsVisible;                                           // 0x0000(0x0001)
    enum class EWidgetVisibilityOption            PlayButtonVisible;                                            // 0x0001(0x0001)
    enum class EWidgetVisibilityOption            NavigationBarVisible;                                         // 0x0002(0x0001)
    enum class EWidgetVisibilityOption            RewardsVisibile;                                              // 0x0003(0x0001)
    enum class EWidgetVisibilityOption            ServerStatusVisible;                                          // 0x0004(0x0001)
    enum class EWidgetVisibilityOption            SocialEntranceVisible;                                        // 0x0005(0x0001)
    enum class EWidgetVisibilityOption            OptionsButtonVisible;                                         // 0x0006(0x0001)
    enum class EWidgetVisibilityOption            WalletVisible;                                                // 0x0007(0x0001)
    enum class EWidgetVisibilityOption            ShellBackgroundVisible;                                       // 0x0008(0x0001)
};


// ScriptStruct  ShooterGame.MenuStackMediaSourceParams
// Struct Size::0x0030
struct FMenuStackMediaSourceParams
{
    TSoftObjectPtr<FMediaSource>                  MediaSourceAsset;                                             // 0x0000(0x0030)
};


// ScriptStruct  ShooterGame.OrderedListModelChangeEventData
// Struct Size::0x0020
struct FOrderedListModelChangeEventData
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  ShooterGame.ListItemDisplayEntryActivatedData
// Struct Size::0x0048
struct FListItemDisplayEntryActivatedData
{
    int32_t                                       ListIndex;                                                    // 0x0000(0x0004)
    enum class EListItemDisplayEntryActivationTypeActivationType;                                               // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FWildcard                                     Context;                                                      // 0x0008(0x0040)
};


// ScriptStruct  ShooterGame.ListItemDisplayEntryActivatedEventData
// Struct Size::0x0088
struct FListItemDisplayEntryActivatedEventData : public FListItemDisplayEntryActivatedData
{
    FWildcard                                     ListItemData;                                                 // 0x0048(0x0040)
};


// ScriptStruct  ShooterGame.IndexRange
// Struct Size::0x0008
struct FIndexRange
{
    int32_t                                       FirstIndex;                                                   // 0x0000(0x0004)
    int32_t                                       LastIndex;                                                    // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.SimpleSectionHeadersListModelBase
// Struct Size::0x0008
struct FSimpleSectionHeadersListModelBase
{
    enum class ESimpleSectionHeadersListModelBase LocationType;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Index;                                                        // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.SimpleSectionHeadersListModelBase
// Struct Size::0x0048
struct FSimpleSectionHeadersListModelBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FWildcard                                     HeaderData;                                                   // 0x0008(0x0040)
};


// ScriptStruct  ShooterGame.CrosshairSettings
// Struct Size::0x01B0
struct FCrosshairSettings
{
    FLineCrosshairSettings                        Primary;                                                      // 0x0000(0x0080)
    FLineCrosshairSettings                        ADS;                                                          // 0x0080(0x0080)
    FLineCrosshairSettings                        FocusMode;                                                    // 0x0100(0x0080)
    FSniperCrosshairSettings                      Sniper;                                                       // 0x0180(0x0018)
    bool                                          bUsePrimaryCrosshairForADS;                                   // 0x0198(0x0001)
    bool                                          bUsePrimaryCrosshairForFocusMode;                             // 0x0199(0x0001)
    bool                                          bUseCustomCrosshairOnAllPrimary;                              // 0x019A(0x0001)
    bool                                          bUseAdvancedOptions;                                          // 0x019B(0x0001)
    bool                                          bScaleToResolution;                                           // 0x019C(0x0001)
    char                                          pa_019D[0x0003]                                               // 0x019D(0x0003)
    FString                                       ProfileName;                                                  // 0x01A0(0x0010)
};


// ScriptStruct  ShooterGame.SniperCrosshairSettings
// Struct Size::0x0018
struct FSniperCrosshairSettings
{
    FColor                                        CenterDotColor;                                               // 0x0000(0x0004)
    FColor                                        CenterDotColorCustom;                                         // 0x0004(0x0004)
    bool                                          bUseCustomCenterDotColor;                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         CenterDotSize;                                                // 0x000C(0x0004)
    float                                         CenterDotOpacity;                                             // 0x0010(0x0004)
    bool                                          bDisplayCenterDot;                                            // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  ShooterGame.LineCrosshairSettings
// Struct Size::0x0080
struct FLineCrosshairSettings
{
    FColor                                        Color;                                                        // 0x0000(0x0004)
    FColor                                        ColorCustom;                                                  // 0x0004(0x0004)
    bool                                          bUseCustomColor;                                              // 0x0008(0x0001)
    bool                                          bHasOutline;                                                  // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    float                                         OutlineThickness;                                             // 0x000C(0x0004)
    FColor                                        OutlineColor;                                                 // 0x0010(0x0004)
    float                                         OutlineOpacity;                                               // 0x0014(0x0004)
    float                                         CenterDotSize;                                                // 0x0018(0x0004)
    float                                         CenterDotOpacity;                                             // 0x001C(0x0004)
    bool                                          bDisplayCenterDot;                                            // 0x0020(0x0001)
    bool                                          bFadeCrosshairWithFiringError;                                // 0x0021(0x0001)
    bool                                          bShowSpectatedPlayerCrosshair;                                // 0x0022(0x0001)
    bool                                          bHideCrosshair;                                               // 0x0023(0x0001)
    bool                                          bTouchCrosshairHighlightEnabled;                              // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FColor                                        TouchCrosshairHighlightColor;                                 // 0x0028(0x0004)
    bool                                          bFixMinErrorAcrossWeapons;                                    // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    FLineCrosshairSectionSettings                 InnerLines;                                                   // 0x0030(0x0028)
    FLineCrosshairSectionSettings                 OuterLines;                                                   // 0x0058(0x0028)
};


// ScriptStruct  ShooterGame.LineCrosshairSectionSettings
// Struct Size::0x0028
struct FLineCrosshairSectionSettings
{
    float                                         LineThickness;                                                // 0x0000(0x0004)
    float                                         LineLength;                                                   // 0x0004(0x0004)
    float                                         LineLengthVertical;                                           // 0x0008(0x0004)
    bool                                          bAllowVertScaling;                                            // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         LineOffset;                                                   // 0x0010(0x0004)
    bool                                          bShowMovementError;                                           // 0x0014(0x0001)
    bool                                          bShowShootingError;                                           // 0x0015(0x0001)
    bool                                          bShowMinError;                                                // 0x0016(0x0001)
    char                                          pa_0017[0x0001]                                               // 0x0017(0x0001)
    float                                         Opacity;                                                      // 0x0018(0x0004)
    bool                                          bShowLines;                                                   // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         FiringErrorScale;                                             // 0x0020(0x0004)
    float                                         MovementErrorScale;                                           // 0x0024(0x0004)
};


// ScriptStruct  UMG.UserWidgetPool
// Struct Size::0x0080
struct FUserWidgetPool
{
    TArray<FUserWidget*>                          ActiveWidgets;                                                // 0x0000(0x0010)
    TArray<FUserWidget*>                          InactiveWidgets;                                              // 0x0010(0x0010)
    char                                          pa_0020[0x0060]                                               // 0x0020(0x0060)
};


// ScriptStruct  ShooterGame.UserActionDisplayInfo
// Struct Size::0x0048
struct FUserActionDisplayInfo
{
    FText                                         Text;                                                         // 0x0000(0x0018)
    FText                                         Description;                                                  // 0x0018(0x0018)
    FTexture2D*                                   IconTexture;                                                  // 0x0030(0x0008)
    TArray<FName>                                 Styles;                                                       // 0x0038(0x0010)
};


// ScriptStruct  ShooterGame.TournamentStage
// Struct Size::0x0038
struct FTournamentStage
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Slug;                                                         // 0x0010(0x0010)
    TArray<FTournamentSection>                    Sections;                                                     // 0x0020(0x0010)
    int32_t                                       Index;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.TournamentSection
// Struct Size::0x0028
struct FTournamentSection
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    int32_t                                       Index;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ShooterGame.CurrentTeamViewState
// Struct Size::0x0038
struct FCurrentTeamViewState
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
    FEsportsWebImageLoader*                       Logo;                                                         // 0x0030(0x0008)
};


// ScriptStruct  ShooterGame.TeamsListByRegionMap
// Struct Size::0x0050
struct FTeamsListByRegionMap
{
    TMap<enum class EVCTRegion,FTeamArray>        RegionToTeamsListMap;                                         // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.TeamArray
// Struct Size::0x0010
struct FTeamArray
{
    TArray<FTeamModel*>                           Teams;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.TeamRecord
// Struct Size::0x000C
struct FTeamRecord
{
    int32_t                                       Wins;                                                         // 0x0000(0x0004)
    int32_t                                       Losses;                                                       // 0x0004(0x0004)
    int32_t                                       Ties;                                                         // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.RestrictionInfoBoxContent
// Struct Size::0x0010
struct FRestrictionInfoBoxContent
{
    enum class EAresPlayerRestrictionType         RestrictionType;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FDateTime                                     ExpiryTime;                                                   // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.TickerStatus
// Struct Size::0x0030
struct FTickerStatus
{
    enum class ETickerSeverity                    Severity;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Title;                                                        // 0x0008(0x0010)
    FString                                       Message;                                                      // 0x0018(0x0010)
    int32_t                                       Id;                                                           // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ChaosSolverEngine.ChaosPhysicsCollisionInfo
// Struct Size::0x0070
struct FChaosPhysicsCollisionInfo
{
    UPrimitiveComponent*                          Component;                                                    // 0x0000(0x0008)
    UPrimitiveComponent*                          OtherComponent;                                               // 0x0008(0x0008)
    FVector                                       Location;                                                     // 0x0010(0x000C)
    FVector                                       Normal;                                                       // 0x001C(0x000C)
    FVector                                       AccumulatedImpulse;                                           // 0x0028(0x000C)
    FVector                                       Velocity;                                                     // 0x0034(0x000C)
    FVector                                       OtherVelocity;                                                // 0x0040(0x000C)
    FVector                                       AngularVelocity;                                              // 0x004C(0x000C)
    FVector                                       OtherAngularVelocity;                                         // 0x0058(0x000C)
    float                                         Mass;                                                         // 0x0064(0x0004)
    float                                         OtherMass;                                                    // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.ChaosCollisionEventData
// Struct Size::0x0058
struct FChaosCollisionEventData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Normal;                                                       // 0x000C(0x000C)
    FVector                                       Velocity1;                                                    // 0x0018(0x000C)
    FVector                                       Velocity2;                                                    // 0x0024(0x000C)
    float                                         Mass1;                                                        // 0x0030(0x0004)
    float                                         Mass2;                                                        // 0x0034(0x0004)
    FVector                                       Impulse;                                                      // 0x0038(0x000C)
    char                                          pa_0044[0x0014]                                               // 0x0044(0x0014)
};


// ScriptStruct  GeometryCollectionEngine.ChaosBreakingEventData
// Struct Size::0x001C
struct FChaosBreakingEventData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    float                                         Mass;                                                         // 0x0018(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.ChaosTrailingEventData
// Struct Size::0x002C
struct FChaosTrailingEventData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    FVector                                       AngularVelocity;                                              // 0x0018(0x000C)
    float                                         Mass;                                                         // 0x0024(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x0028(0x0004)
};


// ScriptStruct  ChaosSolverEngine.ChaosBreakEvent
// Struct Size::0x0030
struct FChaosBreakEvent
{
    UPrimitiveComponent*                          Component;                                                    // 0x0000(0x0008)
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FVector                                       Velocity;                                                     // 0x0014(0x000C)
    FVector                                       AngularVelocity;                                              // 0x0020(0x000C)
    float                                         Mass;                                                         // 0x002C(0x0004)
};


// ScriptStruct  Engine.WalkableSlopeOverride
// Struct Size::0x0010
struct FWalkableSlopeOverride
{
    enum class EWalkableSlopeBehavior             WalkableSlopeBehavior;                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         WalkableSlopeAngle;                                           // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  PhysicsCore.BodyInstanceCore
// Struct Size::0x0018
struct FBodyInstanceCore
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    char                                          bSimulatePhysics;                                             // 0x0010(0x0001)
    char                                          bOverrideMass;                                                // 0x0010(0x0001)
    char                                          bEnableGravity;                                               // 0x0010(0x0001)
    char                                          bAutoWeld;                                                    // 0x0010(0x0001)
    char                                          bStartAwake;                                                  // 0x0010(0x0001)
    char                                          bGenerateWakeEvents;                                          // 0x0010(0x0001)
    char                                          bUpdateMassWhenScaleChanges;                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Engine.BodyInstance
// Struct Size::0x0160
struct FBodyInstance : public FBodyInstanceCore
{
    char                                          pa_0018[0x0006]                                               // 0x0018(0x0006)
    enum class ECollisionChannel                  ObjectType;                                                   // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    enum class ECollisionEnabled                  CollisionEnabled;                                             // 0x0020(0x0001)
    char                                          pa_0021[0x0038]                                               // 0x0021(0x0038)
    enum class ESleepFamily                       SleepFamily;                                                  // 0x0059(0x0001)
    enum class EDOFMode                           DOFMode;                                                      // 0x005A(0x0001)
    char                                          bUseCCD;                                                      // 0x005B(0x0001)
    char                                          bIgnoreAnalyticCollisions;                                    // 0x005B(0x0001)
    char                                          bNotifyRigidBodyCollision;                                    // 0x005B(0x0001)
    char                                          bLockTranslation;                                             // 0x005B(0x0001)
    char                                          bLockRotation;                                                // 0x005B(0x0001)
    char                                          bLockXTranslation;                                            // 0x005B(0x0001)
    char                                          bLockYTranslation;                                            // 0x005B(0x0001)
    char                                          bLockZTranslation;                                            // 0x005C(0x0001)
    char                                          bLockXRotation;                                               // 0x005C(0x0001)
    char                                          bLockYRotation;                                               // 0x005C(0x0001)
    char                                          bLockZRotation;                                               // 0x005C(0x0001)
    char                                          bOverrideMaxAngularVelocity;                                  // 0x005C(0x0001)
    char                                          bOverrideMaxDepenetrationVelocity;                            // 0x005C(0x0001)
    char                                          bOverrideWalkableSlopeOnInstance;                             // 0x005D(0x0001)
    char                                          bInterpolateWhenSubStepping;                                  // 0x005D(0x0001)
    char                                          pa_005E[0x000E]                                               // 0x005E(0x000E)
    FName                                         CollisionProfileName;                                         // 0x006C(0x000C)
    char                                          PositionSolverIterationCount;                                 // 0x0078(0x0001)
    char                                          VelocitySolverIterationCount;                                 // 0x0079(0x0001)
    char                                          pa_007A[0x0006]                                               // 0x007A(0x0006)
    FCollisionResponse                            CollisionResponses;                                           // 0x0080(0x0030)
    float                                         MaxDepenetrationVelocity;                                     // 0x00B0(0x0004)
    float                                         MassInKgOverride;                                             // 0x00B4(0x0004)
    char                                          pa_00B8[0x0008]                                               // 0x00B8(0x0008)
    float                                         LinearDamping;                                                // 0x00C0(0x0004)
    float                                         AngularDamping;                                               // 0x00C4(0x0004)
    FVector                                       CustomDOFPlaneNormal;                                         // 0x00C8(0x000C)
    FVector                                       COMNudge;                                                     // 0x00D4(0x000C)
    float                                         MassScale;                                                    // 0x00E0(0x0004)
    FVector                                       InertiaTensorScale;                                           // 0x00E4(0x000C)
    char                                          pa_00F0[0x0010]                                               // 0x00F0(0x0010)
    FWalkableSlopeOverride                        WalkableSlopeOverride;                                        // 0x0100(0x0010)
    FPhysicalMaterial*                            PhysMaterialOverride;                                         // 0x0110(0x0008)
    float                                         MaxAngularVelocity;                                           // 0x0118(0x0004)
    float                                         CustomSleepThresholdMultiplier;                               // 0x011C(0x0004)
    float                                         StabilizationThresholdMultiplier;                             // 0x0120(0x0004)
    float                                         PhysicsBlendWeight;                                           // 0x0124(0x0004)
    char                                          pa_0128[0x0038]                                               // 0x0128(0x0038)
};


// ScriptStruct  Engine.CollisionResponse
// Struct Size::0x0030
struct FCollisionResponse
{
    FCollisionResponseContainer                   ResponseToChannels;                                           // 0x0000(0x0020)
    TArray<FResponseChannel>                      ResponseArray;                                                // 0x0020(0x0010)
};


// ScriptStruct  Engine.ResponseChannel
// Struct Size::0x0010
struct FResponseChannel
{
    FName                                         Channel;                                                      // 0x0000(0x000C)
    enum class ECollisionResponse                 Response;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.CollisionResponseContainer
// Struct Size::0x0020
struct FCollisionResponseContainer
{
    enum class ECollisionResponse                 WorldStatic;                                                  // 0x0000(0x0001)
    enum class ECollisionResponse                 WorldDynamic;                                                 // 0x0001(0x0001)
    enum class ECollisionResponse                 Pawn;                                                         // 0x0002(0x0001)
    enum class ECollisionResponse                 Visibility;                                                   // 0x0003(0x0001)
    enum class ECollisionResponse                 Camera;                                                       // 0x0004(0x0001)
    enum class ECollisionResponse                 PhysicsBody;                                                  // 0x0005(0x0001)
    enum class ECollisionResponse                 Vehicle;                                                      // 0x0006(0x0001)
    enum class ECollisionResponse                 Destructible;                                                 // 0x0007(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel1;                                          // 0x0008(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel2;                                          // 0x0009(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel3;                                          // 0x000A(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel4;                                          // 0x000B(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel5;                                          // 0x000C(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel6;                                          // 0x000D(0x0001)
    enum class ECollisionResponse                 GameTraceChannel1;                                            // 0x000E(0x0001)
    enum class ECollisionResponse                 GameTraceChannel2;                                            // 0x000F(0x0001)
    enum class ECollisionResponse                 GameTraceChannel3;                                            // 0x0010(0x0001)
    enum class ECollisionResponse                 GameTraceChannel4;                                            // 0x0011(0x0001)
    enum class ECollisionResponse                 GameTraceChannel5;                                            // 0x0012(0x0001)
    enum class ECollisionResponse                 GameTraceChannel6;                                            // 0x0013(0x0001)
    enum class ECollisionResponse                 GameTraceChannel7;                                            // 0x0014(0x0001)
    enum class ECollisionResponse                 GameTraceChannel8;                                            // 0x0015(0x0001)
    enum class ECollisionResponse                 GameTraceChannel9;                                            // 0x0016(0x0001)
    enum class ECollisionResponse                 GameTraceChannel10;                                           // 0x0017(0x0001)
    enum class ECollisionResponse                 GameTraceChannel11;                                           // 0x0018(0x0001)
    enum class ECollisionResponse                 GameTraceChannel12;                                           // 0x0019(0x0001)
    enum class ECollisionResponse                 GameTraceChannel13;                                           // 0x001A(0x0001)
    enum class ECollisionResponse                 GameTraceChannel14;                                           // 0x001B(0x0001)
    enum class ECollisionResponse                 GameTraceChannel15;                                           // 0x001C(0x0001)
    enum class ECollisionResponse                 GameTraceChannel16;                                           // 0x001D(0x0001)
    enum class ECollisionResponse                 GameTraceChannel17;                                           // 0x001E(0x0001)
    enum class ECollisionResponse                 GameTraceChannel18;                                           // 0x001F(0x0001)
};


// ScriptStruct  Engine.CustomPrimitiveData
// Struct Size::0x0010
struct FCustomPrimitiveData
{
    TArray<float>                                 Data;                                                         // 0x0000(0x0010)
};


// ScriptStruct  Engine.LightingChannels
// Struct Size::0x0001
struct FLightingChannels
{
    char                                          bChannel0;                                                    // 0x0000(0x0001)
    char                                          bChannel1;                                                    // 0x0000(0x0001)
    char                                          bChannel2;                                                    // 0x0000(0x0001)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionRepData
// Struct Size::0x0018
struct FGeometryCollectionRepData
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  GeometryCollectionEngine.GeomComponentCacheParameters
// Struct Size::0x0050
struct FGeomComponentCacheParameters
{
    enum class EGeometryCollectionCacheType       CacheMode;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FGeometryCollectionCache*                     TargetCache;                                                  // 0x0008(0x0008)
    float                                         ReverseCacheBeginTime;                                        // 0x0010(0x0004)
    bool                                          SaveCollisionData;                                            // 0x0014(0x0001)
    bool                                          DoGenerateCollisionData;                                      // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    int32_t                                       CollisionDataSizeMax;                                         // 0x0018(0x0004)
    bool                                          DoCollisionDataSpatialHash;                                   // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         CollisionDataSpatialHashRadius;                               // 0x0020(0x0004)
    int32_t                                       MaxCollisionPerCell;                                          // 0x0024(0x0004)
    bool                                          SaveBreakingData;                                             // 0x0028(0x0001)
    bool                                          DoGenerateBreakingData;                                       // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    int32_t                                       BreakingDataSizeMax;                                          // 0x002C(0x0004)
    bool                                          DoBreakingDataSpatialHash;                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         BreakingDataSpatialHashRadius;                                // 0x0034(0x0004)
    int32_t                                       MaxBreakingPerCell;                                           // 0x0038(0x0004)
    bool                                          SaveTrailingData;                                             // 0x003C(0x0001)
    bool                                          DoGenerateTrailingData;                                       // 0x003D(0x0001)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
    int32_t                                       TrailingDataSizeMax;                                          // 0x0040(0x0004)
    float                                         TrailingMinSpeedThreshold;                                    // 0x0044(0x0004)
    float                                         TrailingMinVolumeThreshold;                                   // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  AISpatialAwareness.InfluenceSourceRegistrationData
// Struct Size::0x00E0
struct FInfluenceSourceRegistrationData
{
    FPropagationParameters                        PropagationParameters;                                        // 0x0000(0x0010)
    enum class EPropagationModifierTag            PropagationTag;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FInfluenceIdentifiers                         InfluenceIdentifiers;                                         // 0x0018(0x0028)
    TMap<int32_t,FStampedValue>                   StampedNodes;                                                 // 0x0040(0x0050)
    TMap<int32_t,float>                           InitialStampedNodeValues;                                     // 0x0090(0x0050)
};


// ScriptStruct  AISpatialAwareness.StampedValue
// Struct Size::0x0018
struct FStampedValue
{
    TArray<int32_t>                               StampedLayers;                                                // 0x0000(0x0010)
    float                                         StampedValue;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  AISpatialAwareness.InfluenceIdentifiers
// Struct Size::0x0028
struct FInfluenceIdentifiers
{
    TArray<enum class EInfluenceSourceTag>        SourceTags;                                                   // 0x0000(0x0010)
    AActor*                                       SourceActor;                                                  // 0x0010(0x0008)
    enum class EInfluenceLayerTag                 LayerTag;                                                     // 0x0018(0x0001)
    enum class ELayerBlockBehavior                LayerBlockBehavior;                                           // 0x0019(0x0001)
    char                                          pa_001A[0x000E]                                               // 0x001A(0x000E)
};


// ScriptStruct  AISpatialAwareness.PropagationParameters
// Struct Size::0x0010
struct FPropagationParameters
{
    float                                         MovementSpeed;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FCurveFloat*                                  ValueModulationCurve;                                         // 0x0008(0x0008)
};


// ScriptStruct  ApexDestruction.DestructibleChunkParameters
// Struct Size::0x0004
struct FDestructibleChunkParameters
{
    bool                                          bIsSupportChunk;                                              // 0x0000(0x0001)
    bool                                          bDoNotFracture;                                               // 0x0001(0x0001)
    bool                                          bDoNotDamage;                                                 // 0x0002(0x0001)
    bool                                          bDoNotCrumble;                                                // 0x0003(0x0001)
};


// ScriptStruct  ApexDestruction.FractureMaterial
// Struct Size::0x0024
struct FFractureMaterial
{
    FVector2D                                     UVScale;                                                      // 0x0000(0x0008)
    FVector2D                                     UVOffset;                                                     // 0x0008(0x0008)
    FVector                                       Tangent;                                                      // 0x0010(0x000C)
    float                                         UAngle;                                                       // 0x001C(0x0004)
    int32_t                                       InteriorElementIndex;                                         // 0x0020(0x0004)
};


// ScriptStruct  ApexDestruction.DestructibleParameters
// Struct Size::0x0088
struct FDestructibleParameters
{
    FDestructibleDamageParameters                 DamageParameters;                                             // 0x0000(0x001C)
    FDestructibleDebrisParameters                 DebrisParameters;                                             // 0x001C(0x002C)
    FDestructibleAdvancedParameters               AdvancedParameters;                                           // 0x0048(0x0010)
    FDestructibleSpecialHierarchyDepths           SpecialHierarchyDepths;                                       // 0x0058(0x0014)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    TArray<FDestructibleDepthParameters>          DepthParameters;                                              // 0x0070(0x0010)
    FDestructibleParametersFlag                   Flags;                                                        // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  ApexDestruction.DestructibleParametersFlag
// Struct Size::0x0004
struct FDestructibleParametersFlag
{
    char                                          bAccumulateDamage;                                            // 0x0000(0x0001)
    char                                          bAssetDefinedSupport;                                         // 0x0000(0x0001)
    char                                          bWorldSupport;                                                // 0x0000(0x0001)
    char                                          bDebrisTimeout;                                               // 0x0000(0x0001)
    char                                          bDebrisMaxSeparation;                                         // 0x0000(0x0001)
    char                                          bCrumbleSmallestChunks;                                       // 0x0000(0x0001)
    char                                          bAccurateRaycasts;                                            // 0x0000(0x0001)
    char                                          bUseValidBounds;                                              // 0x0000(0x0001)
    char                                          bFormExtendedStructures;                                      // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
};


// ScriptStruct  ApexDestruction.DestructibleDepthParameters
// Struct Size::0x0001
struct FDestructibleDepthParameters
{
    enum class EImpactDamageOverride              ImpactDamageOverride;                                         // 0x0000(0x0001)
};


// ScriptStruct  ApexDestruction.DestructibleSpecialHierarchyDepths
// Struct Size::0x0014
struct FDestructibleSpecialHierarchyDepths
{
    int32_t                                       SupportDepth;                                                 // 0x0000(0x0004)
    int32_t                                       MinimumFractureDepth;                                         // 0x0004(0x0004)
    bool                                          bEnableDebris;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       DebrisDepth;                                                  // 0x000C(0x0004)
    int32_t                                       EssentialDepth;                                               // 0x0010(0x0004)
};


// ScriptStruct  ApexDestruction.DestructibleAdvancedParameters
// Struct Size::0x0010
struct FDestructibleAdvancedParameters
{
    float                                         DamageCap;                                                    // 0x0000(0x0004)
    float                                         ImpactVelocityThreshold;                                      // 0x0004(0x0004)
    float                                         MaxChunkSpeed;                                                // 0x0008(0x0004)
    float                                         FractureImpulseScale;                                         // 0x000C(0x0004)
};


// ScriptStruct  ApexDestruction.DestructibleDebrisParameters
// Struct Size::0x002C
struct FDestructibleDebrisParameters
{
    float                                         DebrisLifetimeMin;                                            // 0x0000(0x0004)
    float                                         DebrisLifetimeMax;                                            // 0x0004(0x0004)
    float                                         DebrisMaxSeparationMin;                                       // 0x0008(0x0004)
    float                                         DebrisMaxSeparationMax;                                       // 0x000C(0x0004)
    FBox                                          ValidBounds;                                                  // 0x0010(0x001C)
};


// ScriptStruct  ApexDestruction.DestructibleDamageParameters
// Struct Size::0x001C
struct FDestructibleDamageParameters
{
    float                                         DamageThreshold;                                              // 0x0000(0x0004)
    float                                         DamageSpread;                                                 // 0x0004(0x0004)
    bool                                          bEnableImpactDamage;                                          // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         ImpactDamage;                                                 // 0x000C(0x0004)
    int32_t                                       DefaultImpactDamageDepth;                                     // 0x0010(0x0004)
    bool                                          bCustomImpactResistance;                                      // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         ImpactResistance;                                             // 0x0018(0x0004)
};


// ScriptStruct  GameplayAbilities.NetSerializeScriptStructCache
// Struct Size::0x0010
struct FNetSerializeScriptStructCache
{
    TArray<FScriptStruct*>                        ScriptStructs;                                                // 0x0000(0x0010)
};


// ScriptStruct  Engine.TableRowBase
// Struct Size::0x0008
struct FTableRowBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  GameplayAbilities.AttributeMetaData
// Struct Size::0x0030
struct FAttributeMetaData : public FTableRowBase
{
    float                                         BaseValue;                                                    // 0x0008(0x0004)
    float                                         MinValue;                                                     // 0x000C(0x0004)
    float                                         MaxValue;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       DerivedAttributeInfo;                                         // 0x0018(0x0010)
    bool                                          bCanStack;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayAttributeData
// Struct Size::0x0010
struct FGameplayAttributeData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    float                                         BaseValue;                                                    // 0x0008(0x0004)
    float                                         CurrentValue;                                                 // 0x000C(0x0004)
};


// ScriptStruct  GameplayAbilities.AbilityTriggerData
// Struct Size::0x0010
struct FAbilityTriggerData
{
    FGameplayTag                                  TriggerTag;                                                   // 0x0000(0x000C)
    enum class EGameplayAbilityTriggerSource      TriggerSource;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityBindInfo
// Struct Size::0x0010
struct FGameplayAbilityBindInfo
{
    enum class EGameplayAbilityInputBinds         Command;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FGameplayAbility*                             GameplayAbilityClass;                                         // 0x0008(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayTargetDataFilter
// Struct Size::0x0020
struct FGameplayTargetDataFilter
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AActor*                                       SelfActor;                                                    // 0x0008(0x0008)
    AActor*                                       RequiredActorClass;                                           // 0x0010(0x0008)
    enum class ETargetDataFilterSelf              SelfFilter;                                                   // 0x0018(0x0001)
    bool                                          bReverseFilter;                                               // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetData
// Struct Size::0x0008
struct FGameplayAbilityTargetData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetData
// Struct Size::0x00A0
struct FGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    FHitResult                                    HitResult;                                                    // 0x0008(0x0090)
    bool                                          bHitReplaced;                                                 // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetData
// Struct Size::0x00A0
struct FGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FGameplayAbilityTargetingLocationInfo         SourceLocation;                                               // 0x0010(0x0080)
    TArray<TWeakObjectPtr<AActor>>                TargetActorArray;                                             // 0x0090(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetingLocationInfo
// Struct Size::0x0080
struct FGameplayAbilityTargetingLocationInfo
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    enum class EGameplayAbilityTargetingLocationTypeLocationType;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    LiteralTransform;                                             // 0x0020(0x0030)
    AActor*                                       SourceActor;                                                  // 0x0050(0x0008)
    UMeshComponent*                               SourceComponent;                                              // 0x0058(0x0008)
    FGameplayAbility*                             SourceAbility;                                                // 0x0060(0x0008)
    FName                                         SourceSocketName;                                             // 0x0068(0x000C)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetData
// Struct Size::0x0110
struct FGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FGameplayAbilityTargetingLocationInfo         SourceLocation;                                               // 0x0010(0x0080)
    FGameplayAbilityTargetingLocationInfo         TargetLocation;                                               // 0x0090(0x0080)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpecHandleAndPredictionKey
// Struct Size::0x0008
struct FGameplayAbilitySpecHandleAndPredictionKey
{
    FGameplayAbilitySpecHandle                    AbilityHandle;                                                // 0x0000(0x0004)
    int32_t                                       PredictionKeyAtCreation;                                      // 0x0004(0x0004)
};


// ScriptStruct  GameplayAbilities.AbilityTaskDebugMessage
// Struct Size::0x0018
struct FAbilityTaskDebugMessage
{
    FGameplayTask*                                FromTask;                                                     // 0x0000(0x0008)
    FString                                       Message;                                                      // 0x0008(0x0010)
};


// ScriptStruct  GameplayAbilities.AbilityEndedData
// Struct Size::0x0010
struct FAbilityEndedData
{
    FGameplayAbility*                             AbilityThatEnded;                                             // 0x0000(0x0008)
    FGameplayAbilitySpecHandle                    AbilitySpecHandle;                                            // 0x0008(0x0004)
    bool                                          bReplicateEndAbility;                                         // 0x000C(0x0001)
    bool                                          bWasCancelled;                                                // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityActorInfo
// Struct Size::0x0050
struct FGameplayAbilityActorInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TWeakObjectPtr<AActor>                        OwnerActor;                                                   // 0x0008(0x0008)
    TWeakObjectPtr<AActor>                        AvatarActor;                                                  // 0x0010(0x0008)
    TWeakObjectPtr<FPlayerController>             PlayerController;                                             // 0x0018(0x0008)
    TWeakObjectPtr<UAbilitySystemComponent>       AbilitySystemComponent;                                       // 0x0020(0x0008)
    TWeakObjectPtr<FSkeletalMeshComponent>        SkeletalMeshComponent;                                        // 0x0028(0x0008)
    TWeakObjectPtr<FAnimInstance>                 AnimInstance;                                                 // 0x0030(0x0008)
    TWeakObjectPtr<FMovementComponent>            MovementComponent;                                            // 0x0038(0x0008)
    FName                                         AffectedAnimInstanceTag;                                      // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  GameplayAbilities.WorldReticleParameters
// Struct Size::0x000C
struct FWorldReticleParameters
{
    FVector                                       AOEScale;                                                     // 0x0000(0x000C)
};


// ScriptStruct  GameplayAbilities.PreallocationInfo
// Struct Size::0x0068
struct FPreallocationInfo
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
    TArray<FGameplayCueNotify*>                   ClassesNeedingPreallocation;                                  // 0x0050(0x0010)
    char                                          pa_0060[0x0008]                                               // 0x0060(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCuePendingExecute
// Struct Size::0x0180
struct FGameplayCuePendingExecute
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    FPredictionKey                                PredictionKey;                                                // 0x0020(0x0010)
    enum class EGameplayCuePayloadType            PayloadType;                                                  // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    UAbilitySystemComponent*                      OwningComponent;                                              // 0x0038(0x0008)
    FGameplayEffectSpecForRPC                     FromSpec;                                                     // 0x0040(0x0078)
    FGameplayCueParameters                        CueParameters;                                                // 0x00B8(0x00C8)
};


// ScriptStruct  GameplayAbilities.MinimalGameplayCueReplicationProxy
// Struct Size::0x0310
struct FMinimalGameplayCueReplicationProxy
{
    char                                          pa_0000[0x0300]                                               // 0x0000(0x0300)
    UAbilitySystemComponent*                      Owner;                                                        // 0x0300(0x0008)
    char                                          pa_0308[0x0008]                                               // 0x0308(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCueTag
// Struct Size::0x000C
struct FGameplayCueTag
{
    FGameplayTag                                  GameplayCueTag;                                               // 0x0000(0x000C)
};


// ScriptStruct  GameplayAbilities.GameplayCueObjectLibrary
// Struct Size::0x0050
struct FGameplayCueObjectLibrary
{
    TArray<FString>                               Paths;                                                        // 0x0000(0x0010)
    char                                          pa_0010[0x0020]                                               // 0x0010(0x0020)
    FObjectLibrary*                               ActorObjectLibrary;                                           // 0x0030(0x0008)
    FObjectLibrary*                               StaticObjectLibrary;                                          // 0x0038(0x0008)
    FGameplayCueSet*                              CueSet;                                                       // 0x0040(0x0008)
    char                                          pa_0048[0x0004]                                               // 0x0048(0x0004)
    bool                                          bShouldSyncScan;                                              // 0x004C(0x0001)
    bool                                          bShouldAsyncLoad;                                             // 0x004D(0x0001)
    bool                                          bShouldSyncLoad;                                              // 0x004E(0x0001)
    bool                                          bHasBeenInitialized;                                          // 0x004F(0x0001)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotifyData
// Struct Size::0x0040
struct FGameplayCueNotifyData
{
    FGameplayTag                                  GameplayCueTag;                                               // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FSoftObjectPath                               GameplayCueNotifyObj;                                         // 0x0010(0x0020)
    UObject*                                      LoadedGameplayCueClass;                                       // 0x0030(0x0008)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCueTranslationManager
// Struct Size::0x0080
struct FGameplayCueTranslationManager
{
    TArray<FGameplayCueTranslatorNode>            TranslationLUT;                                               // 0x0000(0x0010)
    TMap<FName,FGameplayCueTranslatorNodeIndex>   TranslationNameToIndexMap;                                    // 0x0010(0x0050)
    FGameplayTagsManager*                         TagManager;                                                   // 0x0060(0x0008)
    char                                          pa_0068[0x0018]                                               // 0x0068(0x0018)
};


// ScriptStruct  GameplayAbilities.GameplayCueTranslatorNodeIndex
// Struct Size::0x0004
struct FGameplayCueTranslatorNodeIndex
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayCueTranslatorNode
// Struct Size::0x0080
struct FGameplayCueTranslatorNode
{
    TArray<FGameplayCueTranslationLink>           Links;                                                        // 0x0000(0x0010)
    FGameplayCueTranslatorNodeIndex               CachedIndex;                                                  // 0x0010(0x0004)
    FGameplayTag                                  CachedGameplayTag;                                            // 0x0014(0x000C)
    FName                                         CachedGameplayTagName;                                        // 0x0020(0x000C)
    char                                          pa_002C[0x0054]                                               // 0x002C(0x0054)
};


// ScriptStruct  GameplayAbilities.GameplayCueTranslationLink
// Struct Size::0x0018
struct FGameplayCueTranslationLink
{
    FGameplayCueTranslator*                       RulesCDO;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayEffectQuery
// Struct Size::0x0088
struct FActiveGameplayEffectQuery
{
    char                                          pa_0000[0x0088]                                               // 0x0000(0x0088)
};


// ScriptStruct  GameplayAbilities.InheritedTagContainer
// Struct Size::0x0060
struct FInheritedTagContainer
{
    FGameplayTagContainer                         CombinedTags;                                                 // 0x0000(0x0020)
    FGameplayTagContainer                         Added;                                                        // 0x0020(0x0020)
    FGameplayTagContainer                         Removed;                                                      // 0x0040(0x0020)
};


// ScriptStruct  GameplayAbilities.GameplayEffectCue
// Struct Size::0x0060
struct FGameplayEffectCue
{
    FGameplayAttribute                            MagnitudeAttribute;                                           // 0x0000(0x0038)
    float                                         MinLevel;                                                     // 0x0038(0x0004)
    float                                         MaxLevel;                                                     // 0x003C(0x0004)
    FGameplayTagContainer                         GameplayCueTags;                                              // 0x0040(0x0020)
};


// ScriptStruct  GameplayAbilities.GameplayModifierInfo
// Struct Size::0x03F0
struct FGameplayModifierInfo
{
    FGameplayAttribute                            Attribute;                                                    // 0x0000(0x0038)
    enum class EGameplayModOp                     ModifierOp;                                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FScalableFloat                                Magnitude;                                                    // 0x0040(0x0038)
    FGameplayEffectModifierMagnitude              ModifierMagnitude;                                            // 0x0078(0x02F0)
    FGameplayModEvaluationChannelSettings         EvaluationChannelSettings;                                    // 0x0368(0x0001)
    char                                          pa_0369[0x0007]                                               // 0x0369(0x0007)
    FGameplayTagRequirements                      SourceTags;                                                   // 0x0370(0x0040)
    FGameplayTagRequirements                      TargetTags;                                                   // 0x03B0(0x0040)
};


// ScriptStruct  GameplayAbilities.GameplayModEvaluationChannelSettings
// Struct Size::0x0001
struct FGameplayModEvaluationChannelSettings
{
    enum class EGameplayModEvaluationChannel      Channel;                                                      // 0x0000(0x0001)
};


// ScriptStruct  GameplayAbilities.GameplayEffectModifierMagnitude
// Struct Size::0x02F0
struct FGameplayEffectModifierMagnitude
{
    enum class EGameplayEffectMagnitudeCalculationMagnitudeCalculationType;                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FScalableFloat                                ScalableFloatMagnitude;                                       // 0x0008(0x0038)
    FAttributeBasedFloat                          AttributeBasedMagnitude;                                      // 0x0040(0x0148)
    FCustomCalculationBasedFloat                  CustomMagnitude;                                              // 0x0188(0x00C8)
    FSetByCallerFloat                             SetByCallerMagnitude;                                         // 0x0250(0x0018)
    FFloatCurveFloat                              FloatCurveMagnitude;                                          // 0x0268(0x0088)
};


// ScriptStruct  GameplayAbilities.FloatCurveFloat
// Struct Size::0x0088
struct FFloatCurveFloat
{
    FRuntimeFloatCurve                            Curve;                                                        // 0x0000(0x0088)
};


// ScriptStruct  Engine.RuntimeFloatCurve
// Struct Size::0x0088
struct FRuntimeFloatCurve
{
    FRichCurve                                    EditorCurveData;                                              // 0x0000(0x0080)
    FCurveFloat*                                  ExternalCurve;                                                // 0x0080(0x0008)
};


// ScriptStruct  Engine.IndexedCurve
// Struct Size::0x0068
struct FIndexedCurve
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FKeyHandleMap                                 KeyHandlesToIndices;                                          // 0x0008(0x0060)
};


// ScriptStruct  Engine.KeyHandleMap
// Struct Size::0x0060
struct FKeyHandleMap
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  Engine.RealCurve
// Struct Size::0x0070
struct FRealCurve : public FIndexedCurve
{
    float                                         DefaultValue;                                                 // 0x0068(0x0004)
    enum class ERichCurveExtrapolation            PreInfinityExtrap;                                            // 0x006C(0x0001)
    enum class ERichCurveExtrapolation            PostInfinityExtrap;                                           // 0x006D(0x0001)
    char                                          pa_006E[0x0002]                                               // 0x006E(0x0002)
};


// ScriptStruct  Engine.RichCurve
// Struct Size::0x0080
struct FRichCurve : public FRealCurve
{
    TArray<FRichCurveKey>                         Keys;                                                         // 0x0070(0x0010)
};


// ScriptStruct  Engine.RichCurveKey
// Struct Size::0x001C
struct FRichCurveKey
{
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0000(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x0001(0x0001)
    enum class ERichCurveTangentWeightMode        TangentWeightMode;                                            // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         Time;                                                         // 0x0004(0x0004)
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         ArriveTangent;                                                // 0x000C(0x0004)
    float                                         ArriveTangentWeight;                                          // 0x0010(0x0004)
    float                                         LeaveTangent;                                                 // 0x0014(0x0004)
    float                                         LeaveTangentWeight;                                           // 0x0018(0x0004)
};


// ScriptStruct  GameplayAbilities.SetByCallerFloat
// Struct Size::0x0018
struct FSetByCallerFloat
{
    FName                                         DataName;                                                     // 0x0000(0x000C)
    FGameplayTag                                  DataTag;                                                      // 0x000C(0x000C)
};


// ScriptStruct  GameplayAbilities.CustomCalculationBasedFloat
// Struct Size::0x00C8
struct FCustomCalculationBasedFloat
{
    FGameplayModMagnitudeCalculation*             CalculationClassMagnitude;                                    // 0x0000(0x0008)
    FScalableFloat                                Coefficient;                                                  // 0x0008(0x0038)
    FScalableFloat                                PreMultiplyAdditiveValue;                                     // 0x0040(0x0038)
    FScalableFloat                                PostMultiplyAdditiveValue;                                    // 0x0078(0x0038)
    FCurveTableRowHandle                          FinalLookupCurve;                                             // 0x00B0(0x0018)
};


// ScriptStruct  GameplayAbilities.AttributeBasedFloat
// Struct Size::0x0148
struct FAttributeBasedFloat
{
    FScalableFloat                                Coefficient;                                                  // 0x0000(0x0038)
    FScalableFloat                                PreMultiplyAdditiveValue;                                     // 0x0038(0x0038)
    FScalableFloat                                PostMultiplyAdditiveValue;                                    // 0x0070(0x0038)
    FGameplayEffectAttributeCaptureDefinition     BackingAttribute;                                             // 0x00A8(0x0040)
    FCurveTableRowHandle                          AttributeCurve;                                               // 0x00E8(0x0018)
    enum class EAttributeBasedFloatCalculationTypeAttributeCalculationType;                                     // 0x0100(0x0001)
    enum class EGameplayModEvaluationChannel      FinalChannel;                                                 // 0x0101(0x0001)
    char                                          pa_0102[0x0006]                                               // 0x0102(0x0006)
    FGameplayTagContainer                         SourceTagFilter;                                              // 0x0108(0x0020)
    FGameplayTagContainer                         TargetTagFilter;                                              // 0x0128(0x0020)
};


// ScriptStruct  GameplayAbilities.GameplayEffectExecutionDefinition
// Struct Size::0x0058
struct FGameplayEffectExecutionDefinition
{
    FGameplayEffectExecutionCalculation*          CalculationClass;                                             // 0x0000(0x0008)
    FGameplayTagContainer                         PassedInTags;                                                 // 0x0008(0x0020)
    TArray<FGameplayEffectExecutionScopedModifierInfo>CalculationModifiers;                                     // 0x0028(0x0010)
    TArray<FGameplayEffect*>                      ConditionalGameplayEffectClasses;                             // 0x0038(0x0010)
    TArray<FConditionalGameplayEffect>            ConditionalGameplayEffects;                                   // 0x0048(0x0010)
};


// ScriptStruct  GameplayAbilities.ConditionalGameplayEffect
// Struct Size::0x0028
struct FConditionalGameplayEffect
{
    FGameplayEffect*                              EffectClass;                                                  // 0x0000(0x0008)
    FGameplayTagContainer                         RequiredSourceTags;                                           // 0x0008(0x0020)
};


// ScriptStruct  GameplayAbilities.GameplayEffectExecutionScopedModifierInfo
// Struct Size::0x03C8
struct FGameplayEffectExecutionScopedModifierInfo
{
    FGameplayEffectAttributeCaptureDefinition     CapturedAttribute;                                            // 0x0000(0x0040)
    FGameplayTag                                  TransientAggregatorIdentifier;                                // 0x0040(0x000C)
    enum class EGameplayEffectScopedModifierAggregatorTypeAggregatorType;                                       // 0x004C(0x0001)
    enum class EGameplayModOp                     ModifierOp;                                                   // 0x004D(0x0001)
    char                                          pa_004E[0x0002]                                               // 0x004E(0x0002)
    FGameplayEffectModifierMagnitude              ModifierMagnitude;                                            // 0x0050(0x02F0)
    FGameplayModEvaluationChannelSettings         EvaluationChannelSettings;                                    // 0x0340(0x0001)
    char                                          pa_0341[0x0007]                                               // 0x0341(0x0007)
    FGameplayTagRequirements                      SourceTags;                                                   // 0x0348(0x0040)
    FGameplayTagRequirements                      TargetTags;                                                   // 0x0388(0x0040)
};


// ScriptStruct  GameplayAbilities.GameplayEffectCustomExecutionOutput
// Struct Size::0x0018
struct FGameplayEffectCustomExecutionOutput
{
    TArray<FGameplayModifierEvaluatedData>        OutputModifiers;                                              // 0x0000(0x0010)
    char                                          bTriggerConditionalGameplayEffects;                           // 0x0010(0x0001)
    char                                          bHandledStackCountManually;                                   // 0x0010(0x0001)
    char                                          bHandledGameplayCuesManually;                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayModifierEvaluatedData
// Struct Size::0x0050
struct FGameplayModifierEvaluatedData
{
    FGameplayAttribute                            Attribute;                                                    // 0x0000(0x0038)
    enum class EGameplayModOp                     ModifierOp;                                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    float                                         Magnitude;                                                    // 0x003C(0x0004)
    FActiveGameplayEffectHandle                   Handle;                                                       // 0x0040(0x0008)
    bool                                          IsValid;                                                      // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayEffectCustomExecutionParameters
// Struct Size::0x00F0
struct FGameplayEffectCustomExecutionParameters
{
    char                                          pa_0000[0x00F0]                                               // 0x0000(0x00F0)
};


// ScriptStruct  GameplayAbilities.GameplayTagBlueprintPropertyMap
// Struct Size::0x0020
struct FGameplayTagBlueprintPropertyMap
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    TArray<FGameplayTagBlueprintPropertyMapping>  PropertyMappings;                                             // 0x0010(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayTagBlueprintPropertyMapping
// Struct Size::0x0058
struct FGameplayTagBlueprintPropertyMapping
{
    FGameplayTag                                  TagToMap;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    PropertyToEdit                                PropertyToEdit;                                               // 0x0010(0x0020)
    FName                                         PropertyName;                                                 // 0x0030(0x000C)
    FGuid                                         PropertyGuid;                                                 // 0x003C(0x0010)
    char                                          pa_004C[0x000C]                                               // 0x004C(0x000C)
};


// ScriptStruct  GameplayAbilities.GameplayEffectContext
// Struct Size::0x0070
struct FGameplayEffectContext
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TWeakObjectPtr<AActor>                        Instigator;                                                   // 0x0008(0x0008)
    TWeakObjectPtr<AActor>                        EffectCauser;                                                 // 0x0010(0x0008)
    TWeakObjectPtr<FGameplayAbility>              AbilityCDO;                                                   // 0x0018(0x0008)
    TWeakObjectPtr<FGameplayAbility>              AbilityInstanceNotReplicated;                                 // 0x0020(0x0008)
    int32_t                                       AbilityLevel;                                                 // 0x0028(0x0004)
    TWeakObjectPtr<UObject>                       SourceObject;                                                 // 0x002C(0x0008)
    TWeakObjectPtr<UAbilitySystemComponent>       InstigatorAbilitySystemComponent;                             // 0x0034(0x0008)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<TWeakObjectPtr<AActor>>                Actors;                                                       // 0x0040(0x0010)
    char                                          pa_0050[0x0010]                                               // 0x0050(0x0010)
    FVector                                       WorldOrigin;                                                  // 0x0060(0x000C)
    char                                          bHasWorldOrigin;                                              // 0x006C(0x0001)
    char                                          bReplicateSourceObject;                                       // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
};


// ScriptStruct  GameplayAbilities.GameplayTagResponseTableEntry
// Struct Size::0x0060
struct FGameplayTagResponseTableEntry
{
    FGameplayTagReponsePair                       Positive;                                                     // 0x0000(0x0030)
    FGameplayTagReponsePair                       Negative;                                                     // 0x0030(0x0030)
};


// ScriptStruct  GameplayAbilities.GameplayTagReponsePair
// Struct Size::0x0030
struct FGameplayTagReponsePair
{
    FGameplayTag                                  Tag;                                                          // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FGameplayEffect*                              ResponseGameplayEffect;                                       // 0x0010(0x0008)
    TArray<FGameplayEffect*>                      ResponseGameplayEffects;                                      // 0x0018(0x0010)
    int32_t                                       SoftCountCap;                                                 // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneChannel
// Struct Size::0x0008
struct FMovieSceneChannel
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  GameplayAbilities.MovieSceneGameplayCueChannel
// Struct Size::0x0088
struct FMovieSceneGameplayCueChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          KeyTimes;                                                     // 0x0008(0x0010)
    TArray<FMovieSceneGameplayCueKey>             KeyValues;                                                    // 0x0018(0x0010)
    char                                          pa_0028[0x0060]                                               // 0x0028(0x0060)
};


// ScriptStruct  GameplayAbilities.MovieSceneGameplayCueKey
// Struct Size::0x0080
struct FMovieSceneGameplayCueKey
{
    FGameplayCueTag                               Cue;                                                          // 0x0000(0x000C)
    FVector                                       Location;                                                     // 0x000C(0x000C)
    FVector                                       Normal;                                                       // 0x0018(0x000C)
    FName                                         AttachSocketName;                                             // 0x0024(0x000C)
    float                                         NormalizedMagnitude;                                          // 0x0030(0x0004)
    FMovieSceneObjectBindingID                    Instigator;                                                   // 0x0034(0x0018)
    FMovieSceneObjectBindingID                    EffectCauser;                                                 // 0x004C(0x0018)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FPhysicalMaterial*                            PhysicalMaterial;                                             // 0x0068(0x0008)
    int32_t                                       GameplayEffectLevel;                                          // 0x0070(0x0004)
    int32_t                                       AbilityLevel;                                                 // 0x0074(0x0004)
    bool                                          bAttachToBinding;                                             // 0x0078(0x0001)
    char                                          pa_0079[0x0007]                                               // 0x0079(0x0007)
};


// ScriptStruct  MovieScene.MovieSceneObjectBindingID
// Struct Size::0x0018
struct FMovieSceneObjectBindingID
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    int32_t                                       SequenceID;                                                   // 0x0010(0x0004)
    int32_t                                       ResolveParentIndex;                                           // 0x0014(0x0004)
};


// ScriptStruct  DataRegistry.DataRegistrySource
// Struct Size::0x0008
struct FDataRegistrySource
{
    bool                                          bPrecacheTable;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         CachedTableKeepSeconds;                                       // 0x0004(0x0004)
};


// ScriptStruct  DataRegistry.DataRegistrySourceItemId
// Struct Size::0x0050
struct FDataRegistrySourceItemId
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  DataRegistry.DataRegistryCachePolicy
// Struct Size::0x0014
struct FDataRegistryCachePolicy
{
    bool                                          bCacheIsAlwaysVolatile;                                       // 0x0000(0x0001)
    bool                                          bUseCurveTableCacheVersion;                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       MinNumberKept;                                                // 0x0004(0x0004)
    int32_t                                       MaxNumberKept;                                                // 0x0008(0x0004)
    float                                         ForceKeepSeconds;                                             // 0x000C(0x0004)
    float                                         ForceReleaseSeconds;                                          // 0x0010(0x0004)
};


// ScriptStruct  DataRegistry.DataRegistryIdFormat
// Struct Size::0x000C
struct FDataRegistryIdFormat
{
    FGameplayTag                                  BaseGameplayTag;                                              // 0x0000(0x000C)
};


// ScriptStruct  Qos.RegionQosInstance
// Struct Size::0x0040
struct FRegionQosInstance
{
    FQosRegionInfo                                Definition;                                                   // 0x0000(0x0030)
    TArray<FDatacenterQosInstance>                DatacenterOptions;                                            // 0x0030(0x0010)
};


// ScriptStruct  Qos.DatacenterQosInstance
// Struct Size::0x0068
struct FDatacenterQosInstance
{
    FQosDatacenterInfo                            Definition;                                                   // 0x0000(0x0038)
    enum class EQosDatacenterResult               Result;                                                       // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    int32_t                                       AvgPingMs;                                                    // 0x003C(0x0004)
    TArray<int32_t>                               PingResults;                                                  // 0x0040(0x0010)
    char                                          pa_0050[0x0008]                                               // 0x0050(0x0008)
    FDateTime                                     LastCheckTimestamp;                                           // 0x0058(0x0008)
    bool                                          bUsable;                                                      // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  Qos.QosDatacenterInfo
// Struct Size::0x0038
struct FQosDatacenterInfo
{
    FString                                       Id;                                                           // 0x0000(0x0010)
    FString                                       RegionId;                                                     // 0x0010(0x0010)
    bool                                          bEnabled;                                                     // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FQosPingServerInfo>                    Servers;                                                      // 0x0028(0x0010)
};


// ScriptStruct  Qos.QosPingServerInfo
// Struct Size::0x0018
struct FQosPingServerInfo
{
    FString                                       Address;                                                      // 0x0000(0x0010)
    int32_t                                       Port;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Qos.QosRegionInfo
// Struct Size::0x0030
struct FQosRegionInfo
{
    FText                                         DisplayName;                                                  // 0x0000(0x0018)
    FString                                       RegionId;                                                     // 0x0018(0x0010)
    bool                                          bEnabled;                                                     // 0x0028(0x0001)
    bool                                          bVisible;                                                     // 0x0029(0x0001)
    bool                                          bAutoAssignable;                                              // 0x002A(0x0001)
    char                                          pa_002B[0x0005]                                               // 0x002B(0x0005)
};


// ScriptStruct  Party.OnlinePartyRepDataBase
// Struct Size::0x0018
struct FOnlinePartyRepDataBase
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Party.PartyMemberRepData
// Struct Size::0x0180
struct FPartyMemberRepData : public FOnlinePartyRepDataBase
{
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FUserPlatform                                 Platform;                                                     // 0x0020(0x0060)
    char                                          pa_0080[0x0030]                                               // 0x0080(0x0030)
    FUniqueNetIdRepl                              PlatformUniqueId;                                             // 0x00B0(0x0028)
    char                                          pa_00D8[0x0030]                                               // 0x00D8(0x0030)
    FString                                       PlatformSessionId;                                            // 0x0108(0x0010)
    char                                          pa_0118[0x0030]                                               // 0x0118(0x0030)
    enum class ECrossplayPreference               CrossplayPreference;                                          // 0x0148(0x0001)
    char                                          pa_0149[0x0037]                                               // 0x0149(0x0037)
};


// ScriptStruct  Engine.UniqueNetIdRepl
// Struct Size::0x0028
struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
{
    char                                          pa_0001[0x0017]                                               // 0x0001(0x0017)
    TArray<char>                                  ReplicationBytes;                                             // 0x0018(0x0010)
};


// ScriptStruct  Party.UserPlatform
// Struct Size::0x0060
struct FUserPlatform
{
    FSocialPlatformDescription                    PlatformDescription;                                          // 0x0000(0x0060)
};


// ScriptStruct  Party.SocialPlatformDescription
// Struct Size::0x0060
struct FSocialPlatformDescription
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       PlatformType;                                                 // 0x0010(0x0010)
    FName                                         OnlineSubsystem;                                              // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       SessionType;                                                  // 0x0030(0x0010)
    FString                                       ExternalAccountType;                                          // 0x0040(0x0010)
    FString                                       CrossplayPool;                                                // 0x0050(0x0010)
};


// ScriptStruct  Party.PartyPrivacySettings
// Struct Size::0x0003
struct FPartyPrivacySettings
{
    enum class EPartyType                         PartyType;                                                    // 0x0000(0x0001)
    enum class EPartyInviteRestriction            PartyInviteRestriction;                                       // 0x0001(0x0001)
    bool                                          bOnlyLeaderFriendsCanJoin;                                    // 0x0002(0x0001)
};


// ScriptStruct  Party.PartyPlatformSessionInfo
// Struct Size::0x0048
struct FPartyPlatformSessionInfo
{
    FString                                       SessionType;                                                  // 0x0000(0x0010)
    FString                                       SessionId;                                                    // 0x0010(0x0010)
    FUniqueNetIdRepl                              OwnerPrimaryId;                                               // 0x0020(0x0028)
};


// ScriptStruct  Party.SocialChatChannelConfig
// Struct Size::0x0040
struct FSocialChatChannelConfig
{
    FSocialUser*                                  SocialUser;                                                   // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
    TArray<FSocialChatChannel*>                   ListenChannels;                                               // 0x0018(0x0010)
    char                                          pa_0028[0x0018]                                               // 0x0028(0x0018)
};


// ScriptStruct  Party.PartyRepData
// Struct Size::0x0080
struct FPartyRepData : public FOnlinePartyRepDataBase
{
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FPartyPrivacySettings                         PrivacySettings;                                              // 0x0020(0x0003)
    char                                          pa_0023[0x0035]                                               // 0x0023(0x0035)
    TArray<FPartyPlatformSessionInfo>             PlatformSessions;                                             // 0x0058(0x0010)
    char                                          pa_0068[0x0018]                                               // 0x0068(0x0018)
};


// ScriptStruct  Lobby.LobbyPlayerStateInfoArray
// Struct Size::0x0120
struct FLobbyPlayerStateInfoArray : public FFastArraySerializer
{
    TArray<FLobbyPlayerStateActorInfo>            Players;                                                      // 0x0108(0x0010)
    FLobbyBeaconState*                            ParentState;                                                  // 0x0118(0x0008)
};


// ScriptStruct  Lobby.LobbyPlayerStateActorInfo
// Struct Size::0x0018
struct FLobbyPlayerStateActorInfo : public FFastArraySerializerItem
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FLobbyBeaconPlayerState*                      LobbyPlayerState;                                             // 0x0010(0x0008)
};


// ScriptStruct  OnlineSubsystem.NamedInterfaceDef
// Struct Size::0x0020
struct FNamedInterfaceDef
{
    FName                                         InterfaceName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       InterfaceClassName;                                           // 0x0010(0x0010)
};


// ScriptStruct  OnlineSubsystem.NamedInterface
// Struct Size::0x0018
struct FNamedInterface
{
    FName                                         InterfaceName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UObject*                                      InterfaceObject;                                              // 0x0010(0x0008)
};


// ScriptStruct  OnlineSubsystem.InAppPurchaseProductRequest
// Struct Size::0x0018
struct FInAppPurchaseProductRequest
{
    FString                                       ProductIdentifier;                                            // 0x0000(0x0010)
    bool                                          bIsConsumable;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseReceiptInfo
// Struct Size::0x0030
struct FInAppPurchaseReceiptInfo
{
    FString                                       ItemName;                                                     // 0x0000(0x0010)
    FString                                       ItemId;                                                       // 0x0010(0x0010)
    FString                                       ValidationInfo;                                               // 0x0020(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseProductInfo2
// Struct Size::0x00F8
struct FInAppPurchaseProductInfo2
{
    FString                                       Identifier;                                                   // 0x0000(0x0010)
    FString                                       TransactionIdentifier;                                        // 0x0010(0x0010)
    FString                                       DisplayName;                                                  // 0x0020(0x0010)
    FString                                       DisplayDescription;                                           // 0x0030(0x0010)
    FString                                       DisplayPrice;                                                 // 0x0040(0x0010)
    float                                         RawPrice;                                                     // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       CurrencyCode;                                                 // 0x0058(0x0010)
    FString                                       CurrencySymbol;                                               // 0x0068(0x0010)
    FString                                       DecimalSeparator;                                             // 0x0078(0x0010)
    FString                                       GroupingSeparator;                                            // 0x0088(0x0010)
    FString                                       ReceiptData;                                                  // 0x0098(0x0010)
    TMap<FString,FString>                         DynamicFields;                                                // 0x00A8(0x0050)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseProductRequest2
// Struct Size::0x0018
struct FInAppPurchaseProductRequest2
{
    FString                                       ProductIdentifier;                                            // 0x0000(0x0010)
    bool                                          bIsConsumable;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  OnlineSubsystemUtils.PlayerReservation
// Struct Size::0x0050
struct FPlayerReservation
{
    FUniqueNetIdRepl                              UniqueId;                                                     // 0x0000(0x0028)
    FString                                       ValidationStr;                                                // 0x0028(0x0010)
    FString                                       Platform;                                                     // 0x0038(0x0010)
    bool                                          bAllowCrossplay;                                              // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    float                                         ElapsedTime;                                                  // 0x004C(0x0004)
};


// ScriptStruct  OnlineSubsystemUtils.PIELoginSettingsInternal
// Struct Size::0x0040
struct FPIELoginSettingsInternal
{
    FString                                       Id;                                                           // 0x0000(0x0010)
    FString                                       Token;                                                        // 0x0010(0x0010)
    FString                                       Type;                                                         // 0x0020(0x0010)
    TArray<char>                                  TokenBytes;                                                   // 0x0030(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.PartyBeaconCrossplayPlatformMapping
// Struct Size::0x0020
struct FPartyBeaconCrossplayPlatformMapping
{
    FString                                       PlatformName;                                                 // 0x0000(0x0010)
    FString                                       PlatformType;                                                 // 0x0010(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.PartyReservation
// Struct Size::0x0050
struct FPartyReservation
{
    int32_t                                       TeamNum;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FUniqueNetIdRepl                              PartyLeader;                                                  // 0x0008(0x0028)
    TArray<FPlayerReservation>                    PartyMembers;                                                 // 0x0030(0x0010)
    TArray<FPlayerReservation>                    RemovedPartyMembers;                                          // 0x0040(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.SpectatorReservation
// Struct Size::0x0078
struct FSpectatorReservation
{
    FUniqueNetIdRepl                              SpectatorId;                                                  // 0x0000(0x0028)
    FPlayerReservation                            Spectator;                                                    // 0x0028(0x0050)
};


// ScriptStruct  RemoteSession.RemoteSessionChannelInfo
// Struct Size::0x0018
struct FRemoteSessionChannelInfo
{
    FString                                       Type;                                                         // 0x0000(0x0010)
    enum class ERemoteSessionChannelMode          Mode;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  MediaIOCore.MediaCaptureOptions
// Struct Size::0x0010
struct FMediaCaptureOptions
{
    enum class EMediaCaptureCroppingType          Crop;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FIntPoint                                     CustomCapturePoint;                                           // 0x0004(0x0008)
    bool                                          bResizeSourceBuffer;                                          // 0x000C(0x0001)
    bool                                          bSkipFrameWhenRunningExpensiveTasks;                          // 0x000D(0x0001)
    bool                                          bConvertToDesiredPixelFormat;                                 // 0x000E(0x0001)
    bool                                          bForceAlphaToOneOnConversion;                                 // 0x000F(0x0001)
};


// ScriptStruct  MediaIOCore.MediaIOOutputConfiguration
// Struct Size::0x0054
struct FMediaIOOutputConfiguration
{
    FMediaIOConfiguration                         MediaConfiguration;                                           // 0x0000(0x0044)
    enum class EMediaIOOutputType                 OutputType;                                                   // 0x0044(0x0004)
    int32_t                                       KeyPortIdentifier;                                            // 0x0048(0x0004)
    enum class EMediaIOReferenceType              OutputReference;                                              // 0x004C(0x0004)
    int32_t                                       ReferencePortIdentifier;                                      // 0x0050(0x0004)
};


// ScriptStruct  MediaIOCore.MediaIOConfiguration
// Struct Size::0x0044
struct FMediaIOConfiguration
{
    bool                                          bIsInput;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FMediaIOConnection                            MediaConnection;                                              // 0x0004(0x0028)
    FMediaIOMode                                  MediaMode;                                                    // 0x002C(0x0018)
};


// ScriptStruct  MediaIOCore.MediaIOMode
// Struct Size::0x0018
struct FMediaIOMode
{
    FFrameRate                                    FrameRate;                                                    // 0x0000(0x0008)
    FIntPoint                                     Resolution;                                                   // 0x0008(0x0008)
    enum class EMediaIOStandardType               Standard;                                                     // 0x0010(0x0004)
    int32_t                                       DeviceModeIdentifier;                                         // 0x0014(0x0004)
};


// ScriptStruct  MediaIOCore.MediaIOConnection
// Struct Size::0x0028
struct FMediaIOConnection
{
    FMediaIODevice                                Device;                                                       // 0x0000(0x0010)
    FName                                         Protocol;                                                     // 0x0010(0x000C)
    enum class EMediaIOTransportType              TransportType;                                                // 0x001C(0x0004)
    enum class EMediaIOQuadLinkTransportType      QuadTransportType;                                            // 0x0020(0x0004)
    int32_t                                       PortIdentifier;                                               // 0x0024(0x0004)
};


// ScriptStruct  MediaIOCore.MediaIODevice
// Struct Size::0x0010
struct FMediaIODevice
{
    FName                                         DeviceName;                                                   // 0x0000(0x000C)
    int32_t                                       DeviceIdentifier;                                             // 0x000C(0x0004)
};


// ScriptStruct  MediaIOCore.MediaIOInputConfiguration
// Struct Size::0x004C
struct FMediaIOInputConfiguration
{
    FMediaIOConfiguration                         MediaConfiguration;                                           // 0x0000(0x0044)
    enum class EMediaIOInputType                  InputType;                                                    // 0x0044(0x0004)
    int32_t                                       KeyPortIdentifier;                                            // 0x0048(0x0004)
};


// ScriptStruct  RemoteControl.RemoteControlEntity
// Struct Size::0x00A0
struct FRemoteControlEntity
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TMap<FName,FString>                           UserMetadata;                                                 // 0x0008(0x0050)
    TArray<TWeakObjectPtr<FRemoteControlBinding>> Bindings;                                                     // 0x0058(0x0010)
    TWeakObjectPtr<FRemoteControlPreset>          Owner;                                                        // 0x0068(0x0008)
    FName                                         Label;                                                        // 0x0070(0x000C)
    FGuid                                         Id;                                                           // 0x007C(0x0010)
    char                                          pa_008C[0x0014]                                               // 0x008C(0x0014)
};


// ScriptStruct  RemoteControl.RemoteControlActor
// Struct Size::0x00C0
struct FRemoteControlActor : public FRemoteControlEntity
{
    FSoftObjectPath                               Path;                                                         // 0x00A0(0x0020)
};


// ScriptStruct  RemoteControl.RCEntityWrapper
// Struct Size::0x0018
struct FRCEntityWrapper
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  RemoteControl.RemoteControlField
// Struct Size::0x0140
struct FRemoteControlField : public FRemoteControlEntity
{
    enum class EExposedFieldType                  FieldType;                                                    // 0x00A0(0x0001)
    char                                          pa_00A1[0x0003]                                               // 0x00A1(0x0003)
    FName                                         FieldName;                                                    // 0x00A4(0x000C)
    FRCFieldPathInfo                              FieldPathInfo;                                                // 0x00B0(0x0018)
    TSet<FRemoteControlProtocolBinding>           ProtocolBindings;                                             // 0x00C8(0x0050)
    FSoftClassPath                                OwnerClass;                                                   // 0x0118(0x0020)
    bool                                          bIsEditorOnly;                                                // 0x0138(0x0001)
    char                                          pa_0139[0x0007]                                               // 0x0139(0x0007)
};


// ScriptStruct  RemoteControl.RemoteControlProtocolBinding
// Struct Size::0x0048
struct FRemoteControlProtocolBinding
{
    FGuid                                         Id;                                                           // 0x0000(0x0010)
    FName                                         ProtocolName;                                                 // 0x0010(0x000C)
    FGuid                                         PropertyId;                                                   // 0x001C(0x0010)
    FName                                         MappingPropertyName;                                          // 0x002C(0x000C)
    char                                          pa_0038[0x0010]                                               // 0x0038(0x0010)
};


// ScriptStruct  RemoteControl.RCFieldPathInfo
// Struct Size::0x0018
struct FRCFieldPathInfo
{
    TArray<FRCFieldPathSegment>                   Segments;                                                     // 0x0000(0x0010)
    uint32_t                                      PathHash;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  RemoteControl.RCFieldPathSegment
// Struct Size::0x0050
struct FRCFieldPathSegment
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    int32_t                                       ArrayIndex;                                                   // 0x000C(0x0004)
    FString                                       ValuePropertyName;                                            // 0x0010(0x0010)
    FString                                       MapKey;                                                       // 0x0020(0x0010)
    char                                          pa_0030[0x0020]                                               // 0x0030(0x0020)
};


// ScriptStruct  RemoteControl.RemoteControlFunction
// Struct Size::0x0180
struct FRemoteControlFunction : public FRemoteControlField
{
    char                                          pa_0140[0x0010]                                               // 0x0140(0x0010)
    bool                                          bIsCallableInPackaged;                                        // 0x0150(0x0001)
    char                                          pa_0151[0x0007]                                               // 0x0151(0x0007)
    FSoftObjectPath                               FunctionPath;                                                 // 0x0158(0x0020)
    char                                          pa_0178[0x0008]                                               // 0x0178(0x0008)
};


// ScriptStruct  RemoteControl.RemoteControlProperty
// Struct Size::0x0148
struct FRemoteControlProperty : public FRemoteControlField
{
    bool                                          bIsEditableInPackaged;                                        // 0x0140(0x0001)
    char                                          pa_0141[0x0007]                                               // 0x0141(0x0007)
};


// ScriptStruct  RemoteControl.RCFieldMetadata
// Struct Size::0x0008
struct FRCFieldMetadata
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0030
struct FRCMetadata : public FRCFieldMetadata
{
    FVector                                       DefaultValue;                                                 // 0x0008(0x000C)
    FVector                                       MinimumValue;                                                 // 0x0014(0x000C)
    FVector                                       MaximumValue;                                                 // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0010
struct FRCMetadata : public FRCFieldMetadata
{
    bool                                          DefaultValue;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0038
struct FRCMetadata : public FRCFieldMetadata
{
    TSoftObjectPtr<FScriptStruct>                 DefaultValue;                                                 // 0x0008(0x0030)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0038
struct FRCMetadata : public FRCFieldMetadata
{
    TSoftClassPtr<UObject>                        DefaultValue;                                                 // 0x0008(0x0030)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0038
struct FRCMetadata : public FRCFieldMetadata
{
    TSoftObjectPtr<UObject>                       DefaultValue;                                                 // 0x0008(0x0030)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0018
struct FRCMetadata : public FRCFieldMetadata
{
    FName                                         DefaultValue;                                                 // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0018
struct FRCMetadata : public FRCFieldMetadata
{
    FString                                       DefaultValue;                                                 // 0x0008(0x0010)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0020
struct FRCMetadata : public FRCFieldMetadata
{
    double                                        Min;                                                          // 0x0008(0x0008)
    double                                        Max;                                                          // 0x0010(0x0008)
    double                                        DefaultValue;                                                 // 0x0018(0x0008)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0018
struct FRCMetadata : public FRCFieldMetadata
{
    float                                         Min;                                                          // 0x0008(0x0004)
    float                                         Max;                                                          // 0x000C(0x0004)
    float                                         DefaultValue;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0020
struct FRCMetadata : public FRCFieldMetadata
{
    int64_t                                       Min;                                                          // 0x0008(0x0008)
    int64_t                                       Max;                                                          // 0x0010(0x0008)
    int64_t                                       DefaultValue;                                                 // 0x0018(0x0008)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0018
struct FRCMetadata : public FRCFieldMetadata
{
    int32_t                                       Min;                                                          // 0x0008(0x0004)
    int32_t                                       Max;                                                          // 0x000C(0x0004)
    int32_t                                       DefaultValue;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0010
struct FRCMetadata : public FRCFieldMetadata
{
    int16_t                                       Min;                                                          // 0x0008(0x0002)
    int16_t                                       Max;                                                          // 0x000A(0x0002)
    int16_t                                       DefaultValue;                                                 // 0x000C(0x0002)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0010
struct FRCMetadata : public FRCFieldMetadata
{
    int8_t                                        Min;                                                          // 0x0008(0x0001)
    int8_t                                        Max;                                                          // 0x0009(0x0001)
    int8_t                                        DefaultValue;                                                 // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0020
struct FRCMetadata : public FRCFieldMetadata
{
    uint64_t                                      Min;                                                          // 0x0008(0x0008)
    uint64_t                                      Max;                                                          // 0x0010(0x0008)
    uint64_t                                      DefaultValue;                                                 // 0x0018(0x0008)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0018
struct FRCMetadata : public FRCFieldMetadata
{
    uint32_t                                      Min;                                                          // 0x0008(0x0004)
    uint32_t                                      Max;                                                          // 0x000C(0x0004)
    uint32_t                                      DefaultValue;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0010
struct FRCMetadata : public FRCFieldMetadata
{
    uint16_t                                      Min;                                                          // 0x0008(0x0002)
    uint16_t                                      Max;                                                          // 0x000A(0x0002)
    uint16_t                                      DefaultValue;                                                 // 0x000C(0x0002)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  RemoteControl.RCMetadata
// Struct Size::0x0010
struct FRCMetadata : public FRCFieldMetadata
{
    char                                          Min;                                                          // 0x0008(0x0001)
    char                                          Max;                                                          // 0x0009(0x0001)
    char                                          DefaultValue;                                                 // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  RemoteControl.RemoteControlOptionalExposeArgs
// Struct Size::0x0020
struct FRemoteControlOptionalExposeArgs
{
    FString                                       DisplayName;                                                  // 0x0000(0x0010)
    FString                                       GroupName;                                                    // 0x0010(0x0010)
};


// ScriptStruct  RemoteControl.RemoteControlInterceptionFunctionParamStruct
// Struct Size::0x0028
struct FRemoteControlInterceptionFunctionParamStruct
{
    int32_t                                       Int32Value;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               IntArray;                                                     // 0x0008(0x0010)
    FString                                       IntString;                                                    // 0x0018(0x0010)
};


// ScriptStruct  RemoteControl.RemoteControlInterceptionTestStruct
// Struct Size::0x0004
struct FRemoteControlInterceptionTestStruct
{
    int32_t                                       Int32Value;                                                   // 0x0000(0x0004)
};


// ScriptStruct  RemoteControl.RemoteControlTarget
// Struct Size::0x00D0
struct FRemoteControlTarget
{
    UObject*                                      Class;                                                        // 0x0000(0x0008)
    TSet<FRemoteControlFunction>                  ExposedFunctions;                                             // 0x0008(0x0050)
    TSet<FRemoteControlProperty>                  ExposedProperties;                                            // 0x0058(0x0050)
    FName                                         Alias;                                                        // 0x00A8(0x000C)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
    TArray<FSoftObjectPath>                       Bindings;                                                     // 0x00B8(0x0010)
    TWeakObjectPtr<FRemoteControlPreset>          Owner;                                                        // 0x00C8(0x0008)
};


// ScriptStruct  RemoteControl.RemoteControlPresetLayout
// Struct Size::0x00C0
struct FRemoteControlPresetLayout
{
    TArray<FRemoteControlPresetGroup>             Groups;                                                       // 0x0000(0x0010)
    TWeakObjectPtr<FRemoteControlPreset>          Owner;                                                        // 0x0010(0x0008)
    char                                          pa_0018[0x00A8]                                               // 0x0018(0x00A8)
};


// ScriptStruct  RemoteControl.RemoteControlPresetGroup
// Struct Size::0x0030
struct FRemoteControlPresetGroup
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    FGuid                                         Id;                                                           // 0x000C(0x0010)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FGuid>                                 Fields;                                                       // 0x0020(0x0010)
};


// ScriptStruct  RemoteControl.RCCachedFieldData
// Struct Size::0x001C
struct FRCCachedFieldData
{
    FGuid                                         LayoutGroupId;                                                // 0x0000(0x0010)
    FName                                         OwnerObjectAlias;                                             // 0x0010(0x000C)
};


// ScriptStruct  RemoteControl.RemoteControlTestStructOuter
// Struct Size::0x0078
struct FRemoteControlTestStructOuter
{
    int8_t                                        Int8Value;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TSet<FRemoteControlTestStructInner>           StructInnerSet;                                               // 0x0008(0x0050)
    int32_t                                       Int32Value;                                                   // 0x0058(0x0004)
    FRemoteControlTestStructInner                 RemoteControlTestStructInner;                                 // 0x005C(0x001C)
};


// ScriptStruct  RemoteControl.RemoteControlTestStructInner
// Struct Size::0x001C
struct FRemoteControlTestStructInner
{
    int8_t                                        Int8Value;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FRemoteControlTestStructInnerSimle            InnerSimle;                                                   // 0x0004(0x0004)
    int32_t                                       Int32Value;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0010]                                               // 0x000C(0x0010)
};


// ScriptStruct  RemoteControl.RemoteControlTestStructInnerSimle
// Struct Size::0x0004
struct FRemoteControlTestStructInnerSimle
{
    int32_t                                       Int32Value;                                                   // 0x0000(0x0004)
};


// ScriptStruct  RemoteControl.RemoteControlProtocolEntity
// Struct Size::0x0080
struct FRemoteControlProtocolEntity
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TWeakObjectPtr<FRemoteControlPreset>          Owner;                                                        // 0x0008(0x0008)
    FGuid                                         PropertyId;                                                   // 0x0010(0x0010)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
    TSet<FRemoteControlProtocolMapping>           Mappings;                                                     // 0x0028(0x0050)
    enum class ERCBindingStatus                   BindingStatus;                                                // 0x0078(0x0001)
    char                                          pa_0079[0x0007]                                               // 0x0079(0x0007)
};


// ScriptStruct  RemoteControl.RemoteControlProtocolMapping
// Struct Size::0x0078
struct FRemoteControlProtocolMapping
{
    FGuid                                         Id;                                                           // 0x0000(0x0010)
    TArray<char>                                  InterpolationRangePropertyData;                               // 0x0010(0x0010)
    TArray<char>                                  InterpolationMappingPropertyData;                             // 0x0020(0x0010)
    TArray<char>                                  InterpolationRangePropertyDataCache;                          // 0x0030(0x0010)
    TArray<char>                                  InterpolationMappingPropertyDataCache;                        // 0x0040(0x0010)
    int32_t                                       InterpolationMappingPropertyElementNum;                       // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    BoundPropertyPath                             BoundPropertyPath;                                            // 0x0058(0x0020)
};


// ScriptStruct  RemoteControl.RemoteControlTestInnerStruct
// Struct Size::0x0028
struct FRemoteControlTestInnerStruct
{
    FColor                                        Color;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<float>                                 FloatArray;                                                   // 0x0008(0x0010)
    TArray<FVector>                               ArrayOfVectors;                                               // 0x0018(0x0010)
};


// ScriptStruct  RemoteControl.RemoteControlTestStruct
// Struct Size::0x002C
struct FRemoteControlTestStruct
{
    bool                                          bSomeBool;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    uint32_t                                      SomeUInt32;                                                   // 0x0004(0x0004)
    float                                         SomeFloat;                                                    // 0x0008(0x0004)
    FVector                                       SomeVector;                                                   // 0x000C(0x000C)
    FRotator                                      SomeRotator;                                                  // 0x0018(0x000C)
    int32_t                                       SomeClampedInt;                                               // 0x0024(0x0004)
    float                                         SomeClampedFloat;                                             // 0x0028(0x0004)
};


// ScriptStruct  WebRemoteControl.RCAssetFilter
// Struct Size::0x0088
struct FRCAssetFilter
{
    TArray<FName>                                 PackageNames;                                                 // 0x0000(0x0010)
    TArray<FName>                                 PackagePaths;                                                 // 0x0010(0x0010)
    TArray<FName>                                 ClassNames;                                                   // 0x0020(0x0010)
    TSet<FName>                                   RecursiveClassesExclusionSet;                                 // 0x0030(0x0050)
    bool                                          RecursiveClasses;                                             // 0x0080(0x0001)
    bool                                          RecursivePaths;                                               // 0x0081(0x0001)
    char                                          pa_0082[0x0006]                                               // 0x0082(0x0006)
};


// ScriptStruct  WebRemoteControl.RCPresetFieldRenamed
// Struct Size::0x0018
struct FRCPresetFieldRenamed
{
    FName                                         OldFieldLabel;                                                // 0x0000(0x000C)
    FName                                         NewFieldLabel;                                                // 0x000C(0x000C)
};


// ScriptStruct  WebRemoteControl.RCAssetDescription
// Struct Size::0x0078
struct FRCAssetDescription
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    FName                                         Class;                                                        // 0x000C(0x000C)
    FName                                         Path;                                                         // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TMap<FName,FString>                           Metadata;                                                     // 0x0028(0x0050)
};


// ScriptStruct  WebRemoteControl.RCShortPresetDescription
// Struct Size::0x0030
struct FRCShortPresetDescription
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       ID;                                                           // 0x0010(0x0010)
    FName                                         Path;                                                         // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  WebRemoteControl.RCPresetDescription
// Struct Size::0x0040
struct FRCPresetDescription
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Path;                                                         // 0x0010(0x0010)
    FString                                       ID;                                                           // 0x0020(0x0010)
    TArray<FRCPresetLayoutGroupDescription>       Groups;                                                       // 0x0030(0x0010)
};


// ScriptStruct  WebRemoteControl.RCPresetLayoutGroupDescription
// Struct Size::0x0040
struct FRCPresetLayoutGroupDescription
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FRCExposedPropertyDescription>         ExposedProperties;                                            // 0x0010(0x0010)
    TArray<FRCExposedFunctionDescription>         ExposedFunctions;                                             // 0x0020(0x0010)
    TArray<FRCExposedActorDescription>            ExposedActors;                                                // 0x0030(0x0010)
};


// ScriptStruct  WebRemoteControl.RCExposedActorDescription
// Struct Size::0x0050
struct FRCExposedActorDescription
{
    FName                                         DisplayName;                                                  // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       ID;                                                           // 0x0010(0x0010)
    FRCObjectDescription                          UnderlyingActor;                                              // 0x0020(0x0030)
};


// ScriptStruct  WebRemoteControl.RCObjectDescription
// Struct Size::0x0030
struct FRCObjectDescription
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Class;                                                        // 0x0010(0x0010)
    FString                                       Path;                                                         // 0x0020(0x0010)
};


// ScriptStruct  WebRemoteControl.RCExposedFunctionDescription
// Struct Size::0x0060
struct FRCExposedFunctionDescription
{
    FName                                         DisplayName;                                                  // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       ID;                                                           // 0x0010(0x0010)
    FRCFunctionDescription                        UnderlyingFunction;                                           // 0x0020(0x0030)
    TArray<FRCObjectDescription>                  OwnerObjects;                                                 // 0x0050(0x0010)
};


// ScriptStruct  WebRemoteControl.RCFunctionDescription
// Struct Size::0x0030
struct FRCFunctionDescription
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Description;                                                  // 0x0010(0x0010)
    TArray<FRCPropertyDescription>                Arguments;                                                    // 0x0020(0x0010)
};


// ScriptStruct  WebRemoteControl.RCPropertyDescription
// Struct Size::0x00A0
struct FRCPropertyDescription
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Description;                                                  // 0x0010(0x0010)
    FString                                       Type;                                                         // 0x0020(0x0010)
    FString                                       ContainerType;                                                // 0x0030(0x0010)
    FString                                       KeyType;                                                      // 0x0040(0x0010)
    TMap<FName,FString>                           Metadata;                                                     // 0x0050(0x0050)
};


// ScriptStruct  WebRemoteControl.RCExposedPropertyDescription
// Struct Size::0x0120
struct FRCExposedPropertyDescription
{
    FName                                         DisplayName;                                                  // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       ID;                                                           // 0x0010(0x0010)
    FRCPropertyDescription                        UnderlyingProperty;                                           // 0x0020(0x00A0)
    TMap<FName,FString>                           Metadata;                                                     // 0x00C0(0x0050)
    TArray<FRCObjectDescription>                  OwnerObjects;                                                 // 0x0110(0x0010)
};


// ScriptStruct  WebRemoteControl.RCPresetModifiedEntitiesDescription
// Struct Size::0x0030
struct FRCPresetModifiedEntitiesDescription
{
    TArray<FRCExposedPropertyDescription>         ModifiedRCProperties;                                         // 0x0000(0x0010)
    TArray<FRCExposedFunctionDescription>         ModifiedRCFunctions;                                          // 0x0010(0x0010)
    TArray<FRCExposedActorDescription>            ModifiedRCActors;                                             // 0x0020(0x0010)
};


// ScriptStruct  WebRemoteControl.RCRequest
// Struct Size::0x0068
struct FRCRequest
{
    char                                          pa_0000[0x0068]                                               // 0x0000(0x0068)
};


// ScriptStruct  WebRemoteControl.RCWebSocketPresetRegisterBody
// Struct Size::0x0080
struct FRCWebSocketPresetRegisterBody : public FRCRequest
{
    FString                                       PresetName;                                                   // 0x0068(0x0010)
    bool                                          IgnoreRemoteChanges;                                          // 0x0078(0x0001)
    char                                          pa_0079[0x0007]                                               // 0x0079(0x0007)
};


// ScriptStruct  WebRemoteControl.RCWebSocketRequest
// Struct Size::0x0080
struct FRCWebSocketRequest : public FRCRequest
{
    FString                                       MessageName;                                                  // 0x0068(0x0010)
    int32_t                                       Id;                                                           // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  WebRemoteControl.GetObjectThumbnailRequest
// Struct Size::0x0078
struct FGetObjectThumbnailRequest : public FRCRequest
{
    FString                                       ObjectPath;                                                   // 0x0068(0x0010)
};


// ScriptStruct  WebRemoteControl.SetEntityLabelRequest
// Struct Size::0x0078
struct FSetEntityLabelRequest : public FRCRequest
{
    FString                                       NewLabel;                                                     // 0x0068(0x0010)
};


// ScriptStruct  WebRemoteControl.SetEntityMetadataRequest
// Struct Size::0x0078
struct FSetEntityMetadataRequest : public FRCRequest
{
    FString                                       Value;                                                        // 0x0068(0x0010)
};


// ScriptStruct  WebRemoteControl.SetPresetMetadataRequest
// Struct Size::0x0078
struct FSetPresetMetadataRequest : public FRCRequest
{
    FString                                       Value;                                                        // 0x0068(0x0010)
};


// ScriptStruct  WebRemoteControl.SearchObjectRequest
// Struct Size::0x00A0
struct FSearchObjectRequest : public FRCRequest
{
    FString                                       Query;                                                        // 0x0068(0x0010)
    FString                                       Class;                                                        // 0x0078(0x0010)
    FString                                       Outer;                                                        // 0x0088(0x0010)
    int32_t                                       Limit;                                                        // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
};


// ScriptStruct  WebRemoteControl.SearchActorRequest
// Struct Size::0x0090
struct FSearchActorRequest : public FRCRequest
{
    FString                                       Query;                                                        // 0x0068(0x0010)
    FString                                       Class;                                                        // 0x0078(0x0010)
    int32_t                                       Limit;                                                        // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  WebRemoteControl.SearchAssetRequest
// Struct Size::0x0108
struct FSearchAssetRequest : public FRCRequest
{
    FString                                       Query;                                                        // 0x0068(0x0010)
    FRCAssetFilter                                Filter;                                                       // 0x0078(0x0088)
    int32_t                                       Limit;                                                        // 0x0100(0x0004)
    char                                          pa_0104[0x0004]                                               // 0x0104(0x0004)
};


// ScriptStruct  WebRemoteControl.DescribeObjectRequest
// Struct Size::0x0078
struct FDescribeObjectRequest : public FRCRequest
{
    FString                                       ObjectPath;                                                   // 0x0068(0x0010)
};


// ScriptStruct  WebRemoteControl.RCPresetCallRequest
// Struct Size::0x0070
struct FRCPresetCallRequest : public FRCRequest
{
    bool                                          GenerateTransaction;                                          // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
};


// ScriptStruct  WebRemoteControl.RCPresetSetPropertyRequest
// Struct Size::0x0070
struct FRCPresetSetPropertyRequest : public FRCRequest
{
    bool                                          GenerateTransaction;                                          // 0x0068(0x0001)
    bool                                          ResetToDefault;                                               // 0x0069(0x0001)
    char                                          pa_006A[0x0006]                                               // 0x006A(0x0006)
};


// ScriptStruct  WebRemoteControl.RCObjectRequest
// Struct Size::0x0090
struct FRCObjectRequest : public FRCRequest
{
    FString                                       ObjectPath;                                                   // 0x0068(0x0010)
    FString                                       PropertyName;                                                 // 0x0078(0x0010)
    bool                                          ResetToDefault;                                               // 0x0088(0x0001)
    bool                                          GenerateTransaction;                                          // 0x0089(0x0001)
    enum class ERCAccess                          Access;                                                       // 0x008A(0x0001)
    char                                          pa_008B[0x0005]                                               // 0x008B(0x0005)
};


// ScriptStruct  WebRemoteControl.RCCallRequest
// Struct Size::0x0090
struct FRCCallRequest : public FRCRequest
{
    FString                                       ObjectPath;                                                   // 0x0068(0x0010)
    FString                                       FunctionName;                                                 // 0x0078(0x0010)
    bool                                          GenerateTransaction;                                          // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
};


// ScriptStruct  WebRemoteControl.RemoteControlObjectEventHookRequest
// Struct Size::0x0090
struct FRemoteControlObjectEventHookRequest : public FRCRequest
{
    enum class ERemoteControlEvent                EventType;                                                    // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
    FString                                       ObjectPath;                                                   // 0x0070(0x0010)
    FString                                       PropertyName;                                                 // 0x0080(0x0010)
};


// ScriptStruct  WebRemoteControl.RCBatchRequest
// Struct Size::0x0078
struct FRCBatchRequest : public FRCRequest
{
    TArray<FRCRequestWrapper>                     Requests;                                                     // 0x0068(0x0010)
};


// ScriptStruct  WebRemoteControl.RCRequestWrapper
// Struct Size::0x0088
struct FRCRequestWrapper : public FRCRequest
{
    FString                                       URL;                                                          // 0x0068(0x0010)
    FName                                         Verb;                                                         // 0x0078(0x000C)
    int32_t                                       RequestId;                                                    // 0x0084(0x0004)
};


// ScriptStruct  WebRemoteControl.RCPresetEntitiesModifiedEvent
// Struct Size::0x0060
struct FRCPresetEntitiesModifiedEvent
{
    FString                                       Type;                                                         // 0x0000(0x0010)
    FName                                         PresetName;                                                   // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       PresetId;                                                     // 0x0020(0x0010)
    FRCPresetModifiedEntitiesDescription          ModifiedEntities;                                             // 0x0030(0x0030)
};


// ScriptStruct  WebRemoteControl.RCPresetFieldsAddedEvent
// Struct Size::0x0070
struct FRCPresetFieldsAddedEvent
{
    FString                                       Type;                                                         // 0x0000(0x0010)
    FName                                         PresetName;                                                   // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       PresetId;                                                     // 0x0020(0x0010)
    FRCPresetDescription                          Description;                                                  // 0x0030(0x0040)
};


// ScriptStruct  WebRemoteControl.RCPresetFieldsRemovedEvent
// Struct Size::0x0050
struct FRCPresetFieldsRemovedEvent
{
    FString                                       Type;                                                         // 0x0000(0x0010)
    FName                                         PresetName;                                                   // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       PresetId;                                                     // 0x0020(0x0010)
    TArray<FName>                                 RemovedFields;                                                // 0x0030(0x0010)
    TArray<FString>                               RemovedFieldIds;                                              // 0x0040(0x0010)
};


// ScriptStruct  WebRemoteControl.RCPresetLayoutModified
// Struct Size::0x0050
struct FRCPresetLayoutModified
{
    FString                                       Type;                                                         // 0x0000(0x0010)
    FRCPresetDescription                          Preset;                                                       // 0x0010(0x0040)
};


// ScriptStruct  WebRemoteControl.RCPresetMetadataModified
// Struct Size::0x0080
struct FRCPresetMetadataModified
{
    FString                                       Type;                                                         // 0x0000(0x0010)
    FName                                         PresetName;                                                   // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       PresetId;                                                     // 0x0020(0x0010)
    TMap<FString,FString>                         Metadata;                                                     // 0x0030(0x0050)
};


// ScriptStruct  WebRemoteControl.RCPresetFieldsRenamedEvent
// Struct Size::0x0040
struct FRCPresetFieldsRenamedEvent
{
    FString                                       Type;                                                         // 0x0000(0x0010)
    FName                                         PresetName;                                                   // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       PresetId;                                                     // 0x0020(0x0010)
    TArray<FRCPresetFieldRenamed>                 RenamedFields;                                                // 0x0030(0x0010)
};


// ScriptStruct  WebRemoteControl.SetEntityLabelResponse
// Struct Size::0x0010
struct FSetEntityLabelResponse
{
    FString                                       AssignedLabel;                                                // 0x0000(0x0010)
};


// ScriptStruct  WebRemoteControl.GetMetadataResponse
// Struct Size::0x0050
struct FGetMetadataResponse
{
    TMap<FString,FString>                         Metadata;                                                     // 0x0000(0x0050)
};


// ScriptStruct  WebRemoteControl.GetMetadataFieldResponse
// Struct Size::0x0010
struct FGetMetadataFieldResponse
{
    FString                                       Value;                                                        // 0x0000(0x0010)
};


// ScriptStruct  WebRemoteControl.SearchActorResponse
// Struct Size::0x0010
struct FSearchActorResponse
{
    TArray<FRCObjectDescription>                  Actors;                                                       // 0x0000(0x0010)
};


// ScriptStruct  WebRemoteControl.SearchAssetResponse
// Struct Size::0x0010
struct FSearchAssetResponse
{
    TArray<FRCAssetDescription>                   Assets;                                                       // 0x0000(0x0010)
};


// ScriptStruct  WebRemoteControl.DescribeObjectResponse
// Struct Size::0x0038
struct FDescribeObjectResponse
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    UObject*                                      Class;                                                        // 0x0010(0x0008)
    TArray<FRCPropertyDescription>                Properties;                                                   // 0x0018(0x0010)
    TArray<FRCFunctionDescription>                Functions;                                                    // 0x0028(0x0010)
};


// ScriptStruct  WebRemoteControl.GetPresetResponse
// Struct Size::0x0040
struct FGetPresetResponse
{
    FRCPresetDescription                          Preset;                                                       // 0x0000(0x0040)
};


// ScriptStruct  WebRemoteControl.ListPresetsResponse
// Struct Size::0x0010
struct FListPresetsResponse
{
    TArray<FRCShortPresetDescription>             Presets;                                                      // 0x0000(0x0010)
};


// ScriptStruct  WebRemoteControl.APIInfoResponse
// Struct Size::0x0048
struct FAPIInfoResponse
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<FRemoteControlRouteDescription>        HttpRoutes;                                                   // 0x0008(0x0010)
    FRCShortPresetDescription                     ActivePreset;                                                 // 0x0018(0x0030)
};


// ScriptStruct  WebRemoteControl.RemoteControlRouteDescription
// Struct Size::0x0028
struct FRemoteControlRouteDescription
{
    FString                                       Path;                                                         // 0x0000(0x0010)
    enum class ERemoteControlHttpVerbs            Verb;                                                         // 0x0010(0x0002)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
    FString                                       Description;                                                  // 0x0018(0x0010)
};


// ScriptStruct  RemoteControlCommon.RCPropertyContainerKey
// Struct Size::0x000C
struct FRCPropertyContainerKey
{
    FName                                         ValueTypeName;                                                // 0x0000(0x000C)
};


// ScriptStruct  RTPPlugin.RTPClientPlatformDefault
// Struct Size::0x0020
struct FRTPClientPlatformDefault
{
    FRTPClientPlatformDetails                     clientPlatformDetails;                                        // 0x0000(0x0020)
};


// ScriptStruct  RTPPlugin.RTPClientPlatformDetails
// Struct Size::0x0020
struct FRTPClientPlatformDetails
{
    FString                                       platformType;                                                 // 0x0000(0x0010)
    FString                                       platformMetadata;                                             // 0x0010(0x0010)
};


// ScriptStruct  RTPPlugin.RTPClientPlatformMetadata
// Struct Size::0x0040
struct FRTPClientPlatformMetadata
{
    FString                                       platformOS;                                                   // 0x0000(0x0010)
    FString                                       platformOSVersion;                                            // 0x0010(0x0010)
    FString                                       platformChipset;                                              // 0x0020(0x0010)
    FString                                       platformType;                                                 // 0x0030(0x0010)
};


// ScriptStruct  RTPPlugin.RTPEventMetadataDefault
// Struct Size::0x0070
struct FRTPEventMetadataDefault
{
    FRTPEventMetadata                             metadata;                                                     // 0x0000(0x0070)
};


// ScriptStruct  RTPPlugin.RTPEventMetadata
// Struct Size::0x0070
struct FRTPEventMetadata
{
    FString                                       schema;                                                       // 0x0000(0x0010)
    FRTPScopeMetadata                             scope;                                                        // 0x0010(0x0050)
    FString                                       timestamp;                                                    // 0x0060(0x0010)
};


// ScriptStruct  RTPPlugin.RTPScopeMetadata
// Struct Size::0x0050
struct FRTPScopeMetadata
{
    FString                                       environment;                                                  // 0x0000(0x0010)
    FString                                       datacenter;                                                   // 0x0010(0x0010)
    FString                                       deployment;                                                   // 0x0020(0x0010)
    FString                                       product;                                                      // 0x0030(0x0010)
    FString                                       component;                                                    // 0x0040(0x0010)
};


// ScriptStruct  AkAudio.AkAdvancedInitializationSettings
// Struct Size::0x002C
struct FAkAdvancedInitializationSettings
{
    uint32_t                                      IO;                                                           // 0x0000(0x0004)
    uint32_t                                      IO;                                                           // 0x0004(0x0004)
    float                                         TargetAutoStreamBufferLength;                                 // 0x0008(0x0004)
    bool                                          UseStreamCache;                                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    uint32_t                                      MaximumPinnedBytesInCache;                                    // 0x0010(0x0004)
    bool                                          EnableGameSyncPreparation;                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    uint32_t                                      ContinuousPlaybackLookAhead;                                  // 0x0018(0x0004)
    uint32_t                                      MonitorQueuePoolSize;                                         // 0x001C(0x0004)
    uint32_t                                      MaximumHardwareTimeoutMs;                                     // 0x0020(0x0004)
    bool                                          DebugOutOfRangeCheckEnabled;                                  // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         DebugOutOfRangeLimit;                                         // 0x0028(0x0004)
};


// ScriptStruct  AkAudio.AkAdvancedInitializationSettingsWithMultiCoreRendering
// Struct Size::0x0038
struct FAkAdvancedInitializationSettingsWithMultiCoreRendering : public FAkAdvancedInitializationSettings
{
    bool                                          EnableMultiCoreRendering;                                     // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    uint32_t                                      MaxNumJobWorkers;                                             // 0x0030(0x0004)
    uint32_t                                      JobWorkerMaxExecutionTimeUSec;                                // 0x0034(0x0004)
};


// ScriptStruct  AkAudio.AkAndroidAdvancedInitializationSettings
// Struct Size::0x0040
struct FAkAndroidAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    uint32_t                                      AudioAPI;                                                     // 0x0038(0x0004)
    bool                                          RoundFrameSizeToHardwareSize;                                 // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  AkAudio.AkAudioSession
// Struct Size::0x000C
struct FAkAudioSession
{
    enum class EAkAudioSessionCategory            AudioSessionCategory;                                         // 0x0000(0x0004)
    uint32_t                                      AudioSessionCategoryOptions;                                  // 0x0004(0x0004)
    enum class EAkAudioSessionMode                AudioSessionMode;                                             // 0x0008(0x0004)
};


// ScriptStruct  AkAudio.AkExternalSourceInfo
// Struct Size::0x0038
struct FAkExternalSourceInfo
{
    FString                                       ExternalSrcName;                                              // 0x0000(0x0010)
    enum class AkCodecId                          CodecID;                                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FString                                       FileName;                                                     // 0x0018(0x0010)
    FAkExternalMediaAsset*                        ExternalSourceAsset;                                          // 0x0028(0x0008)
    bool                                          IsStreamed;                                                   // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  AkAudio.AkSegmentInfo
// Struct Size::0x0024
struct FAkSegmentInfo
{
    int32_t                                       CurrentPosition;                                              // 0x0000(0x0004)
    int32_t                                       PreEntryDuration;                                             // 0x0004(0x0004)
    int32_t                                       ActiveDuration;                                               // 0x0008(0x0004)
    int32_t                                       PostExitDuration;                                             // 0x000C(0x0004)
    int32_t                                       RemainingLookAheadTime;                                       // 0x0010(0x0004)
    float                                         BeatDuration;                                                 // 0x0014(0x0004)
    float                                         BarDuration;                                                  // 0x0018(0x0004)
    float                                         GridDuration;                                                 // 0x001C(0x0004)
    float                                         GridOffset;                                                   // 0x0020(0x0004)
};


// ScriptStruct  AkAudio.AkMidiEventBase
// Struct Size::0x0002
struct FAkMidiEventBase
{
    enum class EAkMidiEventType                   Type;                                                         // 0x0000(0x0001)
    char                                          Chan;                                                         // 0x0001(0x0001)
};


// ScriptStruct  AkAudio.AkMidiProgramChange
// Struct Size::0x0003
struct FAkMidiProgramChange : public FAkMidiEventBase
{
    char                                          ProgramNum;                                                   // 0x0002(0x0001)
};


// ScriptStruct  AkAudio.AkMidiChannelAftertouch
// Struct Size::0x0003
struct FAkMidiChannelAftertouch : public FAkMidiEventBase
{
    char                                          Value;                                                        // 0x0002(0x0001)
};


// ScriptStruct  AkAudio.AkMidiNoteAftertouch
// Struct Size::0x0004
struct FAkMidiNoteAftertouch : public FAkMidiEventBase
{
    char                                          Note;                                                         // 0x0002(0x0001)
    char                                          Value;                                                        // 0x0003(0x0001)
};


// ScriptStruct  AkAudio.AkMidiPitchBend
// Struct Size::0x0008
struct FAkMidiPitchBend : public FAkMidiEventBase
{
    char                                          ValueLsb;                                                     // 0x0002(0x0001)
    char                                          ValueMsb;                                                     // 0x0003(0x0001)
    int32_t                                       FullValue;                                                    // 0x0004(0x0004)
};


// ScriptStruct  AkAudio.AkMidiCc
// Struct Size::0x0004
struct FAkMidiCc : public FAkMidiEventBase
{
    enum class EAkMidiCcValues                    Cc;                                                           // 0x0002(0x0001)
    char                                          Value;                                                        // 0x0003(0x0001)
};


// ScriptStruct  AkAudio.AkMidiNoteOnOff
// Struct Size::0x0004
struct FAkMidiNoteOnOff : public FAkMidiEventBase
{
    char                                          Note;                                                         // 0x0002(0x0001)
    char                                          Velocity;                                                     // 0x0003(0x0001)
};


// ScriptStruct  AkAudio.AkMidiGeneric
// Struct Size::0x0004
struct FAkMidiGeneric : public FAkMidiEventBase
{
    char                                          Param1;                                                       // 0x0002(0x0001)
    char                                          Param2;                                                       // 0x0003(0x0001)
};


// ScriptStruct  AkAudio.AkOutputSettings
// Struct Size::0x0018
struct FAkOutputSettings
{
    FString                                       AudioDeviceShareSetName;                                      // 0x0000(0x0010)
    int32_t                                       IdDevice;                                                     // 0x0010(0x0004)
    enum class PanningRule                        PanRule;                                                      // 0x0014(0x0001)
    enum class AkChannelConfiguration             ChannelConfig;                                                // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
};


// ScriptStruct  AkAudio.AkChannelMask
// Struct Size::0x0004
struct FAkChannelMask
{
    int32_t                                       ChannelMask;                                                  // 0x0000(0x0004)
};


// ScriptStruct  AkAudio.AkGeometrySurfaceOverride
// Struct Size::0x0018
struct FAkGeometrySurfaceOverride
{
    FAkAcousticTexture*                           AcousticTexture;                                              // 0x0000(0x0008)
    bool                                          bEnableOcclusionOverride;                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         OcclusionValue;                                               // 0x000C(0x0004)
    float                                         SurfaceArea;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  AkAudio.AkGeometryData
// Struct Size::0x0050
struct FAkGeometryData
{
    TArray<FVector>                               Vertices;                                                     // 0x0000(0x0010)
    TArray<FAkAcousticSurface>                    Surfaces;                                                     // 0x0010(0x0010)
    TArray<FAkTriangle>                           Triangles;                                                    // 0x0020(0x0010)
    TArray<FPhysicalMaterial*>                    ToOverrideAcousticTexture;                                    // 0x0030(0x0010)
    TArray<FPhysicalMaterial*>                    ToOverrideOcclusion;                                          // 0x0040(0x0010)
};


// ScriptStruct  AkAudio.AkTriangle
// Struct Size::0x0008
struct FAkTriangle
{
    uint16_t                                      Point0;                                                       // 0x0000(0x0002)
    uint16_t                                      Point1;                                                       // 0x0002(0x0002)
    uint16_t                                      Point2;                                                       // 0x0004(0x0002)
    uint16_t                                      Surface;                                                      // 0x0006(0x0002)
};


// ScriptStruct  AkAudio.AkAcousticSurface
// Struct Size::0x0018
struct FAkAcousticSurface
{
    uint32_t                                      Texture;                                                      // 0x0000(0x0004)
    float                                         Occlusion;                                                    // 0x0004(0x0004)
    FString                                       Name;                                                         // 0x0008(0x0010)
};


// ScriptStruct  AkAudio.AkHololensAdvancedInitializationSettings
// Struct Size::0x003C
struct FAkHololensAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    bool                                          UseHeadMountedDisplayAudioDevice;                             // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
};


// ScriptStruct  AkAudio.AkCommonInitializationSettings
// Struct Size::0x0068
struct FAkCommonInitializationSettings
{
    uint32_t                                      MaximumNumberOfMemoryPools;                                   // 0x0000(0x0004)
    uint32_t                                      MaximumNumberOfPositioningPaths;                              // 0x0004(0x0004)
    uint32_t                                      CommandQueueSize;                                             // 0x0008(0x0004)
    uint32_t                                      SamplesPerFrame;                                              // 0x000C(0x0004)
    FAkMainOutputSettings                         MainOutputSettings;                                           // 0x0010(0x0028)
    float                                         StreamingLookAheadRatio;                                      // 0x0038(0x0004)
    uint16_t                                      NumberOfRefillsInVoice;                                       // 0x003C(0x0002)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
    FAkSpatialAudioSettings                       SpatialAudioSettings;                                         // 0x0040(0x0028)
};


// ScriptStruct  AkAudio.AkSpatialAudioSettings
// Struct Size::0x0028
struct FAkSpatialAudioSettings
{
    uint32_t                                      MaxSoundPropagationDepth;                                     // 0x0000(0x0004)
    float                                         MovementThreshold;                                            // 0x0004(0x0004)
    uint32_t                                      NumberOfPrimaryRays;                                          // 0x0008(0x0004)
    uint32_t                                      ReflectionOrder;                                              // 0x000C(0x0004)
    uint32_t                                      DiffractionOrder;                                             // 0x0010(0x0004)
    uint32_t                                      DiffractionOnReflectionsOrder;                                // 0x0014(0x0004)
    float                                         MaximumPathLength;                                            // 0x0018(0x0004)
    float                                         CPULimitPercentage;                                           // 0x001C(0x0004)
    uint32_t                                      LoadBalancingSpread;                                          // 0x0020(0x0004)
    bool                                          EnableGeometricDiffractionAndTransmission;                    // 0x0024(0x0001)
    bool                                          CalcEmitterVirtualPosition;                                   // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
};


// ScriptStruct  AkAudio.AkMainOutputSettings
// Struct Size::0x0028
struct FAkMainOutputSettings
{
    FString                                       AudioDeviceShareSet;                                          // 0x0000(0x0010)
    uint32_t                                      DeviceID;                                                     // 0x0010(0x0004)
    enum class EAkPanningRule                     PanningRule;                                                  // 0x0014(0x0004)
    enum class EAkChannelConfigType               ChannelConfigType;                                            // 0x0018(0x0004)
    uint32_t                                      ChannelMask;                                                  // 0x001C(0x0004)
    uint32_t                                      NumberOfChannels;                                             // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  AkAudio.AkCommonInitializationSettingsWithSampleRate
// Struct Size::0x0070
struct FAkCommonInitializationSettingsWithSampleRate : public FAkCommonInitializationSettings
{
    uint32_t                                      SampleRate;                                                   // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  AkAudio.AkCommunicationSettings
// Struct Size::0x0018
struct FAkCommunicationSettings
{
    uint32_t                                      PoolSize;                                                     // 0x0000(0x0004)
    uint16_t                                      DiscoveryBroadcastPort;                                       // 0x0004(0x0002)
    uint16_t                                      CommandPort;                                                  // 0x0006(0x0002)
    FString                                       NetworkName;                                                  // 0x0008(0x0010)
};


// ScriptStruct  AkAudio.AkCommunicationSettingsWithCommSelection
// Struct Size::0x0020
struct FAkCommunicationSettingsWithCommSelection : public FAkCommunicationSettings
{
    enum class EAkCommSystem                      CommunicationSystem;                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  AkAudio.AkCommunicationSettingsWithSystemInitialization
// Struct Size::0x0020
struct FAkCommunicationSettingsWithSystemInitialization : public FAkCommunicationSettings
{
    bool                                          InitializeSystemComms;                                        // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  AkAudio.AkBoolPropertyToControl
// Struct Size::0x0010
struct FAkBoolPropertyToControl
{
    FString                                       ItemProperty;                                                 // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkPropertyToControl
// Struct Size::0x0010
struct FAkPropertyToControl
{
    FString                                       ItemProperty;                                                 // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkPS4AdvancedInitializationSettings
// Struct Size::0x0040
struct FAkPS4AdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    uint32_t                                      ACPBatchBufferSize;                                           // 0x0038(0x0004)
    bool                                          UseHardwareCodecLowLatencyMode;                               // 0x003C(0x0001)
    bool                                          bPlotQueueLevel;                                              // 0x003D(0x0001)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
};


// ScriptStruct  AkAudio.AkPS5AdvancedInitializationSettings
// Struct Size::0x0044
struct FAkPS5AdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    bool                                          UseHardwareCodecLowLatencyMode;                               // 0x0038(0x0001)
    bool                                          bVorbisHwAcceleration;                                        // 0x0039(0x0001)
    bool                                          bEnable3DAudioSync;                                           // 0x003A(0x0001)
    char                                          pa_003B[0x0001]                                               // 0x003B(0x0001)
    uint32_t                                      uNumOperationsForHwMixing;                                    // 0x003C(0x0004)
    bool                                          bPlotQueueLevel;                                              // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
};


// ScriptStruct  AkAudio.AkReverbDescriptor
// Struct Size::0x0028
struct FAkReverbDescriptor
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
    UPrimitiveComponent*                          Primitive;                                                    // 0x0018(0x0008)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  AkAudio.AkAcousticTextureParams
// Struct Size::0x0020
struct FAkAcousticTextureParams
{
    FVector4                                      AbsorptionValues;                                             // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  AkAudio.AkGeometrySurfacePropertiesToMap
// Struct Size::0x0038
struct FAkGeometrySurfacePropertiesToMap
{
    TSoftObjectPtr<FAkAcousticTexture>            AcousticTexture;                                              // 0x0000(0x0030)
    float                                         OcclusionValue;                                               // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  AkAudio.AkWwiseItemToControl
// Struct Size::0x0040
struct FAkWwiseItemToControl
{
    FAkWwiseObjectDetails                         ItemPicked;                                                   // 0x0000(0x0030)
    FString                                       ItemPath;                                                     // 0x0030(0x0010)
};


// ScriptStruct  AkAudio.AkWwiseObjectDetails
// Struct Size::0x0030
struct FAkWwiseObjectDetails
{
    FString                                       ItemName;                                                     // 0x0000(0x0010)
    FString                                       ItemPath;                                                     // 0x0010(0x0010)
    FString                                       ItemId;                                                       // 0x0020(0x0010)
};


// ScriptStruct  AkAudio.AkSurfacePoly
// Struct Size::0x0018
struct FAkSurfacePoly
{
    FAkAcousticTexture*                           Texture;                                                      // 0x0000(0x0008)
    float                                         Occlusion;                                                    // 0x0008(0x0004)
    bool                                          EnableSurface;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         SurfaceArea;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  AkAudio.AkSurfaceEdgeInfo
// Struct Size::0x0028
struct FAkSurfaceEdgeInfo
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  AkAudio.AkSurfaceEdgeVerts
// Struct Size::0x0018
struct FAkSurfaceEdgeVerts
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  AkAudio.AkWaapiFieldNames
// Struct Size::0x0010
struct FAkWaapiFieldNames
{
    FString                                       FieldName;                                                    // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkWaapiUri
// Struct Size::0x0010
struct FAkWaapiUri
{
    FString                                       Uri;                                                          // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkWindowsAdvancedInitializationSettings
// Struct Size::0x0040
struct FAkWindowsAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    bool                                          UseHeadMountedDisplayAudioDevice;                             // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    uint32_t                                      MaxSystemAudioObjects;                                        // 0x003C(0x0004)
};


// ScriptStruct  AkAudio.AkWinGDKAdvancedInitializationSettings
// Struct Size::0x0040
struct FAkWinGDKAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    bool                                          UseHeadMountedDisplayAudioDevice;                             // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    uint32_t                                      uMaxSystemAudioObjects;                                       // 0x003C(0x0004)
};


// ScriptStruct  AkAudio.AkXboxOneGDKApuHeapInitializationSettings
// Struct Size::0x0008
struct FAkXboxOneGDKApuHeapInitializationSettings
{
    uint32_t                                      CachedSize;                                                   // 0x0000(0x0004)
    uint32_t                                      NonCachedSize;                                                // 0x0004(0x0004)
};


// ScriptStruct  AkAudio.AkXboxOneGDKAdvancedInitializationSettings
// Struct Size::0x003C
struct FAkXboxOneGDKAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    uint16_t                                      MaximumNumberOfXMAVoices;                                     // 0x0038(0x0002)
    bool                                          UseHardwareCodecLowLatencyMode;                               // 0x003A(0x0001)
    char                                          pa_003B[0x0001]                                               // 0x003B(0x0001)
};


// ScriptStruct  AkAudio.AkXboxOneApuHeapInitializationSettings
// Struct Size::0x0008
struct FAkXboxOneApuHeapInitializationSettings
{
    uint32_t                                      CachedSize;                                                   // 0x0000(0x0004)
    uint32_t                                      NonCachedSize;                                                // 0x0004(0x0004)
};


// ScriptStruct  AkAudio.AkXboxOneAdvancedInitializationSettings
// Struct Size::0x003C
struct FAkXboxOneAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    uint16_t                                      MaximumNumberOfXMAVoices;                                     // 0x0038(0x0002)
    bool                                          UseHardwareCodecLowLatencyMode;                               // 0x003A(0x0001)
    char                                          pa_003B[0x0001]                                               // 0x003B(0x0001)
};


// ScriptStruct  AkAudio.AkXSXApuHeapInitializationSettings
// Struct Size::0x0008
struct FAkXSXApuHeapInitializationSettings
{
    uint32_t                                      CachedSize;                                                   // 0x0000(0x0004)
    uint32_t                                      NonCachedSize;                                                // 0x0004(0x0004)
};


// ScriptStruct  AkAudio.AkXSXAdvancedInitializationSettings
// Struct Size::0x0044
struct FAkXSXAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    uint16_t                                      MaximumNumberOfXMAVoices;                                     // 0x0038(0x0002)
    bool                                          UseHardwareCodecLowLatencyMode;                               // 0x003A(0x0001)
    char                                          pa_003B[0x0001]                                               // 0x003B(0x0001)
    uint16_t                                      MaximumNumberOfOpusVoices;                                    // 0x003C(0x0002)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
    uint32_t                                      uMaxSystemAudioObjects;                                       // 0x0040(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvalTemplateBase
// Struct Size::0x0010
struct FMovieSceneEvalTemplateBase
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvalTemplate
// Struct Size::0x0020
struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
{
    enum class EMovieSceneCompletionMode          CompletionMode;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    TWeakObjectPtr<FMovieSceneSection>            SourceSectionPtr;                                             // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  AkAudio.MovieSceneAkAudioEventTemplate
// Struct Size::0x0028
struct FMovieSceneAkAudioEventTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneAkAudioEventSection*               Section;                                                      // 0x0020(0x0008)
};


// ScriptStruct  AkAudio.MovieSceneAkAudioRTPCTemplate
// Struct Size::0x0028
struct FMovieSceneAkAudioRTPCTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneAkAudioRTPCSection*                Section;                                                      // 0x0020(0x0008)
};


// ScriptStruct  AkAudio.MovieSceneFloatChannelSerializationHelper
// Struct Size::0x0030
struct FMovieSceneFloatChannelSerializationHelper
{
    enum class ERichCurveExtrapolation            PreInfinityExtrap;                                            // 0x0000(0x0001)
    enum class ERichCurveExtrapolation            PostInfinityExtrap;                                           // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<int32_t>                               Times;                                                        // 0x0008(0x0010)
    TArray<FMovieSceneFloatValueSerializationHelper>Values;                                                     // 0x0018(0x0010)
    float                                         DefaultValue;                                                 // 0x0028(0x0004)
    bool                                          bHasDefaultValue;                                             // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  AkAudio.MovieSceneFloatValueSerializationHelper
// Struct Size::0x001C
struct FMovieSceneFloatValueSerializationHelper
{
    float                                         Value;                                                        // 0x0000(0x0004)
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0004(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    FMovieSceneTangentDataSerializationHelper     Tangent;                                                      // 0x0008(0x0014)
};


// ScriptStruct  AkAudio.MovieSceneTangentDataSerializationHelper
// Struct Size::0x0014
struct FMovieSceneTangentDataSerializationHelper
{
    float                                         ArriveTangent;                                                // 0x0000(0x0004)
    float                                         LeaveTangent;                                                 // 0x0004(0x0004)
    enum class ERichCurveTangentWeightMode        TangentWeightMode;                                            // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         ArriveTangentWeight;                                          // 0x000C(0x0004)
    float                                         LeaveTangentWeight;                                           // 0x0010(0x0004)
};


// ScriptStruct  WwiseFileHandler.WwiseExternalSourceCookedData
// Struct Size::0x0010
struct FWwiseExternalSourceCookedData
{
    int32_t                                       Cookie;                                                       // 0x0000(0x0004)
    FName                                         DebugName;                                                    // 0x0004(0x000C)
};


// ScriptStruct  WwiseFileHandler.WwiseLanguageCookedData
// Struct Size::0x0014
struct FWwiseLanguageCookedData
{
    int32_t                                       LanguageId;                                                   // 0x0000(0x0004)
    FName                                         LanguageName;                                                 // 0x0004(0x000C)
    enum class EWwiseLanguageRequirement          LanguageRequirement;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  WwiseFileHandler.WwiseMediaCookedData
// Struct Size::0x0028
struct FWwiseMediaCookedData
{
    int32_t                                       MediaId;                                                      // 0x0000(0x0004)
    FName                                         MediaPathName;                                                // 0x0004(0x000C)
    int32_t                                       PrefetchSize;                                                 // 0x0010(0x0004)
    int32_t                                       MemoryAlignment;                                              // 0x0014(0x0004)
    bool                                          bDeviceMemory;                                                // 0x0018(0x0001)
    bool                                          bStreaming;                                                   // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    FName                                         DebugName;                                                    // 0x001C(0x000C)
};


// ScriptStruct  WwiseFileHandler.WwiseSoundBankCookedData
// Struct Size::0x0024
struct FWwiseSoundBankCookedData
{
    int32_t                                       SoundBankId;                                                  // 0x0000(0x0004)
    FName                                         SoundBankPathName;                                            // 0x0004(0x000C)
    int32_t                                       MemoryAlignment;                                              // 0x0010(0x0004)
    bool                                          bDeviceMemory;                                                // 0x0014(0x0001)
    bool                                          bContainsMedia;                                               // 0x0015(0x0001)
    enum class EWwiseSoundBankType                SoundBankType;                                                // 0x0016(0x0001)
    char                                          pa_0017[0x0001]                                               // 0x0017(0x0001)
    FName                                         DebugName;                                                    // 0x0018(0x000C)
};


// ScriptStruct  WwiseResourceLoader.WwiseAcousticTextureCookedData
// Struct Size::0x0010
struct FWwiseAcousticTextureCookedData
{
    int32_t                                       ShortId;                                                      // 0x0000(0x0004)
    FName                                         DebugName;                                                    // 0x0004(0x000C)
};


// ScriptStruct  WwiseResourceLoader.WwiseAuxBusCookedData
// Struct Size::0x0038
struct FWwiseAuxBusCookedData
{
    int32_t                                       AuxBusId;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FWwiseSoundBankCookedData>             SoundBanks;                                                   // 0x0008(0x0010)
    TArray<FWwiseMediaCookedData>                 Media;                                                        // 0x0018(0x0010)
    FName                                         DebugName;                                                    // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  WwiseResourceLoader.WwiseEventCookedData
// Struct Size::0x00A8
struct FWwiseEventCookedData
{
    int32_t                                       EventId;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FWwiseSoundBankCookedData>             SoundBanks;                                                   // 0x0008(0x0010)
    TArray<FWwiseMediaCookedData>                 Media;                                                        // 0x0018(0x0010)
    TArray<FWwiseExternalSourceCookedData>        ExternalSources;                                              // 0x0028(0x0010)
    TArray<FWwiseSwitchContainerLeafCookedData>   SwitchContainerLeaves;                                        // 0x0038(0x0010)
    TSet<FWwiseGroupValueCookedData>              RequiredGroupValueSet;                                        // 0x0048(0x0050)
    enum class EWwiseEventDestroyOptions          DestroyOptions;                                               // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    FName                                         DebugName;                                                    // 0x009C(0x000C)
};


// ScriptStruct  WwiseResourceLoader.WwiseGroupValueCookedData
// Struct Size::0x0018
struct FWwiseGroupValueCookedData
{
    enum class EWwiseGroupType                    Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       GroupId;                                                      // 0x0004(0x0004)
    int32_t                                       Id;                                                           // 0x0008(0x0004)
    FName                                         DebugName;                                                    // 0x000C(0x000C)
};


// ScriptStruct  WwiseResourceLoader.WwiseSwitchContainerLeafCookedData
// Struct Size::0x0080
struct FWwiseSwitchContainerLeafCookedData
{
    TSet<FWwiseGroupValueCookedData>              GroupValueSet;                                                // 0x0000(0x0050)
    TArray<FWwiseSoundBankCookedData>             SoundBanks;                                                   // 0x0050(0x0010)
    TArray<FWwiseMediaCookedData>                 Media;                                                        // 0x0060(0x0010)
    TArray<FWwiseExternalSourceCookedData>        ExternalSources;                                              // 0x0070(0x0010)
};


// ScriptStruct  WwiseResourceLoader.WwiseObjectInfo
// Struct Size::0x0024
struct FWwiseObjectInfo
{
    FGuid                                         WwiseGuid;                                                    // 0x0000(0x0010)
    uint32_t                                      WwiseShortId;                                                 // 0x0010(0x0004)
    FName                                         WwiseName;                                                    // 0x0014(0x000C)
    uint32_t                                      HardCodedSoundBankShortId;                                    // 0x0020(0x0004)
};


// ScriptStruct  WwiseResourceLoader.WwiseEventInfo
// Struct Size::0x0028
struct FWwiseEventInfo : public FWwiseObjectInfo
{
    enum class EWwiseEventSwitchContainerLoading  SwitchContainerLoading;                                       // 0x0024(0x0001)
    enum class EWwiseEventDestroyOptions          DestroyOptions;                                               // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
};


// ScriptStruct  WwiseResourceLoader.WwiseGameParameterCookedData
// Struct Size::0x0010
struct FWwiseGameParameterCookedData
{
    int32_t                                       ShortId;                                                      // 0x0000(0x0004)
    FName                                         DebugName;                                                    // 0x0004(0x000C)
};


// ScriptStruct  WwiseResourceLoader.WwiseGroupValueInfo
// Struct Size::0x0028
struct FWwiseGroupValueInfo : public FWwiseObjectInfo
{
    uint32_t                                      GroupShortId;                                                 // 0x0024(0x0004)
};


// ScriptStruct  WwiseResourceLoader.WwiseInitBankCookedData
// Struct Size::0x0048
struct FWwiseInitBankCookedData : public FWwiseSoundBankCookedData
{
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FWwiseMediaCookedData>                 Media;                                                        // 0x0028(0x0010)
    TArray<FWwiseLanguageCookedData>              Language;                                                     // 0x0038(0x0010)
};


// ScriptStruct  WwiseResourceLoader.WwiseLanguageId
// Struct Size::0x0010
struct FWwiseLanguageId
{
    int32_t                                       LanguageId;                                                   // 0x0000(0x0004)
    FName                                         LanguageName;                                                 // 0x0004(0x000C)
};


// ScriptStruct  WwiseResourceLoader.WwiseLocalizedAuxBusCookedData
// Struct Size::0x0060
struct FWwiseLocalizedAuxBusCookedData
{
    TMap<FWwiseLanguageCookedData,FWwiseAuxBusCookedData>AuxBusLanguageMap;                                     // 0x0000(0x0050)
    FName                                         DebugName;                                                    // 0x0050(0x000C)
    int32_t                                       AuxBusId;                                                     // 0x005C(0x0004)
};


// ScriptStruct  WwiseResourceLoader.WwiseLocalizedEventCookedData
// Struct Size::0x0060
struct FWwiseLocalizedEventCookedData
{
    TMap<FWwiseLanguageCookedData,FWwiseEventCookedData>EventLanguageMap;                                       // 0x0000(0x0050)
    FName                                         DebugName;                                                    // 0x0050(0x000C)
    int32_t                                       EventId;                                                      // 0x005C(0x0004)
};


// ScriptStruct  WwiseResourceLoader.WwiseLocalizedShareSetCookedData
// Struct Size::0x0060
struct FWwiseLocalizedShareSetCookedData
{
    TMap<FWwiseLanguageCookedData,FWwiseShareSetCookedData>ShareSetLanguageMap;                                 // 0x0000(0x0050)
    FName                                         DebugName;                                                    // 0x0050(0x000C)
    int32_t                                       ShareSetId;                                                   // 0x005C(0x0004)
};


// ScriptStruct  WwiseResourceLoader.WwiseShareSetCookedData
// Struct Size::0x0038
struct FWwiseShareSetCookedData
{
    int32_t                                       ShareSetId;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FWwiseSoundBankCookedData>             SoundBanks;                                                   // 0x0008(0x0010)
    TArray<FWwiseMediaCookedData>                 Media;                                                        // 0x0018(0x0010)
    FName                                         DebugName;                                                    // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  WwiseResourceLoader.WwiseLocalizedSoundBankCookedData
// Struct Size::0x0060
struct FWwiseLocalizedSoundBankCookedData
{
    TMap<FWwiseLanguageCookedData,FWwiseSoundBankCookedData>SoundBankLanguageMap;                               // 0x0000(0x0050)
    FName                                         DebugName;                                                    // 0x0050(0x000C)
    int32_t                                       SoundBankId;                                                  // 0x005C(0x0004)
};


// ScriptStruct  WwiseResourceLoader.WwisePlatformId
// Struct Size::0x001C
struct FWwisePlatformId
{
    FGuid                                         PlatformGuid;                                                 // 0x0000(0x0010)
    FName                                         PlatformName;                                                 // 0x0010(0x000C)
};


// ScriptStruct  WwiseResourceLoader.WwiseSharedGroupValueKey
// Struct Size::0x0010
struct FWwiseSharedGroupValueKey
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  WwiseResourceLoader.WwiseSharedLanguageId
// Struct Size::0x0018
struct FWwiseSharedLanguageId
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    enum class EWwiseLanguageRequirement          LanguageRequirement;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  WwiseResourceLoader.WwiseSharedPlatformId
// Struct Size::0x0010
struct FWwiseSharedPlatformId
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  WwiseResourceLoader.WwiseTriggerCookedData
// Struct Size::0x0010
struct FWwiseTriggerCookedData
{
    int32_t                                       TriggerId;                                                    // 0x0000(0x0004)
    FName                                         DebugName;                                                    // 0x0004(0x000C)
};


// ScriptStruct  WwiseSoundEngine.AkUInt32Wrapper
// Struct Size::0x0004
struct FAkUInt32Wrapper
{
    uint32_t                                      UInt32Value;                                                  // 0x0000(0x0004)
};


// ScriptStruct  WwiseSoundEngine.AkUniqueID
// Struct Size::0x0004
struct FAkUniqueID : public FAkUInt32Wrapper
{
};


// ScriptStruct  WwiseSoundEngine.AkUInt64Wrapper
// Struct Size::0x0008
struct FAkUInt64Wrapper
{
    uint64_t                                      UInt64Value;                                                  // 0x0000(0x0008)
};


// ScriptStruct  WwiseSoundEngine.AkOutputDeviceID
// Struct Size::0x0008
struct FAkOutputDeviceID : public FAkUInt64Wrapper
{
};


// ScriptStruct  WwiseSimpleExternalSource.WwiseExternalSourceCookieDefaultMedia
// Struct Size::0x0038
struct FWwiseExternalSourceCookieDefaultMedia : public FTableRowBase
{
    int32_t                                       ExternalSourceCookie;                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       ExternalSourceName;                                           // 0x0010(0x0010)
    int32_t                                       MediaInfoId;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       MediaName;                                                    // 0x0028(0x0010)
};


// ScriptStruct  WwiseSimpleExternalSource.WwiseExternalSourceMediaInfo
// Struct Size::0x0028
struct FWwiseExternalSourceMediaInfo : public FTableRowBase
{
    int32_t                                       ExternalSourceMediaInfoId;                                    // 0x0008(0x0004)
    FName                                         MediaName;                                                    // 0x000C(0x000C)
    int32_t                                       CodecID;                                                      // 0x0018(0x0004)
    bool                                          bIsStreamed;                                                  // 0x001C(0x0001)
    bool                                          bUseDeviceMemory;                                             // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    int32_t                                       MemoryAlignment;                                              // 0x0020(0x0004)
    int32_t                                       PrefetchSize;                                                 // 0x0024(0x0004)
};


// ScriptStruct  Engine.ActorComponentInstanceData
// Struct Size::0x0068
struct FActorComponentInstanceData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UObject*                                      SourceComponentTemplate;                                      // 0x0008(0x0008)
    enum class EComponentCreationMethod           SourceComponentCreationMethod;                                // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       SourceComponentTypeSerializedIndex;                           // 0x0014(0x0004)
    TArray<char>                                  SavedProperties;                                              // 0x0018(0x0010)
    FActorComponentDuplicatedObjectData           UniqueTransientPackage;                                       // 0x0028(0x0010)
    TArray<FActorComponentDuplicatedObjectData>   DuplicatedObjects;                                            // 0x0038(0x0010)
    TArray<UObject*>                              ReferencedObjects;                                            // 0x0048(0x0010)
    TArray<FName>                                 ReferencedNames;                                              // 0x0058(0x0010)
};


// ScriptStruct  Engine.ActorComponentDuplicatedObjectData
// Struct Size::0x0010
struct FActorComponentDuplicatedObjectData
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniAssetBlueprintInstanceData
// Struct Size::0x0120
struct FHoudiniAssetBlueprintInstanceData : public FActorComponentInstanceData
{
    FHoudiniAsset*                                HoudiniAsset;                                                 // 0x0068(0x0008)
    int32_t                                       AssetId;                                                      // 0x0070(0x0004)
    enum class EHoudiniAssetState                 AssetState;                                                   // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
    uint32_t                                      SubAssetIndex;                                                // 0x0078(0x0004)
    uint32_t                                      AssetCookCount;                                               // 0x007C(0x0004)
    bool                                          bHasBeenLoaded;                                               // 0x0080(0x0001)
    bool                                          bHasBeenDuplicated;                                           // 0x0081(0x0001)
    bool                                          bPendingDelete;                                               // 0x0082(0x0001)
    bool                                          bRecookRequested;                                             // 0x0083(0x0001)
    bool                                          bRebuildRequested;                                            // 0x0084(0x0001)
    bool                                          bEnableCooking;                                               // 0x0085(0x0001)
    bool                                          bForceNeedUpdate;                                             // 0x0086(0x0001)
    bool                                          bLastCookSuccess;                                             // 0x0087(0x0001)
    FGuid                                         ComponentGUID;                                                // 0x0088(0x0010)
    FGuid                                         HapiGUID;                                                     // 0x0098(0x0010)
    bool                                          bRegisteredComponentTemplate;                                 // 0x00A8(0x0001)
    char                                          pa_00A9[0x0007]                                               // 0x00A9(0x0007)
    FString                                       SourceName;                                                   // 0x00B0(0x0010)
    TMap<FHoudiniOutputObjectIdentifier,FHoudiniAssetBlueprintOutput>Outputs;                                   // 0x00C0(0x0050)
    TArray<FHoudiniInput*>                        Inputs;                                                       // 0x0110(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniOutputObjectIdentifier
// Struct Size::0x0040
struct FHoudiniOutputObjectIdentifier
{
    int32_t                                       ObjectId;                                                     // 0x0000(0x0004)
    int32_t                                       GeoId;                                                        // 0x0004(0x0004)
    int32_t                                       PartId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       SplitIdentifier;                                              // 0x0010(0x0010)
    FString                                       PartName;                                                     // 0x0020(0x0010)
    int32_t                                       PrimitiveIndex;                                               // 0x0030(0x0004)
    int32_t                                       PointIndex;                                                   // 0x0034(0x0004)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniAssetBlueprintOutput
// Struct Size::0x0100
struct FHoudiniAssetBlueprintOutput
{
    int32_t                                       OutputIndex;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FHoudiniOutputObject                          OutputObject;                                                 // 0x0008(0x00F8)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniOutputObject
// Struct Size::0x00F8
struct FHoudiniOutputObject
{
    UObject*                                      OutputObject;                                                 // 0x0000(0x0008)
    UObject*                                      OutputComponent;                                              // 0x0008(0x0008)
    UObject*                                      ProxyObject;                                                  // 0x0010(0x0008)
    UObject*                                      ProxyComponent;                                               // 0x0018(0x0008)
    bool                                          bProxyIsCurrent;                                              // 0x0020(0x0001)
    bool                                          bIsImplicit;                                                  // 0x0021(0x0001)
    bool                                          bIsGeometryCollectionPiece;                                   // 0x0022(0x0001)
    char                                          pa_0023[0x0005]                                               // 0x0023(0x0005)
    FString                                       GeometryCollectionPieceName;                                  // 0x0028(0x0010)
    FString                                       BakeName;                                                     // 0x0038(0x0010)
    FHoudiniCurveOutputProperties                 CurveOutputProperty;                                          // 0x0048(0x000C)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    TMap<FString,FString>                         CachedAttributes;                                             // 0x0058(0x0050)
    TMap<FString,FString>                         CachedTokens;                                                 // 0x00A8(0x0050)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniCurveOutputProperties
// Struct Size::0x000C
struct FHoudiniCurveOutputProperties
{
    enum class EHoudiniCurveOutputType            CurveOutputType;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       NumPoints;                                                    // 0x0004(0x0004)
    bool                                          bClosed;                                                      // 0x0008(0x0001)
    enum class EHoudiniCurveType                  CurveType;                                                    // 0x0009(0x0001)
    enum class EHoudiniCurveMethod                CurveMethod;                                                  // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniGenericAttribute
// Struct Size::0x0050
struct FHoudiniGenericAttribute
{
    FString                                       AttributeName;                                                // 0x0000(0x0010)
    enum class EAttribStorageType                 AttributeType;                                                // 0x0010(0x0001)
    enum class EAttribOwner                       AttributeOwner;                                               // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    int32_t                                       AttributeCount;                                               // 0x0014(0x0004)
    int32_t                                       AttributeTupleSize;                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<double>                                DoubleValues;                                                 // 0x0020(0x0010)
    TArray<int64_t>                               IntValues;                                                    // 0x0030(0x0010)
    TArray<FString>                               StringValues;                                                 // 0x0040(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniGenericAttributeChangedProperty
// Struct Size::0x0098
struct FHoudiniGenericAttributeChangedProperty
{
    UObject*                                      Object;                                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0090]                                               // 0x0008(0x0090)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniGeoPartObject
// Struct Size::0x0230
struct FHoudiniGeoPartObject
{
    int32_t                                       AssetId;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       AssetName;                                                    // 0x0008(0x0010)
    int32_t                                       ObjectId;                                                     // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       ObjectName;                                                   // 0x0020(0x0010)
    int32_t                                       GeoId;                                                        // 0x0030(0x0004)
    int32_t                                       PartId;                                                       // 0x0034(0x0004)
    FString                                       PartName;                                                     // 0x0038(0x0010)
    bool                                          bHasCustomPartName;                                           // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    TArray<FString>                               SplitGroups;                                                  // 0x0050(0x0010)
    FTransform                                    TransformMatrix;                                              // 0x0060(0x0030)
    FString                                       NodePath;                                                     // 0x0090(0x0010)
    enum class EHoudiniPartType                   Type;                                                         // 0x00A0(0x0001)
    enum class EHoudiniInstancerType              InstancerType;                                                // 0x00A1(0x0001)
    char                                          pa_00A2[0x0006]                                               // 0x00A2(0x0006)
    FString                                       VolumeName;                                                   // 0x00A8(0x0010)
    bool                                          bHasEditLayers;                                               // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
    FString                                       VolumeLayerName;                                              // 0x00C0(0x0010)
    int32_t                                       VolumeTileIndex;                                              // 0x00D0(0x0004)
    bool                                          bIsVisible;                                                   // 0x00D4(0x0001)
    bool                                          bIsEditable;                                                  // 0x00D5(0x0001)
    bool                                          bIsTemplated;                                                 // 0x00D6(0x0001)
    bool                                          bIsInstanced;                                                 // 0x00D7(0x0001)
    bool                                          bHasGeoChanged;                                               // 0x00D8(0x0001)
    bool                                          bHasPartChanged;                                              // 0x00D9(0x0001)
    bool                                          bHasTransformChanged;                                         // 0x00DA(0x0001)
    bool                                          bHasMaterialsChanged;                                         // 0x00DB(0x0001)
    char                                          pa_00DC[0x0144]                                               // 0x00DC(0x0144)
    TArray<FHoudiniMeshSocket>                    AllMeshSockets;                                               // 0x0220(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniMeshSocket
// Struct Size::0x0060
struct FHoudiniMeshSocket
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniCurveInfo
// Struct Size::0x001C
struct FHoudiniCurveInfo
{
    char                                          pa_0000[0x001C]                                               // 0x0000(0x001C)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniVolumeInfo
// Struct Size::0x0080
struct FHoudiniVolumeInfo
{
    char                                          pa_0000[0x0080]                                               // 0x0000(0x0080)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniPartInfo
// Struct Size::0x0048
struct FHoudiniPartInfo
{
    char                                          pa_0000[0x0048]                                               // 0x0000(0x0048)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniGeoInfo
// Struct Size::0x0030
struct FHoudiniGeoInfo
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniObjectInfo
// Struct Size::0x0028
struct FHoudiniObjectInfo
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniBrushInfo
// Struct Size::0x0070
struct FHoudiniBrushInfo
{
    TWeakObjectPtr<FBrush>                        BrushActor;                                                   // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    CachedTransform;                                              // 0x0010(0x0030)
    FVector                                       CachedOrigin;                                                 // 0x0040(0x000C)
    FVector                                       CachedExtent;                                                 // 0x004C(0x000C)
    enum class EBrushType                         CachedBrushType;                                              // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
    uint64_t                                      CachedSurfaceHash;                                            // 0x0060(0x0008)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniBakedOutput
// Struct Size::0x0050
struct FHoudiniBakedOutput
{
    TMap<FHoudiniBakedOutputObjectIdentifier,FHoudiniBakedOutputObject>BakedOutputObjects;                      // 0x0000(0x0050)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniBakedOutputObjectIdentifier
// Struct Size::0x0018
struct FHoudiniBakedOutputObjectIdentifier
{
    int32_t                                       PartId;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       SplitIdentifier;                                              // 0x0008(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniBakedOutputObject
// Struct Size::0x00C0
struct FHoudiniBakedOutputObject
{
    FString                                       Actor;                                                        // 0x0000(0x0010)
    FString                                       Blueprint;                                                    // 0x0010(0x0010)
    FName                                         ActorBakeName;                                                // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       BakedObject;                                                  // 0x0030(0x0010)
    FString                                       BakedComponent;                                               // 0x0040(0x0010)
    TArray<FString>                               InstancedActors;                                              // 0x0050(0x0010)
    TArray<FString>                               InstancedComponents;                                          // 0x0060(0x0010)
    TMap<FName,FString>                           LandscapeLayers;                                              // 0x0070(0x0050)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniInstancedOutput
// Struct Size::0x0090
struct FHoudiniInstancedOutput
{
    TSoftObjectPtr<UObject>                       OriginalObject;                                               // 0x0000(0x0030)
    int32_t                                       OriginalObjectIndex;                                          // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<FTransform>                            OriginalTransforms;                                           // 0x0038(0x0010)
    TArray<TSoftObjectPtr<UObject>>               VariationObjects;                                             // 0x0048(0x0010)
    TArray<FTransform>                            VariationTransformOffsets;                                    // 0x0058(0x0010)
    TArray<int32_t>                               TransformVariationIndices;                                    // 0x0068(0x0010)
    TArray<int32_t>                               OriginalInstanceIndices;                                      // 0x0078(0x0010)
    bool                                          bChanged;                                                     // 0x0088(0x0001)
    bool                                          bStale;                                                       // 0x0089(0x0001)
    char                                          pa_008A[0x0006]                                               // 0x008A(0x0006)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniPDGWorkResultObjectBakedOutput
// Struct Size::0x0010
struct FHoudiniPDGWorkResultObjectBakedOutput
{
    TArray<FHoudiniBakedOutput>                   BakedOutputs;                                                 // 0x0000(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.WorkItemTallyBase
// Struct Size::0x0008
struct FWorkItemTallyBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  HoudiniEngineRuntime.AggregatedWorkItemTally
// Struct Size::0x0028
struct FAggregatedWorkItemTally : public FWorkItemTallyBase
{
    int32_t                                       TotalWorkItems;                                               // 0x0008(0x0004)
    int32_t                                       WaitingWorkItems;                                             // 0x000C(0x0004)
    int32_t                                       ScheduledWorkItems;                                           // 0x0010(0x0004)
    int32_t                                       CookingWorkItems;                                             // 0x0014(0x0004)
    int32_t                                       CookedWorkItems;                                              // 0x0018(0x0004)
    int32_t                                       ErroredWorkItems;                                             // 0x001C(0x0004)
    int32_t                                       CookCancelledWorkItems;                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  HoudiniEngineRuntime.WorkItemTally
// Struct Size::0x0238
struct FWorkItemTally : public FWorkItemTallyBase
{
    TSet<int32_t>                                 AllWorkItems;                                                 // 0x0008(0x0050)
    TSet<int32_t>                                 WaitingWorkItems;                                             // 0x0058(0x0050)
    TSet<int32_t>                                 ScheduledWorkItems;                                           // 0x00A8(0x0050)
    TSet<int32_t>                                 CookingWorkItems;                                             // 0x00F8(0x0050)
    TSet<int32_t>                                 CookedWorkItems;                                              // 0x0148(0x0050)
    TSet<int32_t>                                 ErroredWorkItems;                                             // 0x0198(0x0050)
    TSet<int32_t>                                 CookCancelledWorkItems;                                       // 0x01E8(0x0050)
};


// ScriptStruct  HoudiniEngineRuntime.TOPWorkResult
// Struct Size::0x0018
struct FTOPWorkResult
{
    int32_t                                       WorkItemIndex;                                                // 0x0000(0x0004)
    int32_t                                       WorkItemID;                                                   // 0x0004(0x0004)
    TArray<FTOPWorkResultObject>                  ResultObjects;                                                // 0x0008(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.TOPWorkResultObject
// Struct Size::0x0058
struct FTOPWorkResultObject
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FString                                       Name;                                                         // 0x0008(0x0010)
    FString                                       FilePath;                                                     // 0x0018(0x0010)
    enum class EPDGWorkResultState                State;                                                        // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    int32_t                                       WorkItemResultInfoIndex;                                      // 0x002C(0x0004)
    TArray<FHoudiniOutput*>                       ResultOutputs;                                                // 0x0030(0x0010)
    bool                                          bAutoBakedSinceLastLoad;                                      // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    FOutputActorOwner                             OutputActorOwner;                                             // 0x0048(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.OutputActorOwner
// Struct Size::0x0010
struct FOutputActorOwner
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AActor*                                       OutputActor;                                                  // 0x0008(0x0008)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniStaticMeshGenerationProperties
// Struct Size::0x01B0
struct FHoudiniStaticMeshGenerationProperties
{
    char                                          bGeneratedDoubleSidedGeometry;                                // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FPhysicalMaterial*                            GeneratedPhysMaterial;                                        // 0x0008(0x0008)
    FBodyInstance                                 DefaultBodyInstance;                                          // 0x0010(0x0160)
    enum class ECollisionTraceFlag                GeneratedCollisionTraceFlag;                                  // 0x0170(0x0001)
    char                                          pa_0171[0x0003]                                               // 0x0171(0x0003)
    int32_t                                       GeneratedLightMapResolution;                                  // 0x0174(0x0004)
    FWalkableSlopeOverride                        GeneratedWalkableSlopeOverride;                               // 0x0178(0x0010)
    int32_t                                       GeneratedLightMapCoordinateIndex;                             // 0x0188(0x0004)
    char                                          bGeneratedUseMaximumStreamingTexelRatio;                      // 0x018C(0x0001)
    char                                          pa_018D[0x0003]                                               // 0x018D(0x0003)
    float                                         GeneratedStreamingDistanceMultiplier;                         // 0x0190(0x0004)
    char                                          pa_0194[0x0004]                                               // 0x0194(0x0004)
    FFoliageType*                                 GeneratedFoliageDefaultSettings;                              // 0x0198(0x0008)
    TArray<FAssetUserData*>                       GeneratedAssetUserData;                                       // 0x01A0(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniSplineComponentInstanceData
// Struct Size::0x0098
struct FHoudiniSplineComponentInstanceData : public FActorComponentInstanceData
{
    TArray<FTransform>                            CurvePoints;                                                  // 0x0068(0x0010)
    TArray<FVector>                               DisplayPoints;                                                // 0x0078(0x0010)
    TArray<int32_t>                               DisplayPointIndexDivider;                                     // 0x0088(0x0010)
};


// ScriptStruct  CommonUI.CommonInputActionHandlerData
// Struct Size::0x0028
struct FCommonInputActionHandlerData
{
    FDataTableRowHandle                           InputActionRow;                                               // 0x0000(0x0018)
    enum class EInputActionState                  State;                                                        // 0x0018(0x0001)
    char                                          pa_0019[0x000F]                                               // 0x0019(0x000F)
};


// ScriptStruct  CommonUI.CommonButtonStyleOptionalSlateSound
// Struct Size::0x0028
struct FCommonButtonStyleOptionalSlateSound
{
    bool                                          bHasSound;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FSlateSound                                   Sound;                                                        // 0x0008(0x0020)
};


// ScriptStruct  CommonUI.CommonAnalogCursorSettings
// Struct Size::0x0024
struct FCommonAnalogCursorSettings
{
    int32_t                                       PreprocessorPriority;                                         // 0x0000(0x0004)
    bool                                          bEnableCursorAcceleration;                                    // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         CursorAcceleration;                                           // 0x0008(0x0004)
    float                                         CursorMaxSpeed;                                               // 0x000C(0x0004)
    float                                         CursorDeadZone;                                               // 0x0010(0x0004)
    float                                         HoverSlowdownFactor;                                          // 0x0014(0x0004)
    float                                         ScrollDeadZone;                                               // 0x0018(0x0004)
    float                                         ScrollUpdatePeriod;                                           // 0x001C(0x0004)
    float                                         ScrollMultiplier;                                             // 0x0020(0x0004)
};


// ScriptStruct  CommonUI.UIInputAction
// Struct Size::0x0038
struct FUIInputAction
{
    FUIActionTag                                  ActionTag;                                                    // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         DefaultDisplayName;                                           // 0x0010(0x0018)
    TArray<FUIActionKeyMapping>                   KeyMappings;                                                  // 0x0028(0x0010)
};


// ScriptStruct  CommonUI.UIActionKeyMapping
// Struct Size::0x0028
struct FUIActionKeyMapping
{
    FKey                                          Key;                                                          // 0x0000(0x0020)
    float                                         HoldTime;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  CommonUI.UITag
// Struct Size::0x000C
struct FUITag : public FGameplayTag
{
};


// ScriptStruct  CommonUI.UIActionTag
// Struct Size::0x000C
struct FUIActionTag : public FUITag
{
};


// ScriptStruct  CommonUI.RichTextIconData
// Struct Size::0x0058
struct FRichTextIconData : public FTableRowBase
{
    FText                                         DisplayName;                                                  // 0x0008(0x0018)
    TSoftObjectPtr<UObject>                       ResourceObject;                                               // 0x0020(0x0030)
    FVector2D                                     ImageSize;                                                    // 0x0050(0x0008)
};


// ScriptStruct  CommonUI.CommonInputActionDataBase
// Struct Size::0x02B0
struct FCommonInputActionDataBase : public FTableRowBase
{
    FText                                         DisplayName;                                                  // 0x0008(0x0018)
    FText                                         HoldDisplayName;                                              // 0x0020(0x0018)
    FCommonInputTypeInfo                          KeyboardInputTypeInfo;                                        // 0x0038(0x00B8)
    FCommonInputTypeInfo                          DefaultGamepadInputTypeInfo;                                  // 0x00F0(0x00B8)
    TMap<FName,FCommonInputTypeInfo>              GamepadInputOverrides;                                        // 0x01A8(0x0050)
    FCommonInputTypeInfo                          TouchInputTypeInfo;                                           // 0x01F8(0x00B8)
};


// ScriptStruct  CommonUI.CommonInputTypeInfo
// Struct Size::0x00B8
struct FCommonInputTypeInfo
{
    FKey                                          Key;                                                          // 0x0000(0x0020)
    enum class EInputActionState                  OverrrideState;                                               // 0x0020(0x0001)
    bool                                          bActionRequiresHold;                                          // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
    float                                         HoldTime;                                                     // 0x0024(0x0004)
    FSlateBrush                                   OverrideBrush;                                                // 0x0028(0x0090)
};


// ScriptStruct  CommonInput.CommonInputPlatformBaseData
// Struct Size::0x0040
struct FCommonInputPlatformBaseData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    bool                                          bSupported;                                                   // 0x0008(0x0001)
    enum class ECommonInputType                   DefaultInputType;                                             // 0x0009(0x0001)
    bool                                          bSupportsMouseAndKeyboard;                                    // 0x000A(0x0001)
    bool                                          bSupportsGamepad;                                             // 0x000B(0x0001)
    FName                                         DefaultGamepadName;                                           // 0x000C(0x000C)
    bool                                          bCanChangeGamepadType;                                        // 0x0018(0x0001)
    bool                                          bSupportsTouch;                                               // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    TArray<TSoftClassPtr<UObject>>                ControllerData;                                               // 0x0020(0x0010)
    TArray<FCommonInputBaseControllerData*>       ControllerDataClasses;                                        // 0x0030(0x0010)
};


// ScriptStruct  CommonInput.CommonInputKeySetBrushConfiguration
// Struct Size::0x00A0
struct FCommonInputKeySetBrushConfiguration
{
    TArray<FKey>                                  Keys;                                                         // 0x0000(0x0010)
    FSlateBrush                                   KeyBrush;                                                     // 0x0010(0x0090)
};


// ScriptStruct  CommonInput.CommonInputKeyBrushConfiguration
// Struct Size::0x00B0
struct FCommonInputKeyBrushConfiguration
{
    FKey                                          Key;                                                          // 0x0000(0x0020)
    FSlateBrush                                   KeyBrush;                                                     // 0x0020(0x0090)
};


// ScriptStruct  RGIClassUtils.ClassInclusionExclusionFilter
// Struct Size::0x0050
struct FClassInclusionExclusionFilter
{
    TArray<TSoftClassPtr<UObject>>                IncludedClasses;                                              // 0x0000(0x0010)
    TArray<TSoftClassPtr<UObject>>                ExcludedClasses;                                              // 0x0010(0x0010)
    TSoftClassPtr<UObject>                        MustHaveComponent;                                            // 0x0020(0x0030)
};


// ScriptStruct  AINavigation.NavQuerierClassOverride
// Struct Size::0x0020
struct FNavQuerierClassOverride
{
    FString                                       QuerierClassName;                                             // 0x0000(0x0010)
    TArray<FNavigationFilterArea>                 Overrides;                                                    // 0x0010(0x0010)
};


// ScriptStruct  NavigationSystem.NavigationFilterArea
// Struct Size::0x0018
struct FNavigationFilterArea
{
    FNavArea*                                     AreaClass;                                                    // 0x0000(0x0008)
    float                                         TravelCostOverride;                                           // 0x0008(0x0004)
    float                                         EnteringCostOverride;                                         // 0x000C(0x0004)
    char                                          bIsExcluded;                                                  // 0x0010(0x0001)
    char                                          bOverrideTravelCost;                                          // 0x0010(0x0001)
    char                                          bOverrideEnteringCost;                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Engine.NavigationLinkBase
// Struct Size::0x0030
struct FNavigationLinkBase
{
    float                                         LeftProjectHeight;                                            // 0x0000(0x0004)
    float                                         MaxFallDownLength;                                            // 0x0004(0x0004)
    char                                          pa_0008[0x0004]                                               // 0x0008(0x0004)
    float                                         SnapRadius;                                                   // 0x000C(0x0004)
    float                                         SnapHeight;                                                   // 0x0010(0x0004)
    FNavAgentSelector                             SupportedAgents;                                              // 0x0014(0x0004)
    char                                          bSupportsAgent0;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent1;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent2;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent3;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent4;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent5;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent6;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent7;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent8;                                              // 0x0019(0x0001)
    char                                          bSupportsAgent9;                                              // 0x0019(0x0001)
    char                                          bSupportsAgent10;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent11;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent12;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent13;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent14;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent15;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    enum class ENavLinkDirection                  Direction;                                                    // 0x001C(0x0001)
    char                                          bUseSnapHeight;                                               // 0x001D(0x0001)
    char                                          bSnapToCheapestArea;                                          // 0x001D(0x0001)
    char                                          bCustomFlag0;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag1;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag2;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag3;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag4;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag5;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag6;                                                 // 0x001E(0x0001)
    char                                          bCustomFlag7;                                                 // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    FNavAreaBase*                                 AreaClass;                                                    // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.NavAgentSelector
// Struct Size::0x0004
struct FNavAgentSelector
{
    char                                          bSupportsAgent0;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent1;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent2;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent3;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent4;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent5;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent6;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent7;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent8;                                              // 0x0001(0x0001)
    char                                          bSupportsAgent9;                                              // 0x0001(0x0001)
    char                                          bSupportsAgent10;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent11;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent12;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent13;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent14;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent15;                                             // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
};


// ScriptStruct  AINavigation.GeneratedNavigationLinkInfo
// Struct Size::0x0048
struct FGeneratedNavigationLinkInfo : public FNavigationLinkBase
{
    FVector                                       Left;                                                         // 0x0030(0x000C)
    FVector                                       Right;                                                        // 0x003C(0x000C)
};


// ScriptStruct  NiagaraCore.NiagaraCompileHash
// Struct Size::0x0010
struct FNiagaraCompileHash
{
    TArray<char>                                  DataHash;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Niagara.MovieSceneNiagaraParameterSectionTemplate
// Struct Size::0x0040
struct FMovieSceneNiagaraParameterSectionTemplate : public FMovieSceneEvalTemplate
{
    FNiagaraVariable                              Parameter;                                                    // 0x0020(0x0020)
};


// ScriptStruct  Niagara.NiagaraVariableBase
// Struct Size::0x0010
struct FNiagaraVariableBase
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    FNiagaraTypeDefinitionHandle                  TypeDefHandle;                                                // 0x000C(0x0004)
};


// ScriptStruct  Niagara.NiagaraTypeDefinitionHandle
// Struct Size::0x0004
struct FNiagaraTypeDefinitionHandle
{
    int32_t                                       RegisteredTypeIndex;                                          // 0x0000(0x0004)
};


// ScriptStruct  Niagara.NiagaraVariable
// Struct Size::0x0020
struct FNiagaraVariable : public FNiagaraVariableBase
{
    TArray<char>                                  VarData;                                                      // 0x0010(0x0010)
};


// ScriptStruct  Niagara.MovieSceneNiagaraBoolParameterSectionTemplate
// Struct Size::0x00D0
struct FMovieSceneNiagaraBoolParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
{
    FMovieSceneBoolChannel                        BoolChannel;                                                  // 0x0040(0x0090)
};


// ScriptStruct  MovieScene.MovieSceneBoolChannel
// Struct Size::0x0090
struct FMovieSceneBoolChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0008(0x0010)
    bool                                          DefaultValue;                                                 // 0x0018(0x0001)
    bool                                          bHasDefaultValue;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    TArray<bool>                                  Values;                                                       // 0x0020(0x0010)
    char                                          pa_0030[0x0060]                                               // 0x0030(0x0060)
};


// ScriptStruct  Niagara.MovieSceneNiagaraColorParameterSectionTemplate
// Struct Size::0x02C0
struct FMovieSceneNiagaraColorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
{
    FMovieSceneFloatChannel                       RedChannel;                                                   // 0x0040(0x00A0)
    FMovieSceneFloatChannel                       GreenChannel;                                                 // 0x00E0(0x00A0)
    FMovieSceneFloatChannel                       BlueChannel;                                                  // 0x0180(0x00A0)
    FMovieSceneFloatChannel                       AlphaChannel;                                                 // 0x0220(0x00A0)
};


// ScriptStruct  MovieScene.MovieSceneFloatChannel
// Struct Size::0x00A0
struct FMovieSceneFloatChannel : public FMovieSceneChannel
{
    enum class ERichCurveExtrapolation            PreInfinityExtrap;                                            // 0x0008(0x0001)
    enum class ERichCurveExtrapolation            PostInfinityExtrap;                                           // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    TArray<FFrameNumber>                          Times;                                                        // 0x0010(0x0010)
    TArray<FMovieSceneFloatValue>                 Values;                                                       // 0x0020(0x0010)
    float                                         DefaultValue;                                                 // 0x0030(0x0004)
    bool                                          bHasDefaultValue;                                             // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    FMovieSceneKeyHandleMap                       KeyHandles;                                                   // 0x0038(0x0060)
    FFrameRate                                    TickResolution;                                               // 0x0098(0x0008)
};


// ScriptStruct  Engine.KeyHandleLookupTable
// Struct Size::0x0060
struct FKeyHandleLookupTable
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneKeyHandleMap
// Struct Size::0x0060
struct FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
{
};


// ScriptStruct  MovieScene.MovieSceneFloatValue
// Struct Size::0x001C
struct FMovieSceneFloatValue
{
    float                                         Value;                                                        // 0x0000(0x0004)
    FMovieSceneTangentData                        Tangent;                                                      // 0x0004(0x0014)
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0018(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x0019(0x0001)
    char                                          PaddingByte;                                                  // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneTangentData
// Struct Size::0x0014
struct FMovieSceneTangentData
{
    float                                         ArriveTangent;                                                // 0x0000(0x0004)
    float                                         LeaveTangent;                                                 // 0x0004(0x0004)
    float                                         ArriveTangentWeight;                                          // 0x0008(0x0004)
    float                                         LeaveTangentWeight;                                           // 0x000C(0x0004)
    enum class ERichCurveTangentWeightMode        TangentWeightMode;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Niagara.MovieSceneNiagaraFloatParameterSectionTemplate
// Struct Size::0x00E0
struct FMovieSceneNiagaraFloatParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
{
    FMovieSceneFloatChannel                       FloatChannel;                                                 // 0x0040(0x00A0)
};


// ScriptStruct  Niagara.MovieSceneNiagaraIntegerParameterSectionTemplate
// Struct Size::0x00D0
struct FMovieSceneNiagaraIntegerParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
{
    FMovieSceneIntegerChannel                     IntegerChannel;                                               // 0x0040(0x0090)
};


// ScriptStruct  MovieScene.MovieSceneIntegerChannel
// Struct Size::0x0090
struct FMovieSceneIntegerChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0008(0x0010)
    int32_t                                       DefaultValue;                                                 // 0x0018(0x0004)
    bool                                          bHasDefaultValue;                                             // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    TArray<int32_t>                               Values;                                                       // 0x0020(0x0010)
    char                                          pa_0030[0x0060]                                               // 0x0030(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneTrackImplementation
// Struct Size::0x0010
struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
{
};


// ScriptStruct  Niagara.MovieSceneNiagaraSystemTrackImplementation
// Struct Size::0x0028
struct FMovieSceneNiagaraSystemTrackImplementation : public FMovieSceneTrackImplementation
{
    FFrameNumber                                  SpawnSectionStartFrame;                                       // 0x0010(0x0004)
    FFrameNumber                                  SpawnSectionEndFrame;                                         // 0x0014(0x0004)
    enum class ENiagaraSystemSpawnSectionStartBehaviorSpawnSectionStartBehavior;                                // 0x0018(0x0004)
    enum class ENiagaraSystemSpawnSectionEvaluateBehaviorSpawnSectionEvaluateBehavior;                          // 0x001C(0x0004)
    enum class ENiagaraSystemSpawnSectionEndBehaviorSpawnSectionEndBehavior;                                    // 0x0020(0x0004)
    enum class ENiagaraAgeUpdateMode              AgeUpdateMode;                                                // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  Niagara.MovieSceneNiagaraSystemTrackTemplate
// Struct Size::0x0020
struct FMovieSceneNiagaraSystemTrackTemplate : public FMovieSceneEvalTemplate
{
};


// ScriptStruct  Niagara.MovieSceneNiagaraVectorParameterSectionTemplate
// Struct Size::0x02C8
struct FMovieSceneNiagaraVectorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
{
    FMovieSceneFloatChannel                       VectorChannels;                                               // 0x0040(0x00A0)
    char                                          pa_00E0[0x01E0]                                               // 0x00E0(0x01E0)
    int32_t                                       ChannelsUsed;                                                 // 0x02C0(0x0004)
    char                                          pa_02C4[0x0004]                                               // 0x02C4(0x0004)
};


// ScriptStruct  Niagara.NiagaraBakerTextureSettings
// Struct Size::0x0038
struct FNiagaraBakerTextureSettings
{
    FName                                         OutputName;                                                   // 0x0000(0x000C)
    FNiagaraBakerTextureSource                    SourceBinding;                                                // 0x000C(0x000C)
    char                                          bUseFrameSize;                                                // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FIntPoint                                     FrameSize;                                                    // 0x001C(0x0008)
    FIntPoint                                     TextureSize;                                                  // 0x0024(0x0008)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTexture2D*                                   GeneratedTexture;                                             // 0x0030(0x0008)
};


// ScriptStruct  Niagara.NiagaraBakerTextureSource
// Struct Size::0x000C
struct FNiagaraBakerTextureSource
{
    FName                                         SourceName;                                                   // 0x0000(0x000C)
};


// ScriptStruct  Niagara.NiagaraScalabilityState
// Struct Size::0x0008
struct FNiagaraScalabilityState
{
    float                                         Significance;                                                 // 0x0000(0x0004)
    char                                          bCulled;                                                      // 0x0004(0x0001)
    char                                          bPreviousCulled;                                              // 0x0004(0x0001)
    char                                          bCulledByDistance;                                            // 0x0004(0x0001)
    char                                          bCulledByInstanceCount;                                       // 0x0004(0x0001)
    char                                          bCulledByVisibility;                                          // 0x0004(0x0001)
    char                                          bCulledByGlobalBudget;                                        // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Niagara.NiagaraCompileDependency
// Struct Size::0x0050
struct FNiagaraCompileDependency
{
    FString                                       LinkerErrorMessage;                                           // 0x0000(0x0010)
    FGuid                                         NodeGuid;                                                     // 0x0010(0x0010)
    FGuid                                         PinGuid;                                                      // 0x0020(0x0010)
    TArray<FGuid>                                 StackGuids;                                                   // 0x0030(0x0010)
    FNiagaraVariableBase                          DependentVariable;                                            // 0x0040(0x0010)
};


// ScriptStruct  Niagara.NiagaraRandInfo
// Struct Size::0x000C
struct FNiagaraRandInfo
{
    int32_t                                       Seed1;                                                        // 0x0000(0x0004)
    int32_t                                       Seed2;                                                        // 0x0004(0x0004)
    int32_t                                       Seed3;                                                        // 0x0008(0x0004)
};


// ScriptStruct  Niagara.NiagaraUserParameterBinding
// Struct Size::0x0020
struct FNiagaraUserParameterBinding
{
    FNiagaraVariable                              Parameter;                                                    // 0x0000(0x0020)
};


// ScriptStruct  Niagara.NiagaraScriptVariableBinding
// Struct Size::0x000C
struct FNiagaraScriptVariableBinding
{
    FName                                         Name;                                                         // 0x0000(0x000C)
};


// ScriptStruct  Niagara.NiagaraVariableDataInterfaceBinding
// Struct Size::0x0020
struct FNiagaraVariableDataInterfaceBinding
{
    FNiagaraVariable                              BoundVariable;                                                // 0x0000(0x0020)
};


// ScriptStruct  Niagara.NiagaraMaterialAttributeBinding
// Struct Size::0x003C
struct FNiagaraMaterialAttributeBinding
{
    FName                                         MaterialParameterName;                                        // 0x0000(0x000C)
    FNiagaraVariableBase                          NiagaraVariable;                                              // 0x000C(0x0010)
    FNiagaraVariableBase                          ResolvedNiagaraVariable;                                      // 0x001C(0x0010)
    FNiagaraVariableBase                          NiagaraChildVariable;                                         // 0x002C(0x0010)
};


// ScriptStruct  Niagara.NiagaraVariableAttributeBinding
// Struct Size::0x0058
struct FNiagaraVariableAttributeBinding
{
    FNiagaraVariableBase                          ParamMapVariable;                                             // 0x0000(0x0010)
    FNiagaraVariable                              DataSetVariable;                                              // 0x0010(0x0020)
    FNiagaraVariable                              RootVariable;                                                 // 0x0030(0x0020)
    enum class ENiagaraBindingSource              BindingSourceMode;                                            // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    char                                          bBindingExistsOnSource;                                       // 0x0054(0x0001)
    char                                          bIsCachedParticleValue;                                       // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
};


// ScriptStruct  Niagara.NiagaraVariableInfo
// Struct Size::0x0040
struct FNiagaraVariableInfo
{
    FNiagaraVariable                              Variable;                                                     // 0x0000(0x0020)
    FText                                         Definition;                                                   // 0x0020(0x0018)
    FNiagaraDataInterface*                        DataInterface;                                                // 0x0038(0x0008)
};


// ScriptStruct  Niagara.NiagaraSystemUpdateContext
// Struct Size::0x0068
struct FNiagaraSystemUpdateContext
{
    TArray<FNiagaraComponent*>                    ComponentsToReset;                                            // 0x0000(0x0010)
    TArray<FNiagaraComponent*>                    ComponentsToReInit;                                           // 0x0010(0x0010)
    TArray<FNiagaraComponent*>                    ComponentsToNotifySimDestroy;                                 // 0x0020(0x0010)
    TArray<FNiagaraSystem*>                       SystemSimsToDestroy;                                          // 0x0030(0x0010)
    char                                          pa_0040[0x0028]                                               // 0x0040(0x0028)
};


// ScriptStruct  Niagara.VMExternalFunctionBindingInfo
// Struct Size::0x0040
struct FVMExternalFunctionBindingInfo
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    FName                                         OwnerName;                                                    // 0x000C(0x000C)
    TArray<bool>                                  InputParamLocations;                                          // 0x0018(0x0010)
    int32_t                                       NumOutputs;                                                   // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<FVMFunctionSpecifier>                  FunctionSpecifiers;                                           // 0x0030(0x0010)
};


// ScriptStruct  Niagara.VMFunctionSpecifier
// Struct Size::0x0018
struct FVMFunctionSpecifier
{
    FName                                         Key;                                                          // 0x0000(0x000C)
    FName                                         Value;                                                        // 0x000C(0x000C)
};


// ScriptStruct  Niagara.NiagaraStatScope
// Struct Size::0x0018
struct FNiagaraStatScope
{
    FName                                         FullName;                                                     // 0x0000(0x000C)
    FName                                         FriendlyName;                                                 // 0x000C(0x000C)
};


// ScriptStruct  Niagara.NiagaraScriptDataInterfaceCompileInfo
// Struct Size::0x0040
struct FNiagaraScriptDataInterfaceCompileInfo
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    int32_t                                       UserPtrIdx;                                                   // 0x000C(0x0004)
    FNiagaraTypeDefinition                        Type;                                                         // 0x0010(0x0010)
    FName                                         RegisteredParameterMapRead;                                   // 0x0020(0x000C)
    FName                                         RegisteredParameterMapWrite;                                  // 0x002C(0x000C)
    bool                                          bIsPlaceholder;                                               // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Niagara.NiagaraTypeDefinition
// Struct Size::0x0010
struct FNiagaraTypeDefinition
{
    UObject*                                      ClassStructOrEnum;                                            // 0x0000(0x0008)
    uint16_t                                      UnderlyingType;                                               // 0x0008(0x0002)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  Niagara.NiagaraScriptDataInterfaceInfo
// Struct Size::0x0040
struct FNiagaraScriptDataInterfaceInfo
{
    FNiagaraDataInterface*                        DataInterface;                                                // 0x0000(0x0008)
    FName                                         Name;                                                         // 0x0008(0x000C)
    int32_t                                       UserPtrIdx;                                                   // 0x0014(0x0004)
    FNiagaraTypeDefinition                        Type;                                                         // 0x0018(0x0010)
    FName                                         RegisteredParameterMapRead;                                   // 0x0028(0x000C)
    FName                                         RegisteredParameterMapWrite;                                  // 0x0034(0x000C)
};


// ScriptStruct  Niagara.NiagaraFunctionSignature
// Struct Size::0x00A0
struct FNiagaraFunctionSignature
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FNiagaraVariable>                      Inputs;                                                       // 0x0010(0x0010)
    TArray<FNiagaraVariable>                      Outputs;                                                      // 0x0020(0x0010)
    FName                                         OwnerName;                                                    // 0x0030(0x000C)
    char                                          bRequiresContext;                                             // 0x003C(0x0001)
    char                                          bRequiresExecPin;                                             // 0x003C(0x0001)
    char                                          bMemberFunction;                                              // 0x003C(0x0001)
    char                                          bExperimental;                                                // 0x003C(0x0001)
    char                                          bSupportsCPU;                                                 // 0x003C(0x0001)
    char                                          bSupportsGPU;                                                 // 0x003C(0x0001)
    char                                          bWriteFunction;                                               // 0x003C(0x0001)
    char                                          bSoftDeprecatedFunction;                                      // 0x003C(0x0001)
    char                                          bIsCompileTagGenerator;                                       // 0x003D(0x0001)
    char                                          bHidden;                                                      // 0x003D(0x0001)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
    int32_t                                       ModuleUsageBitmask;                                           // 0x0040(0x0004)
    int32_t                                       ContextStageMinIndex;                                         // 0x0044(0x0004)
    int32_t                                       ContextStageMaxIndex;                                         // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TMap<FName,FName>                             FunctionSpecifiers;                                           // 0x0050(0x0050)
};


// ScriptStruct  Niagara.NiagaraScriptDataUsageInfo
// Struct Size::0x0001
struct FNiagaraScriptDataUsageInfo
{
    bool                                          bReadsAttributeData;                                          // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraDataSetProperties
// Struct Size::0x0020
struct FNiagaraDataSetProperties
{
    FNiagaraDataSetID                             ID;                                                           // 0x0000(0x0010)
    TArray<FNiagaraVariable>                      Variables;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Niagara.NiagaraDataSetID
// Struct Size::0x0010
struct FNiagaraDataSetID
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    enum class ENiagaraDataSetType                Type;                                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Niagara.NiagaraMaterialOverride
// Struct Size::0x0018
struct FNiagaraMaterialOverride
{
    FMaterialInterface*                           Material;                                                     // 0x0000(0x0008)
    uint32_t                                      MaterialSubIndex;                                             // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FNiagaraRendererProperties*                   EmitterRendererProperty;                                      // 0x0010(0x0008)
};


// ScriptStruct  Niagara.NCPool
// Struct Size::0x0010
struct FNCPool
{
    TArray<FNCPoolElement>                        FreeElements;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NCPoolElement
// Struct Size::0x0010
struct FNCPoolElement
{
    FNiagaraComponent*                            Component;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  Niagara.NiagaraComponentPropertyBinding
// Struct Size::0x00F8
struct FNiagaraComponentPropertyBinding
{
    FNiagaraVariableAttributeBinding              AttributeBinding;                                             // 0x0000(0x0058)
    FName                                         PropertyName;                                                 // 0x0058(0x000C)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FNiagaraTypeDefinition                        PropertyType;                                                 // 0x0068(0x0010)
    FName                                         MetadataSetterName;                                           // 0x0078(0x000C)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    TMap<FString,FString>                         PropertySetterParameterDefaults;                              // 0x0088(0x0050)
    FNiagaraVariable                              WritableValue;                                                // 0x00D8(0x0020)
};


// ScriptStruct  Niagara.NiagaraEmitterNameSettingsRef
// Struct Size::0x0020
struct FNiagaraEmitterNameSettingsRef
{
    FName                                         SystemName;                                                   // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       EmitterName;                                                  // 0x0010(0x0010)
};


// ScriptStruct  Niagara.BasicParticleData
// Struct Size::0x001C
struct FBasicParticleData
{
    FVector                                       Position;                                                     // 0x0000(0x000C)
    float                                         Size;                                                         // 0x000C(0x0004)
    FVector                                       Velocity;                                                     // 0x0010(0x000C)
};


// ScriptStruct  Niagara.MeshTriCoordinate
// Struct Size::0x0010
struct FMeshTriCoordinate
{
    int32_t                                       Tri;                                                          // 0x0000(0x0004)
    FVector                                       BaryCoord;                                                    // 0x0004(0x000C)
};


// ScriptStruct  Niagara.NDIStaticMeshSectionFilter
// Struct Size::0x0010
struct FNDIStaticMeshSectionFilter
{
    TArray<int32_t>                               AllowedMaterialSlots;                                         // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraDataSetCompiledData
// Struct Size::0x0048
struct FNiagaraDataSetCompiledData
{
    TArray<FNiagaraVariable>                      Variables;                                                    // 0x0000(0x0010)
    TArray<FNiagaraVariableLayoutInfo>            VariableLayouts;                                              // 0x0010(0x0010)
    FNiagaraDataSetID                             ID;                                                           // 0x0020(0x0010)
    uint32_t                                      TotalFloatComponents;                                         // 0x0030(0x0004)
    uint32_t                                      TotalInt32Components;                                         // 0x0034(0x0004)
    uint32_t                                      TotalHalfComponents;                                          // 0x0038(0x0004)
    char                                          bRequiresPersistentIDs;                                       // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    enum class ENiagaraSimTarget                  SimTarget;                                                    // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  Niagara.NiagaraVariableLayoutInfo
// Struct Size::0x0070
struct FNiagaraVariableLayoutInfo
{
    uint32_t                                      FloatComponentStart;                                          // 0x0000(0x0004)
    uint32_t                                      Int32ComponentStart;                                          // 0x0004(0x0004)
    uint32_t                                      HalfComponentStart;                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FNiagaraTypeLayoutInfo                        LayoutInfo;                                                   // 0x0010(0x0060)
};


// ScriptStruct  Niagara.NiagaraTypeLayoutInfo
// Struct Size::0x0060
struct FNiagaraTypeLayoutInfo
{
    TArray<uint32_t>                              FloatComponentByteOffsets;                                    // 0x0000(0x0010)
    TArray<uint32_t>                              FloatComponentRegisterOffsets;                                // 0x0010(0x0010)
    TArray<uint32_t>                              Int32ComponentByteOffsets;                                    // 0x0020(0x0010)
    TArray<uint32_t>                              Int32ComponentRegisterOffsets;                                // 0x0030(0x0010)
    TArray<uint32_t>                              HalfComponentByteOffsets;                                     // 0x0040(0x0010)
    TArray<uint32_t>                              HalfComponentRegisterOffsets;                                 // 0x0050(0x0010)
};


// ScriptStruct  Niagara.NiagaraSimpleClientInfo
// Struct Size::0x0040
struct FNiagaraSimpleClientInfo
{
    TArray<FString>                               Systems;                                                      // 0x0000(0x0010)
    TArray<FString>                               Actors;                                                       // 0x0010(0x0010)
    TArray<FString>                               Components;                                                   // 0x0020(0x0010)
    TArray<FString>                               Emitters;                                                     // 0x0030(0x0010)
};


// ScriptStruct  Niagara.NiagaraOutlinerCaptureSettings
// Struct Size::0x000C
struct FNiagaraOutlinerCaptureSettings
{
    bool                                          bTriggerCapture;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    uint32_t                                      CaptureDelayFrames;                                           // 0x0004(0x0004)
    bool                                          bGatherPerfData;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Niagara.NiagaraRequestSimpleClientInfoMessage
// Struct Size::0x0001
struct FNiagaraRequestSimpleClientInfoMessage
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraDebugHUDSettingsData
// Struct Size::0x00E0
struct FNiagaraDebugHUDSettingsData
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    bool                                          bValidateSystemSimulationDataBuffers;                         // 0x0001(0x0001)
    bool                                          bValidateParticleDataBuffers;                                 // 0x0002(0x0001)
    bool                                          bOverviewEnabled;                                             // 0x0003(0x0001)
    enum class ENiagaraDebugHudFont               OverviewFont;                                                 // 0x0004(0x0004)
    FVector2D                                     OverviewLocation;                                             // 0x0008(0x0008)
    FString                                       ActorFilter;                                                  // 0x0010(0x0010)
    bool                                          bComponentFilterEnabled;                                      // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    FString                                       ComponentFilter;                                              // 0x0028(0x0010)
    bool                                          bSystemFilterEnabled;                                         // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FString                                       SystemFilter;                                                 // 0x0040(0x0010)
    bool                                          bEmitterFilterEnabled;                                        // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
    FString                                       EmitterFilter;                                                // 0x0058(0x0010)
    bool                                          bActorFilterEnabled;                                          // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    enum class ENiagaraDebugHudVerbosity          SystemDebugVerbosity;                                         // 0x006C(0x0004)
    enum class ENiagaraDebugHudVerbosity          SystemEmitterVerbosity;                                       // 0x0070(0x0004)
    bool                                          bSystemShowBounds;                                            // 0x0074(0x0001)
    bool                                          bSystemShowActiveOnlyInWorld;                                 // 0x0075(0x0001)
    bool                                          bShowSystemVariables;                                         // 0x0076(0x0001)
    char                                          pa_0077[0x0001]                                               // 0x0077(0x0001)
    TArray<FNiagaraDebugHUDVariable>              SystemVariables;                                              // 0x0078(0x0010)
    FNiagaraDebugHudTextOptions                   SystemTextOptions;                                            // 0x0088(0x0010)
    bool                                          bShowParticleVariables;                                       // 0x0098(0x0001)
    bool                                          bEnableGpuParticleReadback;                                   // 0x0099(0x0001)
    char                                          pa_009A[0x0006]                                               // 0x009A(0x0006)
    TArray<FNiagaraDebugHUDVariable>              ParticlesVariables;                                           // 0x00A0(0x0010)
    FNiagaraDebugHudTextOptions                   ParticleTextOptions;                                          // 0x00B0(0x0010)
    bool                                          bShowParticlesVariablesWithSystem;                            // 0x00C0(0x0001)
    bool                                          bUseMaxParticlesToDisplay;                                    // 0x00C1(0x0001)
    char                                          pa_00C2[0x0002]                                               // 0x00C2(0x0002)
    int32_t                                       MaxParticlesToDisplay;                                        // 0x00C4(0x0004)
    enum class ENiagaraDebugPlaybackMode          PlaybackMode;                                                 // 0x00C8(0x0001)
    bool                                          bPlaybackRateEnabled;                                         // 0x00C9(0x0001)
    char                                          pa_00CA[0x0002]                                               // 0x00CA(0x0002)
    float                                         PlaybackRate;                                                 // 0x00CC(0x0004)
    bool                                          bLoopTimeEnabled;                                             // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    float                                         LoopTime;                                                     // 0x00D4(0x0004)
    bool                                          bShowGlobalBudgetInfo;                                        // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
};


// ScriptStruct  Niagara.NiagaraDebugHudTextOptions
// Struct Size::0x0010
struct FNiagaraDebugHudTextOptions
{
    enum class ENiagaraDebugHudFont               Font;                                                         // 0x0000(0x0004)
    enum class ENiagaraDebugHudHAlign             HorizontalAlignment;                                          // 0x0004(0x0001)
    enum class ENiagaraDebugHudVAlign             VerticalAlignment;                                            // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    FVector2D                                     ScreenOffset;                                                 // 0x0008(0x0008)
};


// ScriptStruct  Niagara.NiagaraDebugHUDVariable
// Struct Size::0x0018
struct FNiagaraDebugHUDVariable
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Name;                                                         // 0x0008(0x0010)
};


// ScriptStruct  Niagara.NiagaraDebuggerOutlinerUpdate
// Struct Size::0x0050
struct FNiagaraDebuggerOutlinerUpdate
{
    FNiagaraOutlinerData                          OutlinerData;                                                 // 0x0000(0x0050)
};


// ScriptStruct  Niagara.NiagaraOutlinerData
// Struct Size::0x0050
struct FNiagaraOutlinerData
{
    TMap<FString,FNiagaraOutlinerWorldData>       WorldData;                                                    // 0x0000(0x0050)
};


// ScriptStruct  Niagara.NiagaraOutlinerWorldData
// Struct Size::0x0068
struct FNiagaraOutlinerWorldData
{
    TMap<FString,FNiagaraOutlinerSystemData>      Systems;                                                      // 0x0000(0x0050)
    bool                                          bHasBegunPlay;                                                // 0x0050(0x0001)
    char                                          WorldType;                                                    // 0x0051(0x0001)
    char                                          NetMode;                                                      // 0x0052(0x0001)
    char                                          pa_0053[0x0001]                                               // 0x0053(0x0001)
    FNiagaraOutlinerTimingData                    AveragePerFrameTime;                                          // 0x0054(0x0008)
    FNiagaraOutlinerTimingData                    MaxPerFrameTime;                                              // 0x005C(0x0008)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  Niagara.NiagaraOutlinerTimingData
// Struct Size::0x0008
struct FNiagaraOutlinerTimingData
{
    float                                         GameThread;                                                   // 0x0000(0x0004)
    float                                         RenderThread;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Niagara.NiagaraOutlinerSystemData
// Struct Size::0x0030
struct FNiagaraOutlinerSystemData
{
    TArray<FNiagaraOutlinerSystemInstanceData>    SystemInstances;                                              // 0x0000(0x0010)
    FNiagaraOutlinerTimingData                    AveragePerFrameTime;                                          // 0x0010(0x0008)
    FNiagaraOutlinerTimingData                    MaxPerFrameTime;                                              // 0x0018(0x0008)
    FNiagaraOutlinerTimingData                    AveragePerInstanceTime;                                       // 0x0020(0x0008)
    FNiagaraOutlinerTimingData                    MaxPerInstanceTime;                                           // 0x0028(0x0008)
};


// ScriptStruct  Niagara.NiagaraOutlinerSystemInstanceData
// Struct Size::0x0048
struct FNiagaraOutlinerSystemInstanceData
{
    FString                                       ComponentName;                                                // 0x0000(0x0010)
    TArray<FNiagaraOutlinerEmitterInstanceData>   Emitters;                                                     // 0x0010(0x0010)
    enum class ENiagaraExecutionState             ActualExecutionState;                                         // 0x0020(0x0004)
    enum class ENiagaraExecutionState             RequestedExecutionState;                                      // 0x0024(0x0004)
    FNiagaraScalabilityState                      ScalabilityState;                                             // 0x0028(0x0008)
    char                                          bPendingKill;                                                 // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    enum class ENCPoolMethod                      PoolMethod;                                                   // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    FNiagaraOutlinerTimingData                    AverageTime;                                                  // 0x0038(0x0008)
    FNiagaraOutlinerTimingData                    MaxTime;                                                      // 0x0040(0x0008)
};


// ScriptStruct  Niagara.NiagaraOutlinerEmitterInstanceData
// Struct Size::0x0020
struct FNiagaraOutlinerEmitterInstanceData
{
    FString                                       EmitterName;                                                  // 0x0000(0x0010)
    enum class ENiagaraSimTarget                  SimTarget;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    enum class ENiagaraExecutionState             ExecState;                                                    // 0x0014(0x0004)
    int32_t                                       NumParticles;                                                 // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Niagara.NiagaraDebuggerExecuteConsoleCommand
// Struct Size::0x0018
struct FNiagaraDebuggerExecuteConsoleCommand
{
    FString                                       Command;                                                      // 0x0000(0x0010)
    bool                                          bRequiresWorld;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Niagara.NiagaraDebuggerConnectionClosed
// Struct Size::0x0020
struct FNiagaraDebuggerConnectionClosed
{
    FGuid                                         SessionId;                                                    // 0x0000(0x0010)
    FGuid                                         InstanceId;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Niagara.NiagaraDebuggerAcceptConnection
// Struct Size::0x0020
struct FNiagaraDebuggerAcceptConnection
{
    FGuid                                         SessionId;                                                    // 0x0000(0x0010)
    FGuid                                         InstanceId;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Niagara.NiagaraDebuggerRequestConnection
// Struct Size::0x0020
struct FNiagaraDebuggerRequestConnection
{
    FGuid                                         SessionId;                                                    // 0x0000(0x0010)
    FGuid                                         InstanceId;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Niagara.NiagaraGraphViewSettings
// Struct Size::0x0010
struct FNiagaraGraphViewSettings
{
    FVector2D                                     Location;                                                     // 0x0000(0x0008)
    float                                         Zoom;                                                         // 0x0008(0x0004)
    bool                                          bIsValid;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Niagara.NiagaraEmitterScalabilityOverrides
// Struct Size::0x0010
struct FNiagaraEmitterScalabilityOverrides
{
    TArray<FNiagaraEmitterScalabilityOverride>    Overrides;                                                    // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraEmitterScalabilitySettings
// Struct Size::0x0038
struct FNiagaraEmitterScalabilitySettings
{
    FNiagaraPlatformSet                           Platforms;                                                    // 0x0000(0x0030)
    char                                          bScaleSpawnCount;                                             // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         SpawnCountScale;                                              // 0x0034(0x0004)
};


// ScriptStruct  Niagara.NiagaraPlatformSet
// Struct Size::0x0030
struct FNiagaraPlatformSet
{
    int32_t                                       QualityLevelMask;                                             // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FNiagaraDeviceProfileStateEntry>       DeviceProfileStates;                                          // 0x0008(0x0010)
    TArray<FNiagaraPlatformSetCVarCondition>      CVarConditions;                                               // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Niagara.NiagaraPlatformSetCVarCondition
// Struct Size::0x0030
struct FNiagaraPlatformSetCVarCondition
{
    FName                                         CVarName;                                                     // 0x0000(0x000C)
    bool                                          Value;                                                        // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       MinInt;                                                       // 0x0010(0x0004)
    int32_t                                       MaxInt;                                                       // 0x0014(0x0004)
    float                                         MinFloat;                                                     // 0x0018(0x0004)
    float                                         MaxFloat;                                                     // 0x001C(0x0004)
    char                                          bUseMinInt;                                                   // 0x0020(0x0001)
    char                                          bUseMaxInt;                                                   // 0x0020(0x0001)
    char                                          bUseMinFloat;                                                 // 0x0020(0x0001)
    char                                          bUseMaxFloat;                                                 // 0x0020(0x0001)
    char                                          pa_0021[0x000F]                                               // 0x0021(0x000F)
};


// ScriptStruct  Niagara.NiagaraDeviceProfileStateEntry
// Struct Size::0x0014
struct FNiagaraDeviceProfileStateEntry
{
    FName                                         ProfileName;                                                  // 0x0000(0x000C)
    uint32_t                                      QualityLevelMask;                                             // 0x000C(0x0004)
    uint32_t                                      SetQualityLevelMask;                                          // 0x0010(0x0004)
};


// ScriptStruct  Niagara.NiagaraEmitterScalabilityOverride
// Struct Size::0x0040
struct FNiagaraEmitterScalabilityOverride : public FNiagaraEmitterScalabilitySettings
{
    char                                          bOverrideSpawnCountScale;                                     // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Niagara.NiagaraEmitterScalabilitySettingsArray
// Struct Size::0x0010
struct FNiagaraEmitterScalabilitySettingsArray
{
    TArray<FNiagaraEmitterScalabilitySettings>    Settings;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraSystemScalabilityOverrides
// Struct Size::0x0010
struct FNiagaraSystemScalabilityOverrides
{
    TArray<FNiagaraSystemScalabilityOverride>     Overrides;                                                    // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraSystemScalabilitySettings
// Struct Size::0x0048
struct FNiagaraSystemScalabilitySettings
{
    FNiagaraPlatformSet                           Platforms;                                                    // 0x0000(0x0030)
    char                                          bCullByDistance;                                              // 0x0030(0x0001)
    char                                          bCullMaxInstanceCount;                                        // 0x0030(0x0001)
    char                                          bCullPerSystemMaxInstanceCount;                               // 0x0030(0x0001)
    char                                          bCullByMaxTimeWithoutRender;                                  // 0x0030(0x0001)
    char                                          bCullByGlobalBudget;                                          // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         MaxDistance;                                                  // 0x0034(0x0004)
    int32_t                                       MaxInstances;                                                 // 0x0038(0x0004)
    int32_t                                       MaxSystemInstances;                                           // 0x003C(0x0004)
    float                                         MaxTimeWithoutRender;                                         // 0x0040(0x0004)
    float                                         MaxGlobalBudgetUsage;                                         // 0x0044(0x0004)
};


// ScriptStruct  Niagara.NiagaraSystemScalabilityOverride
// Struct Size::0x0050
struct FNiagaraSystemScalabilityOverride : public FNiagaraSystemScalabilitySettings
{
    char                                          bOverrideDistanceSettings;                                    // 0x0048(0x0001)
    char                                          bOverrideInstanceCountSettings;                               // 0x0048(0x0001)
    char                                          bOverridePerSystemInstanceCountSettings;                      // 0x0048(0x0001)
    char                                          bOverrideTimeSinceRendererSettings;                           // 0x0048(0x0001)
    char                                          bOverrideGlobalBudgetCullingSettings;                         // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  Niagara.NiagaraSystemScalabilitySettingsArray
// Struct Size::0x0010
struct FNiagaraSystemScalabilitySettingsArray
{
    TArray<FNiagaraSystemScalabilitySettings>     Settings;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraDetailsLevelScaleOverrides
// Struct Size::0x0014
struct FNiagaraDetailsLevelScaleOverrides
{
    float                                         Low;                                                          // 0x0000(0x0004)
    float                                         Medium;                                                       // 0x0004(0x0004)
    float                                         High;                                                         // 0x0008(0x0004)
    float                                         Epic;                                                         // 0x000C(0x0004)
    float                                         Cine;                                                         // 0x0010(0x0004)
};


// ScriptStruct  Niagara.NiagaraEmitterScriptProperties
// Struct Size::0x0028
struct FNiagaraEmitterScriptProperties
{
    FNiagaraScript*                               Script;                                                       // 0x0000(0x0008)
    TArray<FNiagaraEventReceiverProperties>       EventReceivers;                                               // 0x0008(0x0010)
    TArray<FNiagaraEventGeneratorProperties>      EventGenerators;                                              // 0x0018(0x0010)
};


// ScriptStruct  Niagara.NiagaraEventGeneratorProperties
// Struct Size::0x0058
struct FNiagaraEventGeneratorProperties
{
    int32_t                                       MaxEventsPerFrame;                                            // 0x0000(0x0004)
    FName                                         ID;                                                           // 0x0004(0x000C)
    FNiagaraDataSetCompiledData                   DataSetCompiledData;                                          // 0x0010(0x0048)
};


// ScriptStruct  Niagara.NiagaraEventReceiverProperties
// Struct Size::0x0024
struct FNiagaraEventReceiverProperties
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    FName                                         SourceEventGenerator;                                         // 0x000C(0x000C)
    FName                                         SourceEmitter;                                                // 0x0018(0x000C)
};


// ScriptStruct  Niagara.NiagaraEventScriptProperties
// Struct Size::0x0058
struct FNiagaraEventScriptProperties : public FNiagaraEmitterScriptProperties
{
    enum class EScriptExecutionMode               ExecutionMode;                                                // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    uint32_t                                      SpawnNumber;                                                  // 0x002C(0x0004)
    uint32_t                                      MaxEventsPerFrame;                                            // 0x0030(0x0004)
    FGuid                                         SourceEmitterID;                                              // 0x0034(0x0010)
    FName                                         SourceEventName;                                              // 0x0044(0x000C)
    bool                                          bRandomSpawnNumber;                                           // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    uint32_t                                      MinSpawnNumber;                                               // 0x0054(0x0004)
};


// ScriptStruct  Niagara.NiagaraEmitterHandle
// Struct Size::0x0038
struct FNiagaraEmitterHandle
{
    FGuid                                         Id;                                                           // 0x0000(0x0010)
    FName                                         IdName;                                                       // 0x0010(0x000C)
    bool                                          bIsEnabled;                                                   // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FName                                         Name;                                                         // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FNiagaraEmitter*                              Instance;                                                     // 0x0030(0x0008)
};


// ScriptStruct  Niagara.NiagaraCollisionEventPayload
// Struct Size::0x002C
struct FNiagaraCollisionEventPayload
{
    FVector                                       CollisionPos;                                                 // 0x0000(0x000C)
    FVector                                       CollisionNormal;                                              // 0x000C(0x000C)
    FVector                                       CollisionVelocity;                                            // 0x0018(0x000C)
    int32_t                                       ParticleIndex;                                                // 0x0024(0x0004)
    int32_t                                       PhysicalMaterialIndex;                                        // 0x0028(0x0004)
};


// ScriptStruct  Niagara.NiagaraMeshRendererMeshProperties
// Struct Size::0x0028
struct FNiagaraMeshRendererMeshProperties
{
    FStaticMesh*                                  Mesh;                                                         // 0x0000(0x0008)
    FVector                                       Scale;                                                        // 0x0008(0x000C)
    FVector                                       PivotOffset;                                                  // 0x0014(0x000C)
    enum class ENiagaraMeshPivotOffsetSpace       PivotOffsetSpace;                                             // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Niagara.NiagaraMeshMaterialOverride
// Struct Size::0x0028
struct FNiagaraMeshMaterialOverride
{
    FMaterialInterface*                           ExplicitMat;                                                  // 0x0000(0x0008)
    FNiagaraUserParameterBinding                  UserParamBinding;                                             // 0x0008(0x0020)
};


// ScriptStruct  Niagara.ParameterDefinitionsSubscription
// Struct Size::0x0001
struct FParameterDefinitionsSubscription
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraParameters
// Struct Size::0x0010
struct FNiagaraParameters
{
    TArray<FNiagaraVariable>                      Parameters;                                                   // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraParameterStore
// Struct Size::0x0078
struct FNiagaraParameterStore
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UObject*                                      Owner;                                                        // 0x0008(0x0008)
    TArray<FNiagaraVariableWithOffset>            SortedParameterOffsets;                                       // 0x0010(0x0010)
    TArray<char>                                  ParameterData;                                                // 0x0020(0x0010)
    TArray<FNiagaraDataInterface*>                DataInterfaces;                                               // 0x0030(0x0010)
    TArray<UObject*>                              UObjects;                                                     // 0x0040(0x0010)
    char                                          pa_0050[0x0028]                                               // 0x0050(0x0028)
};


// ScriptStruct  Niagara.NiagaraVariableWithOffset
// Struct Size::0x0014
struct FNiagaraVariableWithOffset : public FNiagaraVariableBase
{
    int32_t                                       Offset;                                                       // 0x0010(0x0004)
};


// ScriptStruct  Niagara.NiagaraBoundParameter
// Struct Size::0x0028
struct FNiagaraBoundParameter
{
    FNiagaraVariable                              Parameter;                                                    // 0x0000(0x0020)
    int32_t                                       SrcOffset;                                                    // 0x0020(0x0004)
    int32_t                                       DestOffset;                                                   // 0x0024(0x0004)
};


// ScriptStruct  Niagara.NiagaraPerfBaselineStats
// Struct Size::0x0010
struct FNiagaraPerfBaselineStats
{
    float                                         PerInstanceAvg;                                               // 0x0000(0x0004)
    float                                         PerInstanceAvg;                                               // 0x0004(0x0004)
    float                                         PerInstanceMax;                                               // 0x0008(0x0004)
    float                                         PerInstanceMax;                                               // 0x000C(0x0004)
};


// ScriptStruct  Niagara.NiagaraPlatformSetConflictInfo
// Struct Size::0x0018
struct FNiagaraPlatformSetConflictInfo
{
    int32_t                                       SetAIndex;                                                    // 0x0000(0x0004)
    int32_t                                       SetBIndex;                                                    // 0x0004(0x0004)
    TArray<FNiagaraPlatformSetConflictEntry>      Conflicts;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Niagara.NiagaraPlatformSetConflictEntry
// Struct Size::0x0010
struct FNiagaraPlatformSetConflictEntry
{
    FName                                         ProfileName;                                                  // 0x0000(0x000C)
    int32_t                                       QualityLevelMask;                                             // 0x000C(0x0004)
};


// ScriptStruct  Niagara.NiagaraRibbonUVSettings
// Struct Size::0x0024
struct FNiagaraRibbonUVSettings
{
    enum class ENiagaraRibbonUVDistributionMode   DistributionMode;                                             // 0x0000(0x0004)
    enum class ENiagaraRibbonUVEdgeMode           LeadingEdgeMode;                                              // 0x0004(0x0004)
    enum class ENiagaraRibbonUVEdgeMode           TrailingEdgeMode;                                             // 0x0008(0x0004)
    float                                         TilingLength;                                                 // 0x000C(0x0004)
    FVector2D                                     Offset;                                                       // 0x0010(0x0008)
    FVector2D                                     Scale;                                                        // 0x0018(0x0008)
    bool                                          bEnablePerParticleUOverride;                                  // 0x0020(0x0001)
    bool                                          bEnablePerParticleVRangeOverride;                             // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
};


// ScriptStruct  Niagara.NiagaraRibbonShapeCustomVertex
// Struct Size::0x0014
struct FNiagaraRibbonShapeCustomVertex
{
    FVector2D                                     Position;                                                     // 0x0000(0x0008)
    FVector2D                                     Normal;                                                       // 0x0008(0x0008)
    float                                         TextureV;                                                     // 0x0010(0x0004)
};


// ScriptStruct  Niagara.NiagaraScalabilityManager
// Struct Size::0x0070
struct FNiagaraScalabilityManager
{
    FNiagaraEffectType*                           EffectType;                                                   // 0x0000(0x0008)
    TArray<FNiagaraComponent*>                    ManagedComponents;                                            // 0x0008(0x0010)
    char                                          pa_0018[0x0058]                                               // 0x0018(0x0058)
};


// ScriptStruct  Niagara.VersionedNiagaraScriptData
// Struct Size::0x0001
struct FVersionedNiagaraScriptData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraVMExecutableData
// Struct Size::0x00F0
struct FNiagaraVMExecutableData
{
    TArray<char>                                  ByteCode;                                                     // 0x0000(0x0010)
    TArray<char>                                  OptimizedByteCode;                                            // 0x0010(0x0010)
    int32_t                                       NumTempRegisters;                                             // 0x0020(0x0004)
    int32_t                                       NumUserPtrs;                                                  // 0x0024(0x0004)
    TArray<FNiagaraCompilerTag>                   CompileTags;                                                  // 0x0028(0x0010)
    TArray<char>                                  ScriptLiterals;                                               // 0x0038(0x0010)
    TArray<FNiagaraVariable>                      Attributes;                                                   // 0x0048(0x0010)
    FNiagaraScriptDataUsageInfo                   DataUsage;                                                    // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
    TArray<FNiagaraScriptDataInterfaceCompileInfo>DataInterfaceInfo;                                            // 0x0060(0x0010)
    TArray<FVMExternalFunctionBindingInfo>        CalledVMExternalFunctions;                                    // 0x0070(0x0010)
    char                                          pa_0080[0x0010]                                               // 0x0080(0x0010)
    TArray<FNiagaraDataSetID>                     ReadDataSets;                                                 // 0x0090(0x0010)
    TArray<FNiagaraDataSetProperties>             WriteDataSets;                                                // 0x00A0(0x0010)
    TArray<FNiagaraStatScope>                     StatScopes;                                                   // 0x00B0(0x0010)
    TArray<FNiagaraDataInterfaceGPUParamInfo>     DIParamInfo;                                                  // 0x00C0(0x0010)
    enum class ENiagaraScriptCompileStatus        LastCompileStatus;                                            // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
    TArray<FSimulationStageMetaData>              SimulationStageMetaData;                                      // 0x00D8(0x0010)
    char                                          bReadsSignificanceIndex;                                      // 0x00E8(0x0001)
    char                                          bNeedsGPUContextInit;                                         // 0x00E8(0x0001)
    char                                          pa_00E9[0x0007]                                               // 0x00E9(0x0007)
};


// ScriptStruct  NiagaraShader.SimulationStageMetaData
// Struct Size::0x0038
struct FSimulationStageMetaData
{
    FName                                         SimulationStageName;                                          // 0x0000(0x000C)
    FName                                         IterationSource;                                              // 0x000C(0x000C)
    char                                          bSpawnOnly;                                                   // 0x0018(0x0001)
    char                                          bWritesParticles;                                             // 0x0018(0x0001)
    char                                          bPartialParticleUpdate;                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    TArray<FName>                                 OutputDestinations;                                           // 0x0020(0x0010)
    int32_t                                       MinStage;                                                     // 0x0030(0x0004)
    int32_t                                       MaxStage;                                                     // 0x0034(0x0004)
};


// ScriptStruct  NiagaraShader.NiagaraDataInterfaceGPUParamInfo
// Struct Size::0x0030
struct FNiagaraDataInterfaceGPUParamInfo
{
    FString                                       DataInterfaceHLSLSymbol;                                      // 0x0000(0x0010)
    FString                                       DIClassName;                                                  // 0x0010(0x0010)
    TArray<FNiagaraDataInterfaceGeneratedFunction>GeneratedFunctions;                                           // 0x0020(0x0010)
};


// ScriptStruct  NiagaraShader.NiagaraDataInterfaceGeneratedFunction
// Struct Size::0x0030
struct FNiagaraDataInterfaceGeneratedFunction
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  Niagara.NiagaraCompilerTag
// Struct Size::0x0030
struct FNiagaraCompilerTag
{
    FNiagaraVariable                              Variable;                                                     // 0x0000(0x0020)
    FString                                       StringValue;                                                  // 0x0020(0x0010)
};


// ScriptStruct  Niagara.NiagaraVMExecutableDataId
// Struct Size::0x0058
struct FNiagaraVMExecutableDataId
{
    FGuid                                         CompilerVersionID;                                            // 0x0000(0x0010)
    enum class ENiagaraScriptUsage                ScriptUsageType;                                              // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FGuid                                         ScriptUsageTypeID;                                            // 0x0014(0x0010)
    char                                          bUsesRapidIterationParams;                                    // 0x0024(0x0001)
    char                                          bInterpolatedSpawn;                                           // 0x0024(0x0001)
    char                                          bRequiresPersistentIDs;                                       // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FGuid                                         BaseScriptID;                                                 // 0x0028(0x0010)
    FNiagaraCompileHash                           BaseScriptCompileHash;                                        // 0x0038(0x0010)
    FGuid                                         ScriptVersionID;                                              // 0x0048(0x0010)
};


// ScriptStruct  Niagara.NiagaraModuleDependency
// Struct Size::0x0028
struct FNiagaraModuleDependency
{
    FName                                         Id;                                                           // 0x0000(0x000C)
    enum class ENiagaraModuleDependencyType       Type;                                                         // 0x000C(0x0001)
    enum class ENiagaraModuleDependencyScriptConstraintScriptConstraint;                                        // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    FText                                         Description;                                                  // 0x0010(0x0018)
};


// ScriptStruct  Niagara.NiagaraScriptInstanceParameterStore
// Struct Size::0x0088
struct FNiagaraScriptInstanceParameterStore : public FNiagaraParameterStore
{
    char                                          pa_0078[0x0010]                                               // 0x0078(0x0010)
};


// ScriptStruct  Niagara.NiagaraScriptExecutionParameterStore
// Struct Size::0x0098
struct FNiagaraScriptExecutionParameterStore : public FNiagaraParameterStore
{
    int32_t                                       ParameterSize;                                                // 0x0078(0x0004)
    uint32_t                                      PaddedParameterSize;                                          // 0x007C(0x0004)
    TArray<FNiagaraScriptExecutionPaddingInfo>    PaddingInfo;                                                  // 0x0080(0x0010)
    char                                          bInitialized;                                                 // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
};


// ScriptStruct  Niagara.NiagaraScriptExecutionPaddingInfo
// Struct Size::0x0008
struct FNiagaraScriptExecutionPaddingInfo
{
    uint16_t                                      SrcOffset;                                                    // 0x0000(0x0002)
    uint16_t                                      DestOffset;                                                   // 0x0002(0x0002)
    uint16_t                                      SrcSize;                                                      // 0x0004(0x0002)
    uint16_t                                      DestSize;                                                     // 0x0006(0x0002)
};


// ScriptStruct  Niagara.NiagaraScriptHighlight
// Struct Size::0x0028
struct FNiagaraScriptHighlight
{
    FLinearColor                                  Color;                                                        // 0x0000(0x0010)
    FText                                         DisplayName;                                                  // 0x0010(0x0018)
};


// ScriptStruct  Niagara.NiagaraSystemCompileRequest
// Struct Size::0x0080
struct FNiagaraSystemCompileRequest
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<UObject*>                              RootObjects;                                                  // 0x0008(0x0010)
    char                                          pa_0018[0x0068]                                               // 0x0018(0x0068)
};


// ScriptStruct  Niagara.EmitterCompiledScriptPair
// Struct Size::0x0090
struct FEmitterCompiledScriptPair
{
    char                                          pa_0000[0x0090]                                               // 0x0000(0x0090)
};


// ScriptStruct  Niagara.NiagaraSystemCompiledData
// Struct Size::0x0230
struct FNiagaraSystemCompiledData
{
    FNiagaraParameterStore                        InstanceParamStore;                                           // 0x0000(0x0078)
    FNiagaraDataSetCompiledData                   DataSetCompiledData;                                          // 0x0078(0x0048)
    FNiagaraDataSetCompiledData                   SpawnInstanceParamsDataSetCompiledData;                       // 0x00C0(0x0048)
    FNiagaraDataSetCompiledData                   UpdateInstanceParamsDataSetCompiledData;                      // 0x0108(0x0048)
    FNiagaraParameterDataSetBindingCollection     SpawnInstanceGlobalBinding;                                   // 0x0150(0x0020)
    FNiagaraParameterDataSetBindingCollection     SpawnInstanceSystemBinding;                                   // 0x0170(0x0020)
    FNiagaraParameterDataSetBindingCollection     SpawnInstanceOwnerBinding;                                    // 0x0190(0x0020)
    TArray<FNiagaraParameterDataSetBindingCollection>SpawnInstanceEmitterBindings;                              // 0x01B0(0x0010)
    FNiagaraParameterDataSetBindingCollection     UpdateInstanceGlobalBinding;                                  // 0x01C0(0x0020)
    FNiagaraParameterDataSetBindingCollection     UpdateInstanceSystemBinding;                                  // 0x01E0(0x0020)
    FNiagaraParameterDataSetBindingCollection     UpdateInstanceOwnerBinding;                                   // 0x0200(0x0020)
    TArray<FNiagaraParameterDataSetBindingCollection>UpdateInstanceEmitterBindings;                             // 0x0220(0x0010)
};


// ScriptStruct  Niagara.NiagaraParameterDataSetBindingCollection
// Struct Size::0x0020
struct FNiagaraParameterDataSetBindingCollection
{
    TArray<FNiagaraParameterDataSetBinding>       FloatOffsets;                                                 // 0x0000(0x0010)
    TArray<FNiagaraParameterDataSetBinding>       Int32Offsets;                                                 // 0x0010(0x0010)
};


// ScriptStruct  Niagara.NiagaraParameterDataSetBinding
// Struct Size::0x0008
struct FNiagaraParameterDataSetBinding
{
    int32_t                                       ParameterOffset;                                              // 0x0000(0x0004)
    int32_t                                       DataSetComponentOffset;                                       // 0x0004(0x0004)
};


// ScriptStruct  Niagara.NiagaraEmitterCompiledData
// Struct Size::0x0138
struct FNiagaraEmitterCompiledData
{
    TArray<FName>                                 SpawnAttributes;                                              // 0x0000(0x0010)
    FNiagaraVariable                              EmitterSpawnIntervalVar;                                      // 0x0010(0x0020)
    FNiagaraVariable                              EmitterInterpSpawnStartDTVar;                                 // 0x0030(0x0020)
    FNiagaraVariable                              EmitterSpawnGroupVar;                                         // 0x0050(0x0020)
    FNiagaraVariable                              EmitterAgeVar;                                                // 0x0070(0x0020)
    FNiagaraVariable                              EmitterRandomSeedVar;                                         // 0x0090(0x0020)
    FNiagaraVariable                              EmitterInstanceSeedVar;                                       // 0x00B0(0x0020)
    FNiagaraVariable                              EmitterTotalSpawnedParticlesVar;                              // 0x00D0(0x0020)
    FNiagaraDataSetCompiledData                   DataSetCompiledData;                                          // 0x00F0(0x0048)
};


// ScriptStruct  Niagara.NiagaraVariableMetaData
// Struct Size::0x00F8
struct FNiagaraVariableMetaData
{
    FText                                         Description;                                                  // 0x0000(0x0018)
    FText                                         CategoryName;                                                 // 0x0018(0x0018)
    bool                                          bAdvancedDisplay;                                             // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       EditorSortPriority;                                           // 0x0034(0x0004)
    bool                                          bInlineEditConditionToggle;                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FNiagaraInputConditionMetadata                EditCondition;                                                // 0x0040(0x0020)
    FNiagaraInputConditionMetadata                VisibleCondition;                                             // 0x0060(0x0020)
    TMap<FName,FString>                           PropertyMetaData;                                             // 0x0080(0x0050)
    FName                                         ParentAttribute;                                              // 0x00D0(0x000C)
    FGuid                                         VariableGuid;                                                 // 0x00DC(0x0010)
    bool                                          bIsStaticSwitch;                                              // 0x00EC(0x0001)
    char                                          pa_00ED[0x0003]                                               // 0x00ED(0x0003)
    int32_t                                       StaticSwitchDefaultValue;                                     // 0x00F0(0x0004)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
};


// ScriptStruct  Niagara.NiagaraInputConditionMetadata
// Struct Size::0x0020
struct FNiagaraInputConditionMetadata
{
    FName                                         InputName;                                                    // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FString>                               TargetValues;                                                 // 0x0010(0x0010)
};


// ScriptStruct  Niagara.NiagaraCompileHashVisitorDebugInfo
// Struct Size::0x0030
struct FNiagaraCompileHashVisitorDebugInfo
{
    FString                                       Object;                                                       // 0x0000(0x0010)
    TArray<FString>                               PropertyKeys;                                                 // 0x0010(0x0010)
    TArray<FString>                               PropertyValues;                                               // 0x0020(0x0010)
};


// ScriptStruct  Niagara.NiagaraID
// Struct Size::0x0008
struct FNiagaraID
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
    int32_t                                       AcquireTag;                                                   // 0x0004(0x0004)
};


// ScriptStruct  Niagara.NiagaraSpawnInfo
// Struct Size::0x0010
struct FNiagaraSpawnInfo
{
    int32_t                                       Count;                                                        // 0x0000(0x0004)
    float                                         InterpStartDt;                                                // 0x0004(0x0004)
    float                                         IntervalDt;                                                   // 0x0008(0x0004)
    int32_t                                       SpawnGroup;                                                   // 0x000C(0x0004)
};


// ScriptStruct  Niagara.NiagaraAssetVersion
// Struct Size::0x001C
struct FNiagaraAssetVersion
{
    int32_t                                       MajorVersion;                                                 // 0x0000(0x0004)
    int32_t                                       MinorVersion;                                                 // 0x0004(0x0004)
    FGuid                                         VersionGuid;                                                  // 0x0008(0x0010)
    bool                                          bIsVisibleInVersionSelector;                                  // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  Niagara.NiagaraMatrix
// Struct Size::0x0040
struct FNiagaraMatrix
{
    FVector4                                      Row0;                                                         // 0x0000(0x0010)
    FVector4                                      Row1;                                                         // 0x0010(0x0010)
    FVector4                                      Row2;                                                         // 0x0020(0x0010)
    FVector4                                      Row3;                                                         // 0x0030(0x0010)
};


// ScriptStruct  Niagara.NiagaraParameterMap
// Struct Size::0x0001
struct FNiagaraParameterMap
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraNumeric
// Struct Size::0x0001
struct FNiagaraNumeric
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraHalfVector4
// Struct Size::0x0008
struct FNiagaraHalfVector4
{
    uint16_t                                      x;                                                            // 0x0000(0x0002)
    uint16_t                                      y;                                                            // 0x0002(0x0002)
    uint16_t                                      z;                                                            // 0x0004(0x0002)
    uint16_t                                      w;                                                            // 0x0006(0x0002)
};


// ScriptStruct  Niagara.NiagaraHalfVector3
// Struct Size::0x0006
struct FNiagaraHalfVector3
{
    uint16_t                                      x;                                                            // 0x0000(0x0002)
    uint16_t                                      y;                                                            // 0x0002(0x0002)
    uint16_t                                      z;                                                            // 0x0004(0x0002)
};


// ScriptStruct  Niagara.NiagaraHalfVector2
// Struct Size::0x0004
struct FNiagaraHalfVector2
{
    uint16_t                                      x;                                                            // 0x0000(0x0002)
    uint16_t                                      y;                                                            // 0x0002(0x0002)
};


// ScriptStruct  Niagara.NiagaraHalf
// Struct Size::0x0002
struct FNiagaraHalf
{
    uint16_t                                      Value;                                                        // 0x0000(0x0002)
};


// ScriptStruct  Niagara.NiagaraBool
// Struct Size::0x0004
struct FNiagaraBool
{
    int32_t                                       Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Niagara.NiagaraInt32
// Struct Size::0x0004
struct FNiagaraInt32
{
    int32_t                                       Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Niagara.NiagaraFloat
// Struct Size::0x0004
struct FNiagaraFloat
{
    float                                         Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Niagara.NiagaraWildcard
// Struct Size::0x0001
struct FNiagaraWildcard
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraUserRedirectionParameterStore
// Struct Size::0x00C8
struct FNiagaraUserRedirectionParameterStore : public FNiagaraParameterStore
{
    TMap<FNiagaraVariable,FNiagaraVariable>       UserParameterRedirects;                                       // 0x0078(0x0050)
};


// ScriptStruct  Niagara.NiagaraVariant
// Struct Size::0x0028
struct FNiagaraVariant
{
    UObject*                                      Object;                                                       // 0x0000(0x0008)
    FNiagaraDataInterface*                        DataInterface;                                                // 0x0008(0x0008)
    TArray<char>                                  Bytes;                                                        // 0x0010(0x0010)
    enum class ENiagaraVariantMode                CurrentMode;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Niagara.NiagaraWorldManagerTickFunction
// Struct Size::0x0030
struct FNiagaraWorldManagerTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  NiagaraShader.NiagaraCompileEvent
// Struct Size::0x0060
struct FNiagaraCompileEvent
{
    enum class FNiagaraCompileEventSeverity       Severity;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Message;                                                      // 0x0008(0x0010)
    FString                                       ShortDescription;                                             // 0x0018(0x0010)
    bool                                          bDismissable;                                                 // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FGuid                                         NodeGuid;                                                     // 0x002C(0x0010)
    FGuid                                         PinGuid;                                                      // 0x003C(0x0010)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<FGuid>                                 StackGuids;                                                   // 0x0050(0x0010)
};


// ScriptStruct  RGIFriends.RGIFriendsUserCommunicationPermissions
// Struct Size::0x0020
struct FRGIFriendsUserCommunicationPermissions
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  AnimationCore.NodeHierarchyWithUserData
// Struct Size::0x0078
struct FNodeHierarchyWithUserData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FNodeHierarchyData                            Hierarchy;                                                    // 0x0008(0x0070)
};


// ScriptStruct  AnimationCore.NodeHierarchyData
// Struct Size::0x0070
struct FNodeHierarchyData
{
    TArray<FNodeObject>                           Nodes;                                                        // 0x0000(0x0010)
    TArray<FTransform>                            Transforms;                                                   // 0x0010(0x0010)
    TMap<FName,int32_t>                           NodeNameToIndexMapping;                                       // 0x0020(0x0050)
};


// ScriptStruct  AnimationCore.NodeObject
// Struct Size::0x0018
struct FNodeObject
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    FName                                         ParentName;                                                   // 0x000C(0x000C)
};


// ScriptStruct  ControlRig.AnimationHierarchy
// Struct Size::0x0088
struct FAnimationHierarchy : public FNodeHierarchyWithUserData
{
    TArray<FConstraintNodeData>                   UserData;                                                     // 0x0078(0x0010)
};


// ScriptStruct  ControlRig.ConstraintNodeData
// Struct Size::0x00B0
struct FConstraintNodeData
{
    FTransform                                    RelativeParent;                                               // 0x0000(0x0030)
    FConstraintOffset                             ConstraintOffset;                                             // 0x0030(0x0060)
    FName                                         LinkedNode;                                                   // 0x0090(0x000C)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    TArray<FTransformConstraint>                  Constraints;                                                  // 0x00A0(0x0010)
};


// ScriptStruct  AnimationCore.TransformConstraint
// Struct Size::0x0030
struct FTransformConstraint
{
    FConstraintDescription                        Operator;                                                     // 0x0000(0x000D)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FName                                         SourceNode;                                                   // 0x0010(0x000C)
    FName                                         TargetNode;                                                   // 0x001C(0x000C)
    float                                         Weight;                                                       // 0x0028(0x0004)
    bool                                          bMaintainOffset;                                              // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  AnimationCore.ConstraintDescription
// Struct Size::0x000D
struct FConstraintDescription
{
    bool                                          bTranslation;                                                 // 0x0000(0x0001)
    bool                                          bRotation;                                                    // 0x0001(0x0001)
    bool                                          bScale;                                                       // 0x0002(0x0001)
    bool                                          bParent;                                                      // 0x0003(0x0001)
    FFilterOptionPerAxis                          TranslationAxes;                                              // 0x0004(0x0003)
    FFilterOptionPerAxis                          RotationAxes;                                                 // 0x0007(0x0003)
    FFilterOptionPerAxis                          ScaleAxes;                                                    // 0x000A(0x0003)
};


// ScriptStruct  AnimationCore.FilterOptionPerAxis
// Struct Size::0x0003
struct FFilterOptionPerAxis
{
    bool                                          bX;                                                           // 0x0000(0x0001)
    bool                                          bY;                                                           // 0x0001(0x0001)
    bool                                          bZ;                                                           // 0x0002(0x0001)
};


// ScriptStruct  AnimationCore.ConstraintOffset
// Struct Size::0x0060
struct FConstraintOffset
{
    FVector                                       Translation;                                                  // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         Rotation;                                                     // 0x0010(0x0010)
    FVector                                       Scale;                                                        // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTransform                                    Parent;                                                       // 0x0030(0x0030)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0010
struct FAnimNode
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0058
struct FAnimNode : public FAnimNode
{
    TArray<FName>                                 SourcePropertyNames;                                          // 0x0010(0x0010)
    TArray<FName>                                 DestPropertyNames;                                            // 0x0020(0x0010)
    UObject*                                      TargetInstance;                                               // 0x0030(0x0008)
    char                                          pa_0038[0x0020]                                               // 0x0038(0x0020)
};


// ScriptStruct  ControlRig.AnimNode
// Struct Size::0x0170
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Source;                                                       // 0x0058(0x0010)
    TMap<FName,uint16_t>                          ControlRigBoneMapping;                                        // 0x0068(0x0050)
    TMap<FName,uint16_t>                          ControlRigCurveMapping;                                       // 0x00B8(0x0050)
    TMap<FName,uint16_t>                          InputToCurveMappingUIDs;                                      // 0x0108(0x0050)
    TWeakObjectPtr<FNodeMappingContainer>         NodeMappingContainer;                                         // 0x0158(0x0008)
    FControlRigIOSettings                         InputSettings;                                                // 0x0160(0x0002)
    FControlRigIOSettings                         OutputSettings;                                               // 0x0162(0x0002)
    bool                                          bExecute;                                                     // 0x0164(0x0001)
    char                                          pa_0165[0x000B]                                               // 0x0165(0x000B)
};


// ScriptStruct  ControlRig.ControlRigIOSettings
// Struct Size::0x0002
struct FControlRigIOSettings
{
    bool                                          bUpdatePose;                                                  // 0x0000(0x0001)
    bool                                          bUpdateCurves;                                                // 0x0001(0x0001)
};


// ScriptStruct  Engine.PoseLinkBase
// Struct Size::0x0010
struct FPoseLinkBase
{
    int32_t                                       LinkID;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
};


// ScriptStruct  Engine.PoseLink
// Struct Size::0x0010
struct FPoseLink : public FPoseLinkBase
{
};


// ScriptStruct  ControlRig.AnimNode
// Struct Size::0x0370
struct FAnimNode : public FAnimNode
{
    FControlRig*                                  ControlRigClass;                                              // 0x0170(0x0008)
    FControlRig*                                  ControlRig;                                                   // 0x0178(0x0008)
    float                                         Alpha;                                                        // 0x0180(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0184(0x0001)
    char                                          bAlphaBoolEnabled;                                            // 0x0185(0x0001)
    char                                          bSetRefPoseFromSkeleton;                                      // 0x0185(0x0001)
    char                                          pa_0186[0x0002]                                               // 0x0186(0x0002)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0188(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0190(0x0048)
    FName                                         AlphaCurveName;                                               // 0x01D8(0x000C)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x01E4(0x0030)
    char                                          pa_0214[0x0004]                                               // 0x0214(0x0004)
    TMap<FName,FName>                             InputMapping;                                                 // 0x0218(0x0050)
    TMap<FName,FName>                             OutputMapping;                                                // 0x0268(0x0050)
    char                                          pa_02B8[0x00B0]                                               // 0x02B8(0x00B0)
    int32_t                                       LODThreshold;                                                 // 0x0368(0x0004)
    char                                          pa_036C[0x0004]                                               // 0x036C(0x0004)
};


// ScriptStruct  Engine.InputScaleBiasClamp
// Struct Size::0x0030
struct FInputScaleBiasClamp
{
    bool                                          bMapRange;                                                    // 0x0000(0x0001)
    bool                                          bClampResult;                                                 // 0x0001(0x0001)
    bool                                          bInterpResult;                                                // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FInputRange                                   InRange;                                                      // 0x0004(0x0008)
    FInputRange                                   OutRange;                                                     // 0x000C(0x0008)
    float                                         Scale;                                                        // 0x0014(0x0004)
    float                                         Bias;                                                         // 0x0018(0x0004)
    float                                         ClampMin;                                                     // 0x001C(0x0004)
    float                                         ClampMax;                                                     // 0x0020(0x0004)
    float                                         InterpSpeedIncreasing;                                        // 0x0024(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.InputRange
// Struct Size::0x0008
struct FInputRange
{
    float                                         Min;                                                          // 0x0000(0x0004)
    float                                         Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  Engine.InputAlphaBoolBlend
// Struct Size::0x0048
struct FInputAlphaBoolBlend
{
    float                                         BlendInTime;                                                  // 0x0000(0x0004)
    float                                         BlendOutTime;                                                 // 0x0004(0x0004)
    enum class EAlphaBlendOption                  BlendOption;                                                  // 0x0008(0x0001)
    bool                                          bInitialized;                                                 // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FCurveFloat*                                  CustomCurve;                                                  // 0x0010(0x0008)
    FAlphaBlend                                   AlphaBlend;                                                   // 0x0018(0x0030)
};


// ScriptStruct  Engine.AlphaBlend
// Struct Size::0x0030
struct FAlphaBlend
{
    FCurveFloat*                                  CustomCurve;                                                  // 0x0000(0x0008)
    float                                         BlendTime;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0018]                                               // 0x000C(0x0018)
    enum class EAlphaBlendOption                  BlendOption;                                                  // 0x0024(0x0001)
    char                                          pa_0025[0x000B]                                               // 0x0025(0x000B)
};


// ScriptStruct  Engine.InputScaleBias
// Struct Size::0x0008
struct FInputScaleBias
{
    float                                         Scale;                                                        // 0x0000(0x0004)
    float                                         Bias;                                                         // 0x0004(0x0004)
};


// ScriptStruct  ControlRig.AnimNode
// Struct Size::0x0178
struct FAnimNode : public FAnimNode
{
    TWeakObjectPtr<FControlRig>                   ControlRig;                                                   // 0x0170(0x0008)
};


// ScriptStruct  Engine.AnimInstanceProxy
// Struct Size::0x07A0
struct FAnimInstanceProxy
{
    char                                          pa_0000[0x07A0]                                               // 0x0000(0x07A0)
};


// ScriptStruct  ControlRig.ControlRigAnimInstanceProxy
// Struct Size::0x0840
struct FControlRigAnimInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_07A0[0x00A0]                                               // 0x07A0(0x00A0)
};


// ScriptStruct  ControlRig.ControlRigComponentMappedCurve
// Struct Size::0x0018
struct FControlRigComponentMappedCurve
{
    FName                                         Source;                                                       // 0x0000(0x000C)
    FName                                         Target;                                                       // 0x000C(0x000C)
};


// ScriptStruct  ControlRig.ControlRigComponentMappedBone
// Struct Size::0x0018
struct FControlRigComponentMappedBone
{
    FName                                         Source;                                                       // 0x0000(0x000C)
    FName                                         Target;                                                       // 0x000C(0x000C)
};


// ScriptStruct  ControlRig.ControlRigComponentMappedComponent
// Struct Size::0x0018
struct FControlRigComponentMappedComponent
{
    USceneComponent*                              Component;                                                    // 0x0000(0x0008)
    FName                                         ElementName;                                                  // 0x0008(0x000C)
    enum class ERigElementType                    ElementType;                                                  // 0x0014(0x0001)
    enum class EControlRigComponentMapDirection   Direction;                                                    // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
};


// ScriptStruct  ControlRig.ControlRigComponentMappedElement
// Struct Size::0x00B0
struct FControlRigComponentMappedElement
{
    FComponentReference                           ComponentReference;                                           // 0x0000(0x0030)
    int32_t                                       TransformIndex;                                               // 0x0030(0x0004)
    FName                                         TransformName;                                                // 0x0034(0x000C)
    enum class ERigElementType                    ElementType;                                                  // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    FName                                         ElementName;                                                  // 0x0044(0x000C)
    enum class EControlRigComponentMapDirection   Direction;                                                    // 0x0050(0x0001)
    char                                          pa_0051[0x000F]                                               // 0x0051(0x000F)
    FTransform                                    Offset;                                                       // 0x0060(0x0030)
    float                                         Weight;                                                       // 0x0090(0x0004)
    enum class EControlRigComponentSpace          Space;                                                        // 0x0094(0x0001)
    char                                          pa_0095[0x0003]                                               // 0x0095(0x0003)
    USceneComponent*                              SceneComponent;                                               // 0x0098(0x0008)
    int32_t                                       ElementIndex;                                                 // 0x00A0(0x0004)
    int32_t                                       SubIndex;                                                     // 0x00A4(0x0004)
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
};


// ScriptStruct  Engine.ComponentReference
// Struct Size::0x0030
struct FComponentReference
{
    AActor*                                       OtherActor;                                                   // 0x0000(0x0008)
    FName                                         ComponentProperty;                                            // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       PathToComponent;                                              // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  RigVM.RigVMExecuteContext
// Struct Size::0x0060
struct FRigVMExecuteContext
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  ControlRig.ControlRigExecuteContext
// Struct Size::0x0068
struct FControlRigExecuteContext : public FRigVMExecuteContext
{
    char                                          pa_0060[0x0008]                                               // 0x0060(0x0008)
};


// ScriptStruct  ControlRig.ControlRigDrawContainer
// Struct Size::0x0018
struct FControlRigDrawContainer
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<FControlRigDrawInstruction>            Instructions;                                                 // 0x0008(0x0010)
};


// ScriptStruct  ControlRig.ControlRigDrawInstruction
// Struct Size::0x00A0
struct FControlRigDrawInstruction
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    enum class EControlRigDrawSettings            PrimitiveType;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    TArray<FVector>                               Positions;                                                    // 0x0010(0x0010)
    FLinearColor                                  Color;                                                        // 0x0020(0x0010)
    float                                         Thickness;                                                    // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
    FTransform                                    Transform;                                                    // 0x0040(0x0030)
    char                                          pa_0070[0x0030]                                               // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.ControlRigDrawInterface
// Struct Size::0x0018
struct FControlRigDrawInterface : public FControlRigDrawContainer
{
};


// ScriptStruct  ControlRig.GizmoActorCreationParam
// Struct Size::0x0130
struct FGizmoActorCreationParam
{
    char                                          pa_0000[0x0130]                                               // 0x0000(0x0130)
};


// ScriptStruct  ControlRig.ControlRigGizmoDefinition
// Struct Size::0x0070
struct FControlRigGizmoDefinition
{
    FName                                         GizmoName;                                                    // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TSoftObjectPtr<FStaticMesh>                   StaticMesh;                                                   // 0x0010(0x0030)
    FTransform                                    Transform;                                                    // 0x0040(0x0030)
};


// ScriptStruct  ControlRig.ControlRigLayerInstanceProxy
// Struct Size::0x0840
struct FControlRigLayerInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_07A0[0x00A0]                                               // 0x07A0(0x00A0)
};


// ScriptStruct  ControlRig.AnimNode
// Struct Size::0x0030
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     InputPose;                                                    // 0x0010(0x0010)
    char                                          pa_0020[0x0010]                                               // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.CRFourPointBezier
// Struct Size::0x0030
struct FCRFourPointBezier
{
    FVector                                       A;                                                            // 0x0000(0x000C)
    FVector                                       B;                                                            // 0x000C(0x000C)
    FVector                                       C;                                                            // 0x0018(0x000C)
    FVector                                       D;                                                            // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.ControlRigSequenceObjectReferenceMap
// Struct Size::0x0020
struct FControlRigSequenceObjectReferenceMap
{
    TArray<FGuid>                                 BindingIds;                                                   // 0x0000(0x0010)
    TArray<FControlRigSequenceObjectReferences>   References;                                                   // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.ControlRigSequenceObjectReferences
// Struct Size::0x0010
struct FControlRigSequenceObjectReferences
{
    TArray<FControlRigSequenceObjectReference>    Array;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.ControlRigSequenceObjectReference
// Struct Size::0x0008
struct FControlRigSequenceObjectReference
{
    FControlRig*                                  ControlRigClass;                                              // 0x0000(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimSequencerInstanceProxy
// Struct Size::0x0A60
struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_07A0[0x02C0]                                               // 0x07A0(0x02C0)
};


// ScriptStruct  ControlRig.ControlRigSequencerAnimInstanceProxy
// Struct Size::0x0D10
struct FControlRigSequencerAnimInstanceProxy : public FAnimSequencerInstanceProxy
{
    char                                          pa_0A60[0x02B0]                                               // 0x0A60(0x02B0)
};


// ScriptStruct  ControlRig.ControlRigSettingsPerPinBool
// Struct Size::0x0050
struct FControlRigSettingsPerPinBool
{
    TMap<FString,bool>                            Values;                                                       // 0x0000(0x0050)
};


// ScriptStruct  ControlRig.ControlRigValidationContext
// Struct Size::0x0028
struct FControlRigValidationContext
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  ControlRig.CRSimContainer
// Struct Size::0x0018
struct FCRSimContainer
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    float                                         TimeStep;                                                     // 0x0008(0x0004)
    float                                         AccumulatedTime;                                              // 0x000C(0x0004)
    float                                         TimeLeftForStep;                                              // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.CRSimLinearSpring
// Struct Size::0x0010
struct FCRSimLinearSpring
{
    int32_t                                       SubjectA;                                                     // 0x0000(0x0004)
    int32_t                                       SubjectB;                                                     // 0x0004(0x0004)
    float                                         Coefficient;                                                  // 0x0008(0x0004)
    float                                         Equilibrium;                                                  // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.CRSimPoint
// Struct Size::0x0028
struct FCRSimPoint
{
    float                                         Mass;                                                         // 0x0000(0x0004)
    float                                         Size;                                                         // 0x0004(0x0004)
    float                                         LinearDamping;                                                // 0x0008(0x0004)
    float                                         InheritMotion;                                                // 0x000C(0x0004)
    FVector                                       Position;                                                     // 0x0010(0x000C)
    FVector                                       LinearVelocity;                                               // 0x001C(0x000C)
};


// ScriptStruct  ControlRig.CRSimPointConstraint
// Struct Size::0x0024
struct FCRSimPointConstraint
{
    enum class ECRSimConstraintType               Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       SubjectA;                                                     // 0x0004(0x0004)
    int32_t                                       SubjectB;                                                     // 0x0008(0x0004)
    FVector                                       DataA;                                                        // 0x000C(0x000C)
    FVector                                       DataB;                                                        // 0x0018(0x000C)
};


// ScriptStruct  ControlRig.CRSimPointContainer
// Struct Size::0x0078
struct FCRSimPointContainer : public FCRSimContainer
{
    TArray<FCRSimPoint>                           Points;                                                       // 0x0018(0x0010)
    TArray<FCRSimLinearSpring>                    Springs;                                                      // 0x0028(0x0010)
    TArray<FCRSimPointForce>                      Forces;                                                       // 0x0038(0x0010)
    TArray<FCRSimSoftCollision>                   CollisionVolumes;                                             // 0x0048(0x0010)
    TArray<FCRSimPointConstraint>                 Constraints;                                                  // 0x0058(0x0010)
    TArray<FCRSimPoint>                           PreviousStep;                                                 // 0x0068(0x0010)
};


// ScriptStruct  ControlRig.CRSimSoftCollision
// Struct Size::0x0050
struct FCRSimSoftCollision
{
    FTransform                                    Transform;                                                    // 0x0000(0x0030)
    enum class ECRSimSoftCollisionType            ShapeType;                                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         MinimumDistance;                                              // 0x0034(0x0004)
    float                                         MaximumDistance;                                              // 0x0038(0x0004)
    enum class EControlRigAnimEasingType          FalloffType;                                                  // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    float                                         Coefficient;                                                  // 0x0040(0x0004)
    bool                                          bInverted;                                                    // 0x0044(0x0001)
    char                                          pa_0045[0x000B]                                               // 0x0045(0x000B)
};


// ScriptStruct  ControlRig.CRSimPointForce
// Struct Size::0x0018
struct FCRSimPointForce
{
    enum class ECRSimPointForceType               ForceType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       Vector;                                                       // 0x0004(0x000C)
    float                                         Coefficient;                                                  // 0x0010(0x0004)
    bool                                          bNormalize;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneSequenceInstanceData
// Struct Size::0x0008
struct FMovieSceneSequenceInstanceData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  ControlRig.MovieSceneControlRigInstanceData
// Struct Size::0x00D8
struct FMovieSceneControlRigInstanceData : public FMovieSceneSequenceInstanceData
{
    bool                                          bAdditive;                                                    // 0x0008(0x0001)
    bool                                          bApplyBoneFilter;                                             // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FInputBlendPose                               BoneFilter;                                                   // 0x0010(0x0010)
    FMovieSceneFloatChannel                       Weight;                                                       // 0x0020(0x00A0)
    FMovieSceneEvaluationOperand                  Operand;                                                      // 0x00C0(0x0014)
    char                                          pa_00D4[0x0004]                                               // 0x00D4(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationOperand
// Struct Size::0x0014
struct FMovieSceneEvaluationOperand
{
    FGuid                                         ObjectBindingID;                                              // 0x0000(0x0010)
    FMovieSceneSequenceID                         SequenceID;                                                   // 0x0010(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSequenceID
// Struct Size::0x0004
struct FMovieSceneSequenceID
{
    uint32_t                                      Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Engine.InputBlendPose
// Struct Size::0x0010
struct FInputBlendPose
{
    TArray<FBranchFilter>                         BranchFilters;                                                // 0x0000(0x0010)
};


// ScriptStruct  Engine.BranchFilter
// Struct Size::0x0010
struct FBranchFilter
{
    FName                                         BoneName;                                                     // 0x0000(0x000C)
    int32_t                                       BlendDepth;                                                   // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.ChannelMapInfo
// Struct Size::0x001C
struct FChannelMapInfo
{
    int32_t                                       ControlIndex;                                                 // 0x0000(0x0004)
    int32_t                                       TotalChannelIndex;                                            // 0x0004(0x0004)
    int32_t                                       ChannelIndex;                                                 // 0x0008(0x0004)
    int32_t                                       ParentControlIndex;                                           // 0x000C(0x0004)
    FName                                         ChannelTypeName;                                              // 0x0010(0x000C)
};


// ScriptStruct  ControlRig.IntegerParameterNameAndCurve
// Struct Size::0x00A0
struct FIntegerParameterNameAndCurve
{
    FName                                         ParameterName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FMovieSceneIntegerChannel                     ParameterCurve;                                               // 0x0010(0x0090)
};


// ScriptStruct  ControlRig.EnumParameterNameAndCurve
// Struct Size::0x00A8
struct FEnumParameterNameAndCurve
{
    FName                                         ParameterName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FMovieSceneByteChannel                        ParameterCurve;                                               // 0x0010(0x0098)
};


// ScriptStruct  MovieScene.MovieSceneByteChannel
// Struct Size::0x0098
struct FMovieSceneByteChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0008(0x0010)
    char                                          DefaultValue;                                                 // 0x0018(0x0001)
    bool                                          bHasDefaultValue;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    TArray<char>                                  Values;                                                       // 0x0020(0x0010)
    FEnum*                                        Enum;                                                         // 0x0030(0x0008)
    char                                          pa_0038[0x0060]                                               // 0x0038(0x0060)
};


// ScriptStruct  MovieSceneTracks.MovieSceneParameterSectionTemplate
// Struct Size::0x0080
struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
{
    TArray<FScalarParameterNameAndCurve>          Scalars;                                                      // 0x0020(0x0010)
    TArray<FBoolParameterNameAndCurve>            Bools;                                                        // 0x0030(0x0010)
    TArray<FVector2DParameterNameAndCurves>       Vector2Ds;                                                    // 0x0040(0x0010)
    TArray<FVectorParameterNameAndCurves>         Vectors;                                                      // 0x0050(0x0010)
    TArray<FColorParameterNameAndCurves>          Colors;                                                       // 0x0060(0x0010)
    TArray<FTransformParameterNameAndCurves>      Transforms;                                                   // 0x0070(0x0010)
};


// ScriptStruct  MovieSceneTracks.TransformParameterNameAndCurves
// Struct Size::0x05B0
struct FTransformParameterNameAndCurves
{
    FName                                         ParameterName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FMovieSceneFloatChannel                       Translation;                                                  // 0x0010(0x00A0)
    char                                          pa_00B0[0x0140]                                               // 0x00B0(0x0140)
    FMovieSceneFloatChannel                       Rotation;                                                     // 0x01F0(0x00A0)
    char                                          pa_0290[0x0140]                                               // 0x0290(0x0140)
    FMovieSceneFloatChannel                       Scale;                                                        // 0x03D0(0x00A0)
    char                                          pa_0470[0x0140]                                               // 0x0470(0x0140)
};


// ScriptStruct  MovieSceneTracks.ColorParameterNameAndCurves
// Struct Size::0x0290
struct FColorParameterNameAndCurves
{
    FName                                         ParameterName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FMovieSceneFloatChannel                       RedCurve;                                                     // 0x0010(0x00A0)
    FMovieSceneFloatChannel                       GreenCurve;                                                   // 0x00B0(0x00A0)
    FMovieSceneFloatChannel                       BlueCurve;                                                    // 0x0150(0x00A0)
    FMovieSceneFloatChannel                       AlphaCurve;                                                   // 0x01F0(0x00A0)
};


// ScriptStruct  MovieSceneTracks.VectorParameterNameAndCurves
// Struct Size::0x01F0
struct FVectorParameterNameAndCurves
{
    FName                                         ParameterName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FMovieSceneFloatChannel                       XCurve;                                                       // 0x0010(0x00A0)
    FMovieSceneFloatChannel                       YCurve;                                                       // 0x00B0(0x00A0)
    FMovieSceneFloatChannel                       ZCurve;                                                       // 0x0150(0x00A0)
};


// ScriptStruct  MovieSceneTracks.Vector2DParameterNameAndCurves
// Struct Size::0x0150
struct FVector2DParameterNameAndCurves
{
    FName                                         ParameterName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FMovieSceneFloatChannel                       XCurve;                                                       // 0x0010(0x00A0)
    FMovieSceneFloatChannel                       YCurve;                                                       // 0x00B0(0x00A0)
};


// ScriptStruct  MovieSceneTracks.BoolParameterNameAndCurve
// Struct Size::0x00A0
struct FBoolParameterNameAndCurve
{
    FName                                         ParameterName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FMovieSceneBoolChannel                        ParameterCurve;                                               // 0x0010(0x0090)
};


// ScriptStruct  MovieSceneTracks.ScalarParameterNameAndCurve
// Struct Size::0x00B0
struct FScalarParameterNameAndCurve
{
    FName                                         ParameterName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FMovieSceneFloatChannel                       ParameterCurve;                                               // 0x0010(0x00A0)
};


// ScriptStruct  ControlRig.MovieSceneControlRigParameterTemplate
// Struct Size::0x00A0
struct FMovieSceneControlRigParameterTemplate : public FMovieSceneParameterSectionTemplate
{
    TArray<FEnumParameterNameAndCurve>            Enums;                                                        // 0x0080(0x0010)
    TArray<FIntegerParameterNameAndCurve>         Integers;                                                     // 0x0090(0x0010)
};


// ScriptStruct  ControlRig.RigBoneHierarchy
// Struct Size::0x0098
struct FRigBoneHierarchy
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    TArray<FRigBone>                              Bones;                                                        // 0x0020(0x0010)
    TMap<FName,int32_t>                           NameToIndexMapping;                                           // 0x0030(0x0050)
    TArray<FName>                                 Selection;                                                    // 0x0080(0x0010)
    char                                          pa_0090[0x0008]                                               // 0x0090(0x0008)
};


// ScriptStruct  ControlRig.RigElement
// Struct Size::0x0018
struct FRigElement
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FName                                         Name;                                                         // 0x0008(0x000C)
    int32_t                                       Index;                                                        // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigBone
// Struct Size::0x00E0
struct FRigBone : public FRigElement
{
    FName                                         ParentName;                                                   // 0x0018(0x000C)
    int32_t                                       ParentIndex;                                                  // 0x0024(0x0004)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    InitialTransform;                                             // 0x0030(0x0030)
    FTransform                                    GlobalTransform;                                              // 0x0060(0x0030)
    FTransform                                    LocalTransform;                                               // 0x0090(0x0030)
    TArray<int32_t>                               Dependents;                                                   // 0x00C0(0x0010)
    enum class ERigBoneType                       Type;                                                         // 0x00D0(0x0001)
    char                                          pa_00D1[0x000F]                                               // 0x00D1(0x000F)
};


// ScriptStruct  ControlRig.RigControlHierarchy
// Struct Size::0x0108
struct FRigControlHierarchy
{
    char                                          pa_0000[0x0098]                                               // 0x0000(0x0098)
    TArray<FRigControl>                           Controls;                                                     // 0x0098(0x0010)
    TMap<FName,int32_t>                           NameToIndexMapping;                                           // 0x00A8(0x0050)
    TArray<FName>                                 Selection;                                                    // 0x00F8(0x0010)
};


// ScriptStruct  ControlRig.RigControl
// Struct Size::0x0300
struct FRigControl : public FRigElement
{
    enum class ERigControlType                    ControlType;                                                  // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         DisplayName;                                                  // 0x001C(0x000C)
    FName                                         ParentName;                                                   // 0x0028(0x000C)
    int32_t                                       ParentIndex;                                                  // 0x0034(0x0004)
    FName                                         SpaceName;                                                    // 0x0038(0x000C)
    int32_t                                       SpaceIndex;                                                   // 0x0044(0x0004)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
    FTransform                                    OffsetTransform;                                              // 0x0050(0x0030)
    FRigControlValue                              InitialValue;                                                 // 0x0080(0x0080)
    FRigControlValue                              Value;                                                        // 0x0100(0x0080)
    enum class ERigControlAxis                    PrimaryAxis;                                                  // 0x0180(0x0001)
    bool                                          bIsCurve;                                                     // 0x0181(0x0001)
    bool                                          bAnimatable;                                                  // 0x0182(0x0001)
    bool                                          bLimitTranslation;                                            // 0x0183(0x0001)
    bool                                          bLimitRotation;                                               // 0x0184(0x0001)
    bool                                          bLimitScale;                                                  // 0x0185(0x0001)
    bool                                          bDrawLimits;                                                  // 0x0186(0x0001)
    char                                          pa_0187[0x0009]                                               // 0x0187(0x0009)
    FRigControlValue                              MinimumValue;                                                 // 0x0190(0x0080)
    FRigControlValue                              MaximumValue;                                                 // 0x0210(0x0080)
    bool                                          bGizmoEnabled;                                                // 0x0290(0x0001)
    bool                                          bGizmoVisible;                                                // 0x0291(0x0001)
    char                                          pa_0292[0x0002]                                               // 0x0292(0x0002)
    FName                                         GizmoName;                                                    // 0x0294(0x000C)
    FTransform                                    GizmoTransform;                                               // 0x02A0(0x0030)
    FLinearColor                                  GizmoColor;                                                   // 0x02D0(0x0010)
    TArray<int32_t>                               Dependents;                                                   // 0x02E0(0x0010)
    bool                                          bIsTransientControl;                                          // 0x02F0(0x0001)
    char                                          pa_02F1[0x0007]                                               // 0x02F1(0x0007)
    FEnum*                                        ControlEnum;                                                  // 0x02F8(0x0008)
};


// ScriptStruct  ControlRig.RigControlValue
// Struct Size::0x0080
struct FRigControlValue
{
    FRigControlValueStorage                       FloatStorage;                                                 // 0x0000(0x0044)
    char                                          pa_0044[0x000C]                                               // 0x0044(0x000C)
    FTransform                                    Storage;                                                      // 0x0050(0x0030)
};


// ScriptStruct  ControlRig.RigControlValueStorage
// Struct Size::0x0044
struct FRigControlValueStorage
{
    float                                         Float00;                                                      // 0x0000(0x0004)
    float                                         Float01;                                                      // 0x0004(0x0004)
    float                                         Float02;                                                      // 0x0008(0x0004)
    float                                         Float03;                                                      // 0x000C(0x0004)
    float                                         Float10;                                                      // 0x0010(0x0004)
    float                                         Float11;                                                      // 0x0014(0x0004)
    float                                         Float12;                                                      // 0x0018(0x0004)
    float                                         Float13;                                                      // 0x001C(0x0004)
    float                                         Float20;                                                      // 0x0020(0x0004)
    float                                         Float21;                                                      // 0x0024(0x0004)
    float                                         Float22;                                                      // 0x0028(0x0004)
    float                                         Float23;                                                      // 0x002C(0x0004)
    float                                         Float30;                                                      // 0x0030(0x0004)
    float                                         Float31;                                                      // 0x0034(0x0004)
    float                                         Float32;                                                      // 0x0038(0x0004)
    float                                         Float33;                                                      // 0x003C(0x0004)
    bool                                          bValid;                                                       // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
};


// ScriptStruct  ControlRig.RigCurveContainer
// Struct Size::0x0098
struct FRigCurveContainer
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    TArray<FRigCurve>                             Curves;                                                       // 0x0020(0x0010)
    TMap<FName,int32_t>                           NameToIndexMapping;                                           // 0x0030(0x0050)
    TArray<FName>                                 Selection;                                                    // 0x0080(0x0010)
    char                                          pa_0090[0x0008]                                               // 0x0090(0x0008)
};


// ScriptStruct  ControlRig.RigCurve
// Struct Size::0x0020
struct FRigCurve : public FRigElement
{
    float                                         Value;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.CachedRigElement
// Struct Size::0x0018
struct FCachedRigElement
{
    FRigElementKey                                Key;                                                          // 0x0000(0x0010)
    uint16_t                                      Index;                                                        // 0x0010(0x0002)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    int32_t                                       ContainerVersion;                                             // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigElementKey
// Struct Size::0x0010
struct FRigElementKey
{
    enum class ERigElementType                    Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         Name;                                                         // 0x0004(0x000C)
};


// ScriptStruct  ControlRig.RigHierarchyRef
// Struct Size::0x0001
struct FRigHierarchyRef
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ControlRig.RigHierarchyContainer
// Struct Size::0x0368
struct FRigHierarchyContainer
{
    FRigBoneHierarchy                             BoneHierarchy;                                                // 0x0000(0x0098)
    FRigSpaceHierarchy                            SpaceHierarchy;                                               // 0x0098(0x0090)
    FRigControlHierarchy                          ControlHierarchy;                                             // 0x0128(0x0108)
    FRigCurveContainer                            CurveContainer;                                               // 0x0230(0x0098)
    int32_t                                       Version;                                                      // 0x02C8(0x0004)
    char                                          pa_02CC[0x009C]                                               // 0x02CC(0x009C)
};


// ScriptStruct  ControlRig.RigSpaceHierarchy
// Struct Size::0x0090
struct FRigSpaceHierarchy
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    TArray<FRigSpace>                             Spaces;                                                       // 0x0020(0x0010)
    TMap<FName,int32_t>                           NameToIndexMapping;                                           // 0x0030(0x0050)
    TArray<FName>                                 Selection;                                                    // 0x0080(0x0010)
};


// ScriptStruct  ControlRig.RigSpace
// Struct Size::0x0090
struct FRigSpace : public FRigElement
{
    enum class ERigSpaceType                      SpaceType;                                                    // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         ParentName;                                                   // 0x001C(0x000C)
    int32_t                                       ParentIndex;                                                  // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTransform                                    InitialTransform;                                             // 0x0030(0x0030)
    FTransform                                    LocalTransform;                                               // 0x0060(0x0030)
};


// ScriptStruct  ControlRig.RigMirrorSettings
// Struct Size::0x0028
struct FRigMirrorSettings
{
    enum class EAxis                              MirrorAxis;                                                   // 0x0000(0x0001)
    enum class EAxis                              AxisToFlip;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FString                                       OldName;                                                      // 0x0008(0x0010)
    FString                                       NewName;                                                      // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigHierarchyCopyPasteContent
// Struct Size::0x0040
struct FRigHierarchyCopyPasteContent
{
    TArray<enum class ERigElementType>            Types;                                                        // 0x0000(0x0010)
    TArray<FString>                               Contents;                                                     // 0x0010(0x0010)
    TArray<FTransform>                            LocalTransforms;                                              // 0x0020(0x0010)
    TArray<FTransform>                            GlobalTransforms;                                             // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigEventContext
// Struct Size::0x0030
struct FRigEventContext
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  ControlRig.RigElementKeyCollection
// Struct Size::0x0010
struct FRigElementKeyCollection
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigControlModifiedContext
// Struct Size::0x0014
struct FRigControlModifiedContext
{
    char                                          pa_0000[0x0014]                                               // 0x0000(0x0014)
};


// ScriptStruct  ControlRig.RigPose
// Struct Size::0x0010
struct FRigPose
{
    TArray<FRigPoseElement>                       Elements;                                                     // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigPoseElement
// Struct Size::0x0090
struct FRigPoseElement
{
    FCachedRigElement                             Index;                                                        // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    GlobalTransform;                                              // 0x0020(0x0030)
    FTransform                                    LocalTransform;                                               // 0x0050(0x0030)
    float                                         CurveValue;                                                   // 0x0080(0x0004)
    char                                          pa_0084[0x000C]                                               // 0x0084(0x000C)
};


// ScriptStruct  ControlRig.RigInfluenceMapPerEvent
// Struct Size::0x0060
struct FRigInfluenceMapPerEvent
{
    TArray<FRigInfluenceMap>                      Maps;                                                         // 0x0000(0x0010)
    TMap<FName,int32_t>                           EventToIndex;                                                 // 0x0010(0x0050)
};


// ScriptStruct  ControlRig.RigInfluenceMap
// Struct Size::0x0070
struct FRigInfluenceMap
{
    FName                                         EventName;                                                    // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FRigInfluenceEntry>                    Entries;                                                      // 0x0010(0x0010)
    TMap<FRigElementKey,int32_t>                  KeyToIndex;                                                   // 0x0020(0x0050)
};


// ScriptStruct  ControlRig.RigInfluenceEntry
// Struct Size::0x0020
struct FRigInfluenceEntry
{
    FRigElementKey                                Source;                                                       // 0x0000(0x0010)
    TArray<FRigElementKey>                        AffectedList;                                                 // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.RigInfluenceEntryModifier
// Struct Size::0x0010
struct FRigInfluenceEntryModifier
{
    TArray<FRigElementKey>                        AffectedList;                                                 // 0x0000(0x0010)
};


// ScriptStruct  RigVM.RigVMStruct
// Struct Size::0x0008
struct FRigVMStruct
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigVMStruct
{
};


// ScriptStruct  ControlRig.RigUnitMutable
// Struct Size::0x0070
struct FRigUnitMutable : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0068)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       Minimum;                                                      // 0x0014(0x000C)
    FVector                                       Maximum;                                                      // 0x0020(0x000C)
    FVector                                       AccumulatedMinimum;                                           // 0x002C(0x000C)
    FVector                                       AccumulatedMaximum;                                           // 0x0038(0x000C)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    float                                         AccumulatedMinimum;                                           // 0x0014(0x0004)
    float                                         AccumulatedMaximum;                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    TargetValue;                                                  // 0x0010(0x0030)
    FTransform                                    InitialValue;                                                 // 0x0040(0x0030)
    float                                         Blend;                                                        // 0x0070(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0074(0x0001)
    char                                          pa_0075[0x000B]                                               // 0x0075(0x000B)
    FTransform                                    Result;                                                       // 0x0080(0x0030)
    FTransform                                    AccumulatedValue;                                             // 0x00B0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         TargetValue;                                                  // 0x0010(0x0010)
    FQuat                                         InitialValue;                                                 // 0x0020(0x0010)
    float                                         Blend;                                                        // 0x0030(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0034(0x0001)
    char                                          pa_0035[0x000B]                                               // 0x0035(0x000B)
    FQuat                                         Result;                                                       // 0x0040(0x0010)
    FQuat                                         AccumulatedValue;                                             // 0x0050(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       TargetValue;                                                  // 0x0008(0x000C)
    FVector                                       InitialValue;                                                 // 0x0014(0x000C)
    float                                         Blend;                                                        // 0x0020(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FVector                                       Result;                                                       // 0x0028(0x000C)
    FVector                                       AccumulatedValue;                                             // 0x0034(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         TargetValue;                                                  // 0x0008(0x0004)
    float                                         InitialValue;                                                 // 0x000C(0x0004)
    float                                         Blend;                                                        // 0x0010(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         Result;                                                       // 0x0018(0x0004)
    float                                         AccumulatedValue;                                             // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Multiplier;                                                   // 0x0010(0x0030)
    FTransform                                    InitialValue;                                                 // 0x0040(0x0030)
    bool                                          bFlipOrder;                                                   // 0x0070(0x0001)
    bool                                          bIntegrateDeltaTime;                                          // 0x0071(0x0001)
    char                                          pa_0072[0x000E]                                               // 0x0072(0x000E)
    FTransform                                    Result;                                                       // 0x0080(0x0030)
    FTransform                                    AccumulatedValue;                                             // 0x00B0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Multiplier;                                                   // 0x0010(0x0010)
    FQuat                                         InitialValue;                                                 // 0x0020(0x0010)
    bool                                          bFlipOrder;                                                   // 0x0030(0x0001)
    bool                                          bIntegrateDeltaTime;                                          // 0x0031(0x0001)
    char                                          pa_0032[0x000E]                                               // 0x0032(0x000E)
    FQuat                                         Result;                                                       // 0x0040(0x0010)
    FQuat                                         AccumulatedValue;                                             // 0x0050(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       Multiplier;                                                   // 0x0008(0x000C)
    FVector                                       InitialValue;                                                 // 0x0014(0x000C)
    bool                                          bIntegrateDeltaTime;                                          // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Result;                                                       // 0x0024(0x000C)
    FVector                                       AccumulatedValue;                                             // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         Multiplier;                                                   // 0x0008(0x0004)
    float                                         InitialValue;                                                 // 0x000C(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         Result;                                                       // 0x0014(0x0004)
    float                                         AccumulatedValue;                                             // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       Increment;                                                    // 0x0008(0x000C)
    FVector                                       InitialValue;                                                 // 0x0014(0x000C)
    bool                                          bIntegrateDeltaTime;                                          // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Result;                                                       // 0x0024(0x000C)
    FVector                                       AccumulatedValue;                                             // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         Increment;                                                    // 0x0008(0x0004)
    float                                         InitialValue;                                                 // 0x000C(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         Result;                                                       // 0x0014(0x0004)
    float                                         AccumulatedValue;                                             // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0070(0x000C)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FTransform                                    Transform;                                                    // 0x0080(0x0030)
    float                                         Weight;                                                       // 0x00B0(0x0004)
    bool                                          bPostMultiply;                                                // 0x00B4(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x00B5(0x0001)
    char                                          pa_00B6[0x0002]                                               // 0x00B6(0x0002)
    FCachedRigElement                             CachedBone;                                                   // 0x00B8(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0180
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0070(0x0010)
    FRigUnit                                      Primary;                                                      // 0x0080(0x0030)
    FRigUnit                                      Secondary;                                                    // 0x00B0(0x0030)
    float                                         Weight;                                                       // 0x00E0(0x0004)
    char                                          pa_00E4[0x000C]                                               // 0x00E4(0x000C)
    FRigUnit                                      DebugSettings;                                                // 0x00F0(0x0040)
    FCachedRigElement                             CachedItem;                                                   // 0x0130(0x0018)
    FCachedRigElement                             PrimaryCachedSpace;                                           // 0x0148(0x0018)
    FCachedRigElement                             SecondaryCachedSpace;                                         // 0x0160(0x0018)
    char                                          pa_0178[0x0008]                                               // 0x0178(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0010(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit
{
    float                                         Weight;                                                       // 0x0000(0x0004)
    FVector                                       Axis;                                                         // 0x0004(0x000C)
    FVector                                       Target;                                                       // 0x0010(0x000C)
    enum class EControlRigVectorKind              Kind;                                                         // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FRigElementKey                                Space;                                                        // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0170
struct FRigUnit : public FRigUnit
{
    FName                                         Bone;                                                         // 0x0070(0x000C)
    FRigUnit                                      Primary;                                                      // 0x007C(0x002C)
    FRigUnit                                      Secondary;                                                    // 0x00A8(0x002C)
    float                                         Weight;                                                       // 0x00D4(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
    FRigUnit                                      DebugSettings;                                                // 0x00E0(0x0040)
    FCachedRigElement                             CachedBoneIndex;                                              // 0x0120(0x0018)
    FCachedRigElement                             PrimaryCachedSpace;                                           // 0x0138(0x0018)
    FCachedRigElement                             SecondaryCachedSpace;                                         // 0x0150(0x0018)
    char                                          pa_0168[0x0008]                                               // 0x0168(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x002C
struct FRigUnit
{
    float                                         Weight;                                                       // 0x0000(0x0004)
    FVector                                       Axis;                                                         // 0x0004(0x000C)
    FVector                                       Target;                                                       // 0x0010(0x000C)
    enum class EControlRigVectorKind              Kind;                                                         // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FName                                         Space;                                                        // 0x0020(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0150
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    InputTransform;                                               // 0x0010(0x0030)
    FRigUnit                                      Primary;                                                      // 0x0040(0x0030)
    FRigUnit                                      Secondary;                                                    // 0x0070(0x0030)
    float                                         Weight;                                                       // 0x00A0(0x0004)
    char                                          pa_00A4[0x000C]                                               // 0x00A4(0x000C)
    FTransform                                    Result;                                                       // 0x00B0(0x0030)
    FRigUnit                                      DebugSettings;                                                // 0x00E0(0x0040)
    FCachedRigElement                             PrimaryCachedSpace;                                           // 0x0120(0x0018)
    FCachedRigElement                             SecondaryCachedSpace;                                         // 0x0138(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C8
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Joint;                                                        // 0x0070(0x000C)
    enum class EAimMode                           AimMode;                                                      // 0x007C(0x0001)
    enum class EAimMode                           UpMode;                                                       // 0x007D(0x0001)
    char                                          pa_007E[0x0002]                                               // 0x007E(0x0002)
    FVector                                       AimVector;                                                    // 0x0080(0x000C)
    FVector                                       UpVector;                                                     // 0x008C(0x000C)
    TArray<FAimTarget>                            AimTargets;                                                   // 0x0098(0x0010)
    TArray<FAimTarget>                            UpTargets;                                                    // 0x00A8(0x0010)
    FRigUnit                                      WorkData;                                                     // 0x00B8(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    TArray<FConstraintData>                       ConstraintData;                                               // 0x0000(0x0010)
};


// ScriptStruct  AnimationCore.ConstraintData
// Struct Size::0x0080
struct FConstraintData
{
    FConstraintDescriptor                         Constraint;                                                   // 0x0000(0x0010)
    float                                         Weight;                                                       // 0x0010(0x0004)
    bool                                          bMaintainOffset;                                              // 0x0014(0x0001)
    char                                          pa_0015[0x000B]                                               // 0x0015(0x000B)
    FTransform                                    Offset;                                                       // 0x0020(0x0030)
    FTransform                                    CurrentTransform;                                             // 0x0050(0x0030)
};


// ScriptStruct  AnimationCore.ConstraintDescriptor
// Struct Size::0x0010
struct FConstraintDescriptor
{
    enum class EConstraintType                    Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x000F]                                               // 0x0001(0x000F)
};


// ScriptStruct  ControlRig.AimTarget
// Struct Size::0x0050
struct FAimTarget
{
    float                                         Weight;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FVector                                       AlignVector;                                                  // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0088
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Scale;                                                        // 0x0014(0x0004)
    float                                         Bias;                                                         // 0x0018(0x0004)
    bool                                          bMapRange;                                                    // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FInputRange                                   InRange;                                                      // 0x0020(0x0008)
    FInputRange                                   OutRange;                                                     // 0x0028(0x0008)
    bool                                          bClampResult;                                                 // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         ClampMin;                                                     // 0x0034(0x0004)
    float                                         ClampMax;                                                     // 0x0038(0x0004)
    bool                                          bInterpResult;                                                // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    float                                         InterpSpeedIncreasing;                                        // 0x0040(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x0044(0x0004)
    FVector                                       Result;                                                       // 0x0048(0x000C)
    FInputScaleBiasClamp                          ScaleBiasClamp;                                               // 0x0054(0x0030)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0078
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Scale;                                                        // 0x000C(0x0004)
    float                                         Bias;                                                         // 0x0010(0x0004)
    bool                                          bMapRange;                                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FInputRange                                   InRange;                                                      // 0x0018(0x0008)
    FInputRange                                   OutRange;                                                     // 0x0020(0x0008)
    bool                                          bClampResult;                                                 // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         ClampMin;                                                     // 0x002C(0x0004)
    float                                         ClampMax;                                                     // 0x0030(0x0004)
    bool                                          bInterpResult;                                                // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    float                                         InterpSpeedIncreasing;                                        // 0x0038(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x003C(0x0004)
    float                                         Result;                                                       // 0x0040(0x0004)
    FInputScaleBiasClamp                          ScaleBiasClamp;                                               // 0x0044(0x0030)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    enum class EControlRigAnimEasingType          Type;                                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         SourceMinimum;                                                // 0x0010(0x0004)
    float                                         SourceMaximum;                                                // 0x0014(0x0004)
    float                                         TargetMinimum;                                                // 0x0018(0x0004)
    float                                         TargetMaximum;                                                // 0x001C(0x0004)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    enum class EControlRigAnimEasingType          Type;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FRuntimeFloatCurve                            Curve;                                                        // 0x0010(0x0088)
    float                                         SourceMinimum;                                                // 0x0098(0x0004)
    float                                         SourceMaximum;                                                // 0x009C(0x0004)
    float                                         TargetMinimum;                                                // 0x00A0(0x0004)
    float                                         TargetMaximum;                                                // 0x00A4(0x0004)
    float                                         Result;                                                       // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    FRuntimeFloatCurve                            Curve;                                                        // 0x0008(0x0088)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Joint;                                                        // 0x0070(0x000C)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FTransform                                    Transform;                                                    // 0x0080(0x0030)
    FTransformFilter                              Filter;                                                       // 0x00B0(0x0009)
    enum class EApplyTransformMode                ApplyTransformMode;                                           // 0x00B9(0x0001)
    enum class ETransformSpaceMode                ApplyTransformSpace;                                          // 0x00BA(0x0001)
    char                                          pa_00BB[0x0005]                                               // 0x00BB(0x0005)
    FTransform                                    BaseTransform;                                                // 0x00C0(0x0030)
    FName                                         BaseJoint;                                                    // 0x00F0(0x000C)
    char                                          pa_00FC[0x0004]                                               // 0x00FC(0x0004)
};


// ScriptStruct  AnimationCore.TransformFilter
// Struct Size::0x0009
struct FTransformFilter
{
    FFilterOptionPerAxis                          TranslationFilter;                                            // 0x0000(0x0003)
    FFilterOptionPerAxis                          RotationFilter;                                               // 0x0003(0x0003)
    FFilterOptionPerAxis                          ScaleFilter;                                                  // 0x0006(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0068)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Source;                                                       // 0x0010(0x0030)
    TArray<FBlendTarget>                          Targets;                                                      // 0x0040(0x0010)
    FTransform                                    Result;                                                       // 0x0050(0x0030)
};


// ScriptStruct  ControlRig.BlendTarget
// Struct Size::0x0040
struct FBlendTarget
{
    FTransform                                    Transform;                                                    // 0x0000(0x0030)
    float                                         Weight;                                                       // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    TArray<FRigUnit>                              Targets;                                                      // 0x0070(0x0010)
    FVector                                       WaveSpeed;                                                    // 0x0080(0x000C)
    FVector                                       WaveFrequency;                                                // 0x008C(0x000C)
    FVector                                       WaveAmplitude;                                                // 0x0098(0x000C)
    FVector                                       WaveOffset;                                                   // 0x00A4(0x000C)
    FVector                                       WaveNoise;                                                    // 0x00B0(0x000C)
    enum class EControlRigAnimEasingType          WaveEase;                                                     // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    float                                         WaveMinimum;                                                  // 0x00C0(0x0004)
    float                                         WaveMaximum;                                                  // 0x00C4(0x0004)
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x00C8(0x0001)
    char                                          pa_00C9[0x0007]                                               // 0x00C9(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00D0(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit
{
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0000(0x0010)
    FVector                                       WaveTime;                                                     // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0014
struct FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0000(0x0010)
    float                                         Ratio;                                                        // 0x0010(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    TArray<FRigUnit>                              Bones;                                                        // 0x0070(0x0010)
    FVector                                       WaveSpeed;                                                    // 0x0080(0x000C)
    FVector                                       WaveFrequency;                                                // 0x008C(0x000C)
    FVector                                       WaveAmplitude;                                                // 0x0098(0x000C)
    FVector                                       WaveOffset;                                                   // 0x00A4(0x000C)
    FVector                                       WaveNoise;                                                    // 0x00B0(0x000C)
    enum class EControlRigAnimEasingType          WaveEase;                                                     // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    float                                         WaveMinimum;                                                  // 0x00C0(0x0004)
    float                                         WaveMaximum;                                                  // 0x00C4(0x0004)
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x00C8(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x00C9(0x0001)
    char                                          pa_00CA[0x0006]                                               // 0x00CA(0x0006)
    FRigUnit                                      WorkData;                                                     // 0x00D0(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    FName                                         Bone;                                                         // 0x0000(0x000C)
    float                                         Ratio;                                                        // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    FName                                         Space;                                                        // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    FName                                         Bone;                                                         // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0008(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0070(0x0010)
    FTransform                                    EffectorTransform;                                            // 0x0080(0x0030)
    float                                         Precision;                                                    // 0x00B0(0x0004)
    float                                         Weight;                                                       // 0x00B4(0x0004)
    int32_t                                       MaxIterations;                                                // 0x00B8(0x0004)
    bool                                          bStartFromTail;                                               // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    float                                         BaseRotationLimit;                                            // 0x00C0(0x0004)
    char                                          pa_00C4[0x0004]                                               // 0x00C4(0x0004)
    TArray<FRigUnit>                              RotationLimits;                                               // 0x00C8(0x0010)
    bool                                          bPropagateToChildren;                                         // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00E0(0x0058)
    char                                          pa_0138[0x0008]                                               // 0x0138(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit
{
    TArray<FCCDIKChainLink>                       Chain;                                                        // 0x0000(0x0010)
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0010(0x0010)
    TArray<int32_t>                               RotationLimitIndex;                                           // 0x0020(0x0010)
    TArray<float>                                 RotationLimitsPerItem;                                        // 0x0030(0x0010)
    FCachedRigElement                             CachedEffector;                                               // 0x0040(0x0018)
};


// ScriptStruct  AnimationCore.CCDIKChainLink
// Struct Size::0x0080
struct FCCDIKChainLink
{
    char                                          pa_0000[0x0080]                                               // 0x0000(0x0080)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0014
struct FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0000(0x0010)
    float                                         Limit;                                                        // 0x0010(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0150
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0070(0x000C)
    FName                                         EffectorBone;                                                 // 0x007C(0x000C)
    char                                          pa_0088[0x0008]                                               // 0x0088(0x0008)
    FTransform                                    EffectorTransform;                                            // 0x0090(0x0030)
    float                                         Precision;                                                    // 0x00C0(0x0004)
    float                                         Weight;                                                       // 0x00C4(0x0004)
    int32_t                                       MaxIterations;                                                // 0x00C8(0x0004)
    bool                                          bStartFromTail;                                               // 0x00CC(0x0001)
    char                                          pa_00CD[0x0003]                                               // 0x00CD(0x0003)
    float                                         BaseRotationLimit;                                            // 0x00D0(0x0004)
    char                                          pa_00D4[0x0004]                                               // 0x00D4(0x0004)
    TArray<FRigUnit>                              RotationLimits;                                               // 0x00D8(0x0010)
    bool                                          bPropagateToChildren;                                         // 0x00E8(0x0001)
    char                                          pa_00E9[0x0007]                                               // 0x00E9(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00F0(0x0058)
    char                                          pa_0148[0x0008]                                               // 0x0148(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    FName                                         Bone;                                                         // 0x0000(0x000C)
    float                                         Limit;                                                        // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0280
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                ChainRoot;                                                    // 0x0070(0x0010)
    FVector                                       Speed;                                                        // 0x0080(0x000C)
    FRigUnit                                      Reach;                                                        // 0x008C(0x0028)
    FRigUnit                                      Wave;                                                         // 0x00B4(0x0040)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
    FRuntimeFloatCurve                            WaveCurve;                                                    // 0x00F8(0x0088)
    FRigUnit                                      Pendulum;                                                     // 0x0180(0x003C)
    bool                                          bDrawDebug;                                                   // 0x01BC(0x0001)
    char                                          pa_01BD[0x0003]                                               // 0x01BD(0x0003)
    FTransform                                    DrawWorldOffset;                                              // 0x01C0(0x0030)
    FRigUnit                                      WorkData;                                                     // 0x01F0(0x0090)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit
{
    FVector                                       Time;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FCachedRigElement>                     Items;                                                        // 0x0010(0x0010)
    TArray<float>                                 Ratio;                                                        // 0x0020(0x0010)
    TArray<FVector>                               LocalTip;                                                     // 0x0030(0x0010)
    TArray<FVector>                               PendulumTip;                                                  // 0x0040(0x0010)
    TArray<FVector>                               PendulumPosition;                                             // 0x0050(0x0010)
    TArray<FVector>                               PendulumVelocity;                                             // 0x0060(0x0010)
    TArray<FVector>                               HierarchyLine;                                                // 0x0070(0x0010)
    TArray<FVector>                               VelocityLines;                                                // 0x0080(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x003C
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         PendulumStiffness;                                            // 0x0004(0x0004)
    FVector                                       PendulumGravity;                                              // 0x0008(0x000C)
    float                                         PendulumBlend;                                                // 0x0014(0x0004)
    float                                         PendulumDrag;                                                 // 0x0018(0x0004)
    float                                         PendulumMinimum;                                              // 0x001C(0x0004)
    float                                         PendulumMaximum;                                              // 0x0020(0x0004)
    enum class EControlRigAnimEasingType          PendulumEase;                                                 // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FVector                                       UnwindAxis;                                                   // 0x0028(0x000C)
    float                                         UnwindMinimum;                                                // 0x0034(0x0004)
    float                                         UnwindMaximum;                                                // 0x0038(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       WaveFrequency;                                                // 0x0004(0x000C)
    FVector                                       WaveAmplitude;                                                // 0x0010(0x000C)
    FVector                                       WaveOffset;                                                   // 0x001C(0x000C)
    FVector                                       WaveNoise;                                                    // 0x0028(0x000C)
    float                                         WaveMinimum;                                                  // 0x0034(0x0004)
    float                                         WaveMaximum;                                                  // 0x0038(0x0004)
    enum class EControlRigAnimEasingType          WaveEase;                                                     // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       ReachTarget;                                                  // 0x0004(0x000C)
    FVector                                       ReachAxis;                                                    // 0x0010(0x000C)
    float                                         ReachMinimum;                                                 // 0x001C(0x0004)
    float                                         ReachMaximum;                                                 // 0x0020(0x0004)
    enum class EControlRigAnimEasingType          ReachEase;                                                    // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0280
struct FRigUnit : public FRigUnit
{
    FName                                         ChainRoot;                                                    // 0x0070(0x000C)
    FVector                                       Speed;                                                        // 0x007C(0x000C)
    FRigUnit                                      Reach;                                                        // 0x0088(0x0028)
    FRigUnit                                      Wave;                                                         // 0x00B0(0x0040)
    FRuntimeFloatCurve                            WaveCurve;                                                    // 0x00F0(0x0088)
    FRigUnit                                      Pendulum;                                                     // 0x0178(0x003C)
    bool                                          bDrawDebug;                                                   // 0x01B4(0x0001)
    char                                          pa_01B5[0x000B]                                               // 0x01B5(0x000B)
    FTransform                                    DrawWorldOffset;                                              // 0x01C0(0x0030)
    FRigUnit                                      WorkData;                                                     // 0x01F0(0x0090)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0108
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Collection;                                                   // 0x0070(0x0010)
    FRigElementKey                                Item;                                                         // 0x0080(0x0010)
    int32_t                                       Index;                                                        // 0x0090(0x0004)
    int32_t                                       Count;                                                        // 0x0094(0x0004)
    float                                         Ratio;                                                        // 0x0098(0x0004)
    bool                                          Continue;                                                     // 0x009C(0x0001)
    char                                          pa_009D[0x0003]                                               // 0x009D(0x0003)
    FControlRigExecuteContext                     Completed;                                                    // 0x00A0(0x0068)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Collection;                                                   // 0x0008(0x0010)
    int32_t                                       Index;                                                        // 0x0018(0x0004)
    FRigElementKey                                Item;                                                         // 0x001C(0x0010)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Collection;                                                   // 0x0008(0x0010)
    int32_t                                       Count;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Collection;                                                   // 0x0008(0x0010)
    FRigElementKeyCollection                      Reversed;                                                     // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      A;                                                            // 0x0008(0x0010)
    FRigElementKeyCollection                      B;                                                            // 0x0018(0x0010)
    FRigElementKeyCollection                      Collection;                                                   // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      A;                                                            // 0x0008(0x0010)
    FRigElementKeyCollection                      B;                                                            // 0x0018(0x0010)
    FRigElementKeyCollection                      Collection;                                                   // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      A;                                                            // 0x0008(0x0010)
    FRigElementKeyCollection                      B;                                                            // 0x0018(0x0010)
    FRigElementKeyCollection                      Collection;                                                   // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    TArray<FRigElementKey>                        Items;                                                        // 0x0008(0x0010)
    FRigElementKeyCollection                      Collection;                                                   // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0008(0x0010)
    FName                                         Old;                                                          // 0x0018(0x000C)
    FName                                         New;                                                          // 0x0024(0x000C)
    bool                                          RemoveInvalidItems;                                           // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    FRigElementKeyCollection                      Collection;                                                   // 0x0038(0x0010)
    FRigElementKeyCollection                      CachedCollection;                                             // 0x0048(0x0010)
    int32_t                                       CachedHierarchyHash;                                          // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Parent;                                                       // 0x0008(0x0010)
    bool                                          bIncludeParent;                                               // 0x0018(0x0001)
    bool                                          bRecursive;                                                   // 0x0019(0x0001)
    enum class ERigElementType                    TypeToSearch;                                                 // 0x001A(0x0001)
    char                                          pa_001B[0x0005]                                               // 0x001B(0x0005)
    FRigElementKeyCollection                      Collection;                                                   // 0x0020(0x0010)
    FRigElementKeyCollection                      CachedCollection;                                             // 0x0030(0x0010)
    int32_t                                       CachedHierarchyHash;                                          // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FName                                         PartialName;                                                  // 0x0008(0x000C)
    enum class ERigElementType                    TypeToSearch;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FRigElementKeyCollection                      Collection;                                                   // 0x0018(0x0010)
    FRigElementKeyCollection                      CachedCollection;                                             // 0x0028(0x0010)
    int32_t                                       CachedHierarchyHash;                                          // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                FirstItem;                                                    // 0x0008(0x0010)
    FRigElementKey                                LastItem;                                                     // 0x0018(0x0010)
    bool                                          Reverse;                                                      // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    FRigElementKeyCollection                      Collection;                                                   // 0x0030(0x0010)
    FRigElementKeyCollection                      CachedCollection;                                             // 0x0040(0x0010)
    int32_t                                       CachedHierarchyHash;                                          // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    FEulerTransform                               Transform;                                                    // 0x0008(0x0024)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTransform                                    Base;                                                         // 0x0030(0x0030)
    FTransform                                    InitTransform;                                                // 0x0060(0x0030)
    FTransform                                    Result;                                                       // 0x0090(0x0030)
    FTransformFilter                              Filter;                                                       // 0x00C0(0x0009)
    char                                          pa_00C9[0x0007]                                               // 0x00C9(0x0007)
};


// ScriptStruct  AnimationCore.EulerTransform
// Struct Size::0x0024
struct FEulerTransform
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
    FVector                                       Scale;                                                        // 0x0018(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    FTransform                                    MeshTransform;                                                // 0x00D0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0010)
    FVector                                       TwistAxis;                                                    // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FQuat                                         Swing;                                                        // 0x0030(0x0010)
    FQuat                                         Twist;                                                        // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0010)
    FVector                                       Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FRotator                                      Input;                                                        // 0x0008(0x000C)
    FVector                                       Result;                                                       // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       Input;                                                        // 0x0008(0x000C)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FVector                                       Input;                                                        // 0x0008(0x000C)
    FRotator                                      Result;                                                       // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0010)
    FRotator                                      Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FRotator                                      Input;                                                        // 0x0008(0x000C)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    FEulerTransform                               Input;                                                        // 0x0008(0x0024)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTransform                                    Result;                                                       // 0x0030(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Input;                                                        // 0x0010(0x0030)
    FEulerTransform                               Result;                                                       // 0x0040(0x0024)
    char                                          pa_0064[0x000C]                                               // 0x0064(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    FCRFourPointBezier                            Bezier;                                                       // 0x0070(0x0030)
    float                                         MinimumU;                                                     // 0x00A0(0x0004)
    float                                         MaximumU;                                                     // 0x00A4(0x0004)
    FLinearColor                                  Color;                                                        // 0x00A8(0x0010)
    float                                         Thickness;                                                    // 0x00B8(0x0004)
    int32_t                                       Detail;                                                       // 0x00BC(0x0004)
    FRigElementKey                                Space;                                                        // 0x00C0(0x0010)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0030)
    bool                                          bEnabled;                                                     // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    FCRFourPointBezier                            Bezier;                                                       // 0x0070(0x0030)
    float                                         MinimumU;                                                     // 0x00A0(0x0004)
    float                                         MaximumU;                                                     // 0x00A4(0x0004)
    FLinearColor                                  Color;                                                        // 0x00A8(0x0010)
    float                                         Thickness;                                                    // 0x00B8(0x0004)
    int32_t                                       Detail;                                                       // 0x00BC(0x0004)
    FName                                         Space;                                                        // 0x00C0(0x000C)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0030)
    bool                                          bEnabled;                                                     // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    float                                         Scale;                                                        // 0x0070(0x0004)
    FLinearColor                                  Color;                                                        // 0x0074(0x0010)
    float                                         Thickness;                                                    // 0x0084(0x0004)
    char                                          pa_0088[0x0008]                                               // 0x0088(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0090(0x0030)
    bool                                          bEnabled;                                                     // 0x00C0(0x0001)
    char                                          pa_00C1[0x000F]                                               // 0x00C1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0070(0x000C)
    FVector                                       B;                                                            // 0x007C(0x000C)
    FLinearColor                                  Color;                                                        // 0x0088(0x0010)
    float                                         Thickness;                                                    // 0x0098(0x0004)
    FRigElementKey                                Space;                                                        // 0x009C(0x0010)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
    FTransform                                    WorldOffset;                                                  // 0x00B0(0x0030)
    bool                                          bEnabled;                                                     // 0x00E0(0x0001)
    char                                          pa_00E1[0x000F]                                               // 0x00E1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0070(0x000C)
    FVector                                       B;                                                            // 0x007C(0x000C)
    FLinearColor                                  Color;                                                        // 0x0088(0x0010)
    float                                         Thickness;                                                    // 0x0098(0x0004)
    FName                                         Space;                                                        // 0x009C(0x000C)
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x00B0(0x0030)
    bool                                          bEnabled;                                                     // 0x00E0(0x0001)
    char                                          pa_00E1[0x000F]                                               // 0x00E1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    TArray<FVector>                               Points;                                                       // 0x0070(0x0010)
    FLinearColor                                  Color;                                                        // 0x0080(0x0010)
    float                                         Thickness;                                                    // 0x0090(0x0004)
    FRigElementKey                                Space;                                                        // 0x0094(0x0010)
    char                                          pa_00A4[0x000C]                                               // 0x00A4(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x00B0(0x0030)
    bool                                          bEnabled;                                                     // 0x00E0(0x0001)
    char                                          pa_00E1[0x000F]                                               // 0x00E1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    TArray<FVector>                               Points;                                                       // 0x0070(0x0010)
    FLinearColor                                  Color;                                                        // 0x0080(0x0010)
    float                                         Thickness;                                                    // 0x0090(0x0004)
    FName                                         Space;                                                        // 0x0094(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x00A0(0x0030)
    bool                                          bEnabled;                                                     // 0x00D0(0x0001)
    char                                          pa_00D1[0x000F]                                               // 0x00D1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    FVector                                       Vector;                                                       // 0x0070(0x000C)
    enum class ERigUnitDebugPointMode             Mode;                                                         // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
    FLinearColor                                  Color;                                                        // 0x0080(0x0010)
    float                                         Scale;                                                        // 0x0090(0x0004)
    float                                         Thickness;                                                    // 0x0094(0x0004)
    FName                                         Space;                                                        // 0x0098(0x000C)
    char                                          pa_00A4[0x000C]                                               // 0x00A4(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x00B0(0x0030)
    bool                                          bEnabled;                                                     // 0x00E0(0x0001)
    char                                          pa_00E1[0x000F]                                               // 0x00E1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    FVector                                       Vector;                                                       // 0x0008(0x000C)
    enum class ERigUnitDebugPointMode             Mode;                                                         // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FLinearColor                                  Color;                                                        // 0x0018(0x0010)
    float                                         Scale;                                                        // 0x0028(0x0004)
    float                                         Thickness;                                                    // 0x002C(0x0004)
    FName                                         Space;                                                        // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FTransform                                    WorldOffset;                                                  // 0x0040(0x0030)
    bool                                          bEnabled;                                                     // 0x0070(0x0001)
    char                                          pa_0071[0x000F]                                               // 0x0071(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0120
struct FRigUnit : public FRigUnit
{
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    FLinearColor                                  Color;                                                        // 0x00A0(0x0010)
    float                                         Radius;                                                       // 0x00B0(0x0004)
    float                                         MinimumDegrees;                                               // 0x00B4(0x0004)
    float                                         MaximumDegrees;                                               // 0x00B8(0x0004)
    float                                         Thickness;                                                    // 0x00BC(0x0004)
    int32_t                                       Detail;                                                       // 0x00C0(0x0004)
    FRigElementKey                                Space;                                                        // 0x00C4(0x0010)
    char                                          pa_00D4[0x000C]                                               // 0x00D4(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x00E0(0x0030)
    bool                                          bEnabled;                                                     // 0x0110(0x0001)
    char                                          pa_0111[0x000F]                                               // 0x0111(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    FLinearColor                                  Color;                                                        // 0x00A0(0x0010)
    float                                         Radius;                                                       // 0x00B0(0x0004)
    float                                         MinimumDegrees;                                               // 0x00B4(0x0004)
    float                                         MaximumDegrees;                                               // 0x00B8(0x0004)
    float                                         Thickness;                                                    // 0x00BC(0x0004)
    int32_t                                       Detail;                                                       // 0x00C0(0x0004)
    FName                                         Space;                                                        // 0x00C4(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0030)
    bool                                          bEnabled;                                                     // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    FLinearColor                                  Color;                                                        // 0x00A0(0x0010)
    float                                         Scale;                                                        // 0x00B0(0x0004)
    float                                         Thickness;                                                    // 0x00B4(0x0004)
    FRigElementKey                                Space;                                                        // 0x00B8(0x0010)
    char                                          pa_00C8[0x0008]                                               // 0x00C8(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0030)
    bool                                          bEnabled;                                                     // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    FLinearColor                                  Color;                                                        // 0x00A0(0x0010)
    float                                         Scale;                                                        // 0x00B0(0x0004)
    float                                         Thickness;                                                    // 0x00B4(0x0004)
    FName                                         Space;                                                        // 0x00B8(0x000C)
    char                                          pa_00C4[0x000C]                                               // 0x00C4(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0030)
    bool                                          bEnabled;                                                     // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    TArray<FTransform>                            Transforms;                                                   // 0x0070(0x0010)
    enum class ERigUnitDebugTransformMode         Mode;                                                         // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    FLinearColor                                  Color;                                                        // 0x0084(0x0010)
    float                                         Thickness;                                                    // 0x0094(0x0004)
    float                                         Scale;                                                        // 0x0098(0x0004)
    FName                                         Space;                                                        // 0x009C(0x000C)
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x00B0(0x0030)
    bool                                          bEnabled;                                                     // 0x00E0(0x0001)
    char                                          pa_00E1[0x0007]                                               // 0x00E1(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00E8(0x0010)
    char                                          pa_00F8[0x0008]                                               // 0x00F8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    TArray<FTransform>                            DrawTransforms;                                               // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    enum class ERigUnitDebugTransformMode         Mode;                                                         // 0x00A0(0x0001)
    char                                          pa_00A1[0x0003]                                               // 0x00A1(0x0003)
    FLinearColor                                  Color;                                                        // 0x00A4(0x0010)
    float                                         Thickness;                                                    // 0x00B4(0x0004)
    float                                         Scale;                                                        // 0x00B8(0x0004)
    FRigElementKey                                Space;                                                        // 0x00BC(0x0010)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0030)
    bool                                          bEnabled;                                                     // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    enum class ERigUnitDebugTransformMode         Mode;                                                         // 0x00A0(0x0001)
    char                                          pa_00A1[0x0003]                                               // 0x00A1(0x0003)
    FLinearColor                                  Color;                                                        // 0x00A4(0x0010)
    float                                         Thickness;                                                    // 0x00B4(0x0004)
    float                                         Scale;                                                        // 0x00B8(0x0004)
    FName                                         Space;                                                        // 0x00BC(0x000C)
    char                                          pa_00C8[0x0008]                                               // 0x00C8(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0030)
    bool                                          bEnabled;                                                     // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    enum class ERigUnitDebugTransformMode         Mode;                                                         // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    FLinearColor                                  Color;                                                        // 0x0044(0x0010)
    float                                         Thickness;                                                    // 0x0054(0x0004)
    float                                         Scale;                                                        // 0x0058(0x0004)
    FName                                         Space;                                                        // 0x005C(0x000C)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0070(0x0030)
    bool                                          bEnabled;                                                     // 0x00A0(0x0001)
    char                                          pa_00A1[0x000F]                                               // 0x00A1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    FTransform                                    Delta;                                                        // 0x0040(0x0030)
    FTransform                                    PreviousValue;                                                // 0x0070(0x0030)
    FTransform                                    Cache;                                                        // 0x00A0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    FQuat                                         Delta;                                                        // 0x0020(0x0010)
    FQuat                                         PreviousValue;                                                // 0x0030(0x0010)
    FQuat                                         Cache;                                                        // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       Delta;                                                        // 0x0014(0x000C)
    FVector                                       PreviousValue;                                                // 0x0020(0x000C)
    FVector                                       Cache;                                                        // 0x002C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Delta;                                                        // 0x000C(0x0004)
    float                                         PreviousValue;                                                // 0x0010(0x0004)
    float                                         Cache;                                                        // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E8
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0070(0x0010)
    TArray<FRigUnit>                              Rotations;                                                    // 0x0080(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x0090(0x0001)
    char                                          pa_0091[0x0003]                                               // 0x0091(0x0003)
    float                                         Weight;                                                       // 0x0094(0x0004)
    FRigUnit                                      WorkData;                                                     // 0x0098(0x0050)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit
{
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0000(0x0010)
    TArray<int32_t>                               ItemRotationA;                                                // 0x0010(0x0010)
    TArray<int32_t>                               ItemRotationB;                                                // 0x0020(0x0010)
    TArray<float>                                 ItemRotationT;                                                // 0x0030(0x0010)
    TArray<FTransform>                            ItemLocalTransforms;                                          // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit
{
    FQuat                                         Rotation;                                                     // 0x0000(0x0010)
    float                                         Ratio;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F8
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0070(0x000C)
    FName                                         EndBone;                                                      // 0x007C(0x000C)
    TArray<FRigUnit>                              Rotations;                                                    // 0x0088(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    float                                         Weight;                                                       // 0x009C(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00A0(0x0001)
    char                                          pa_00A1[0x0007]                                               // 0x00A1(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00A8(0x0050)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         InstructionName;                                              // 0x0070(0x000C)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FTransform                                    Transform;                                                    // 0x0080(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnitMutable
{
    FName                                         InstructionName;                                              // 0x0070(0x000C)
    float                                         Thickness;                                                    // 0x007C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnitMutable
{
    FName                                         InstructionName;                                              // 0x0070(0x000C)
    FLinearColor                                  Color;                                                        // 0x007C(0x0010)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    FName                                         InstructionName;                                              // 0x0008(0x000C)
    FLinearColor                                  Color;                                                        // 0x0014(0x0010)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
    FTransform                                    Transform;                                                    // 0x0030(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0070(0x0010)
    FTransform                                    EffectorTransform;                                            // 0x0080(0x0030)
    float                                         Precision;                                                    // 0x00B0(0x0004)
    float                                         Weight;                                                       // 0x00B4(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00B8(0x0001)
    char                                          pa_00B9[0x0003]                                               // 0x00B9(0x0003)
    int32_t                                       MaxIterations;                                                // 0x00BC(0x0004)
    FRigUnit                                      WorkData;                                                     // 0x00C0(0x0038)
    char                                          pa_00F8[0x0008]                                               // 0x00F8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit
{
    TArray<FFABRIKChainLink>                      Chain;                                                        // 0x0000(0x0010)
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0010(0x0010)
    FCachedRigElement                             CachedEffector;                                               // 0x0020(0x0018)
};


// ScriptStruct  AnimationCore.FABRIKChainLink
// Struct Size::0x0038
struct FFABRIKChainLink
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0070(0x000C)
    FName                                         EffectorBone;                                                 // 0x007C(0x000C)
    char                                          pa_0088[0x0008]                                               // 0x0088(0x0008)
    FTransform                                    EffectorTransform;                                            // 0x0090(0x0030)
    float                                         Precision;                                                    // 0x00C0(0x0004)
    float                                         Weight;                                                       // 0x00C4(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00C8(0x0001)
    char                                          pa_00C9[0x0003]                                               // 0x00C9(0x0003)
    int32_t                                       MaxIterations;                                                // 0x00CC(0x0004)
    FRigUnit                                      WorkData;                                                     // 0x00D0(0x0038)
    char                                          pa_0108[0x0008]                                               // 0x0108(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0210
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0070(0x0010)
    FCRFourPointBezier                            Bezier;                                                       // 0x0080(0x0030)
    enum class EControlRigCurveAlignment          Alignment;                                                    // 0x00B0(0x0001)
    char                                          pa_00B1[0x0003]                                               // 0x00B1(0x0003)
    float                                         Minimum;                                                      // 0x00B4(0x0004)
    float                                         Maximum;                                                      // 0x00B8(0x0004)
    int32_t                                       SamplingPrecision;                                            // 0x00BC(0x0004)
    FVector                                       PrimaryAxis;                                                  // 0x00C0(0x000C)
    FVector                                       SecondaryAxis;                                                // 0x00CC(0x000C)
    FVector                                       PoleVectorPosition;                                           // 0x00D8(0x000C)
    char                                          pa_00E4[0x0004]                                               // 0x00E4(0x0004)
    TArray<FRigUnit>                              Rotations;                                                    // 0x00E8(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x00F8(0x0001)
    char                                          pa_00F9[0x0003]                                               // 0x00F9(0x0003)
    float                                         Weight;                                                       // 0x00FC(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
    FRigUnit                                      DebugSettings;                                                // 0x0110(0x0060)
    FRigUnit                                      WorkData;                                                     // 0x0170(0x0098)
    char                                          pa_0208[0x0008]                                               // 0x0208(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit
{
    float                                         ChainLength;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FVector>                               ItemPositions;                                                // 0x0008(0x0010)
    TArray<float>                                 ItemSegments;                                                 // 0x0018(0x0010)
    TArray<FVector>                               CurvePositions;                                               // 0x0028(0x0010)
    TArray<float>                                 CurveSegments;                                                // 0x0038(0x0010)
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0048(0x0010)
    TArray<int32_t>                               ItemRotationA;                                                // 0x0058(0x0010)
    TArray<int32_t>                               ItemRotationB;                                                // 0x0068(0x0010)
    TArray<float>                                 ItemRotationT;                                                // 0x0078(0x0010)
    TArray<FTransform>                            ItemLocalTransforms;                                          // 0x0088(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    FLinearColor                                  CurveColor;                                                   // 0x0008(0x0010)
    FLinearColor                                  SegmentsColor;                                                // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0030(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit
{
    FQuat                                         Rotation;                                                     // 0x0000(0x0010)
    float                                         Ratio;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0210
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0070(0x000C)
    FName                                         EndBone;                                                      // 0x007C(0x000C)
    FCRFourPointBezier                            Bezier;                                                       // 0x0088(0x0030)
    enum class EControlRigCurveAlignment          Alignment;                                                    // 0x00B8(0x0001)
    char                                          pa_00B9[0x0003]                                               // 0x00B9(0x0003)
    float                                         Minimum;                                                      // 0x00BC(0x0004)
    float                                         Maximum;                                                      // 0x00C0(0x0004)
    int32_t                                       SamplingPrecision;                                            // 0x00C4(0x0004)
    FVector                                       PrimaryAxis;                                                  // 0x00C8(0x000C)
    FVector                                       SecondaryAxis;                                                // 0x00D4(0x000C)
    FVector                                       PoleVectorPosition;                                           // 0x00E0(0x000C)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
    TArray<FRigUnit>                              Rotations;                                                    // 0x00F0(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x0100(0x0001)
    char                                          pa_0101[0x0003]                                               // 0x0101(0x0003)
    float                                         Weight;                                                       // 0x0104(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0108(0x0001)
    char                                          pa_0109[0x0007]                                               // 0x0109(0x0007)
    FRigUnit                                      DebugSettings;                                                // 0x0110(0x0060)
    FRigUnit                                      WorkData;                                                     // 0x0170(0x0098)
    char                                          pa_0208[0x0008]                                               // 0x0208(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         MinIn;                                                        // 0x000C(0x0004)
    float                                         MaxIn;                                                        // 0x0010(0x0004)
    float                                         MinOut;                                                       // 0x0014(0x0004)
    float                                         MaxOut;                                                       // 0x0018(0x0004)
    float                                         Result;                                                       // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Min;                                                          // 0x000C(0x0004)
    float                                         Max;                                                          // 0x0010(0x0004)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Argument0;                                                    // 0x0008(0x0004)
    float                                         Argument1;                                                    // 0x000C(0x0004)
    float                                         Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E8
struct FRigUnit : public FRigUnitMutable
{
    int32_t                                       Count;                                                        // 0x0070(0x0004)
    int32_t                                       Index;                                                        // 0x0074(0x0004)
    float                                         Ratio;                                                        // 0x0078(0x0004)
    bool                                          Continue;                                                     // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
    FControlRigExecuteContext                     Completed;                                                    // 0x0080(0x0068)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FName                                         Bone;                                                         // 0x0008(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0014(0x0001)
    char                                          pa_0015[0x000B]                                               // 0x0015(0x000B)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FCachedRigElement                             CachedBone;                                                   // 0x0050(0x0018)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0014(0x0001)
    char                                          pa_0015[0x000B]                                               // 0x0015(0x000B)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0050(0x0018)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0014(0x0001)
    char                                          pa_0015[0x000B]                                               // 0x0015(0x000B)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FTransform                                    Minimum;                                                      // 0x0050(0x0030)
    FTransform                                    Maximum;                                                      // 0x0080(0x0030)
    FCachedRigElement                             CachedControlIndex;                                           // 0x00B0(0x0018)
    char                                          pa_00C8[0x0008]                                               // 0x00C8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FRotator                                      Rotator;                                                      // 0x0018(0x000C)
    FRotator                                      Minimum;                                                      // 0x0024(0x000C)
    FRotator                                      Maximum;                                                      // 0x0030(0x000C)
    FCachedRigElement                             CachedControlIndex;                                           // 0x003C(0x0018)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FVector                                       Vector;                                                       // 0x0018(0x000C)
    FVector                                       Minimum;                                                      // 0x0024(0x000C)
    FVector                                       Maximum;                                                      // 0x0030(0x000C)
    FCachedRigElement                             CachedControlIndex;                                           // 0x003C(0x0018)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x000C)
    FVector2D                                     Vector;                                                       // 0x0014(0x0008)
    FVector2D                                     Minimum;                                                      // 0x001C(0x0008)
    FVector2D                                     Maximum;                                                      // 0x0024(0x0008)
    FCachedRigElement                             CachedControlIndex;                                           // 0x002C(0x0018)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x000C)
    int32_t                                       IntegerValue;                                                 // 0x0014(0x0004)
    int32_t                                       Minimum;                                                      // 0x0018(0x0004)
    int32_t                                       Maximum;                                                      // 0x001C(0x0004)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0020(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x000C)
    float                                         FloatValue;                                                   // 0x0014(0x0004)
    float                                         Minimum;                                                      // 0x0018(0x0004)
    float                                         Maximum;                                                      // 0x001C(0x0004)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0020(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x000C)
    bool                                          BoolValue;                                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0018(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FName                                         Curve;                                                        // 0x0008(0x000C)
    float                                         Value;                                                        // 0x0014(0x0004)
    FCachedRigElement                             CachedCurveIndex;                                             // 0x0018(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Result;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FName                                         Bone;                                                         // 0x0008(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0014(0x0001)
    char                                          pa_0015[0x000B]                                               // 0x0015(0x000B)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FCachedRigElement                             CachedBone;                                                   // 0x0050(0x0018)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Joint;                                                        // 0x0070(0x000C)
    enum class ETransformGetterType               Type;                                                         // 0x007C(0x0001)
    enum class ETransformSpaceMode                TransformSpace;                                               // 0x007D(0x0001)
    char                                          pa_007E[0x0002]                                               // 0x007E(0x0002)
    FTransform                                    BaseTransform;                                                // 0x0080(0x0030)
    FName                                         BaseJoint;                                                    // 0x00B0(0x000C)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
    FTransform                                    Output;                                                       // 0x00C0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    FName                                         Bone;                                                         // 0x0008(0x000C)
    FName                                         Space;                                                        // 0x0014(0x000C)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FCachedRigElement                             CachedBone;                                                   // 0x0050(0x0018)
    FCachedRigElement                             CachedSpace;                                                  // 0x0068(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0008(0x0010)
    bool                                          bChildInitial;                                                // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FRigElementKey                                Parent;                                                       // 0x001C(0x0010)
    bool                                          bParentInitial;                                               // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    FTransform                                    RelativeTransform;                                            // 0x0030(0x0030)
    FCachedRigElement                             CachedChild;                                                  // 0x0060(0x0018)
    FCachedRigElement                             CachedParent;                                                 // 0x0078(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FName                                         Space;                                                        // 0x0008(0x000C)
    enum class EBoneGetterSetterMode              SpaceType;                                                    // 0x0014(0x0001)
    char                                          pa_0015[0x000B]                                               // 0x0015(0x000B)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FCachedRigElement                             CachedSpaceIndex;                                             // 0x0050(0x0018)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0008(0x0010)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0018(0x0001)
    bool                                          bInitial;                                                     // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FCachedRigElement                             CachedIndex;                                                  // 0x0050(0x0018)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    float                                         Year;                                                         // 0x0008(0x0004)
    float                                         Month;                                                        // 0x000C(0x0004)
    float                                         Day;                                                          // 0x0010(0x0004)
    float                                         WeekDay;                                                      // 0x0014(0x0004)
    float                                         Hours;                                                        // 0x0018(0x0004)
    float                                         Minutes;                                                      // 0x001C(0x0004)
    float                                         Seconds;                                                      // 0x0020(0x0004)
    float                                         OverallSeconds;                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0008(0x0010)
    bool                                          bIncludeItem;                                                 // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FRigElementKeyCollection                      Siblings;                                                     // 0x0020(0x0010)
    FCachedRigElement                             CachedItem;                                                   // 0x0030(0x0018)
    FRigElementKeyCollection                      CachedSiblings;                                               // 0x0048(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Parent;                                                       // 0x0008(0x0010)
    bool                                          bIncludeParent;                                               // 0x0018(0x0001)
    bool                                          bRecursive;                                                   // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    FRigElementKeyCollection                      Children;                                                     // 0x0020(0x0010)
    FCachedRigElement                             CachedParent;                                                 // 0x0030(0x0018)
    FRigElementKeyCollection                      CachedChildren;                                               // 0x0048(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0008(0x0010)
    bool                                          bIncludeChild;                                                // 0x0018(0x0001)
    bool                                          bReverse;                                                     // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    FRigElementKeyCollection                      Parents;                                                      // 0x0020(0x0010)
    FCachedRigElement                             CachedChild;                                                  // 0x0030(0x0018)
    FRigElementKeyCollection                      CachedParents;                                                // 0x0048(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0008(0x0010)
    FRigElementKey                                Parent;                                                       // 0x0018(0x0010)
    FCachedRigElement                             CachedChild;                                                  // 0x0028(0x0018)
    FCachedRigElement                             CachedParent;                                                 // 0x0040(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0068)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          bIsInteracting;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0008(0x0010)
    FName                                         Old;                                                          // 0x0018(0x000C)
    FName                                         New;                                                          // 0x0024(0x000C)
    FRigElementKey                                Result;                                                       // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0008(0x0010)
    bool                                          Exists;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x001C(0x0018)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    int32_t                                       BufferSize;                                                   // 0x0040(0x0004)
    char                                          pa_0044[0x000C]                                               // 0x0044(0x000C)
    FTransform                                    Result;                                                       // 0x0050(0x0030)
    TArray<FTransform>                            Buffer;                                                       // 0x0080(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0090(0x0004)
    char                                          pa_0094[0x000C]                                               // 0x0094(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    int32_t                                       BufferSize;                                                   // 0x0014(0x0004)
    FVector                                       Result;                                                       // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FVector>                               Buffer;                                                       // 0x0028(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    int32_t                                       BufferSize;                                                   // 0x000C(0x0004)
    float                                         Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<float>                                 Buffer;                                                       // 0x0018(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          A;                                                            // 0x0008(0x0001)
    bool                                          B;                                                            // 0x0009(0x0001)
    bool                                          Result;                                                       // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          A;                                                            // 0x0008(0x0001)
    bool                                          B;                                                            // 0x0009(0x0001)
    bool                                          Result;                                                       // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          A;                                                            // 0x0008(0x0001)
    bool                                          B;                                                            // 0x0009(0x0001)
    bool                                          Result;                                                       // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          Value;                                                        // 0x0008(0x0001)
    bool                                          Result;                                                       // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          Value;                                                        // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FLinearColor                                  A;                                                            // 0x0008(0x0010)
    FLinearColor                                  B;                                                            // 0x0018(0x0010)
    float                                         T;                                                            // 0x0028(0x0004)
    FLinearColor                                  Result;                                                       // 0x002C(0x0010)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FLinearColor                                  A;                                                            // 0x0008(0x0010)
    FLinearColor                                  B;                                                            // 0x0018(0x0010)
    FLinearColor                                  Result;                                                       // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    FLinearColor                                  Result;                                                       // 0x000C(0x0010)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         C;                                                            // 0x0010(0x0004)
    float                                         AlphaAngle;                                                   // 0x0014(0x0004)
    float                                         BetaAngle;                                                    // 0x0018(0x0004)
    float                                         GammaAngle;                                                   // 0x001C(0x0004)
    bool                                          bValid;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Result;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    bool                                          Condition;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         IfTrue;                                                       // 0x000C(0x0004)
    float                                         IfFalse;                                                      // 0x0010(0x0004)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         Tolerance;                                                    // 0x0010(0x0004)
    bool                                          Result;                                                       // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Tolerance;                                                    // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         SourceMinimum;                                                // 0x000C(0x0004)
    float                                         SourceMaximum;                                                // 0x0010(0x0004)
    float                                         TargetMinimum;                                                // 0x0014(0x0004)
    float                                         TargetMaximum;                                                // 0x0018(0x0004)
    bool                                          bClamp;                                                       // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         T;                                                            // 0x0010(0x0004)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    int32_t                                       Result;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Result;                                                       // 0x000C(0x0004)
    int32_t                                       Int;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Result;                                                       // 0x000C(0x0004)
    int32_t                                       Int;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Result;                                                       // 0x000C(0x0004)
    int32_t                                       Int;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       Value;                                                        // 0x0008(0x0004)
    int32_t                                       Minimum;                                                      // 0x000C(0x0004)
    int32_t                                       Maximum;                                                      // 0x0010(0x0004)
    int32_t                                       Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    int32_t                                       Value;                                                        // 0x0008(0x0004)
    int32_t                                       Result;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    int32_t                                       Value;                                                        // 0x0008(0x0004)
    float                                         Result;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    int32_t                                       Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0010)
    FVector                                       TwistAxis;                                                    // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FQuat                                         Swing;                                                        // 0x0030(0x0010)
    FQuat                                         Twist;                                                        // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Quaternion;                                                   // 0x0010(0x0010)
    enum class EAxis                              Axis;                                                         // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Result;                                                       // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Quaternion;                                                   // 0x0010(0x0010)
    FVector                                       Vector;                                                       // 0x0020(0x000C)
    FVector                                       Result;                                                       // 0x002C(0x000C)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0010)
    FQuat                                         B;                                                            // 0x0020(0x0010)
    float                                         Result;                                                       // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    bool                                          Condition;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FQuat                                         IfTrue;                                                       // 0x0010(0x0010)
    FQuat                                         IfFalse;                                                      // 0x0020(0x0010)
    FQuat                                         Result;                                                       // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0010)
    FQuat                                         B;                                                            // 0x0020(0x0010)
    bool                                          Result;                                                       // 0x0030(0x0001)
    char                                          pa_0031[0x000F]                                               // 0x0031(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0010)
    FQuat                                         B;                                                            // 0x0020(0x0010)
    bool                                          Result;                                                       // 0x0030(0x0001)
    char                                          pa_0031[0x000F]                                               // 0x0031(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0010)
    FQuat                                         B;                                                            // 0x0020(0x0010)
    float                                         T;                                                            // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
    FQuat                                         Result;                                                       // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0010)
    FQuat                                         B;                                                            // 0x0020(0x0010)
    FQuat                                         Result;                                                       // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    FRotator                                      Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Result;                                                       // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    float                                         Scale;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    FVector                                       Axis;                                                         // 0x0020(0x000C)
    float                                         Angle;                                                        // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FRotator                                      Rotator;                                                      // 0x0008(0x000C)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       Euler;                                                        // 0x0008(0x000C)
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x0014(0x0001)
    char                                          pa_0015[0x000B]                                               // 0x0015(0x000B)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       Axis;                                                         // 0x0008(0x000C)
    float                                         Angle;                                                        // 0x0014(0x0004)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    FVector                                       Input;                                                        // 0x0008(0x000C)
    enum class ERBFVectorDistanceType             DistanceFunction;                                             // 0x0014(0x0001)
    enum class ERBFKernelType                     SmoothingFunction;                                            // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    float                                         SmoothingRadius;                                              // 0x0018(0x0004)
    bool                                          bNormalizeOutput;                                             // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FRigUnit                                      WorkData;                                                     // 0x0020(0x0090)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit
{
    char                                          pa_0000[0x0090]                                               // 0x0000(0x0090)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateVectorXform>        Targets;                                                      // 0x00B0(0x0010)
    FTransform                                    Output;                                                       // 0x00C0(0x0030)
};


// ScriptStruct  ControlRig.MathRBFInterpolateVectorXform
// Struct Size::0x0040
struct FMathRBFInterpolateVectorXform
{
    FVector                                       Target;                                                       // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateVectorQuat>         Targets;                                                      // 0x00B0(0x0010)
    FQuat                                         Output;                                                       // 0x00C0(0x0010)
};


// ScriptStruct  ControlRig.MathRBFInterpolateVectorQuat
// Struct Size::0x0020
struct FMathRBFInterpolateVectorQuat
{
    FVector                                       Target;                                                       // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateVectorColor>        Targets;                                                      // 0x00B0(0x0010)
    FLinearColor                                  Output;                                                       // 0x00C0(0x0010)
};


// ScriptStruct  ControlRig.MathRBFInterpolateVectorColor
// Struct Size::0x001C
struct FMathRBFInterpolateVectorColor
{
    FVector                                       Target;                                                       // 0x0000(0x000C)
    FLinearColor                                  Value;                                                        // 0x000C(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateVectorVector>       Targets;                                                      // 0x00B0(0x0010)
    FVector                                       Output;                                                       // 0x00C0(0x000C)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  ControlRig.MathRBFInterpolateVectorVector
// Struct Size::0x0018
struct FMathRBFInterpolateVectorVector
{
    FVector                                       Target;                                                       // 0x0000(0x000C)
    FVector                                       Value;                                                        // 0x000C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateVectorFloat>        Targets;                                                      // 0x00B0(0x0010)
    float                                         Output;                                                       // 0x00C0(0x0004)
    char                                          pa_00C4[0x000C]                                               // 0x00C4(0x000C)
};


// ScriptStruct  ControlRig.MathRBFInterpolateVectorFloat
// Struct Size::0x0010
struct FMathRBFInterpolateVectorFloat
{
    FVector                                       Target;                                                       // 0x0000(0x000C)
    float                                         Value;                                                        // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0010)
    enum class ERBFQuatDistanceType               DistanceFunction;                                             // 0x0020(0x0001)
    enum class ERBFKernelType                     SmoothingFunction;                                            // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
    float                                         SmoothingAngle;                                               // 0x0024(0x0004)
    bool                                          bNormalizeOutput;                                             // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FVector                                       TwistAxis;                                                    // 0x002C(0x000C)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FRigUnit                                      WorkData;                                                     // 0x0040(0x0090)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit
{
    char                                          pa_0000[0x0090]                                               // 0x0000(0x0090)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateQuatXform>          Targets;                                                      // 0x00D0(0x0010)
    FTransform                                    Output;                                                       // 0x00E0(0x0030)
};


// ScriptStruct  ControlRig.MathRBFInterpolateQuatXform
// Struct Size::0x0040
struct FMathRBFInterpolateQuatXform
{
    FQuat                                         Target;                                                       // 0x0000(0x0010)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateQuatQuat>           Targets;                                                      // 0x00D0(0x0010)
    FQuat                                         Output;                                                       // 0x00E0(0x0010)
};


// ScriptStruct  ControlRig.MathRBFInterpolateQuatQuat
// Struct Size::0x0020
struct FMathRBFInterpolateQuatQuat
{
    FQuat                                         Target;                                                       // 0x0000(0x0010)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateQuatColor>          Targets;                                                      // 0x00D0(0x0010)
    FLinearColor                                  Output;                                                       // 0x00E0(0x0010)
};


// ScriptStruct  ControlRig.MathRBFInterpolateQuatColor
// Struct Size::0x0020
struct FMathRBFInterpolateQuatColor
{
    FQuat                                         Target;                                                       // 0x0000(0x0010)
    FLinearColor                                  Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateQuatVector>         Targets;                                                      // 0x00D0(0x0010)
    FVector                                       Output;                                                       // 0x00E0(0x000C)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
};


// ScriptStruct  ControlRig.MathRBFInterpolateQuatVector
// Struct Size::0x0020
struct FMathRBFInterpolateQuatVector
{
    FQuat                                         Target;                                                       // 0x0000(0x0010)
    FVector                                       Value;                                                        // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateQuatFloat>          Targets;                                                      // 0x00D0(0x0010)
    float                                         Output;                                                       // 0x00E0(0x0004)
    char                                          pa_00E4[0x000C]                                               // 0x00E4(0x000C)
};


// ScriptStruct  ControlRig.MathRBFInterpolateQuatFloat
// Struct Size::0x0020
struct FMathRBFInterpolateQuatFloat
{
    FQuat                                         Target;                                                       // 0x0000(0x0010)
    float                                         Value;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    enum class EAxis                              Axis;                                                         // 0x0040(0x0001)
    enum class EControlRigClampSpatialMode        Type;                                                         // 0x0041(0x0001)
    char                                          pa_0042[0x0002]                                               // 0x0042(0x0002)
    float                                         Minimum;                                                      // 0x0044(0x0004)
    float                                         Maximum;                                                      // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FTransform                                    Space;                                                        // 0x0050(0x0030)
    bool                                          bDrawDebug;                                                   // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    FLinearColor                                  DebugColor;                                                   // 0x0084(0x0010)
    float                                         DebugThickness;                                               // 0x0094(0x0004)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
    FTransform                                    Result;                                                       // 0x00A0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FVector                                       Rotation;                                                     // 0x0014(0x000C)
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Scale;                                                        // 0x0024(0x000C)
    FTransform                                    Transform;                                                    // 0x0030(0x0030)
    FEulerTransform                               EulerTransform;                                               // 0x0060(0x0024)
    char                                          pa_0084[0x000C]                                               // 0x0084(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FVector                                       Location;                                                     // 0x0040(0x000C)
    FVector                                       Result;                                                       // 0x004C(0x000C)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FVector                                       Direction;                                                    // 0x0040(0x000C)
    FVector                                       Result;                                                       // 0x004C(0x000C)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    bool                                          Condition;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FTransform                                    IfTrue;                                                       // 0x0010(0x0030)
    FTransform                                    IfFalse;                                                      // 0x0040(0x0030)
    FTransform                                    Result;                                                       // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    A;                                                            // 0x0010(0x0030)
    FTransform                                    B;                                                            // 0x0040(0x0030)
    float                                         T;                                                            // 0x0070(0x0004)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
    FTransform                                    Result;                                                       // 0x0080(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    FTransform                                    Result;                                                       // 0x0040(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Local;                                                        // 0x0010(0x0030)
    FTransform                                    Parent;                                                       // 0x0040(0x0030)
    FTransform                                    Global;                                                       // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Global;                                                       // 0x0010(0x0030)
    FTransform                                    Parent;                                                       // 0x0040(0x0030)
    FTransform                                    Local;                                                        // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    A;                                                            // 0x0010(0x0030)
    FTransform                                    B;                                                            // 0x0040(0x0030)
    FTransform                                    Result;                                                       // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    FEulerTransform                               Result;                                                       // 0x0040(0x0024)
    char                                          pa_0064[0x000C]                                               // 0x0064(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    FEulerTransform                               EulerTransform;                                               // 0x0008(0x0024)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTransform                                    Result;                                                       // 0x0030(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    FVector                                       Start;                                                        // 0x0008(0x000C)
    FVector                                       Direction;                                                    // 0x0014(0x000C)
    FVector                                       PlanePoint;                                                   // 0x0020(0x000C)
    FVector                                       PlaneNormal;                                                  // 0x002C(0x000C)
    FVector                                       Result;                                                       // 0x0038(0x000C)
    float                                         Distance;                                                     // 0x0044(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    enum class EAxis                              Axis;                                                         // 0x0014(0x0001)
    enum class EControlRigClampSpatialMode        Type;                                                         // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    float                                         Minimum;                                                      // 0x0018(0x0004)
    float                                         Maximum;                                                      // 0x001C(0x0004)
    FTransform                                    Space;                                                        // 0x0020(0x0030)
    bool                                          bDrawDebug;                                                   // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    FLinearColor                                  DebugColor;                                                   // 0x0054(0x0010)
    float                                         DebugThickness;                                               // 0x0064(0x0004)
    FVector                                       Result;                                                       // 0x0068(0x000C)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FCRFourPointBezier                            Bezier;                                                       // 0x0008(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FCRFourPointBezier                            Bezier;                                                       // 0x0008(0x0030)
    float                                         T;                                                            // 0x0038(0x0004)
    FVector                                       Result;                                                       // 0x003C(0x000C)
    FVector                                       Tangent;                                                      // 0x0048(0x000C)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       Normal;                                                       // 0x0014(0x000C)
    FVector                                       Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         MinimumLength;                                                // 0x0014(0x0004)
    float                                         MaximumLength;                                                // 0x0018(0x0004)
    FVector                                       Result;                                                       // 0x001C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Length;                                                       // 0x0014(0x0004)
    FVector                                       Result;                                                       // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       Result;                                                       // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    FVector                                       Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    bool                                          Condition;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FVector                                       IfTrue;                                                       // 0x000C(0x000C)
    FVector                                       IfFalse;                                                      // 0x0018(0x000C)
    FVector                                       Result;                                                       // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    float                                         Tolerance;                                                    // 0x0020(0x0004)
    bool                                          Result;                                                       // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Tolerance;                                                    // 0x0014(0x0004)
    bool                                          Result;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       SourceMinimum;                                                // 0x0014(0x000C)
    FVector                                       SourceMaximum;                                                // 0x0020(0x000C)
    FVector                                       TargetMinimum;                                                // 0x002C(0x000C)
    FVector                                       TargetMaximum;                                                // 0x0038(0x000C)
    bool                                          bClamp;                                                       // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    FVector                                       Result;                                                       // 0x0048(0x000C)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    float                                         T;                                                            // 0x0020(0x0004)
    FVector                                       Result;                                                       // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       Minimum;                                                      // 0x0014(0x000C)
    FVector                                       Maximum;                                                      // 0x0020(0x000C)
    FVector                                       Result;                                                       // 0x002C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Factor;                                                       // 0x0014(0x0004)
    FVector                                       Result;                                                       // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    FVector                                       Result;                                                       // 0x000C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    TArray<FRigUnit>                              BoneToModify;                                                 // 0x0070(0x0010)
    float                                         Weight;                                                       // 0x0080(0x0004)
    float                                         WeightMinimum;                                                // 0x0084(0x0004)
    float                                         WeightMaximum;                                                // 0x0088(0x0004)
    enum class EControlRigModifyBoneMode          Mode;                                                         // 0x008C(0x0001)
    char                                          pa_008D[0x0003]                                               // 0x008D(0x0003)
    FRigUnit                                      WorkData;                                                     // 0x0090(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit
{
    FName                                         Bone;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    TArray<FRigUnit>                              ItemToModify;                                                 // 0x0070(0x0010)
    float                                         Weight;                                                       // 0x0080(0x0004)
    float                                         WeightMinimum;                                                // 0x0084(0x0004)
    float                                         WeightMaximum;                                                // 0x0088(0x0004)
    enum class EControlRigModifyBoneMode          Mode;                                                         // 0x008C(0x0001)
    char                                          pa_008D[0x0003]                                               // 0x008D(0x0003)
    FRigUnit                                      WorkData;                                                     // 0x0090(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0000(0x0010)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    FName                                         RootBone;                                                     // 0x0070(0x000C)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    TArray<FRigUnit>                              Effectors;                                                    // 0x0080(0x0010)
    float                                         Precision;                                                    // 0x0090(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0094(0x0001)
    char                                          pa_0095[0x0003]                                               // 0x0095(0x0003)
    int32_t                                       MaxIterations;                                                // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    FRigUnit                                      WorkData;                                                     // 0x00A0(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit
{
    FName                                         Bone;                                                         // 0x0000(0x000C)
    FVector                                       Location;                                                     // 0x000C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FName                                         Name;                                                         // 0x0008(0x000C)
    FName                                         Search;                                                       // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FName                                         Name;                                                         // 0x0008(0x000C)
    FName                                         Start;                                                        // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FName                                         Name;                                                         // 0x0008(0x000C)
    FName                                         Ending;                                                       // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FName                                         Name;                                                         // 0x0008(0x000C)
    FName                                         Old;                                                          // 0x0014(0x000C)
    FName                                         New;                                                          // 0x0020(0x000C)
    FName                                         Result;                                                       // 0x002C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FName                                         Name;                                                         // 0x0008(0x000C)
    int32_t                                       Count;                                                        // 0x0014(0x0004)
    bool                                          FromEnd;                                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         Remainder;                                                    // 0x001C(0x000C)
    FName                                         Chopped;                                                      // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FName                                         A;                                                            // 0x0008(0x000C)
    FName                                         B;                                                            // 0x0014(0x000C)
    FName                                         Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FVector                                       Position;                                                     // 0x0008(0x000C)
    FVector                                       Speed;                                                        // 0x0014(0x000C)
    FVector                                       Frequency;                                                    // 0x0020(0x000C)
    float                                         Minimum;                                                      // 0x002C(0x0004)
    float                                         Maximum;                                                      // 0x0030(0x0004)
    FVector                                       Result;                                                       // 0x0034(0x000C)
    FVector                                       Time;                                                         // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Speed;                                                        // 0x000C(0x0004)
    float                                         Frequency;                                                    // 0x0010(0x0004)
    float                                         Minimum;                                                      // 0x0014(0x0004)
    float                                         Maximum;                                                      // 0x0018(0x0004)
    float                                         Result;                                                       // 0x001C(0x0004)
    float                                         Time;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0070(0x0010)
    FTransform                                    OffsetTransform;                                              // 0x0080(0x0030)
    float                                         Weight;                                                       // 0x00B0(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00B4(0x0001)
    char                                          pa_00B5[0x0003]                                               // 0x00B5(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x00B8(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0180
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Subject;                                                      // 0x0070(0x0010)
    int32_t                                       ParentIndex;                                                  // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    FRigElementKeyCollection                      Parents;                                                      // 0x0088(0x0010)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
    FTransform                                    InitialGlobalTransform;                                       // 0x00A0(0x0030)
    float                                         Weight;                                                       // 0x00D0(0x0004)
    char                                          pa_00D4[0x000C]                                               // 0x00D4(0x000C)
    FTransform                                    Transform;                                                    // 0x00E0(0x0030)
    bool                                          Switched;                                                     // 0x0110(0x0001)
    char                                          pa_0111[0x0003]                                               // 0x0111(0x0003)
    FCachedRigElement                             CachedSubject;                                                // 0x0114(0x0018)
    FCachedRigElement                             CachedParent;                                                 // 0x012C(0x0018)
    char                                          pa_0144[0x000C]                                               // 0x0144(0x000C)
    FTransform                                    RelativeOffset;                                               // 0x0150(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0200
struct FRigUnit : public FRigUnit
{
    TArray<FCRSimPoint>                           Points;                                                       // 0x0070(0x0010)
    TArray<FCRSimLinearSpring>                    Links;                                                        // 0x0080(0x0010)
    TArray<FCRSimPointForce>                      Forces;                                                       // 0x0090(0x0010)
    TArray<FCRSimSoftCollision>                   CollisionVolumes;                                             // 0x00A0(0x0010)
    float                                         SimulatedStepsPerSecond;                                      // 0x00B0(0x0004)
    enum class ECRSimPointIntegrateType           IntegratorType;                                               // 0x00B4(0x0001)
    char                                          pa_00B5[0x0003]                                               // 0x00B5(0x0003)
    float                                         VerletBlend;                                                  // 0x00B8(0x0004)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
    TArray<FRigUnit>                              BoneTargets;                                                  // 0x00C0(0x0010)
    bool                                          bLimitLocalPosition;                                          // 0x00D0(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x00D1(0x0001)
    char                                          pa_00D2[0x0002]                                               // 0x00D2(0x0002)
    FVector                                       PrimaryAimAxis;                                               // 0x00D4(0x000C)
    FVector                                       SecondaryAimAxis;                                             // 0x00E0(0x000C)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
    FRigUnit                                      DebugSettings;                                                // 0x00F0(0x0050)
    FCRFourPointBezier                            Bezier;                                                       // 0x0140(0x0030)
    FRigUnit                                      WorkData;                                                     // 0x0170(0x0088)
    char                                          pa_01F8[0x0008]                                               // 0x01F8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0088
struct FRigUnit
{
    FCRSimPointContainer                          Simulation;                                                   // 0x0000(0x0078)
    TArray<FCachedRigElement>                     BoneIndices;                                                  // 0x0078(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    float                                         CollisionScale;                                               // 0x0008(0x0004)
    bool                                          bDrawPointsAsSpheres;                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FLinearColor                                  Color;                                                        // 0x0010(0x0010)
    FTransform                                    WorldOffset;                                                  // 0x0020(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit
{
    FName                                         Bone;                                                         // 0x0000(0x000C)
    int32_t                                       TranslationPoint;                                             // 0x000C(0x0004)
    int32_t                                       PrimaryAimPoint;                                              // 0x0010(0x0004)
    int32_t                                       SecondaryAimPoint;                                            // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0068)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    int32_t                                       NumberOfMeasurements;                                         // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FString                                       Prefix;                                                       // 0x0078(0x0010)
    float                                         AccumulatedTime;                                              // 0x0088(0x0004)
    int32_t                                       MeasurementsLeft;                                             // 0x008C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0008(0x0010)
    bool                                          bChildInitial;                                                // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FRigElementKey                                OldParent;                                                    // 0x001C(0x0010)
    bool                                          bOldParentInitial;                                            // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    FRigElementKey                                NewParent;                                                    // 0x0030(0x0010)
    bool                                          bNewParentInitial;                                            // 0x0040(0x0001)
    char                                          pa_0041[0x000F]                                               // 0x0041(0x000F)
    FTransform                                    Transform;                                                    // 0x0050(0x0030)
    FCachedRigElement                             CachedChild;                                                  // 0x0080(0x0018)
    FCachedRigElement                             CachedOldParent;                                              // 0x0098(0x0018)
    FCachedRigElement                             CachedNewParent;                                              // 0x00B0(0x0018)
    char                                          pa_00C8[0x0008]                                               // 0x00C8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0070(0x0010)
    bool                                          bRecomputeGlobal;                                             // 0x0080(0x0001)
    bool                                          bApplyToChildren;                                             // 0x0081(0x0001)
    bool                                          bRecursive;                                                   // 0x0082(0x0001)
    char                                          pa_0083[0x0001]                                               // 0x0083(0x0001)
    FCachedRigElement                             CachedIndex;                                                  // 0x0084(0x0018)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       Axis;                                                         // 0x0008(0x000C)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FQuat                                         Argument;                                                     // 0x0020(0x0010)
    float                                         Angle;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       Axis;                                                         // 0x0008(0x000C)
    float                                         Angle;                                                        // 0x0014(0x0004)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Argument;                                                     // 0x0010(0x0010)
    FVector                                       Axis;                                                         // 0x0020(0x000C)
    float                                         Angle;                                                        // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Argument;                                                     // 0x0010(0x0010)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Argument0;                                                    // 0x0010(0x0010)
    FQuat                                         Argument1;                                                    // 0x0020(0x0010)
    FQuat                                         Result;                                                       // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    int32_t                                       Seed;                                                         // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    float                                         Duration;                                                     // 0x0014(0x0004)
    FVector                                       Result;                                                       // 0x0018(0x000C)
    FVector                                       LastResult;                                                   // 0x0024(0x000C)
    int32_t                                       LastSeed;                                                     // 0x0030(0x0004)
    float                                         TimeLeft;                                                     // 0x0034(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    int32_t                                       Seed;                                                         // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    float                                         Duration;                                                     // 0x0014(0x0004)
    float                                         Result;                                                       // 0x0018(0x0004)
    float                                         LastResult;                                                   // 0x001C(0x0004)
    int32_t                                       LastSeed;                                                     // 0x0020(0x0004)
    float                                         TimeLeft;                                                     // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnitMutable
{
    enum class ERigEvent                          Event;                                                        // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FRigElementKey                                Item;                                                         // 0x0074(0x0010)
    float                                         OffsetInSeconds;                                              // 0x0084(0x0004)
    bool                                          bEnable;                                                      // 0x0088(0x0001)
    bool                                          bOnlyDuringInteraction;                                       // 0x0089(0x0001)
    char                                          pa_008A[0x0006]                                               // 0x008A(0x0006)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0210
struct FRigUnit : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0068)
    FControlRigExecuteContext                     A;                                                            // 0x0070(0x0068)
    FControlRigExecuteContext                     B;                                                            // 0x00D8(0x0068)
    FControlRigExecuteContext                     C;                                                            // 0x0140(0x0068)
    FControlRigExecuteContext                     D;                                                            // 0x01A8(0x0068)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0070(0x000C)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FTransform                                    Transform;                                                    // 0x0080(0x0030)
    FTransform                                    Result;                                                       // 0x00B0(0x0030)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00E0(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x00E1(0x0001)
    char                                          pa_00E2[0x0002]                                               // 0x00E2(0x0002)
    FCachedRigElement                             CachedBone;                                                   // 0x00E4(0x0018)
    char                                          pa_00FC[0x0004]                                               // 0x00FC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0070(0x000C)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FQuat                                         Rotation;                                                     // 0x0080(0x0010)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0090(0x0001)
    char                                          pa_0091[0x0003]                                               // 0x0091(0x0003)
    float                                         Weight;                                                       // 0x0094(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    FCachedRigElement                             CachedBone;                                                   // 0x009C(0x0018)
    char                                          pa_00B4[0x000C]                                               // 0x00B4(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0070(0x000C)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FTransform                                    Transform;                                                    // 0x0080(0x0030)
    FTransform                                    Result;                                                       // 0x00B0(0x0030)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00E0(0x0001)
    char                                          pa_00E1[0x0003]                                               // 0x00E1(0x0003)
    float                                         Weight;                                                       // 0x00E4(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00E8(0x0001)
    char                                          pa_00E9[0x0003]                                               // 0x00E9(0x0003)
    FCachedRigElement                             CachedBone;                                                   // 0x00EC(0x0018)
    char                                          pa_0104[0x000C]                                               // 0x0104(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0070(0x000C)
    FVector                                       Translation;                                                  // 0x007C(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0088(0x0001)
    char                                          pa_0089[0x0003]                                               // 0x0089(0x0003)
    float                                         Weight;                                                       // 0x008C(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0090(0x0001)
    char                                          pa_0091[0x0003]                                               // 0x0091(0x0003)
    FCachedRigElement                             CachedBone;                                                   // 0x0094(0x0018)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A8
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0070(0x000C)
    FLinearColor                                  Color;                                                        // 0x007C(0x0010)
    FCachedRigElement                             CachedControlIndex;                                           // 0x008C(0x0018)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0070(0x000C)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FTransform                                    Offset;                                                       // 0x0080(0x0030)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00B0(0x0001)
    char                                          pa_00B1[0x0003]                                               // 0x00B1(0x0003)
    FCachedRigElement                             CachedControlIndex;                                           // 0x00B4(0x0018)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0070(0x000C)
    float                                         Weight;                                                       // 0x007C(0x0004)
    FTransform                                    Transform;                                                    // 0x0080(0x0030)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00B0(0x0001)
    char                                          pa_00B1[0x0003]                                               // 0x00B1(0x0003)
    FCachedRigElement                             CachedControlIndex;                                           // 0x00B4(0x0018)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit : public FRigUnitMutable
{
    TArray<FRigUnit>                              Entries;                                                      // 0x0070(0x0010)
    float                                         Weight;                                                       // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0088(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x001C
struct FRigUnit
{
    FName                                         Control;                                                      // 0x0000(0x000C)
    FRotator                                      Rotator;                                                      // 0x000C(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A8
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0070(0x000C)
    float                                         Weight;                                                       // 0x007C(0x0004)
    FRotator                                      Rotator;                                                      // 0x0080(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x008C(0x0001)
    char                                          pa_008D[0x0003]                                               // 0x008D(0x0003)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0090(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A8
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0070(0x000C)
    float                                         Weight;                                                       // 0x007C(0x0004)
    FVector                                       Vector;                                                       // 0x0080(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x008C(0x0001)
    char                                          pa_008D[0x0003]                                               // 0x008D(0x0003)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0090(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit : public FRigUnitMutable
{
    TArray<FRigUnit>                              Entries;                                                      // 0x0070(0x0010)
    float                                         Weight;                                                       // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0088(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0014
struct FRigUnit
{
    FName                                         Control;                                                      // 0x0000(0x000C)
    FVector2D                                     Vector;                                                       // 0x000C(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0070(0x000C)
    float                                         Weight;                                                       // 0x007C(0x0004)
    FVector2D                                     Vector;                                                       // 0x0080(0x0008)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0088(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit : public FRigUnitMutable
{
    TArray<FRigUnit>                              Entries;                                                      // 0x0070(0x0010)
    float                                         Weight;                                                       // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0088(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    FName                                         Control;                                                      // 0x0000(0x000C)
    int32_t                                       IntegerValue;                                                 // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0070(0x000C)
    int32_t                                       Weight;                                                       // 0x007C(0x0004)
    int32_t                                       IntegerValue;                                                 // 0x0080(0x0004)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0084(0x0018)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit : public FRigUnitMutable
{
    TArray<FRigUnit>                              Entries;                                                      // 0x0070(0x0010)
    float                                         Weight;                                                       // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0088(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    FName                                         Control;                                                      // 0x0000(0x000C)
    float                                         FloatValue;                                                   // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0070(0x000C)
    float                                         Weight;                                                       // 0x007C(0x0004)
    float                                         FloatValue;                                                   // 0x0080(0x0004)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0084(0x0018)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnitMutable
{
    TArray<FRigUnit>                              Entries;                                                      // 0x0070(0x0010)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0080(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    FName                                         Control;                                                      // 0x0000(0x000C)
    bool                                          BoolValue;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0070(0x000C)
    bool                                          BoolValue;                                                    // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0080(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A8
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0070(0x0010)
    FString                                       Pattern;                                                      // 0x0080(0x0010)
    bool                                          bVisible;                                                     // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0098(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Curve;                                                        // 0x0070(0x000C)
    float                                         Value;                                                        // 0x007C(0x0004)
    FCachedRigElement                             CachedCurveIndex;                                             // 0x0080(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0070(0x000C)
    FName                                         Space;                                                        // 0x007C(0x000C)
    char                                          pa_0088[0x0008]                                               // 0x0088(0x0008)
    FTransform                                    Transform;                                                    // 0x0090(0x0030)
    float                                         Weight;                                                       // 0x00C0(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00C4(0x0001)
    char                                          pa_00C5[0x0003]                                               // 0x00C5(0x0003)
    FCachedRigElement                             CachedBone;                                                   // 0x00C8(0x0018)
    FCachedRigElement                             CachedSpaceIndex;                                             // 0x00E0(0x0018)
    char                                          pa_00F8[0x0008]                                               // 0x00F8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Child;                                                        // 0x0070(0x0010)
    FRigElementKey                                Parent;                                                       // 0x0080(0x0010)
    bool                                          bParentInitial;                                               // 0x0090(0x0001)
    char                                          pa_0091[0x000F]                                               // 0x0091(0x000F)
    FTransform                                    RelativeTransform;                                            // 0x00A0(0x0030)
    float                                         Weight;                                                       // 0x00D0(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00D4(0x0001)
    char                                          pa_00D5[0x0003]                                               // 0x00D5(0x0003)
    FCachedRigElement                             CachedChild;                                                  // 0x00D8(0x0018)
    FCachedRigElement                             CachedParent;                                                 // 0x00F0(0x0018)
    char                                          pa_0108[0x0008]                                               // 0x0108(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnitMutable
{
    FName                                         SpaceName;                                                    // 0x0070(0x000C)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FTransform                                    Transform;                                                    // 0x0080(0x0030)
    FTransform                                    Result;                                                       // 0x00B0(0x0030)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00E0(0x0001)
    char                                          pa_00E1[0x0003]                                               // 0x00E1(0x0003)
    FCachedRigElement                             CachedSpaceIndex;                                             // 0x00E4(0x0018)
    char                                          pa_00FC[0x0004]                                               // 0x00FC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Space;                                                        // 0x0070(0x000C)
    float                                         Weight;                                                       // 0x007C(0x0004)
    FTransform                                    Transform;                                                    // 0x0080(0x0030)
    enum class EBoneGetterSetterMode              SpaceType;                                                    // 0x00B0(0x0001)
    char                                          pa_00B1[0x0003]                                               // 0x00B1(0x0003)
    FCachedRigElement                             CachedSpaceIndex;                                             // 0x00B4(0x0018)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0070(0x0010)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    FVector                                       Scale;                                                        // 0x0084(0x000C)
    float                                         Weight;                                                       // 0x0090(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0094(0x0001)
    char                                          pa_0095[0x0003]                                               // 0x0095(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x0098(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0070(0x0010)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0080(0x0001)
    char                                          pa_0081[0x000F]                                               // 0x0081(0x000F)
    FQuat                                         Rotation;                                                     // 0x0090(0x0010)
    float                                         Weight;                                                       // 0x00A0(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00A4(0x0001)
    char                                          pa_00A5[0x0003]                                               // 0x00A5(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x00A8(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0070(0x0010)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    FVector                                       Translation;                                                  // 0x0084(0x000C)
    float                                         Weight;                                                       // 0x0090(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0094(0x0001)
    char                                          pa_0095[0x0003]                                               // 0x0095(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x0098(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0070(0x0010)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0080(0x0001)
    bool                                          bInitial;                                                     // 0x0081(0x0001)
    char                                          pa_0082[0x000E]                                               // 0x0082(0x000E)
    FTransform                                    Transform;                                                    // 0x0090(0x0030)
    float                                         Weight;                                                       // 0x00C0(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00C4(0x0001)
    char                                          pa_00C5[0x0003]                                               // 0x00C5(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x00C8(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0070(0x0010)
    float                                         SlideAmount;                                                  // 0x0080(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0084(0x0001)
    char                                          pa_0085[0x0003]                                               // 0x0085(0x0003)
    FRigUnit                                      WorkData;                                                     // 0x0088(0x0048)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit
{
    float                                         ChainLength;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<float>                                 ItemSegments;                                                 // 0x0008(0x0010)
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0018(0x0010)
    TArray<FTransform>                            Transforms;                                                   // 0x0028(0x0010)
    TArray<FTransform>                            BlendedTransforms;                                            // 0x0038(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D8
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0070(0x000C)
    FName                                         EndBone;                                                      // 0x007C(0x000C)
    float                                         SlideAmount;                                                  // 0x0088(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x008C(0x0001)
    char                                          pa_008D[0x0003]                                               // 0x008D(0x0003)
    FRigUnit                                      WorkData;                                                     // 0x0090(0x0048)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01E0
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0070(0x000C)
    FName                                         EndBone;                                                      // 0x007C(0x000C)
    float                                         HierarchyStrength;                                            // 0x0088(0x0004)
    float                                         EffectorStrength;                                             // 0x008C(0x0004)
    float                                         EffectorRatio;                                                // 0x0090(0x0004)
    float                                         RootStrength;                                                 // 0x0094(0x0004)
    float                                         RootRatio;                                                    // 0x0098(0x0004)
    float                                         Damping;                                                      // 0x009C(0x0004)
    FVector                                       PoleVector;                                                   // 0x00A0(0x000C)
    bool                                          bFlipPolePlane;                                               // 0x00AC(0x0001)
    enum class EControlRigVectorKind              PoleVectorKind;                                               // 0x00AD(0x0001)
    char                                          pa_00AE[0x0002]                                               // 0x00AE(0x0002)
    FName                                         PoleVectorSpace;                                              // 0x00B0(0x000C)
    FVector                                       PrimaryAxis;                                                  // 0x00BC(0x000C)
    FVector                                       SecondaryAxis;                                                // 0x00C8(0x000C)
    bool                                          bLiveSimulation;                                              // 0x00D4(0x0001)
    char                                          pa_00D5[0x0003]                                               // 0x00D5(0x0003)
    int32_t                                       Iterations;                                                   // 0x00D8(0x0004)
    bool                                          bLimitLocalPosition;                                          // 0x00DC(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x00DD(0x0001)
    char                                          pa_00DE[0x0002]                                               // 0x00DE(0x0002)
    FRigUnit                                      DebugSettings;                                                // 0x00E0(0x0050)
    FRigUnit                                      WorkData;                                                     // 0x0130(0x00B0)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit
{
    TArray<FCachedRigElement>                     CachedBones;                                                  // 0x0000(0x0010)
    FCachedRigElement                             CachedPoleVector;                                             // 0x0010(0x0018)
    TArray<FTransform>                            Transforms;                                                   // 0x0028(0x0010)
    FCRSimPointContainer                          Simulation;                                                   // 0x0038(0x0078)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    FLinearColor                                  Color;                                                        // 0x0008(0x0010)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0020(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Seconds;                                                      // 0x0008(0x0004)
    float                                         Frames;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Frames;                                                       // 0x0008(0x0004)
    float                                         Seconds;                                                      // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Speed;                                                        // 0x0008(0x0004)
    float                                         Time;                                                         // 0x000C(0x0004)
    float                                         AccumulatedValue;                                             // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    float                                         SecondsAgo;                                                   // 0x0040(0x0004)
    int32_t                                       BufferSize;                                                   // 0x0044(0x0004)
    float                                         TimeRange;                                                    // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FTransform                                    Result;                                                       // 0x0050(0x0030)
    TArray<FTransform>                            Buffer;                                                       // 0x0080(0x0010)
    TArray<float>                                 DeltaTimes;                                                   // 0x0090(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x00A0(0x0004)
    int32_t                                       UpperBound;                                                   // 0x00A4(0x0004)
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         SecondsAgo;                                                   // 0x0014(0x0004)
    int32_t                                       BufferSize;                                                   // 0x0018(0x0004)
    float                                         TimeRange;                                                    // 0x001C(0x0004)
    FVector                                       Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<FVector>                               Buffer;                                                       // 0x0030(0x0010)
    TArray<float>                                 DeltaTimes;                                                   // 0x0040(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0050(0x0004)
    int32_t                                       UpperBound;                                                   // 0x0054(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         SecondsAgo;                                                   // 0x000C(0x0004)
    int32_t                                       BufferSize;                                                   // 0x0010(0x0004)
    float                                         TimeRange;                                                    // 0x0014(0x0004)
    float                                         Result;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<float>                                 Buffer;                                                       // 0x0020(0x0010)
    TArray<float>                                 DeltaTimes;                                                   // 0x0030(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0040(0x0004)
    int32_t                                       UpperBound;                                                   // 0x0044(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Argument0;                                                    // 0x0010(0x0030)
    FTransform                                    Argument1;                                                    // 0x0040(0x0030)
    FTransform                                    Result;                                                       // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0150
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0070(0x0010)
    enum class ETransformSpaceMode                BaseTransformSpace;                                           // 0x0080(0x0001)
    char                                          pa_0081[0x000F]                                               // 0x0081(0x000F)
    FTransform                                    BaseTransform;                                                // 0x0090(0x0030)
    FRigElementKey                                BaseItem;                                                     // 0x00C0(0x0010)
    TArray<FConstraintTarget>                     Targets;                                                      // 0x00D0(0x0010)
    bool                                          bUseInitialTransforms;                                        // 0x00E0(0x0001)
    char                                          pa_00E1[0x0007]                                               // 0x00E1(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00E8(0x0060)
    char                                          pa_0148[0x0008]                                               // 0x0148(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit
{
    TArray<FConstraintData>                       ConstraintData;                                               // 0x0000(0x0010)
    TMap<int32_t,int32_t>                         ConstraintDataToTargets;                                      // 0x0010(0x0050)
};


// ScriptStruct  ControlRig.ConstraintTarget
// Struct Size::0x0040
struct FConstraintTarget
{
    FTransform                                    Transform;                                                    // 0x0000(0x0030)
    float                                         Weight;                                                       // 0x0030(0x0004)
    bool                                          bMaintainOffset;                                              // 0x0034(0x0001)
    FTransformFilter                              Filter;                                                       // 0x0035(0x0009)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    FName                                         Bone;                                                         // 0x0070(0x000C)
    enum class ETransformSpaceMode                BaseTransformSpace;                                           // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
    FTransform                                    BaseTransform;                                                // 0x0080(0x0030)
    FName                                         BaseBone;                                                     // 0x00B0(0x000C)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
    TArray<FConstraintTarget>                     Targets;                                                      // 0x00C0(0x0010)
    bool                                          bUseInitialTransforms;                                        // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00D8(0x0060)
    char                                          pa_0138[0x0008]                                               // 0x0138(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D8
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0070(0x0010)
    FVector                                       TwistAxis;                                                    // 0x0080(0x000C)
    FVector                                       PoleAxis;                                                     // 0x008C(0x000C)
    enum class EControlRigAnimEasingType          TwistEaseType;                                                // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    float                                         Weight;                                                       // 0x009C(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00A0(0x0001)
    char                                          pa_00A1[0x0007]                                               // 0x00A1(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00A8(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit
{
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0000(0x0010)
    TArray<float>                                 ItemRatios;                                                   // 0x0010(0x0010)
    TArray<FTransform>                            ItemTransforms;                                               // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0070(0x000C)
    FName                                         EndBone;                                                      // 0x007C(0x000C)
    FVector                                       TwistAxis;                                                    // 0x0088(0x000C)
    FVector                                       PoleAxis;                                                     // 0x0094(0x000C)
    enum class EControlRigAnimEasingType          TwistEaseType;                                                // 0x00A0(0x0001)
    char                                          pa_00A1[0x0003]                                               // 0x00A1(0x0003)
    float                                         Weight;                                                       // 0x00A4(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00A8(0x0001)
    char                                          pa_00A9[0x0007]                                               // 0x00A9(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00B0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0230
struct FRigUnit : public FRigUnitMutable
{
    FName                                         StartJoint;                                                   // 0x0070(0x000C)
    FName                                         EndJoint;                                                     // 0x007C(0x000C)
    FVector                                       PoleTarget;                                                   // 0x0088(0x000C)
    float                                         Spin;                                                         // 0x0094(0x0004)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
    FTransform                                    EndEffector;                                                  // 0x00A0(0x0030)
    float                                         IKBlend;                                                      // 0x00D0(0x0004)
    char                                          pa_00D4[0x000C]                                               // 0x00D4(0x000C)
    FTransform                                    StartJointFKTransform;                                        // 0x00E0(0x0030)
    FTransform                                    MidJointFKTransform;                                          // 0x0110(0x0030)
    FTransform                                    EndJointFKTransform;                                          // 0x0140(0x0030)
    float                                         PreviousFKIKBlend;                                            // 0x0170(0x0004)
    char                                          pa_0174[0x000C]                                               // 0x0174(0x000C)
    FTransform                                    StartJointIKTransform;                                        // 0x0180(0x0030)
    FTransform                                    MidJointIKTransform;                                          // 0x01B0(0x0030)
    FTransform                                    EndJointIKTransform;                                          // 0x01E0(0x0030)
    int32_t                                       StartJointIndex;                                              // 0x0210(0x0004)
    int32_t                                       MidJointIndex;                                                // 0x0214(0x0004)
    int32_t                                       EndJointIndex;                                                // 0x0218(0x0004)
    float                                         UpperLimbLength;                                              // 0x021C(0x0004)
    float                                         LowerLimbLength;                                              // 0x0220(0x0004)
    char                                          pa_0224[0x000C]                                               // 0x0224(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Root;                                                         // 0x0010(0x0030)
    FVector                                       PoleVector;                                                   // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FTransform                                    Effector;                                                     // 0x0050(0x0030)
    FVector                                       PrimaryAxis;                                                  // 0x0080(0x000C)
    FVector                                       SecondaryAxis;                                                // 0x008C(0x000C)
    float                                         SecondaryAxisWeight;                                          // 0x0098(0x0004)
    bool                                          bEnableStretch;                                               // 0x009C(0x0001)
    char                                          pa_009D[0x0003]                                               // 0x009D(0x0003)
    float                                         StretchStartRatio;                                            // 0x00A0(0x0004)
    float                                         StretchMaximumRatio;                                          // 0x00A4(0x0004)
    float                                         BoneALength;                                                  // 0x00A8(0x0004)
    float                                         BoneBLength;                                                  // 0x00AC(0x0004)
    FTransform                                    Elbow;                                                        // 0x00B0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FVector                                       Root;                                                         // 0x0008(0x000C)
    FVector                                       PoleVector;                                                   // 0x0014(0x000C)
    FVector                                       Effector;                                                     // 0x0020(0x000C)
    bool                                          bEnableStretch;                                               // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    float                                         StretchStartRatio;                                            // 0x0030(0x0004)
    float                                         StretchMaximumRatio;                                          // 0x0034(0x0004)
    float                                         BoneALength;                                                  // 0x0038(0x0004)
    float                                         BoneBLength;                                                  // 0x003C(0x0004)
    FVector                                       Elbow;                                                        // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01D0
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                ItemA;                                                        // 0x0070(0x0010)
    FRigElementKey                                ItemB;                                                        // 0x0080(0x0010)
    FRigElementKey                                EffectorItem;                                                 // 0x0090(0x0010)
    FTransform                                    Effector;                                                     // 0x00A0(0x0030)
    FVector                                       PrimaryAxis;                                                  // 0x00D0(0x000C)
    FVector                                       SecondaryAxis;                                                // 0x00DC(0x000C)
    float                                         SecondaryAxisWeight;                                          // 0x00E8(0x0004)
    FVector                                       PoleVector;                                                   // 0x00EC(0x000C)
    enum class EControlRigVectorKind              PoleVectorKind;                                               // 0x00F8(0x0001)
    char                                          pa_00F9[0x0003]                                               // 0x00F9(0x0003)
    FRigElementKey                                PoleVectorSpace;                                              // 0x00FC(0x0010)
    bool                                          bEnableStretch;                                               // 0x010C(0x0001)
    char                                          pa_010D[0x0003]                                               // 0x010D(0x0003)
    float                                         StretchStartRatio;                                            // 0x0110(0x0004)
    float                                         StretchMaximumRatio;                                          // 0x0114(0x0004)
    float                                         Weight;                                                       // 0x0118(0x0004)
    float                                         ItemALength;                                                  // 0x011C(0x0004)
    float                                         ItemBLength;                                                  // 0x0120(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0124(0x0001)
    char                                          pa_0125[0x000B]                                               // 0x0125(0x000B)
    FRigUnit                                      DebugSettings;                                                // 0x0130(0x0040)
    FCachedRigElement                             CachedItemAIndex;                                             // 0x0170(0x0018)
    FCachedRigElement                             CachedItemBIndex;                                             // 0x0188(0x0018)
    FCachedRigElement                             CachedEffectorItemIndex;                                      // 0x01A0(0x0018)
    FCachedRigElement                             CachedPoleVectorSpaceIndex;                                   // 0x01B8(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0010(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01D0
struct FRigUnit : public FRigUnit
{
    FName                                         BoneA;                                                        // 0x0070(0x000C)
    FName                                         BoneB;                                                        // 0x007C(0x000C)
    FName                                         EffectorBone;                                                 // 0x0088(0x000C)
    char                                          pa_0094[0x000C]                                               // 0x0094(0x000C)
    FTransform                                    Effector;                                                     // 0x00A0(0x0030)
    FVector                                       PrimaryAxis;                                                  // 0x00D0(0x000C)
    FVector                                       SecondaryAxis;                                                // 0x00DC(0x000C)
    float                                         SecondaryAxisWeight;                                          // 0x00E8(0x0004)
    FVector                                       PoleVector;                                                   // 0x00EC(0x000C)
    enum class EControlRigVectorKind              PoleVectorKind;                                               // 0x00F8(0x0001)
    char                                          pa_00F9[0x0003]                                               // 0x00F9(0x0003)
    FName                                         PoleVectorSpace;                                              // 0x00FC(0x000C)
    bool                                          bEnableStretch;                                               // 0x0108(0x0001)
    char                                          pa_0109[0x0003]                                               // 0x0109(0x0003)
    float                                         StretchStartRatio;                                            // 0x010C(0x0004)
    float                                         StretchMaximumRatio;                                          // 0x0110(0x0004)
    float                                         Weight;                                                       // 0x0114(0x0004)
    float                                         BoneALength;                                                  // 0x0118(0x0004)
    float                                         BoneBLength;                                                  // 0x011C(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0120(0x0001)
    char                                          pa_0121[0x000F]                                               // 0x0121(0x000F)
    FRigUnit                                      DebugSettings;                                                // 0x0130(0x0040)
    FCachedRigElement                             CachedBoneAIndex;                                             // 0x0170(0x0018)
    FCachedRigElement                             CachedBoneBIndex;                                             // 0x0188(0x0018)
    FCachedRigElement                             CachedEffectorBoneIndex;                                      // 0x01A0(0x0018)
    FCachedRigElement                             CachedPoleVectorSpaceIndex;                                   // 0x01B8(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       Argument0;                                                    // 0x0008(0x000C)
    FVector                                       Argument1;                                                    // 0x0014(0x000C)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       Argument0;                                                    // 0x0008(0x000C)
    FVector                                       Argument1;                                                    // 0x0014(0x000C)
    FVector                                       Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FVector                                       Target;                                                       // 0x0008(0x000C)
    float                                         Strength;                                                     // 0x0014(0x0004)
    float                                         Damp;                                                         // 0x0018(0x0004)
    float                                         Blend;                                                        // 0x001C(0x0004)
    FVector                                       Position;                                                     // 0x0020(0x000C)
    FVector                                       Velocity;                                                     // 0x002C(0x000C)
    FVector                                       Acceleration;                                                 // 0x0038(0x000C)
    FCRSimPoint                                   Point;                                                        // 0x0044(0x0028)
    bool                                          bInitialized;                                                 // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    bool                                          bEnabled;                                                     // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         Thickness;                                                    // 0x0044(0x0004)
    float                                         Scale;                                                        // 0x0048(0x0004)
    FRigElementKey                                Space;                                                        // 0x004C(0x0010)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    bool                                          bEnabled;                                                     // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         Thickness;                                                    // 0x0044(0x0004)
    float                                         Scale;                                                        // 0x0048(0x0004)
    FName                                         BoneSpace;                                                    // 0x004C(0x000C)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    bool                                          bEnabled;                                                     // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         Thickness;                                                    // 0x0024(0x0004)
    float                                         Scale;                                                        // 0x0028(0x0004)
    FRigElementKey                                Space;                                                        // 0x002C(0x0010)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    bool                                          bEnabled;                                                     // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         Thickness;                                                    // 0x0024(0x0004)
    float                                         Scale;                                                        // 0x0028(0x0004)
    FName                                         BoneSpace;                                                    // 0x002C(0x000C)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    bool                                          bEnabled;                                                     // 0x0014(0x0001)
    enum class ERigUnitVisualDebugPointMode       Mode;                                                         // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    FLinearColor                                  Color;                                                        // 0x0018(0x0010)
    float                                         Thickness;                                                    // 0x0028(0x0004)
    float                                         Scale;                                                        // 0x002C(0x0004)
    FRigElementKey                                Space;                                                        // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    bool                                          bEnabled;                                                     // 0x0014(0x0001)
    enum class ERigUnitVisualDebugPointMode       Mode;                                                         // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    FLinearColor                                  Color;                                                        // 0x0018(0x0010)
    float                                         Thickness;                                                    // 0x0028(0x0004)
    float                                         Scale;                                                        // 0x002C(0x0004)
    FName                                         BoneSpace;                                                    // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    FVector                                       Start;                                                        // 0x0008(0x000C)
    FVector                                       End;                                                          // 0x0014(0x000C)
    enum class ECollisionChannel                  Channel;                                                      // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         Radius;                                                       // 0x0024(0x0004)
    bool                                          bHit;                                                         // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FVector                                       HitLocation;                                                  // 0x002C(0x000C)
    FVector                                       HitNormal;                                                    // 0x0038(0x000C)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Rotation;                                                     // 0x0010(0x0010)
    FQuat                                         Global;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Rotation;                                                     // 0x0010(0x0010)
    FQuat                                         World;                                                        // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FVector                                       Global;                                                       // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FVector                                       World;                                                        // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FTransform                                    Global;                                                       // 0x0040(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FTransform                                    World;                                                        // 0x0040(0x0030)
};


// ScriptStruct  ControlRig.StructReference
// Struct Size::0x0008
struct FStructReference
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  VTSPlugin.VTSPlayerSynchronizationEvent
// Struct Size::0x0014
struct FVTSPlayerSynchronizationEvent
{
    enum class EVTSPlayerSynchronizationEventType EventType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVTSTimeStampIndex                            TimeStampIndex;                                               // 0x0004(0x0004)
    uint32_t                                      HeartbeatCount;                                               // 0x0008(0x0004)
    float                                         AutonomousTimeShiftAmount;                                    // 0x000C(0x0004)
    float                                         FixedTimeStepSize;                                            // 0x0010(0x0004)
};


// ScriptStruct  VTSPlugin.VTSTBasicTestEnvironmentEmulatorTrackingData
// Struct Size::0x0010
struct FVTSTBasicTestEnvironmentEmulatorTrackingData
{
    TArray<FVTSTBasicTestEnvironmentEmulatorInstructionTrackingData>PostInstructionStates;                      // 0x0000(0x0010)
};


// ScriptStruct  VTSPlugin.VTSTBasicTestEnvironmentEmulatorInstructionTrackingData
// Struct Size::0x0020
struct FVTSTBasicTestEnvironmentEmulatorInstructionTrackingData
{
    enum class EVTSTInstructionType               InstructionType;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    uint32_t                                      ModifiedParticipantIndex;                                     // 0x0004(0x0004)
    float                                         ExecutionTime;                                                // 0x0008(0x0004)
    float                                         DeltaTime;                                                    // 0x000C(0x0004)
    FVTSTBasicTestTestParticipantTrackingData     FirstParticipant;                                             // 0x0010(0x0008)
    FVTSTBasicTestTestParticipantTrackingData     SecondParticipant;                                            // 0x0018(0x0008)
};


// ScriptStruct  VTSPlugin.VTSTBasicTestTestParticipantTrackingData
// Struct Size::0x0008
struct FVTSTBasicTestTestParticipantTrackingData
{
    float                                         LastLoadedValue;                                              // 0x0000(0x0004)
    float                                         LastDeltaTime;                                                // 0x0004(0x0004)
};


// ScriptStruct  VTSPlugin.VTSTBasicTestTestTrackingData
// Struct Size::0x0010
struct FVTSTBasicTestTestTrackingData
{
    TArray<FVTSTBasicTestTestParticipantTrackingData>ParticipantStates;                                         // 0x0000(0x0010)
};


// ScriptStruct  VTSPlugin.VTSTimeStampDelegate
// Struct Size::0x0018
struct FVTSTimeStampDelegate
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  VTSPlugin.VTSTSimulationInstructionPredicate
// Struct Size::0x0001
struct FVTSTSimulationInstructionPredicate
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  VTSPlugin.VTSTValTestTrackingData
// Struct Size::0x0040
struct FVTSTValTestTrackingData
{
    TArray<FVTSTVALDataPoint>                     ServerSimulationTickTimeVsAppTickTimeGraph;                   // 0x0000(0x0010)
    TArray<FVTSTVALDataPoint>                     ServerSimulationTickTimeVsTransportDelayGraph;                // 0x0010(0x0010)
    TArray<FVTSTVALDataPoint>                     ClientSimulationTickTimeVsAppTickTimeGraph;                   // 0x0020(0x0010)
    TArray<FVTSTVALDataPoint>                     ClientSimulationTickTimeVsTransportDelayGraph;                // 0x0030(0x0010)
};


// ScriptStruct  VTSPlugin.VTSTVALDataPoint
// Struct Size::0x0008
struct FVTSTVALDataPoint
{
    float                                         XAxisPoint;                                                   // 0x0000(0x0004)
    float                                         YAxisPoint;                                                   // 0x0004(0x0004)
};


// ScriptStruct  DynamicVolume.GroundVolumeFragmentArray
// Struct Size::0x0170
struct FGroundVolumeFragmentArray : public FFastArraySerializer
{
    TArray<FGroundVolumeFragment>                 Items;                                                        // 0x0108(0x0010)
    char                                          pa_0118[0x0058]                                               // 0x0118(0x0058)
};


// ScriptStruct  RGISentryEventSubmitter.SentryCreateEventResponse
// Struct Size::0x0010
struct FSentryCreateEventResponse
{
    FString                                       Id;                                                           // 0x0000(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00D0
struct FAnimNode : public FAnimNode
{
    FComponentSpacePoseLink                       ComponentPose;                                                // 0x0010(0x0010)
    int32_t                                       LODThreshold;                                                 // 0x0020(0x0004)
    float                                         ActualAlpha;                                                  // 0x0024(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0028(0x0001)
    bool                                          bAlphaBoolEnabled;                                            // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    float                                         Alpha;                                                        // 0x002C(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0030(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0038(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0080(0x000C)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x008C(0x0030)
    char                                          pa_00BC[0x0014]                                               // 0x00BC(0x0014)
};


// ScriptStruct  Engine.ComponentSpacePoseLink
// Struct Size::0x0010
struct FComponentSpacePoseLink : public FPoseLinkBase
{
};


// ScriptStruct  KawaiiPhysics.AnimNode
// Struct Size::0x0260
struct FAnimNode : public FAnimNode
{
    FBoneReference                                RootBone;                                                     // 0x00D0(0x0014)
    char                                          pa_00E4[0x0004]                                               // 0x00E4(0x0004)
    TArray<FBoneReference>                        ExcludeBones;                                                 // 0x00E8(0x0010)
    int32_t                                       TargetFramerate;                                              // 0x00F8(0x0004)
    bool                                          OverrideTargetFramerate;                                      // 0x00FC(0x0001)
    char                                          pa_00FD[0x0003]                                               // 0x00FD(0x0003)
    FKawaiiPhysicsSettings                        PhysicsSettings;                                              // 0x0100(0x0018)
    FCurveFloat*                                  DampingCurve;                                                 // 0x0118(0x0008)
    FCurveFloat*                                  WorldDampingLocationCurve;                                    // 0x0120(0x0008)
    FCurveFloat*                                  WorldDampingRotationCurve;                                    // 0x0128(0x0008)
    FCurveFloat*                                  StiffnessCurve;                                               // 0x0130(0x0008)
    FCurveFloat*                                  RadiusCurve;                                                  // 0x0138(0x0008)
    FCurveFloat*                                  LimitAngleCurve;                                              // 0x0140(0x0008)
    bool                                          bUpdatePhysicsSettingsInGame;                                 // 0x0148(0x0001)
    char                                          pa_0149[0x0003]                                               // 0x0149(0x0003)
    float                                         DummyBoneLength;                                              // 0x014C(0x0004)
    enum class EBoneForwardAxis                   BoneForwardAxis;                                              // 0x0150(0x0001)
    enum class EPlanarConstraint                  PlanarConstraint;                                             // 0x0151(0x0001)
    char                                          pa_0152[0x0006]                                               // 0x0152(0x0006)
    TArray<FSphericalLimit>                       SphericalLimits;                                              // 0x0158(0x0010)
    TArray<FCapsuleLimit>                         CapsuleLimits;                                                // 0x0168(0x0010)
    TArray<FPlanarLimit>                          PlanarLimits;                                                 // 0x0178(0x0010)
    FKawaiiPhysicsLimitsDataAsset*                LimitsDataAsset;                                              // 0x0188(0x0008)
    TArray<FSphericalLimit>                       SphericalLimitsData;                                          // 0x0190(0x0010)
    TArray<FCapsuleLimit>                         CapsuleLimitsData;                                            // 0x01A0(0x0010)
    TArray<FPlanarLimit>                          PlanarLimitsData;                                             // 0x01B0(0x0010)
    float                                         TeleportDistanceThreshold;                                    // 0x01C0(0x0004)
    float                                         TeleportRotationThreshold;                                    // 0x01C4(0x0004)
    FVector                                       Gravity;                                                      // 0x01C8(0x000C)
    bool                                          bEnableWind;                                                  // 0x01D4(0x0001)
    char                                          pa_01D5[0x0003]                                               // 0x01D5(0x0003)
    float                                         WindScale;                                                    // 0x01D8(0x0004)
    char                                          pa_01DC[0x0004]                                               // 0x01DC(0x0004)
    TArray<FKawaiiPhysicsModifyBone>              ModifyBones;                                                  // 0x01E0(0x0010)
    float                                         TotalBoneLength;                                              // 0x01F0(0x0004)
    char                                          pa_01F4[0x000C]                                               // 0x01F4(0x000C)
    FTransform                                    PreSkelCompTransform;                                         // 0x0200(0x0030)
    bool                                          bInitPhysicsSettings;                                         // 0x0230(0x0001)
    char                                          pa_0231[0x002F]                                               // 0x0231(0x002F)
};


// ScriptStruct  KawaiiPhysics.KawaiiPhysicsModifyBone
// Struct Size::0x00B0
struct FKawaiiPhysicsModifyBone
{
    FBoneReference                                BoneRef;                                                      // 0x0000(0x0014)
    int32_t                                       ParentIndex;                                                  // 0x0014(0x0004)
    TArray<int32_t>                               ChildIndexs;                                                  // 0x0018(0x0010)
    FKawaiiPhysicsSettings                        PhysicsSettings;                                              // 0x0028(0x0018)
    FVector                                       Location;                                                     // 0x0040(0x000C)
    FVector                                       PrevLocation;                                                 // 0x004C(0x000C)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
    FQuat                                         PrevRotation;                                                 // 0x0060(0x0010)
    FVector                                       PoseLocation;                                                 // 0x0070(0x000C)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FQuat                                         PoseRotation;                                                 // 0x0080(0x0010)
    FVector                                       PoseScale;                                                    // 0x0090(0x000C)
    float                                         LengthFromRoot;                                               // 0x009C(0x0004)
    bool                                          bDummy;                                                       // 0x00A0(0x0001)
    char                                          pa_00A1[0x000F]                                               // 0x00A1(0x000F)
};


// ScriptStruct  KawaiiPhysics.KawaiiPhysicsSettings
// Struct Size::0x0018
struct FKawaiiPhysicsSettings
{
    float                                         Damping;                                                      // 0x0000(0x0004)
    float                                         WorldDampingLocation;                                         // 0x0004(0x0004)
    float                                         WorldDampingRotation;                                         // 0x0008(0x0004)
    float                                         Stiffness;                                                    // 0x000C(0x0004)
    float                                         Radius;                                                       // 0x0010(0x0004)
    float                                         LimitAngle;                                                   // 0x0014(0x0004)
};


// ScriptStruct  Engine.BoneReference
// Struct Size::0x0014
struct FBoneReference
{
    FName                                         BoneName;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0008]                                               // 0x000C(0x0008)
};


// ScriptStruct  KawaiiPhysics.CollisionLimitBase
// Struct Size::0x0050
struct FCollisionLimitBase
{
    FBoneReference                                DrivingBone;                                                  // 0x0000(0x0014)
    FVector                                       OffsetLocation;                                               // 0x0014(0x000C)
    FRotator                                      OffsetRotation;                                               // 0x0020(0x000C)
    FVector                                       Location;                                                     // 0x002C(0x000C)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FQuat                                         Rotation;                                                     // 0x0040(0x0010)
};


// ScriptStruct  KawaiiPhysics.PlanarLimit
// Struct Size::0x0060
struct FPlanarLimit : public FCollisionLimitBase
{
    FPlane                                        Plane;                                                        // 0x0050(0x0010)
};


// ScriptStruct  KawaiiPhysics.CapsuleLimit
// Struct Size::0x0060
struct FCapsuleLimit : public FCollisionLimitBase
{
    float                                         Radius;                                                       // 0x0050(0x0004)
    float                                         Length;                                                       // 0x0054(0x0004)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  KawaiiPhysics.SphericalLimit
// Struct Size::0x0060
struct FSphericalLimit : public FCollisionLimitBase
{
    float                                         Radius;                                                       // 0x0050(0x0004)
    enum class ESphericalLimitType                LimitType;                                                    // 0x0054(0x0001)
    char                                          pa_0055[0x000B]                                               // 0x0055(0x000B)
};


// ScriptStruct  KawaiiPhysics.CollisionLimitDataBase
// Struct Size::0x0050
struct FCollisionLimitDataBase
{
    FName                                         DrivingBoneName;                                              // 0x0000(0x000C)
    FVector                                       OffsetLocation;                                               // 0x000C(0x000C)
    FRotator                                      OffsetRotation;                                               // 0x0018(0x000C)
    FVector                                       Location;                                                     // 0x0024(0x000C)
    FQuat                                         Rotation;                                                     // 0x0030(0x0010)
    FGuid                                         Guid;                                                         // 0x0040(0x0010)
};


// ScriptStruct  KawaiiPhysics.PlanarLimitData
// Struct Size::0x0060
struct FPlanarLimitData : public FCollisionLimitDataBase
{
    FPlane                                        Plane;                                                        // 0x0050(0x0010)
};


// ScriptStruct  KawaiiPhysics.CapsuleLimitData
// Struct Size::0x0060
struct FCapsuleLimitData : public FCollisionLimitDataBase
{
    float                                         Radius;                                                       // 0x0050(0x0004)
    float                                         Length;                                                       // 0x0054(0x0004)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  KawaiiPhysics.SphericalLimitData
// Struct Size::0x0060
struct FSphericalLimitData : public FCollisionLimitDataBase
{
    float                                         Radius;                                                       // 0x0050(0x0004)
    enum class ESphericalLimitType                LimitType;                                                    // 0x0054(0x0001)
    char                                          pa_0055[0x000B]                                               // 0x0055(0x000B)
};


// ScriptStruct  Paper2D.IntMargin
// Struct Size::0x0010
struct FIntMargin
{
    int32_t                                       Left;                                                         // 0x0000(0x0004)
    int32_t                                       Top;                                                          // 0x0004(0x0004)
    int32_t                                       Right;                                                        // 0x0008(0x0004)
    int32_t                                       Bottom;                                                       // 0x000C(0x0004)
};


// ScriptStruct  Paper2D.PaperFlipbookKeyFrame
// Struct Size::0x0010
struct FPaperFlipbookKeyFrame
{
    FPaperSprite*                                 Sprite;                                                       // 0x0000(0x0008)
    int32_t                                       FrameRun;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Paper2D.SpriteInstanceData
// Struct Size::0x0050
struct FSpriteInstanceData
{
    FMatrix                                       Transform;                                                    // 0x0000(0x0040)
    FPaperSprite*                                 SourceSprite;                                                 // 0x0040(0x0008)
    FColor                                        VertexColor;                                                  // 0x0048(0x0004)
    int32_t                                       MaterialIndex;                                                // 0x004C(0x0004)
};


// ScriptStruct  Paper2D.PaperSpriteSocket
// Struct Size::0x0040
struct FPaperSpriteSocket
{
    FTransform                                    LocalTransform;                                               // 0x0000(0x0030)
    FName                                         SocketName;                                                   // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Paper2D.PaperSpriteAtlasSlot
// Struct Size::0x0048
struct FPaperSpriteAtlasSlot
{
    TSoftObjectPtr<FPaperSprite>                  SpriteRef;                                                    // 0x0000(0x0030)
    int32_t                                       AtlasIndex;                                                   // 0x0030(0x0004)
    int32_t                                       X;                                                            // 0x0034(0x0004)
    int32_t                                       Y;                                                            // 0x0038(0x0004)
    int32_t                                       Width;                                                        // 0x003C(0x0004)
    int32_t                                       Height;                                                       // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Paper2D.PaperTerrainMaterialRule
// Struct Size::0x0038
struct FPaperTerrainMaterialRule
{
    FPaperSprite*                                 StartCap;                                                     // 0x0000(0x0008)
    TArray<FPaperSprite*>                         Body;                                                         // 0x0008(0x0010)
    FPaperSprite*                                 EndCap;                                                       // 0x0018(0x0008)
    float                                         MinimumAngle;                                                 // 0x0020(0x0004)
    float                                         MaximumAngle;                                                 // 0x0024(0x0004)
    bool                                          bEnableCollision;                                             // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         CollisionOffset;                                              // 0x002C(0x0004)
    int32_t                                       DrawOrder;                                                    // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Paper2D.PaperTileInfo
// Struct Size::0x0010
struct FPaperTileInfo
{
    FPaperTileSet*                                TileSet;                                                      // 0x0000(0x0008)
    int32_t                                       PackedTileIndex;                                              // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Paper2D.PaperTileSetTerrain
// Struct Size::0x0018
struct FPaperTileSetTerrain
{
    FString                                       TerrainName;                                                  // 0x0000(0x0010)
    int32_t                                       CenterTileIndex;                                              // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Paper2D.PaperTileMetadata
// Struct Size::0x0048
struct FPaperTileMetadata
{
    FName                                         UserDataName;                                                 // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FSpriteGeometryCollection                     CollisionData;                                                // 0x0010(0x0030)
    char                                          TerrainMembership;                                            // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  Paper2D.SpriteGeometryCollection
// Struct Size::0x0030
struct FSpriteGeometryCollection
{
    TArray<FSpriteGeometryShape>                  Shapes;                                                       // 0x0000(0x0010)
    enum class ESpritePolygonMode                 GeometryType;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       PixelsPerSubdivisionX;                                        // 0x0014(0x0004)
    int32_t                                       PixelsPerSubdivisionY;                                        // 0x0018(0x0004)
    bool                                          bAvoidVertexMerging;                                          // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         AlphaThreshold;                                               // 0x0020(0x0004)
    float                                         DetailAmount;                                                 // 0x0024(0x0004)
    float                                         SimplifyEpsilon;                                              // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Paper2D.SpriteGeometryShape
// Struct Size::0x0030
struct FSpriteGeometryShape
{
    enum class ESpriteShapeType                   ShapeType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FVector2D>                             Vertices;                                                     // 0x0008(0x0010)
    FVector2D                                     BoxSize;                                                      // 0x0018(0x0008)
    FVector2D                                     BoxPosition;                                                  // 0x0020(0x0008)
    float                                         Rotation;                                                     // 0x0028(0x0004)
    bool                                          bNegativeWinding;                                             // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  Paper2D.SpriteDrawCallRecord
// Struct Size::0x00D0
struct FSpriteDrawCallRecord
{
    FVector                                       Destination;                                                  // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FTexture*                                     BaseTexture;                                                  // 0x0010(0x0008)
    char                                          pa_0018[0x0030]                                               // 0x0018(0x0030)
    FColor                                        Color;                                                        // 0x0048(0x0004)
    char                                          pa_004C[0x0084]                                               // 0x004C(0x0084)
};


// ScriptStruct  Paper2D.SpriteAssetInitParameters
// Struct Size::0x0040
struct FSpriteAssetInitParameters
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  GameplayCameras.VOscillator
// Struct Size::0x0024
struct FVOscillator
{
    FFOscillator                                  X;                                                            // 0x0000(0x000C)
    FFOscillator                                  Y;                                                            // 0x000C(0x000C)
    FFOscillator                                  Z;                                                            // 0x0018(0x000C)
};


// ScriptStruct  GameplayCameras.FOscillator
// Struct Size::0x000C
struct FFOscillator
{
    float                                         Amplitude;                                                    // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    enum class EInitialOscillatorOffset           InitialOffset;                                                // 0x0008(0x0001)
    enum class EOscillatorWaveform                Waveform;                                                     // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  GameplayCameras.ROscillator
// Struct Size::0x0024
struct FROscillator
{
    FFOscillator                                  Pitch;                                                        // 0x0000(0x000C)
    FFOscillator                                  Yaw;                                                          // 0x000C(0x000C)
    FFOscillator                                  Roll;                                                         // 0x0018(0x000C)
};


// ScriptStruct  GameplayCameras.PerlinNoiseShaker
// Struct Size::0x0008
struct FPerlinNoiseShaker
{
    float                                         Amplitude;                                                    // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
};


// ScriptStruct  GameplayCameras.WaveOscillator
// Struct Size::0x000C
struct FWaveOscillator
{
    float                                         Amplitude;                                                    // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    enum class EInitialWaveOscillatorOffsetType   InitialOffsetType;                                            // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  TemplateSequence.TemplateSequenceBindingOverrideData
// Struct Size::0x000C
struct FTemplateSequenceBindingOverrideData
{
    TWeakObjectPtr<UObject>                       Object;                                                       // 0x0000(0x0008)
    bool                                          bOverridesDefault;                                            // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  TemplateSequence.TemplateSectionPropertyScale
// Struct Size::0x00D0
struct FTemplateSectionPropertyScale
{
    FGuid                                         ObjectBinding;                                                // 0x0000(0x0010)
    FMovieScenePropertyBinding                    PropertyBinding;                                              // 0x0010(0x001C)
    enum class ETemplateSectionPropertyScaleType  PropertyScaleType;                                            // 0x002C(0x0004)
    FMovieSceneFloatChannel                       FloatChannel;                                                 // 0x0030(0x00A0)
};


// ScriptStruct  MovieScene.MovieScenePropertyBinding
// Struct Size::0x001C
struct FMovieScenePropertyBinding
{
    FName                                         PropertyName;                                                 // 0x0000(0x000C)
    FName                                         PropertyPath;                                                 // 0x000C(0x000C)
    bool                                          bCanUseClassLookup;                                           // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  AnimationSharing.TickAnimationSharingFunction
// Struct Size::0x0030
struct FTickAnimationSharingFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  AnimationSharing.AnimationSharingScalability
// Struct Size::0x0010
struct FAnimationSharingScalability
{
    FPerPlatformBool                              UseBlendTransitions;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FPerPlatformFloat                             BlendSignificanceValue;                                       // 0x0004(0x0004)
    FPerPlatformInt                               MaximumNumberConcurrentBlends;                                // 0x0008(0x0004)
    FPerPlatformFloat                             TickSignificanceValue;                                        // 0x000C(0x0004)
};


// ScriptStruct  Engine.PerPlatformFloat
// Struct Size::0x0004
struct FPerPlatformFloat
{
    float                                         Default;                                                      // 0x0000(0x0004)
};


// ScriptStruct  Engine.PerPlatformInt
// Struct Size::0x0004
struct FPerPlatformInt
{
    int32_t                                       Default;                                                      // 0x0000(0x0004)
};


// ScriptStruct  Engine.PerPlatformBool
// Struct Size::0x0001
struct FPerPlatformBool
{
    bool                                          Default;                                                      // 0x0000(0x0001)
};


// ScriptStruct  AnimationSharing.PerSkeletonAnimationSharingSetup
// Struct Size::0x0038
struct FPerSkeletonAnimationSharingSetup
{
    FSkeleton*                                    Skeleton;                                                     // 0x0000(0x0008)
    USkeletalMesh*                                SkeletalMesh;                                                 // 0x0008(0x0008)
    FAnimSharingTransitionInstance*               BlendAnimBlueprint;                                           // 0x0010(0x0008)
    FAnimSharingAdditiveInstance*                 AdditiveAnimBlueprint;                                        // 0x0018(0x0008)
    FAnimationSharingStateProcessor*              StateProcessorClass;                                          // 0x0020(0x0008)
    TArray<FAnimationStateEntry>                  AnimationStates;                                              // 0x0028(0x0010)
};


// ScriptStruct  AnimationSharing.AnimationStateEntry
// Struct Size::0x0030
struct FAnimationStateEntry
{
    char                                          State;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FAnimationSetup>                       AnimationSetups;                                              // 0x0008(0x0010)
    bool                                          bOnDemand;                                                    // 0x0018(0x0001)
    bool                                          bAdditive;                                                    // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         BlendTime;                                                    // 0x001C(0x0004)
    bool                                          bReturnToPreviousState;                                       // 0x0020(0x0001)
    bool                                          bSetNextState;                                                // 0x0021(0x0001)
    char                                          NextState;                                                    // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
    FPerPlatformInt                               MaximumNumberOfConcurrentInstances;                           // 0x0024(0x0004)
    float                                         WiggleTimePercentage;                                         // 0x0028(0x0004)
    bool                                          bRequiresCurves;                                              // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  AnimationSharing.AnimationSetup
// Struct Size::0x0018
struct FAnimationSetup
{
    FAnimSequence*                                AnimSequence;                                                 // 0x0000(0x0008)
    FAnimSharingStateInstance*                    AnimBlueprint;                                                // 0x0008(0x0008)
    FPerPlatformInt                               NumRandomizedInstances;                                       // 0x0010(0x0004)
    FPerPlatformBool                              Enabled;                                                      // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  UObjectPlugin.MyPluginStruct
// Struct Size::0x0010
struct FMyPluginStruct
{
    FString                                       TestString;                                                   // 0x0000(0x0010)
};


// ScriptStruct  VariantManagerContent.FunctionCaller
// Struct Size::0x000C
struct FFunctionCaller
{
    FName                                         FunctionName;                                                 // 0x0000(0x000C)
};


// ScriptStruct  VariantManagerContent.CapturedPropSegment
// Struct Size::0x0028
struct FCapturedPropSegment
{
    FString                                       PropertyName;                                                 // 0x0000(0x0010)
    int32_t                                       PropertyIndex;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       ComponentName;                                                // 0x0018(0x0010)
};


// ScriptStruct  VariantManagerContent.VariantDependency
// Struct Size::0x0068
struct FVariantDependency
{
    TSoftObjectPtr<FVariantSet>                   VariantSet;                                                   // 0x0000(0x0030)
    TSoftObjectPtr<FVariant>                      Variant;                                                      // 0x0030(0x0030)
    bool                                          bEnabled;                                                     // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  ChaosCloth.ChaosClothWeightedValue
// Struct Size::0x0008
struct FChaosClothWeightedValue
{
    float                                         Low;                                                          // 0x0000(0x0004)
    float                                         High;                                                         // 0x0004(0x0004)
};


// ScriptStruct  EditableMesh.AdaptorPolygon2Group
// Struct Size::0x0048
struct FAdaptorPolygon2Group
{
    uint32_t                                      RenderingSectionIndex;                                        // 0x0000(0x0004)
    int32_t                                       MaterialIndex;                                                // 0x0004(0x0004)
    int32_t                                       MaxTriangles;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x003C]                                               // 0x000C(0x003C)
};


// ScriptStruct  EditableMesh.AdaptorPolygon
// Struct Size::0x0018
struct FAdaptorPolygon
{
    FPolygonGroupID                               PolygonGroupID;                                               // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FAdaptorTriangleID>                    TriangulatedPolygonTriangleIndices;                           // 0x0008(0x0010)
};


// ScriptStruct  MeshDescription.ElementID
// Struct Size::0x0004
struct FElementID
{
    int32_t                                       IDValue;                                                      // 0x0000(0x0004)
};


// ScriptStruct  EditableMesh.AdaptorTriangleID
// Struct Size::0x0004
struct FAdaptorTriangleID : public FElementID
{
};


// ScriptStruct  MeshDescription.PolygonGroupID
// Struct Size::0x0004
struct FPolygonGroupID : public FElementID
{
};


// ScriptStruct  EditableMesh.PolygonGroupForPolygon
// Struct Size::0x0008
struct FPolygonGroupForPolygon
{
    FPolygonID                                    PolygonID;                                                    // 0x0000(0x0004)
    FPolygonGroupID                               PolygonGroupID;                                               // 0x0004(0x0004)
};


// ScriptStruct  MeshDescription.PolygonID
// Struct Size::0x0004
struct FPolygonID : public FElementID
{
};


// ScriptStruct  EditableMesh.PolygonGroupToCreate
// Struct Size::0x0018
struct FPolygonGroupToCreate
{
    FMeshElementAttributeList                     PolygonGroupAttributes;                                       // 0x0000(0x0010)
    FPolygonGroupID                               OriginalPolygonGroupID;                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  EditableMesh.MeshElementAttributeList
// Struct Size::0x0010
struct FMeshElementAttributeList
{
    TArray<FMeshElementAttributeData>             Attributes;                                                   // 0x0000(0x0010)
};


// ScriptStruct  EditableMesh.MeshElementAttributeData
// Struct Size::0x0060
struct FMeshElementAttributeData
{
    FName                                         AttributeName;                                                // 0x0000(0x000C)
    int32_t                                       AttributeIndex;                                               // 0x000C(0x0004)
    FMeshElementAttributeValue                    AttributeValue;                                               // 0x0010(0x0050)
};


// ScriptStruct  EditableMesh.MeshElementAttributeValue
// Struct Size::0x0050
struct FMeshElementAttributeValue
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  EditableMesh.VertexToMove
// Struct Size::0x0010
struct FVertexToMove
{
    FVertexID                                     VertexID;                                                     // 0x0000(0x0004)
    FVector                                       NewVertexPosition;                                            // 0x0004(0x000C)
};


// ScriptStruct  MeshDescription.VertexID
// Struct Size::0x0004
struct FVertexID : public FElementID
{
};


// ScriptStruct  EditableMesh.ChangeVertexInstancesForPolygon
// Struct Size::0x0028
struct FChangeVertexInstancesForPolygon
{
    FPolygonID                                    PolygonID;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FVertexIndexAndInstanceID>             PerimeterVertexIndicesAndInstanceIDs;                         // 0x0008(0x0010)
    TArray<FVertexInstancesForPolygonHole>        VertexIndicesAndInstanceIDsForEachHole;                       // 0x0018(0x0010)
};


// ScriptStruct  EditableMesh.VertexInstancesForPolygonHole
// Struct Size::0x0010
struct FVertexInstancesForPolygonHole
{
    TArray<FVertexIndexAndInstanceID>             VertexIndicesAndInstanceIDs;                                  // 0x0000(0x0010)
};


// ScriptStruct  EditableMesh.VertexIndexAndInstanceID
// Struct Size::0x0008
struct FVertexIndexAndInstanceID
{
    int32_t                                       ContourIndex;                                                 // 0x0000(0x0004)
    FVertexInstanceID                             VertexInstanceID;                                             // 0x0004(0x0004)
};


// ScriptStruct  MeshDescription.VertexInstanceID
// Struct Size::0x0004
struct FVertexInstanceID : public FElementID
{
};


// ScriptStruct  EditableMesh.VertexAttributesForPolygon
// Struct Size::0x0028
struct FVertexAttributesForPolygon
{
    FPolygonID                                    PolygonID;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FMeshElementAttributeList>             PerimeterVertexAttributeLists;                                // 0x0008(0x0010)
    TArray<FVertexAttributesForPolygonHole>       VertexAttributeListsForEachHole;                              // 0x0018(0x0010)
};


// ScriptStruct  EditableMesh.VertexAttributesForPolygonHole
// Struct Size::0x0010
struct FVertexAttributesForPolygonHole
{
    TArray<FMeshElementAttributeList>             VertexAttributeList;                                          // 0x0000(0x0010)
};


// ScriptStruct  EditableMesh.AttributesForEdge
// Struct Size::0x0018
struct FAttributesForEdge
{
    FEdgeID                                       EdgeID;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMeshElementAttributeList                     EdgeAttributes;                                               // 0x0008(0x0010)
};


// ScriptStruct  MeshDescription.EdgeID
// Struct Size::0x0004
struct FEdgeID : public FElementID
{
};


// ScriptStruct  EditableMesh.AttributesForVertexInstance
// Struct Size::0x0018
struct FAttributesForVertexInstance
{
    FVertexInstanceID                             VertexInstanceID;                                             // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMeshElementAttributeList                     VertexInstanceAttributes;                                     // 0x0008(0x0010)
};


// ScriptStruct  EditableMesh.AttributesForVertex
// Struct Size::0x0018
struct FAttributesForVertex
{
    FVertexID                                     VertexID;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMeshElementAttributeList                     VertexAttributes;                                             // 0x0008(0x0010)
};


// ScriptStruct  EditableMesh.PolygonToSplit
// Struct Size::0x0018
struct FPolygonToSplit
{
    FPolygonID                                    PolygonID;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FVertexPair>                           VertexPairsToSplitAt;                                         // 0x0008(0x0010)
};


// ScriptStruct  EditableMesh.VertexPair
// Struct Size::0x0008
struct FVertexPair
{
    FVertexID                                     VertexID0;                                                    // 0x0000(0x0004)
    FVertexID                                     VertexID1;                                                    // 0x0004(0x0004)
};


// ScriptStruct  EditableMesh.PolygonToCreate
// Struct Size::0x0020
struct FPolygonToCreate
{
    FPolygonGroupID                               PolygonGroupID;                                               // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FVertexAndAttributes>                  PerimeterVertices;                                            // 0x0008(0x0010)
    FPolygonID                                    OriginalPolygonID;                                            // 0x0018(0x0004)
    enum class EPolygonEdgeHardness               PolygonEdgeHardness;                                          // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  EditableMesh.VertexAndAttributes
// Struct Size::0x0018
struct FVertexAndAttributes
{
    FVertexInstanceID                             VertexInstanceID;                                             // 0x0000(0x0004)
    FVertexID                                     VertexID;                                                     // 0x0004(0x0004)
    FMeshElementAttributeList                     PolygonVertexAttributes;                                      // 0x0008(0x0010)
};


// ScriptStruct  EditableMesh.EdgeToCreate
// Struct Size::0x0020
struct FEdgeToCreate
{
    FVertexID                                     VertexID0;                                                    // 0x0000(0x0004)
    FVertexID                                     VertexID1;                                                    // 0x0004(0x0004)
    FMeshElementAttributeList                     EdgeAttributes;                                               // 0x0008(0x0010)
    FEdgeID                                       OriginalEdgeID;                                               // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  EditableMesh.VertexInstanceToCreate
// Struct Size::0x0020
struct FVertexInstanceToCreate
{
    FVertexID                                     VertexID;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMeshElementAttributeList                     VertexInstanceAttributes;                                     // 0x0008(0x0010)
    FVertexInstanceID                             OriginalVertexInstanceID;                                     // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  EditableMesh.VertexToCreate
// Struct Size::0x0018
struct FVertexToCreate
{
    FMeshElementAttributeList                     VertexAttributes;                                             // 0x0000(0x0010)
    FVertexID                                     OriginalVertexID;                                             // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  EditableMesh.SubdivisionLimitData
// Struct Size::0x0030
struct FSubdivisionLimitData
{
    TArray<FVector>                               VertexPositions;                                              // 0x0000(0x0010)
    TArray<FSubdivisionLimitSection>              Sections;                                                     // 0x0010(0x0010)
    TArray<FSubdividedWireEdge>                   SubdividedWireEdges;                                          // 0x0020(0x0010)
};


// ScriptStruct  EditableMesh.SubdividedWireEdge
// Struct Size::0x000C
struct FSubdividedWireEdge
{
    int32_t                                       EdgeVertex0PositionIndex;                                     // 0x0000(0x0004)
    int32_t                                       EdgeVertex1PositionIndex;                                     // 0x0004(0x0004)
    char                                          pa_0008[0x0004]                                               // 0x0008(0x0004)
};


// ScriptStruct  EditableMesh.SubdivisionLimitSection
// Struct Size::0x0010
struct FSubdivisionLimitSection
{
    TArray<FSubdividedQuad>                       SubdividedQuads;                                              // 0x0000(0x0010)
};


// ScriptStruct  EditableMesh.SubdividedQuad
// Struct Size::0x00D0
struct FSubdividedQuad
{
    FSubdividedQuadVertex                         QuadVertex0;                                                  // 0x0000(0x0034)
    FSubdividedQuadVertex                         QuadVertex1;                                                  // 0x0034(0x0034)
    FSubdividedQuadVertex                         QuadVertex2;                                                  // 0x0068(0x0034)
    FSubdividedQuadVertex                         QuadVertex3;                                                  // 0x009C(0x0034)
};


// ScriptStruct  EditableMesh.SubdividedQuadVertex
// Struct Size::0x0034
struct FSubdividedQuadVertex
{
    int32_t                                       VertexPositionIndex;                                          // 0x0000(0x0004)
    FVector2D                                     TextureCoordinate0;                                           // 0x0004(0x0008)
    FVector2D                                     TextureCoordinate1;                                           // 0x000C(0x0008)
    FColor                                        VertexColor;                                                  // 0x0014(0x0004)
    FVector                                       VertexNormal;                                                 // 0x0018(0x000C)
    FVector                                       VertexTangent;                                                // 0x0024(0x000C)
    float                                         VertexBinormalSign;                                           // 0x0030(0x0004)
};


// ScriptStruct  EditableMesh.RenderingPolygonGroup
// Struct Size::0x0048
struct FRenderingPolygonGroup
{
    uint32_t                                      RenderingSectionIndex;                                        // 0x0000(0x0004)
    int32_t                                       MaterialIndex;                                                // 0x0004(0x0004)
    int32_t                                       MaxTriangles;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x003C]                                               // 0x000C(0x003C)
};


// ScriptStruct  EditableMesh.RenderingPolygon
// Struct Size::0x0018
struct FRenderingPolygon
{
    FPolygonGroupID                               PolygonGroupID;                                               // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FTriangleID>                           TriangulatedPolygonTriangleIndices;                           // 0x0008(0x0010)
};


// ScriptStruct  MeshDescription.TriangleID
// Struct Size::0x0004
struct FTriangleID : public FElementID
{
};


// ScriptStruct  GeometryCollectionTracks.MovieSceneGeometryCollectionParams
// Struct Size::0x0038
struct FMovieSceneGeometryCollectionParams
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FSoftObjectPath                               GeometryCollectionCache;                                      // 0x0008(0x0020)
    FFrameNumber                                  StartFrameOffset;                                             // 0x0028(0x0004)
    FFrameNumber                                  EndFrameOffset;                                               // 0x002C(0x0004)
    float                                         PlayRate;                                                     // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  GeometryCollectionTracks.MovieSceneGeometryCollectionSectionTemplate
// Struct Size::0x0060
struct FMovieSceneGeometryCollectionSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneGeometryCollectionSectionTemplateParametersParams;                                               // 0x0020(0x0040)
};


// ScriptStruct  GeometryCollectionTracks.MovieSceneGeometryCollectionSectionTemplateParameters
// Struct Size::0x0040
struct FMovieSceneGeometryCollectionSectionTemplateParameters : public FMovieSceneGeometryCollectionParams
{
    FFrameNumber                                  SectionStartTime;                                             // 0x0038(0x0004)
    FFrameNumber                                  SectionEndTime;                                               // 0x003C(0x0004)
};


// ScriptStruct  ProceduralMeshComponent.ProcMeshSection
// Struct Size::0x0040
struct FProcMeshSection
{
    TArray<FProcMeshVertex>                       ProcVertexBuffer;                                             // 0x0000(0x0010)
    TArray<uint32_t>                              ProcIndexBuffer;                                              // 0x0010(0x0010)
    FBox                                          SectionLocalBox;                                              // 0x0020(0x001C)
    bool                                          bEnableCollision;                                             // 0x003C(0x0001)
    bool                                          bSectionVisible;                                              // 0x003D(0x0001)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
};


// ScriptStruct  ProceduralMeshComponent.ProcMeshVertex
// Struct Size::0x004C
struct FProcMeshVertex
{
    FVector                                       Position;                                                     // 0x0000(0x000C)
    FVector                                       Normal;                                                       // 0x000C(0x000C)
    FProcMeshTangent                              Tangent;                                                      // 0x0018(0x0010)
    FColor                                        Color;                                                        // 0x0028(0x0004)
    FVector2D                                     UV0;                                                          // 0x002C(0x0008)
    FVector2D                                     UV1;                                                          // 0x0034(0x0008)
    FVector2D                                     UV2;                                                          // 0x003C(0x0008)
    FVector2D                                     UV3;                                                          // 0x0044(0x0008)
};


// ScriptStruct  ProceduralMeshComponent.ProcMeshTangent
// Struct Size::0x0010
struct FProcMeshTangent
{
    FVector                                       TangentX;                                                     // 0x0000(0x000C)
    bool                                          bFlipTangentY;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  MotoSynth.MotoSynthRuntimeSettings
// Struct Size::0x0068
struct FMotoSynthRuntimeSettings
{
    bool                                          bSynthToneEnabled;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         SynthToneVolume;                                              // 0x0004(0x0004)
    float                                         SynthToneFilterFrequency;                                     // 0x0008(0x0004)
    int32_t                                       SynthOctaveShift;                                             // 0x000C(0x0004)
    bool                                          bGranularEngineEnabled;                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         GranularEngineVolume;                                         // 0x0014(0x0004)
    float                                         GranularEnginePitchScale;                                     // 0x0018(0x0004)
    int32_t                                       NumSamplesToCrossfadeBetweenGrains;                           // 0x001C(0x0004)
    int32_t                                       NumGrainTableEntriesPerGrain;                                 // 0x0020(0x0004)
    int32_t                                       GrainTableRandomOffsetForConstantRPMs;                        // 0x0024(0x0004)
    int32_t                                       GrainCrossfadeSamplesForConstantRPMs;                         // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FMotoSynthSource*                             AccelerationSource;                                           // 0x0030(0x0008)
    FMotoSynthSource*                             DecelerationSource;                                           // 0x0038(0x0008)
    bool                                          bStereoWidenerEnabled;                                        // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         StereoDelayMsec;                                              // 0x0044(0x0004)
    float                                         StereoFeedback;                                               // 0x0048(0x0004)
    float                                         StereoWidenerWetlevel;                                        // 0x004C(0x0004)
    float                                         StereoWidenerDryLevel;                                        // 0x0050(0x0004)
    float                                         StereoWidenerDelayRatio;                                      // 0x0054(0x0004)
    bool                                          bStereoWidenerFilterEnabled;                                  // 0x0058(0x0001)
    char                                          pa_0059[0x0003]                                               // 0x0059(0x0003)
    float                                         StereoWidenerFilterFrequency;                                 // 0x005C(0x0004)
    float                                         StereoWidenerFilterQ;                                         // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  MotoSynth.GrainTableEntry
// Struct Size::0x0008
struct FGrainTableEntry
{
    int32_t                                       SampleIndex;                                                  // 0x0000(0x0004)
    float                                         RPM;                                                          // 0x0004(0x0004)
};


// ScriptStruct  GameplayMessageRuntime.GameplayMessageListenerData
// Struct Size::0x0060
struct FGameplayMessageListenerData
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  GameplayMessageRuntime.GameplayMessageListenerHandle
// Struct Size::0x0020
struct FGameplayMessageListenerHandle
{
    TWeakObjectPtr<FGameplayMessageSubsystem>     Subsystem;                                                    // 0x0000(0x0008)
    FGameplayTag                                  Channel;                                                      // 0x0008(0x000C)
    int32_t                                       ID;                                                           // 0x0014(0x0004)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
};


// ScriptStruct  MovieScene.MovieScenePropertySectionTemplate
// Struct Size::0x0040
struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieScenePropertySectionData                PropertyData;                                                 // 0x0020(0x0020)
};


// ScriptStruct  MovieScene.MovieScenePropertySectionData
// Struct Size::0x0020
struct FMovieScenePropertySectionData
{
    FName                                         PropertyName;                                                 // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       PropertyPath;                                                 // 0x0010(0x0010)
};


// ScriptStruct  MediaCompositing.MovieSceneMediaPlayerPropertySectionTemplate
// Struct Size::0x0050
struct FMovieSceneMediaPlayerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMediaSource*                                 MediaSource;                                                  // 0x0040(0x0008)
    FFrameNumber                                  SectionStartFrame;                                            // 0x0048(0x0004)
    bool                                          bLoop;                                                        // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
};


// ScriptStruct  MediaCompositing.MovieSceneMediaSectionTemplate
// Struct Size::0x0050
struct FMovieSceneMediaSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneMediaSectionParams                 Params;                                                       // 0x0020(0x0030)
};


// ScriptStruct  MediaCompositing.MovieSceneMediaSectionParams
// Struct Size::0x0030
struct FMovieSceneMediaSectionParams
{
    FMediaSoundComponent*                         MediaSoundComponent;                                          // 0x0000(0x0008)
    FMediaSource*                                 MediaSource;                                                  // 0x0008(0x0008)
    FMediaTexture*                                MediaTexture;                                                 // 0x0010(0x0008)
    FMediaPlayer*                                 MediaPlayer;                                                  // 0x0018(0x0008)
    FFrameNumber                                  SectionStartFrame;                                            // 0x0020(0x0004)
    FFrameNumber                                  SectionEndFrame;                                              // 0x0024(0x0004)
    bool                                          bLooping;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FFrameNumber                                  StartFrameOffset;                                             // 0x002C(0x0004)
};


// ScriptStruct  UdpMessaging.UdpMockMessage
// Struct Size::0x0010
struct FUdpMockMessage
{
    TArray<char>                                  Data;                                                         // 0x0000(0x0010)
};


// ScriptStruct  ActorSequence.ActorSequenceObjectReferenceMap
// Struct Size::0x0020
struct FActorSequenceObjectReferenceMap
{
    TArray<FGuid>                                 BindingIds;                                                   // 0x0000(0x0010)
    TArray<FActorSequenceObjectReferences>        References;                                                   // 0x0010(0x0010)
};


// ScriptStruct  ActorSequence.ActorSequenceObjectReferences
// Struct Size::0x0010
struct FActorSequenceObjectReferences
{
    TArray<FActorSequenceObjectReference>         Array;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ActorSequence.ActorSequenceObjectReference
// Struct Size::0x0028
struct FActorSequenceObjectReference
{
    enum class EActorSequenceObjectReferenceType  Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FGuid                                         ActorId;                                                      // 0x0004(0x0010)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       PathToComponent;                                              // 0x0018(0x0010)
};


// ScriptStruct  ActorLayerUtilities.ActorLayer
// Struct Size::0x000C
struct FActorLayer
{
    FName                                         Name;                                                         // 0x0000(0x000C)
};


// ScriptStruct  AudioCapture.AudioCaptureDeviceInfo
// Struct Size::0x0014
struct FAudioCaptureDeviceInfo
{
    FName                                         DeviceName;                                                   // 0x0000(0x000C)
    int32_t                                       NumInputChannels;                                             // 0x000C(0x0004)
    int32_t                                       SampleRate;                                                   // 0x0010(0x0004)
};


// ScriptStruct  CustomMeshComponent.CustomMeshTriangle
// Struct Size::0x0024
struct FCustomMeshTriangle
{
    FVector                                       Vertex0;                                                      // 0x0000(0x000C)
    FVector                                       Vertex1;                                                      // 0x000C(0x000C)
    FVector                                       Vertex2;                                                      // 0x0018(0x000C)
};


// ScriptStruct  Synthesis.ModularSynthPresetBankEntry
// Struct Size::0x00F0
struct FModularSynthPresetBankEntry
{
    FString                                       PresetName;                                                   // 0x0000(0x0010)
    FModularSynthPreset                           Preset;                                                       // 0x0010(0x00E0)
};


// ScriptStruct  Synthesis.ModularSynthPreset
// Struct Size::0x00E0
struct FModularSynthPreset : public FTableRowBase
{
    char                                          bEnablePolyphony;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    enum class ESynth1OscType                     Osc1Type;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         Osc1Gain;                                                     // 0x0010(0x0004)
    float                                         Osc1Octave;                                                   // 0x0014(0x0004)
    float                                         Osc1Semitones;                                                // 0x0018(0x0004)
    float                                         Osc1Cents;                                                    // 0x001C(0x0004)
    float                                         Osc1PulseWidth;                                               // 0x0020(0x0004)
    enum class ESynth1OscType                     Osc2Type;                                                     // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         Osc2Gain;                                                     // 0x0028(0x0004)
    float                                         Osc2Octave;                                                   // 0x002C(0x0004)
    float                                         Osc2Semitones;                                                // 0x0030(0x0004)
    float                                         Osc2Cents;                                                    // 0x0034(0x0004)
    float                                         Osc2PulseWidth;                                               // 0x0038(0x0004)
    float                                         Portamento;                                                   // 0x003C(0x0004)
    char                                          bEnableUnison;                                                // 0x0040(0x0001)
    char                                          bEnableOscillatorSync;                                        // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         Spread;                                                       // 0x0044(0x0004)
    float                                         Pan;                                                          // 0x0048(0x0004)
    float                                         LFO1Frequency;                                                // 0x004C(0x0004)
    float                                         LFO1Gain;                                                     // 0x0050(0x0004)
    enum class ESynthLFOType                      LFO1Type;                                                     // 0x0054(0x0001)
    enum class ESynthLFOMode                      LFO1Mode;                                                     // 0x0055(0x0001)
    enum class ESynthLFOPatchType                 LFO1PatchType;                                                // 0x0056(0x0001)
    char                                          pa_0057[0x0001]                                               // 0x0057(0x0001)
    float                                         LFO2Frequency;                                                // 0x0058(0x0004)
    float                                         LFO2Gain;                                                     // 0x005C(0x0004)
    enum class ESynthLFOType                      LFO2Type;                                                     // 0x0060(0x0001)
    enum class ESynthLFOMode                      LFO2Mode;                                                     // 0x0061(0x0001)
    enum class ESynthLFOPatchType                 LFO2PatchType;                                                // 0x0062(0x0001)
    char                                          pa_0063[0x0001]                                               // 0x0063(0x0001)
    float                                         GainDb;                                                       // 0x0064(0x0004)
    float                                         AttackTime;                                                   // 0x0068(0x0004)
    float                                         DecayTime;                                                    // 0x006C(0x0004)
    float                                         SustainGain;                                                  // 0x0070(0x0004)
    float                                         ReleaseTime;                                                  // 0x0074(0x0004)
    enum class ESynthModEnvPatch                  ModEnvPatchType;                                              // 0x0078(0x0001)
    enum class ESynthModEnvBiasPatch              ModEnvBiasPatchType;                                          // 0x0079(0x0001)
    char                                          pa_007A[0x0002]                                               // 0x007A(0x0002)
    char                                          bInvertModulationEnvelope;                                    // 0x007C(0x0001)
    char                                          bInvertModulationEnvelopeBias;                                // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
    float                                         ModulationEnvelopeDepth;                                      // 0x0080(0x0004)
    float                                         ModulationEnvelopeAttackTime;                                 // 0x0084(0x0004)
    float                                         ModulationEnvelopeDecayTime;                                  // 0x0088(0x0004)
    float                                         ModulationEnvelopeSustainGain;                                // 0x008C(0x0004)
    float                                         ModulationEnvelopeReleaseTime;                                // 0x0090(0x0004)
    char                                          bLegato;                                                      // 0x0094(0x0001)
    char                                          bRetrigger;                                                   // 0x0094(0x0001)
    char                                          pa_0095[0x0003]                                               // 0x0095(0x0003)
    float                                         FilterFrequency;                                              // 0x0098(0x0004)
    float                                         FilterQ;                                                      // 0x009C(0x0004)
    enum class ESynthFilterType                   FilterType;                                                   // 0x00A0(0x0001)
    enum class ESynthFilterAlgorithm              FilterAlgorithm;                                              // 0x00A1(0x0001)
    char                                          pa_00A2[0x0002]                                               // 0x00A2(0x0002)
    char                                          bStereoDelayEnabled;                                          // 0x00A4(0x0001)
    char                                          pa_00A5[0x0003]                                               // 0x00A5(0x0003)
    enum class ESynthStereoDelayMode              StereoDelayMode;                                              // 0x00A8(0x0001)
    char                                          pa_00A9[0x0003]                                               // 0x00A9(0x0003)
    float                                         StereoDelayTime;                                              // 0x00AC(0x0004)
    float                                         StereoDelayFeedback;                                          // 0x00B0(0x0004)
    float                                         StereoDelayWetlevel;                                          // 0x00B4(0x0004)
    float                                         StereoDelayRatio;                                             // 0x00B8(0x0004)
    char                                          bChorusEnabled;                                               // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    float                                         ChorusDepth;                                                  // 0x00C0(0x0004)
    float                                         ChorusFeedback;                                               // 0x00C4(0x0004)
    float                                         ChorusFrequency;                                              // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    TArray<FEpicSynth1Patch>                      Patches;                                                      // 0x00D0(0x0010)
};


// ScriptStruct  Synthesis.EpicSynth1Patch
// Struct Size::0x0018
struct FEpicSynth1Patch
{
    enum class ESynth1PatchSource                 PatchSource;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FSynth1PatchCable>                     PatchCables;                                                  // 0x0008(0x0010)
};


// ScriptStruct  Synthesis.Synth1PatchCable
// Struct Size::0x0008
struct FSynth1PatchCable
{
    float                                         Depth;                                                        // 0x0000(0x0004)
    enum class ESynth1PatchDestination            Destination;                                                  // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Synthesis.PatchId
// Struct Size::0x0004
struct FPatchId
{
    int32_t                                       Id;                                                           // 0x0000(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectBitCrusherSettings
// Struct Size::0x0030
struct FSourceEffectBitCrusherSettings
{
    float                                         CrushedSampleRate;                                            // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FSoundModulationDestinationSettings           SampleRateModulation;                                         // 0x0008(0x0010)
    float                                         CrushedBits;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FSoundModulationDestinationSettings           BitModulation;                                                // 0x0020(0x0010)
};


// ScriptStruct  Engine.SoundModulationDestinationSettings
// Struct Size::0x0010
struct FSoundModulationDestinationSettings
{
    float                                         Value;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FSoundModulatorBase*                          Modulator;                                                    // 0x0008(0x0008)
};


// ScriptStruct  Synthesis.SourceEffectBitCrusherBaseSettings
// Struct Size::0x0008
struct FSourceEffectBitCrusherBaseSettings
{
    float                                         SampleRate;                                                   // 0x0000(0x0004)
    float                                         BitDepth;                                                     // 0x0004(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectChorusSettings
// Struct Size::0x0078
struct FSourceEffectChorusSettings
{
    float                                         Depth;                                                        // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    float                                         Feedback;                                                     // 0x0008(0x0004)
    float                                         WetLevel;                                                     // 0x000C(0x0004)
    float                                         DryLevel;                                                     // 0x0010(0x0004)
    float                                         Spread;                                                       // 0x0014(0x0004)
    FSoundModulationDestinationSettings           DepthModulation;                                              // 0x0018(0x0010)
    FSoundModulationDestinationSettings           FrequencyModulation;                                          // 0x0028(0x0010)
    FSoundModulationDestinationSettings           FeedbackModulation;                                           // 0x0038(0x0010)
    FSoundModulationDestinationSettings           WetModulation;                                                // 0x0048(0x0010)
    FSoundModulationDestinationSettings           DryModulation;                                                // 0x0058(0x0010)
    FSoundModulationDestinationSettings           SpreadModulation;                                             // 0x0068(0x0010)
};


// ScriptStruct  Synthesis.SourceEffectChorusBaseSettings
// Struct Size::0x0018
struct FSourceEffectChorusBaseSettings
{
    float                                         Depth;                                                        // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    float                                         Feedback;                                                     // 0x0008(0x0004)
    float                                         WetLevel;                                                     // 0x000C(0x0004)
    float                                         DryLevel;                                                     // 0x0010(0x0004)
    float                                         Spread;                                                       // 0x0014(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectDynamicsProcessorSettings
// Struct Size::0x0028
struct FSourceEffectDynamicsProcessorSettings
{
    enum class ESourceEffectDynamicsProcessorType DynamicsProcessorType;                                        // 0x0000(0x0001)
    enum class ESourceEffectDynamicsPeakMode      PeakMode;                                                     // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         LookAheadMsec;                                                // 0x0004(0x0004)
    float                                         AttackTimeMsec;                                               // 0x0008(0x0004)
    float                                         ReleaseTimeMsec;                                              // 0x000C(0x0004)
    float                                         ThresholdDb;                                                  // 0x0010(0x0004)
    float                                         Ratio;                                                        // 0x0014(0x0004)
    float                                         KneeBandwidthDb;                                              // 0x0018(0x0004)
    float                                         InputGainDb;                                                  // 0x001C(0x0004)
    float                                         OutputGainDb;                                                 // 0x0020(0x0004)
    char                                          bStereoLinked;                                                // 0x0024(0x0001)
    char                                          bAnalogMode;                                                  // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  Synthesis.SourceEffectEnvelopeFollowerSettings
// Struct Size::0x000C
struct FSourceEffectEnvelopeFollowerSettings
{
    float                                         AttackTime;                                                   // 0x0000(0x0004)
    float                                         ReleaseTime;                                                  // 0x0004(0x0004)
    enum class EEnvelopeFollowerPeakMode          PeakMode;                                                     // 0x0008(0x0001)
    bool                                          bIsAnalogMode;                                                // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Synthesis.SourceEffectEQSettings
// Struct Size::0x0010
struct FSourceEffectEQSettings
{
    TArray<FSourceEffectEQBand>                   EQBands;                                                      // 0x0000(0x0010)
};


// ScriptStruct  Synthesis.SourceEffectEQBand
// Struct Size::0x0010
struct FSourceEffectEQBand
{
    float                                         Frequency;                                                    // 0x0000(0x0004)
    float                                         Bandwidth;                                                    // 0x0004(0x0004)
    float                                         GainDb;                                                       // 0x0008(0x0004)
    char                                          bEnabled;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Synthesis.SourceEffectFilterSettings
// Struct Size::0x0020
struct FSourceEffectFilterSettings
{
    enum class ESourceEffectFilterCircuit         FilterCircuit;                                                // 0x0000(0x0001)
    enum class ESourceEffectFilterType            FilterType;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         CutoffFrequency;                                              // 0x0004(0x0004)
    float                                         FilterQ;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FSourceEffectFilterAudioBusModulationSettings>AudioBusModulation;                                    // 0x0010(0x0010)
};


// ScriptStruct  Synthesis.SourceEffectFilterAudioBusModulationSettings
// Struct Size::0x0028
struct FSourceEffectFilterAudioBusModulationSettings
{
    FAudioBus*                                    AudioBus;                                                     // 0x0000(0x0008)
    int32_t                                       EnvelopeFollowerAttackTimeMsec;                               // 0x0008(0x0004)
    int32_t                                       EnvelopeFollowerReleaseTimeMsec;                              // 0x000C(0x0004)
    float                                         EnvelopeGainMultiplier;                                       // 0x0010(0x0004)
    enum class ESourceEffectFilterParam           FilterParam;                                                  // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         MinFrequencyModulation;                                       // 0x0018(0x0004)
    float                                         MaxFrequencyModulation;                                       // 0x001C(0x0004)
    float                                         MinResonanceModulation;                                       // 0x0020(0x0004)
    float                                         MaxResonanceModulation;                                       // 0x0024(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectFoldbackDistortionSettings
// Struct Size::0x000C
struct FSourceEffectFoldbackDistortionSettings
{
    float                                         InputGainDb;                                                  // 0x0000(0x0004)
    float                                         ThresholdDb;                                                  // 0x0004(0x0004)
    float                                         OutputGainDb;                                                 // 0x0008(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectMidSideSpreaderSettings
// Struct Size::0x0008
struct FSourceEffectMidSideSpreaderSettings
{
    float                                         SpreadAmount;                                                 // 0x0000(0x0004)
    enum class EStereoChannelMode                 InputMode;                                                    // 0x0004(0x0001)
    enum class EStereoChannelMode                 OutputMode;                                                   // 0x0005(0x0001)
    bool                                          bEqualPower;                                                  // 0x0006(0x0001)
    char                                          pa_0007[0x0001]                                               // 0x0007(0x0001)
};


// ScriptStruct  Synthesis.SourceEffectPannerSettings
// Struct Size::0x0008
struct FSourceEffectPannerSettings
{
    float                                         Spread;                                                       // 0x0000(0x0004)
    float                                         Pan;                                                          // 0x0004(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectPhaserSettings
// Struct Size::0x0010
struct FSourceEffectPhaserSettings
{
    float                                         WetLevel;                                                     // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    float                                         Feedback;                                                     // 0x0008(0x0004)
    enum class EPhaserLFOType                     LFOType;                                                      // 0x000C(0x0001)
    bool                                          UseQuadraturePhase;                                           // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  Synthesis.SourceEffectRingModulationSettings
// Struct Size::0x0020
struct FSourceEffectRingModulationSettings
{
    enum class ERingModulatorTypeSourceEffect     ModulatorType;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    float                                         Depth;                                                        // 0x0008(0x0004)
    float                                         DryLevel;                                                     // 0x000C(0x0004)
    float                                         WetLevel;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAudioBus*                                    AudioBusModulator;                                            // 0x0018(0x0008)
};


// ScriptStruct  Synthesis.SourceEffectSimpleDelaySettings
// Struct Size::0x0018
struct FSourceEffectSimpleDelaySettings
{
    float                                         SpeedOfSound;                                                 // 0x0000(0x0004)
    float                                         DelayAmount;                                                  // 0x0004(0x0004)
    float                                         DryAmount;                                                    // 0x0008(0x0004)
    float                                         WetAmount;                                                    // 0x000C(0x0004)
    float                                         Feedback;                                                     // 0x0010(0x0004)
    char                                          bDelayBasedOnDistance;                                        // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  Synthesis.SourceEffectStereoDelaySettings
// Struct Size::0x0024
struct FSourceEffectStereoDelaySettings
{
    enum class EStereoDelaySourceEffect           DelayMode;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DelayTimeMsec;                                                // 0x0004(0x0004)
    float                                         Feedback;                                                     // 0x0008(0x0004)
    float                                         DelayRatio;                                                   // 0x000C(0x0004)
    float                                         WetLevel;                                                     // 0x0010(0x0004)
    float                                         DryLevel;                                                     // 0x0014(0x0004)
    bool                                          bFilterEnabled;                                               // 0x0018(0x0001)
    enum class EStereoDelayFiltertype             FilterType;                                                   // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         FilterFrequency;                                              // 0x001C(0x0004)
    float                                         FilterQ;                                                      // 0x0020(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectWaveShaperSettings
// Struct Size::0x0008
struct FSourceEffectWaveShaperSettings
{
    float                                         Amount;                                                       // 0x0000(0x0004)
    float                                         OutputGainDb;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Synthesis.SubmixEffectConvolutionReverbSettings
// Struct Size::0x0028
struct FSubmixEffectConvolutionReverbSettings
{
    float                                         NormalizationVolumeDb;                                        // 0x0000(0x0004)
    bool                                          bBypass;                                                      // 0x0004(0x0001)
    bool                                          bMixInputChannelFormatToImpulseResponseFormat;                // 0x0005(0x0001)
    bool                                          bMixReverbOutputToOutputChannelFormat;                        // 0x0006(0x0001)
    char                                          pa_0007[0x0001]                                               // 0x0007(0x0001)
    float                                         SurroundRearChannelBleedDb;                                   // 0x0008(0x0004)
    bool                                          bInvertRearChannelBleedPhase;                                 // 0x000C(0x0001)
    bool                                          bSurroundRearChannelFlip;                                     // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    float                                         SurroundRearChannelBleedAmount;                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAudioImpulseResponse*                        ImpulseResponse;                                              // 0x0018(0x0008)
    bool                                          AllowHardwareAcceleration;                                    // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Synthesis.SubmixEffectDelaySettings
// Struct Size::0x000C
struct FSubmixEffectDelaySettings
{
    float                                         MaximumDelayLength;                                           // 0x0000(0x0004)
    float                                         InterpolationTime;                                            // 0x0004(0x0004)
    float                                         DelayLength;                                                  // 0x0008(0x0004)
};


// ScriptStruct  Synthesis.SubmixEffectFilterSettings
// Struct Size::0x000C
struct FSubmixEffectFilterSettings
{
    enum class ESubmixFilterType                  FilterType;                                                   // 0x0000(0x0001)
    enum class ESubmixFilterAlgorithm             FilterAlgorithm;                                              // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         FilterFrequency;                                              // 0x0004(0x0004)
    float                                         FilterQ;                                                      // 0x0008(0x0004)
};


// ScriptStruct  Synthesis.SubmixEffectFlexiverbSettings
// Struct Size::0x0010
struct FSubmixEffectFlexiverbSettings
{
    float                                         PreDelay;                                                     // 0x0000(0x0004)
    float                                         DecayTime;                                                    // 0x0004(0x0004)
    float                                         RoomDampening;                                                // 0x0008(0x0004)
    int32_t                                       Complexity;                                                   // 0x000C(0x0004)
};


// ScriptStruct  Synthesis.SubmixEffectMultibandCompressorSettings
// Struct Size::0x0020
struct FSubmixEffectMultibandCompressorSettings
{
    enum class ESubmixEffectDynamicsProcessorType DynamicsProcessorType;                                        // 0x0000(0x0001)
    enum class ESubmixEffectDynamicsPeakMode      PeakMode;                                                     // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         LookAheadMsec;                                                // 0x0004(0x0004)
    bool                                          bLinkChannels;                                                // 0x0008(0x0001)
    bool                                          bAnalogMode;                                                  // 0x0009(0x0001)
    bool                                          bFourPole;                                                    // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
    TArray<FDynamicsBandSettings>                 Bands;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Synthesis.DynamicsBandSettings
// Struct Size::0x0020
struct FDynamicsBandSettings
{
    float                                         CrossoverTopFrequency;                                        // 0x0000(0x0004)
    float                                         AttackTimeMsec;                                               // 0x0004(0x0004)
    float                                         ReleaseTimeMsec;                                              // 0x0008(0x0004)
    float                                         ThresholdDb;                                                  // 0x000C(0x0004)
    float                                         Ratio;                                                        // 0x0010(0x0004)
    float                                         KneeBandwidthDb;                                              // 0x0014(0x0004)
    float                                         InputGainDb;                                                  // 0x0018(0x0004)
    float                                         OutputGainDb;                                                 // 0x001C(0x0004)
};


// ScriptStruct  Synthesis.SubmixEffectStereoDelaySettings
// Struct Size::0x0024
struct FSubmixEffectStereoDelaySettings
{
    enum class EStereoDelaySourceEffect           DelayMode;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DelayTimeMsec;                                                // 0x0004(0x0004)
    float                                         Feedback;                                                     // 0x0008(0x0004)
    float                                         DelayRatio;                                                   // 0x000C(0x0004)
    float                                         WetLevel;                                                     // 0x0010(0x0004)
    float                                         DryLevel;                                                     // 0x0014(0x0004)
    bool                                          bFilterEnabled;                                               // 0x0018(0x0001)
    enum class EStereoDelayFiltertype             FilterType;                                                   // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         FilterFrequency;                                              // 0x001C(0x0004)
    float                                         FilterQ;                                                      // 0x0020(0x0004)
};


// ScriptStruct  Synthesis.SubmixEffectTapDelaySettings
// Struct Size::0x0018
struct FSubmixEffectTapDelaySettings
{
    float                                         MaximumDelayLength;                                           // 0x0000(0x0004)
    float                                         InterpolationTime;                                            // 0x0004(0x0004)
    TArray<FTapDelayInfo>                         Taps;                                                         // 0x0008(0x0010)
};


// ScriptStruct  Synthesis.TapDelayInfo
// Struct Size::0x0018
struct FTapDelayInfo
{
    enum class ETapLineMode                       TapLineMode;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DelayLength;                                                  // 0x0004(0x0004)
    float                                         Gain;                                                         // 0x0008(0x0004)
    int32_t                                       OutputChannel;                                                // 0x000C(0x0004)
    float                                         PanInDegrees;                                                 // 0x0010(0x0004)
    int32_t                                       TapId;                                                        // 0x0014(0x0004)
};


// ScriptStruct  Synthesis.Synth2DSliderStyle
// Struct Size::0x02E0
struct FSynth2DSliderStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   NormalThumbImage;                                             // 0x0008(0x0090)
    FSlateBrush                                   DisabledThumbImage;                                           // 0x0098(0x0090)
    FSlateBrush                                   NormalBarImage;                                               // 0x0128(0x0090)
    FSlateBrush                                   DisabledBarImage;                                             // 0x01B8(0x0090)
    FSlateBrush                                   BackgroundImage;                                              // 0x0248(0x0090)
    float                                         BarThickness;                                                 // 0x02D8(0x0004)
    char                                          pa_02DC[0x0004]                                               // 0x02DC(0x0004)
};


// ScriptStruct  Synthesis.SynthKnobStyle
// Struct Size::0x0258
struct FSynthKnobStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   LargeKnob;                                                    // 0x0008(0x0090)
    FSlateBrush                                   LargeKnobOverlay;                                             // 0x0098(0x0090)
    FSlateBrush                                   MediumKnob;                                                   // 0x0128(0x0090)
    FSlateBrush                                   MediumKnobOverlay;                                            // 0x01B8(0x0090)
    float                                         MinValueAngle;                                                // 0x0248(0x0004)
    float                                         MaxValueAngle;                                                // 0x024C(0x0004)
    enum class ESynthKnobSize                     KnobSize;                                                     // 0x0250(0x0001)
    char                                          pa_0251[0x0007]                                               // 0x0251(0x0007)
};


// ScriptStruct  Synthesis.SynthSlateStyle
// Struct Size::0x0010
struct FSynthSlateStyle : public FSlateWidgetStyle
{
    enum class ESynthSlateSizeType                SizeType;                                                     // 0x0008(0x0001)
    enum class ESynthSlateColorStyle              ColorStyle;                                                   // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  ShooterGame.AbilityInstigatedEffectContext
// Struct Size::0x0080
struct FAbilityInstigatedEffectContext : public FGameplayEffectContext
{
    int32_t                                       CastID;                                                       // 0x0070(0x0004)
    TWeakObjectPtr<FAresEquippable>               InstigatingEquippable;                                        // 0x0074(0x0008)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  ShooterGame.AgentAbilityCooldown
// Struct Size::0x0048
struct FAgentAbilityCooldown : public FTableRowBase
{
    FName                                         CharacterName;                                                // 0x0008(0x000C)
    FName                                         AbilitySlot;                                                  // 0x0014(0x000C)
    FName                                         AbilityName;                                                  // 0x0020(0x000C)
    float                                         CooldownSeconds;                                              // 0x002C(0x0004)
    float                                         TempChargeCooldownSeconds;                                    // 0x0030(0x0004)
    float                                         StartingCooldownPercent;                                      // 0x0034(0x0004)
    bool                                          bPreventRechargeWhileActive;                                  // 0x0038(0x0001)
    bool                                          bRecallable;                                                  // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
    FAbilityRechargeCooldownComponent*            CooldownComponentClass;                                       // 0x0040(0x0008)
};


// ScriptStruct  ShooterGame.AccoladeProgressEntry
// Struct Size::0x0018
struct FAccoladeProgressEntry
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    int32_t                                       Progress;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.AccountXPPlayer
// Struct Size::0x0038
struct FAccountXPPlayer
{
    int32_t                                       Version;                                                      // 0x0000(0x0004)
    FGuid                                         Subject;                                                      // 0x0004(0x0010)
    FAccountXPPlayerProgress                      Progress;                                                     // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FDateTime                                     NextTimeFirstWinAvailable;                                    // 0x0020(0x0008)
    TArray<FAccountXPMatch>                       History;                                                      // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.AccountXPMatch
// Struct Size::0x0048
struct FAccountXPMatch
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FAccountXPPlayerProgress                      StartProgress;                                                // 0x0010(0x0008)
    FAccountXPPlayerProgress                      EndProgress;                                                  // 0x0018(0x0008)
    int32_t                                       XPDelta;                                                      // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FAccountXPXPSource>                    XPSources;                                                    // 0x0028(0x0010)
    TArray<FAccountXPXPMultiplier>                XPMultipliers;                                                // 0x0038(0x0010)
};


// ScriptStruct  ShooterGame.AccountXPXPMultiplier
// Struct Size::0x0018
struct FAccountXPXPMultiplier
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    float                                         Value;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.AccountXPXPSource
// Struct Size::0x0018
struct FAccountXPXPSource
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    int32_t                                       Amount;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.AccountXPPlayerProgress
// Struct Size::0x0008
struct FAccountXPPlayerProgress
{
    int32_t                                       Level;                                                        // 0x0000(0x0004)
    int32_t                                       XP;                                                           // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.AccountXPMatchViewData
// Struct Size::0x0038
struct FAccountXPMatchViewData
{
    int32_t                                       StartLevel;                                                   // 0x0000(0x0004)
    int32_t                                       StartXP;                                                      // 0x0004(0x0004)
    int32_t                                       EndLevel;                                                     // 0x0008(0x0004)
    int32_t                                       EndXP;                                                        // 0x000C(0x0004)
    int32_t                                       MaxLevelXP;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FAccountXPXPSource>                    XPSources;                                                    // 0x0018(0x0010)
    TArray<FAccountXPXPMultiplier>                XPMultipliers;                                                // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.ACEPlayerAntiDataResponse
// Struct Size::0x0028
struct FACEPlayerAntiDataResponse
{
    FACEPlayerAntiDataResponseResult              Result;                                                       // 0x0000(0x0018)
    FString                                       Data;                                                         // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.ACEPlayerAntiDataResponseResult
// Struct Size::0x0018
struct FACEPlayerAntiDataResponseResult
{
    int32_t                                       StatusCode;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Msg;                                                          // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.ACEPlayerAntiData
// Struct Size::0x0040
struct FACEPlayerAntiData
{
    FACEPlayer                                    Player;                                                       // 0x0000(0x0030)
    FString                                       Data;                                                         // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.ACEPlayer
// Struct Size::0x0030
struct FACEPlayer
{
    FString                                       GOpenID;                                                      // 0x0000(0x0010)
    int32_t                                       PlatID;                                                       // 0x0010(0x0004)
    int32_t                                       WorldID;                                                      // 0x0014(0x0004)
    int32_t                                       ChannelID;                                                    // 0x0018(0x0004)
    int32_t                                       RoleID;                                                       // 0x001C(0x0004)
    FString                                       RoleName;                                                     // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.ChordToActionBindSetEntry
// Struct Size::0x0050
struct FChordToActionBindSetEntry
{
    TMap<FActionChord,FRelatedActionBindSetsList> ChordToActionsMap;                                            // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.RelatedActionBindSetsList
// Struct Size::0x0050
struct FRelatedActionBindSetsList
{
    TSet<FActionBindSet*>                         ActionBindSetList;                                            // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.GamepadPresetAxisEntry
// Struct Size::0x0030
struct FGamepadPresetAxisEntry
{
    FName                                         AxisName;                                                     // 0x0000(0x000C)
    enum class EActionBindSetAxisDirection        AxisDirection;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FKey                                          Key;                                                          // 0x0010(0x0020)
};


// ScriptStruct  ShooterGame.ConflictList
// Struct Size::0x0010
struct FConflictList
{
    TArray<FSingleBindSlotActionBinding>          ConflictingBindings;                                          // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.SingleBindSlotActionBinding
// Struct Size::0x0010
struct FSingleBindSlotActionBinding
{
    FActionBindSet*                               Action;                                                       // 0x0000(0x0008)
    int32_t                                       BindIndex;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.ActionBindingsManagerLocalCache
// Struct Size::0x0048
struct FActionBindingsManagerLocalCache
{
    int32_t                                       SettingsVersion;                                              // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FActionMappingDTO>                     ActionMappings;                                               // 0x0008(0x0010)
    TArray<FAxisMappingDTO>                       AxisMappings;                                                 // 0x0018(0x0010)
    TArray<FName>                                 SettingsProfiles;                                             // 0x0028(0x0010)
    TArray<FCharacterProfileData>                 CharacterProfileData;                                         // 0x0038(0x0010)
};


// ScriptStruct  ShooterGame.CharacterProfileData
// Struct Size::0x0010
struct FCharacterProfileData
{
    FName                                         ProfileName;                                                  // 0x0000(0x000C)
    int32_t                                       PresetIndex;                                                  // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.AxisMappingDTO
// Struct Size::0x0040
struct FAxisMappingDTO
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       CharacterName;                                                // 0x0010(0x0010)
    int32_t                                       BindIndex;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       Key;                                                          // 0x0028(0x0010)
    float                                         Scale;                                                        // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ShooterGame.ActionMappingDTO
// Struct Size::0x0050
struct FActionMappingDTO
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       CharacterName;                                                // 0x0010(0x0010)
    int32_t                                       BindIndex;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       Key;                                                          // 0x0028(0x0010)
    bool                                          Shift;                                                        // 0x0038(0x0001)
    bool                                          Ctrl;                                                         // 0x0039(0x0001)
    bool                                          Alt;                                                          // 0x003A(0x0001)
    bool                                          Cmd;                                                          // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       TapHoldType;                                                  // 0x0040(0x0010)
};


// ScriptStruct  ShooterGame.ActionBindSetIdentifier
// Struct Size::0x0010
struct FActionBindSetIdentifier
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ActRankBorderInstance
// Struct Size::0x0038
struct FActRankBorderInstance
{
    TSoftClassPtr<UObject>                        BorderAsset;                                                  // 0x0000(0x0030)
    int32_t                                       WinsRequired;                                                 // 0x0030(0x0004)
    int32_t                                       Level;                                                        // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.AIAimTargetInfo
// Struct Size::0x0018
struct FAIAimTargetInfo
{
    AActor*                                       ActorTarget;                                                  // 0x0000(0x0008)
    FVector                                       LocationTarget;                                               // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.AimReport
// Struct Size::0x0068
struct FAimReport
{
    float                                         ShotTime;                                                     // 0x0000(0x0004)
    FRotator                                      AimAtShot;                                                    // 0x0004(0x000C)
    TArray<FRotator>                              AimRotatorsBefore;                                            // 0x0010(0x0010)
    TArray<FRotator>                              AimRotatorsAfter;                                             // 0x0020(0x0010)
    char                                          pa_0030[0x0010]                                               // 0x0030(0x0010)
    int32_t                                       Samples;                                                      // 0x0040(0x0004)
    float                                         DistanceAccumulator;                                          // 0x0044(0x0004)
    float                                         MaxDistance;                                                  // 0x0048(0x0004)
    float                                         MinDistance;                                                  // 0x004C(0x0004)
    float                                         SpeedAccumulator;                                             // 0x0050(0x0004)
    float                                         MaxSpeed;                                                     // 0x0054(0x0004)
    float                                         MinSpeed;                                                     // 0x0058(0x0004)
    float                                         AccelerationAccumulator;                                      // 0x005C(0x0004)
    float                                         MaxAcceleration;                                              // 0x0060(0x0004)
    float                                         MinAcceleration;                                              // 0x0064(0x0004)
};


// ScriptStruct  ShooterGame.AimRotatorEntry
// Struct Size::0x0014
struct FAimRotatorEntry
{
    char                                          pa_0000[0x0014]                                               // 0x0000(0x0014)
};


// ScriptStruct  ShooterGame.SnapTargetTypeTunables
// Struct Size::0x0020
struct FSnapTargetTypeTunables
{
    FString                                       BoneName;                                                     // 0x0000(0x0010)
    FVector2D                                     DefaultSnapAngles;                                            // 0x0010(0x0008)
    bool                                          IgnoreNearsightDebuffs;                                       // 0x0018(0x0001)
    bool                                          VerticalLockEnabled;                                          // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
};


// ScriptStruct  ShooterGame.NoiseEventData
// Struct Size::0x0038
struct FNoiseEventData
{
    float                                         NoiseLoudness;                                                // 0x0000(0x0004)
    float                                         NoiseMaxRange;                                                // 0x0004(0x0004)
    FNoiseEventTagData                            NoiseTagData;                                                 // 0x0008(0x0030)
};


// ScriptStruct  ShooterGame.NoiseEventTagData
// Struct Size::0x0030
struct FNoiseEventTagData
{
    FGameplayTagContainer                         TagContainer;                                                 // 0x0000(0x0020)
    FName                                         StringTag;                                                    // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.AnimationConductorNodeSignalCondition
// Struct Size::0x0014
struct FAnimationConductorNodeSignalCondition
{
    bool                                          bCompletion;                                                  // 0x0000(0x0001)
    bool                                          bHasMaxDelay;                                                 // 0x0001(0x0001)
    bool                                          bConsumeCue;                                                  // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FName                                         CueName;                                                      // 0x0004(0x000C)
    float                                         MaxDelay;                                                     // 0x0010(0x0004)
};


// ScriptStruct  ShooterGame.CachableAnimationData
// Struct Size::0x0118
struct FCachableAnimationData
{
    TMap<FAnimSlot1P*,FAnimationSlotArray>        Arms1PAnimations;                                             // 0x0000(0x0050)
    TMap<FAnimSlotLowerBody3P*,FAnimationSlotArray>LowerBody3PAnimations;                                       // 0x0050(0x0050)
    TMap<FAnimSlotUpperBody3P*,FAnimationSlotArray>UpperBody3PAnimations;                                       // 0x00A0(0x0050)
    FAnimationSlotArray                           HitReactionAnimations;                                        // 0x00F0(0x0018)
    FAnimSequence*                                FaceFidgetAnimation;                                          // 0x0108(0x0008)
    char                                          pa_0110[0x0008]                                               // 0x0110(0x0008)
};


// ScriptStruct  ShooterGame.AnimationSlotArray
// Struct Size::0x0018
struct FAnimationSlotArray
{
    TArray<FAnimationAsset*>                      AnimationAssets;                                              // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.MontageStartTime
// Struct Size::0x0010
struct FMontageStartTime
{
    FAnimMontage*                                 AnimMontage;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.AnimationStateReplicationData
// Struct Size::0x0008
struct FAnimationStateReplicationData
{
    int32_t                                       LowerBodyRunBlendspaceActiveIndex;                            // 0x0000(0x0004)
    int32_t                                       LowerBodyCrouchWalkBlendspaceActiveIndex;                     // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.BoneTransformAim3P
// Struct Size::0x0074
struct FBoneTransformAim3P
{
    FRotator                                      Spine1Rotation;                                               // 0x0000(0x000C)
    FRotator                                      Spine2Rotation;                                               // 0x000C(0x000C)
    FRotator                                      Spine3Rotation;                                               // 0x0018(0x000C)
    FRotator                                      Spine4Rotation;                                               // 0x0024(0x000C)
    FRotator                                      NeckRotation;                                                 // 0x0030(0x000C)
    FRotator                                      HeadRotation;                                                 // 0x003C(0x000C)
    FRotator                                      LeftClavicleRotation;                                         // 0x0048(0x000C)
    FRotator                                      RightClavicleRotation;                                        // 0x0054(0x000C)
    FBoneReference                                ConstraintBone;                                               // 0x0060(0x0014)
};


// ScriptStruct  ShooterGame.AnimationAssetsGun1P
// Struct Size::0x0048
struct FAnimationAssetsGun1P
{
    FAnimSequence*                                IdleAnimation;                                                // 0x0000(0x0008)
    FAnimSequence*                                JumpAnimation;                                                // 0x0008(0x0008)
    FAnimSequence*                                JumpLandAnimation;                                            // 0x0010(0x0008)
    FAnimSequence*                                RunAnimation;                                                 // 0x0018(0x0008)
    FAnimSequence*                                CrouchIdleAnimation;                                          // 0x0020(0x0008)
    FAnimSequence*                                CrouchAnimation;                                              // 0x0028(0x0008)
    FAnimSequence*                                CrouchWalkAnimation;                                          // 0x0030(0x0008)
    FAnimSequence*                                StandUpAnimation;                                             // 0x0038(0x0008)
    FAnimSequence*                                WalkAnimation;                                                // 0x0040(0x0008)
};


// ScriptStruct  ShooterGame.AnimationAssets1P
// Struct Size::0x0078
struct FAnimationAssets1P
{
    FAnimSequence*                                IdleBaseAnimation;                                            // 0x0000(0x0008)
    FAnimSequence*                                AltModeIdleBaseAnimation;                                     // 0x0008(0x0008)
    FAnimSequence*                                FidgetAnimation;                                              // 0x0010(0x0008)
    FAnimSequence*                                DisabledAnimation;                                            // 0x0018(0x0008)
    FAnimSequence*                                IdleAdditiveAnimation;                                        // 0x0020(0x0008)
    FAnimSequence*                                JumpAnimation;                                                // 0x0028(0x0008)
    FAnimSequence*                                JumpLandAnimation;                                            // 0x0030(0x0008)
    FAnimSequence*                                RunAnimation;                                                 // 0x0038(0x0008)
    FAimOffsetBlendSpace*                         LookBlendspace;                                               // 0x0040(0x0008)
    FAimOffsetBlendSpace*                         Look2Blendspace;                                              // 0x0048(0x0008)
    FAnimSequence*                                CrouchIdleAnimation;                                          // 0x0050(0x0008)
    FAnimSequence*                                CrouchAnimation;                                              // 0x0058(0x0008)
    FAnimSequence*                                CrouchWalkAnimation;                                          // 0x0060(0x0008)
    FAnimSequence*                                StandUpAnimation;                                             // 0x0068(0x0008)
    FAnimSequence*                                WalkAnimation;                                                // 0x0070(0x0008)
};


// ScriptStruct  ShooterGame.AnimationStateParams
// Struct Size::0x01E8
struct FAnimationStateParams
{
    FVector                                       Position;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    FVector                                       Acceleration;                                                 // 0x0018(0x000C)
    float                                         CurrentSpeed2D;                                               // 0x0024(0x0004)
    float                                         StopFromNormalizedSpeed;                                      // 0x0028(0x0004)
    float                                         TempMovementSpeedModifier;                                    // 0x002C(0x0004)
    float                                         AimPitch;                                                     // 0x0030(0x0004)
    float                                         UpperBodyYawLookSpace;                                        // 0x0034(0x0004)
    float                                         PrimaryAimSpringPitch1P;                                      // 0x0038(0x0004)
    float                                         PrimaryAimSpringYaw1P;                                        // 0x003C(0x0004)
    float                                         SecondaryAimSpringPitch1P;                                    // 0x0040(0x0004)
    float                                         SecondaryAimSpringYaw1P;                                      // 0x0044(0x0004)
    FRotator                                      BoneTransformAimRotator;                                      // 0x0048(0x000C)
    float                                         LookAlphaBlend;                                               // 0x0054(0x0004)
    float                                         BlindedPercent;                                               // 0x0058(0x0004)
    float                                         WeaponYawAimingOffset;                                        // 0x005C(0x0004)
    float                                         WeaponPitchAimingOffset;                                      // 0x0060(0x0004)
    float                                         WeaponFiringError;                                            // 0x0064(0x0004)
    float                                         WeaponMovingError;                                            // 0x0068(0x0004)
    float                                         WeaponTotalError;                                             // 0x006C(0x0004)
    float                                         InterpolatedWeaponFiringError;                                // 0x0070(0x0004)
    float                                         InterpolatedWeaponMovingError;                                // 0x0074(0x0004)
    float                                         InterpolatedWeaponTotalError;                                 // 0x0078(0x0004)
    FVector                                       FocusedWeaponOffset;                                          // 0x007C(0x000C)
    FRotator                                      FocusedWeaponRotation;                                        // 0x0088(0x000C)
    float                                         FocusedWeaponAlpha;                                           // 0x0094(0x0004)
    float                                         InaccuracyMultiplier;                                         // 0x0098(0x0004)
    float                                         AnimPunch;                                                    // 0x009C(0x0004)
    float                                         AnimPunchHeight;                                              // 0x00A0(0x0004)
    float                                         AnimPunchRot;                                                 // 0x00A4(0x0004)
    float                                         AnimPunchInterpolant;                                         // 0x00A8(0x0004)
    float                                         AnimLeanPitchAndRollStrength;                                 // 0x00AC(0x0004)
    float                                         AnimLeanYawStrength;                                          // 0x00B0(0x0004)
    float                                         AnimLeanTranslationStrength;                                  // 0x00B4(0x0004)
    float                                         YawMomentumRotation;                                          // 0x00B8(0x0004)
    float                                         PitchMomentumRotation;                                        // 0x00BC(0x0004)
    float                                         DeltaTime;                                                    // 0x00C0(0x0004)
    enum class EAresShooterAnimMovementState      MovementState;                                                // 0x00C4(0x0001)
    char                                          pa_00C5[0x0003]                                               // 0x00C5(0x0003)
    FMovementStateMachineAnimations               MovementStateMachineAnimations1P;                             // 0x00C8(0x0018)
    FMovementStateMachineAnimations               MovementStateMachineAnimationsGun1P;                          // 0x00E0(0x0018)
    FMovementStateMachineAnimations               MovementStateMachineAnimationsCosmeticGun1P;                  // 0x00F8(0x0018)
    bool                                          bHasUpperBodyFall3P;                                          // 0x0110(0x0001)
    bool                                          bHasCrouchUpperBodyFall3P;                                    // 0x0111(0x0001)
    bool                                          bIsJumping;                                                   // 0x0112(0x0001)
    bool                                          bIsZoomed;                                                    // 0x0113(0x0001)
    bool                                          bIsStopping2D;                                                // 0x0114(0x0001)
    bool                                          bIsCounterStrafing;                                           // 0x0115(0x0001)
    bool                                          bLanded;                                                      // 0x0116(0x0001)
    bool                                          bJumped;                                                      // 0x0117(0x0001)
    bool                                          bGlide;                                                       // 0x0118(0x0001)
    bool                                          bIsCrouched;                                                  // 0x0119(0x0001)
    char                                          pa_011A[0x0002]                                               // 0x011A(0x0002)
    float                                         TimeSinceJumpStart;                                           // 0x011C(0x0004)
    bool                                          bJumpLandCanTransition;                                       // 0x0120(0x0001)
    bool                                          bCrouchCanTransition;                                         // 0x0121(0x0001)
    bool                                          bUnCrouchCanTransition;                                       // 0x0122(0x0001)
    bool                                          bIsUsingAltAnims;                                             // 0x0123(0x0001)
    bool                                          bIsInIdleState;                                               // 0x0124(0x0001)
    bool                                          bIsOnRope;                                                    // 0x0125(0x0001)
    bool                                          bIsTurningLeft;                                               // 0x0126(0x0001)
    bool                                          bIsTurningRight;                                              // 0x0127(0x0001)
    bool                                          bStandingStill;                                               // 0x0128(0x0001)
    bool                                          bStill;                                                       // 0x0129(0x0001)
    bool                                          bPlayingDeathReaction;                                        // 0x012A(0x0001)
    bool                                          bIsDeathReactionFaceUp;                                       // 0x012B(0x0001)
    bool                                          bCanInterruptDeathReaction;                                   // 0x012C(0x0001)
    bool                                          bIsAlive;                                                     // 0x012D(0x0001)
    bool                                          bHasEquippable;                                               // 0x012E(0x0001)
    bool                                          bIsFiring;                                                    // 0x012F(0x0001)
    bool                                          bJustFired;                                                   // 0x0130(0x0001)
    bool                                          bIsMeleeAttacking;                                            // 0x0131(0x0001)
    char                                          pa_0132[0x0002]                                               // 0x0132(0x0002)
    float                                         BlindAmount;                                                  // 0x0134(0x0004)
    bool                                          bCanFidget;                                                   // 0x0138(0x0001)
    char                                          pa_0139[0x0003]                                               // 0x0139(0x0003)
    float                                         MovementAdditiveAlpha;                                        // 0x013C(0x0004)
    float                                         AnimDynamicsAlpha;                                            // 0x0140(0x0004)
    float                                         AimOffsetAlpha;                                               // 0x0144(0x0004)
    float                                         LowerBodyAimOffsetAlpha;                                      // 0x0148(0x0004)
    float                                         BoneTransformAimAlpha;                                        // 0x014C(0x0004)
    float                                         BoneTransformAimConstraintAlpha;                              // 0x0150(0x0004)
    float                                         FaceLayerAlpha;                                               // 0x0154(0x0004)
    bool                                          bTriggerFaceFidget;                                           // 0x0158(0x0001)
    char                                          pa_0159[0x0003]                                               // 0x0159(0x0003)
    float                                         RigidBodyAlpha;                                               // 0x015C(0x0004)
    float                                         ClothAlpha;                                                   // 0x0160(0x0004)
    float                                         LeftHandIKAlpha;                                              // 0x0164(0x0004)
    float                                         RightHandIKAlpha;                                             // 0x0168(0x0004)
    FVector                                       LeftHandIKLocation;                                           // 0x016C(0x000C)
    bool                                          bUseLeftHandIKLocation;                                       // 0x0178(0x0001)
    bool                                          FootIKEnabled;                                                // 0x0179(0x0001)
    char                                          pa_017A[0x0002]                                               // 0x017A(0x0002)
    FRotator                                      FootIKBoneRot;                                                // 0x017C(0x000C)
    FVector                                       FootIKBoneScale;                                              // 0x0188(0x000C)
    FVector                                       FootIKActorDownTranslation;                                   // 0x0194(0x000C)
    float                                         FootIKAlpha;                                                  // 0x01A0(0x0004)
    float                                         UpperBody3PAnimSlotBlendTime;                                 // 0x01A4(0x0004)
    float                                         LowerBody3PAnimSlotBlendTime;                                 // 0x01A8(0x0004)
    float                                         AnimSlotBlendTime1P;                                          // 0x01AC(0x0004)
    float                                         AimOffsetBlendTime3P;                                         // 0x01B0(0x0004)
    float                                         LowerBodyMontageWeight;                                       // 0x01B4(0x0004)
    float                                         CrouchLowerBodyMontageAlpha;                                  // 0x01B8(0x0004)
    FVector                                       CrouchSplitterTranslation;                                    // 0x01BC(0x000C)
    float                                         SpineBlendWeight;                                             // 0x01C8(0x0004)
    float                                         ReapplyHandPoseBlendWeight;                                   // 0x01CC(0x0004)
    float                                         HitReactionDamageNorthSouthBlendSpaceAlpha;                   // 0x01D0(0x0004)
    float                                         HitReactionDamageEastWestBlendSpaceAlpha;                     // 0x01D4(0x0004)
    bool                                          bHitReactionTriggered;                                        // 0x01D8(0x0001)
    bool                                          bHitReactionTriggeredThisFrame;                               // 0x01D9(0x0001)
    char                                          pa_01DA[0x0002]                                               // 0x01DA(0x0002)
    float                                         CrouchUnits;                                                  // 0x01DC(0x0004)
    float                                         CrouchAmount;                                                 // 0x01E0(0x0004)
    bool                                          bIsLeftHanded;                                                // 0x01E4(0x0001)
    char                                          pa_01E5[0x0003]                                               // 0x01E5(0x0003)
};


// ScriptStruct  ShooterGame.MovementStateMachineAnimations
// Struct Size::0x0018
struct FMovementStateMachineAnimations
{
    bool                                          IsValid;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       CurrentSlot;                                                  // 0x0004(0x0004)
    TArray<FMovementStateMachineAnimationSlot>    Slots;                                                        // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.MovementStateMachineAnimationSlot
// Struct Size::0x0018
struct FMovementStateMachineAnimationSlot
{
    FAnimSequence*                                Asset;                                                        // 0x0000(0x0008)
    float                                         PlayRate;                                                     // 0x0008(0x0004)
    float                                         StartTime;                                                    // 0x000C(0x0004)
    bool                                          bLoop;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.AresAnimDynamicState
// Struct Size::0x0001
struct FAresAnimDynamicState
{
    bool                                          bAnimDynamicEnabled;                                          // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.AnimMovementStateTransition
// Struct Size::0x0018
struct FAnimMovementStateTransition
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  ShooterGame.AnimPunchTuning
// Struct Size::0x0010
struct FAnimPunchTuning
{
    float                                         Punch;                                                        // 0x0000(0x0004)
    float                                         Height;                                                       // 0x0004(0x0004)
    float                                         Rotation;                                                     // 0x0008(0x0004)
    float                                         ADSPunch;                                                     // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.NotifyTriggerType
// Struct Size::0x0020
struct FNotifyTriggerType
{
    FScriptStateComponent*                        StateToTransitionTo;                                          // 0x0000(0x0008)
    TArray<float>                                 NotifyTimes;                                                  // 0x0008(0x0010)
    bool                                          bReturningState;                                              // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ShooterGame.HopeAntiAddictionPolicy
// Struct Size::0x0028
struct FHopeAntiAddictionPolicy
{
    enum class EPolicyType                        PolicyTypeEnum;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       PolicyType;                                                   // 0x0008(0x0010)
    FString                                       HopeMessage;                                                  // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.AntiAddictionState
// Struct Size::0x00E0
struct FAntiAddictionState
{
    enum class EPolicyType                        PolicyTypeEnum;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       PolicyType;                                                   // 0x0008(0x0010)
    enum class EDisplayType                       DisplayTypeEnum;                                              // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FString                                       DisplayType;                                                  // 0x0020(0x0010)
    FString                                       LocalizationKey;                                              // 0x0030(0x0010)
    TMap<FString,FString>                         LocalizationContext;                                          // 0x0040(0x0050)
    TMap<FString,FString>                         HopePayload;                                                  // 0x0090(0x0050)
};


// ScriptStruct  ShooterGame.DeferredTagChangedEntry
// Struct Size::0x0020
struct FDeferredTagChangedEntry
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  ShooterGame.TagImmunityChangeDelegateList
// Struct Size::0x0018
struct FTagImmunityChangeDelegateList
{
    TArray<FDelegate>                             Delegates;                                                    // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.TagValueChangeDelegateList
// Struct Size::0x0018
struct FTagValueChangeDelegateList
{
    TArray<FDelegate>                             Delegates;                                                    // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.AttributeValueChangeDelegateList
// Struct Size::0x0018
struct FAttributeValueChangeDelegateList
{
    TArray<FDelegate>                             Delegates;                                                    // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.AimToolingTelemetryEvent
// Struct Size::0x0098
struct FAimToolingTelemetryEvent
{
    FString                                       MatchId;                                                      // 0x0000(0x0010)
    int32_t                                       RoundNumber;                                                  // 0x0010(0x0004)
    float                                         RoundTime;                                                    // 0x0014(0x0004)
    FString                                       Subject;                                                      // 0x0018(0x0010)
    FAimToolingTelemetryData                      AimToolingData;                                               // 0x0028(0x0070)
};


// ScriptStruct  InputTooling.AimToolingTelemetryData
// Struct Size::0x0070
struct FAimToolingTelemetryData
{
    FVector2D                                     StrafeAssist;                                                 // 0x0000(0x0008)
    FVector2D                                     TargetFriction;                                               // 0x0008(0x0008)
    FVector2D                                     PullToCenter;                                                 // 0x0010(0x0008)
    FVector2D                                     FrameOfReference;                                             // 0x0018(0x0008)
    FVector2D                                     Deceleration;                                                 // 0x0020(0x0008)
    FVector2D                                     Guardrails;                                                   // 0x0028(0x0008)
    FVector2D                                     LookInputVector;                                              // 0x0030(0x0008)
    FVector2D                                     MovementInputVector;                                          // 0x0038(0x0008)
    FVector2D                                     FinalLookInputDelta;                                          // 0x0040(0x0008)
    int32_t                                       ActiveAimToolingFeatures;                                     // 0x0048(0x0004)
    float                                         DistanceToTarget;                                             // 0x004C(0x0004)
    FString                                       WeaponTuningTag;                                              // 0x0050(0x0010)
    FString                                       Target;                                                       // 0x0060(0x0010)
};


// ScriptStruct  ShooterGame.AimAccelerationSensitivityModifiers
// Struct Size::0x0010
struct FAimAccelerationSensitivityModifiers
{
    float                                         AimAccelerationXScale;                                        // 0x0000(0x0004)
    float                                         AimAccelerationYScale;                                        // 0x0004(0x0004)
    float                                         AimAccelerationModifierRampUpTimeScale;                       // 0x0008(0x0004)
    float                                         AimAccelerationModifierRampUpDelayScale;                      // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.GameplayBooleanAttributeData
// Struct Size::0x0010
struct FGameplayBooleanAttributeData : public FGameplayAttributeData
{
};


// ScriptStruct  ShooterGame.AudioComponentPool
// Struct Size::0x0018
struct FAudioComponentPool
{
    int32_t                                       MaxSize;                                                      // 0x0000(0x0004)
    int32_t                                       CurrentStart;                                                 // 0x0004(0x0004)
    TArray<FAresAudioComponent*>                  AudioComponents;                                              // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.AresDebugLinePersistent
// Struct Size::0x0030
struct FAresDebugLinePersistent
{
    int32_t                                       Id;                                                           // 0x0000(0x0004)
    float                                         TimeLastUpdated;                                              // 0x0004(0x0004)
    float                                         LifeTime;                                                     // 0x0008(0x0004)
    FVector                                       LineStart;                                                    // 0x000C(0x000C)
    FVector                                       LineEnd;                                                      // 0x0018(0x000C)
    FColor                                        Color;                                                        // 0x0024(0x0004)
    char                                          DepthPriority;                                                // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         Thickness;                                                    // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.AresDebugSpherePersistent
// Struct Size::0x0028
struct FAresDebugSpherePersistent
{
    int32_t                                       Id;                                                           // 0x0000(0x0004)
    float                                         TimeLastUpdated;                                              // 0x0004(0x0004)
    float                                         LifeTime;                                                     // 0x0008(0x0004)
    FVector                                       Center;                                                       // 0x000C(0x000C)
    float                                         Radius;                                                       // 0x0018(0x0004)
    int32_t                                       Segments;                                                     // 0x001C(0x0004)
    FColor                                        Color;                                                        // 0x0020(0x0004)
    char                                          DepthPriority;                                                // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  ShooterGame.AresCeremonyDecisionContext
// Struct Size::0x00C8
struct FAresCeremonyDecisionContext
{
    TArray<FAresCeremonyTriggerEvent>             CeremonyTriggerEvents;                                        // 0x0000(0x0010)
    FBaseTeamComponent*                           WinningTeam;                                                  // 0x0010(0x0008)
    enum class EAresRoundOutcome                  RoundOutcome;                                                 // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    TMap<int32_t,FShooterPlayerState*>            AttackingTeamPlayerStates;                                    // 0x0020(0x0050)
    TMap<int32_t,FShooterPlayerState*>            DefendingTeamPlayerStates;                                    // 0x0070(0x0050)
    int32_t                                       AttackingTeamAverageInventory;                                // 0x00C0(0x0004)
    int32_t                                       DefendingTeamAverageInventory;                                // 0x00C4(0x0004)
};


// ScriptStruct  ShooterGame.AresCeremonyTriggerEvent
// Struct Size::0x0038
struct FAresCeremonyTriggerEvent
{
    enum class EAresCeremonyTriggerType           TriggerType;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FAresCeremonyKillEvent                        KillEvent;                                                    // 0x0008(0x0020)
    FAresCeremonyRespawnEvent                     RespawnEvent;                                                 // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.AresCeremonyRespawnEvent
// Struct Size::0x0010
struct FAresCeremonyRespawnEvent
{
    FOwnerExclusivePlayerInfo*                    RespawnedPlayerInfo;                                          // 0x0000(0x0008)
    float                                         TimeLeftInRound;                                              // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.AresCeremonyKillEvent
// Struct Size::0x0020
struct FAresCeremonyKillEvent
{
    FOwnerExclusivePlayerInfo*                    VictimPlayerInfo;                                             // 0x0000(0x0008)
    FDamageResponse*                              Response;                                                     // 0x0008(0x0008)
    FOwnerExclusivePlayerInfo*                    KillerPlayerInfo;                                             // 0x0010(0x0008)
    float                                         TimeLeftInRound;                                              // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.StaticMeshMaterialList
// Struct Size::0x0010
struct FStaticMeshMaterialList
{
    TArray<FMaterialInterface*>                   MaterialList;                                                 // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.AllInitSystems
// Struct Size::0x0490
struct FAllInitSystems
{
    FTelemetryManager*                            TelemetryManagerInstance;                                     // 0x0000(0x0008)
    FTelemetrySampler*                            TelemetrySamplerInstance;                                     // 0x0008(0x0008)
    FPlatformInitSettingsManager*                 PlatformInitSettingsManager;                                  // 0x0010(0x0008)
    FRiotProductManager*                          RiotProductManager;                                           // 0x0018(0x0008)
    FFRELoginManager*                             FRELoginManager;                                              // 0x0020(0x0008)
    FAresHotfixManager*                           AresHotfixManager;                                            // 0x0028(0x0008)
    FRiotGamesApiClient*                          RiotGamesApiClient;                                           // 0x0030(0x0008)
    FContentIndexManager*                         ContentIndexManager;                                          // 0x0038(0x0008)
    FInventoryInitManager*                        InventoryInitManager;                                         // 0x0040(0x0008)
    FAntiAddictionManager*                        AntiAddictionManager;                                         // 0x0048(0x0008)
    FAntiAddictionSessionManager*                 AntiAddictionSessionManager;                                  // 0x0050(0x0008)
    FCNAntiAddictionManager*                      CNAntiAddictionManager;                                       // 0x0058(0x0008)
    FRNetVoiceManager*                            VoiceManager;                                                 // 0x0060(0x0008)
    FChatFriendsMetadataManager*                  ChatFriendsMetadataManager;                                   // 0x0068(0x0008)
    FPresenceManager*                             PresenceManager;                                              // 0x0070(0x0008)
    FPresenceUpdater*                             PresenceUpdater;                                              // 0x0078(0x0008)
    FTextChatManagerV2*                           TextChatManagerV2;                                            // 0x0080(0x0008)
    FMutedPatternsManager*                        MutedPatternsManager;                                         // 0x0088(0x0008)
    FThreadedChatManager*                         ThreadedChatManager;                                          // 0x0090(0x0008)
    FFriendsManager*                              FriendsManager;                                               // 0x0098(0x0008)
    FDisplayNameManager*                          DisplayNameManager;                                           // 0x00A0(0x0008)
    FAresSettingsManager*                         AresSettingsManager;                                          // 0x00A8(0x0008)
    FRoamingSettingsManager*                      RoamingSettingsManager;                                       // 0x00B0(0x0008)
    FCustomGameManager*                           CustomGameManager;                                            // 0x00B8(0x0008)
    FCoreGameManager*                             CoreGameManager;                                              // 0x00C0(0x0008)
    FVoiceRoomManager*                            VoiceRoomManager;                                             // 0x00C8(0x0008)
    FMatchDetailsManager*                         MatchDetailsManager;                                          // 0x00D0(0x0008)
    FMMRManager*                                  MMRManager;                                                   // 0x00D8(0x0008)
    FContentManager*                              ContentManager;                                               // 0x00E0(0x0008)
    FGameFlowStateManager*                        GameFlowStateManager;                                         // 0x00E8(0x0008)
    FGameFlowPredictionManager*                   GameFlowPredictionManager;                                    // 0x00F0(0x0008)
    FServiceTickerManager*                        ServiceTickerManager;                                         // 0x00F8(0x0008)
    FMatchHistoryManager*                         MatchHistoryManager;                                          // 0x0100(0x0008)
    FMatchHistoryViewController*                  MatchHistoryViewController;                                   // 0x0108(0x0008)
    FTravelManager*                               TravelManager;                                                // 0x0110(0x0008)
    FPreloadManager*                              PreloadManager;                                               // 0x0118(0x0008)
    FPlayerFeedbackToolPluginManager*             PlayerFeedbackToolPluginManager;                              // 0x0120(0x0008)
    FPartyModel*                                  PartyModel;                                                   // 0x0128(0x0008)
    FPlatformPlayerManager*                       PlatformPlayerManager;                                        // 0x0130(0x0008)
    FPartyViewController*                         PartyViewController;                                          // 0x0138(0x0008)
    FSocialViewControllerV3*                      SocialViewController;                                         // 0x0140(0x0008)
    FAresSocialExperienceModel*                   SocialExperienceModel;                                        // 0x0148(0x0008)
    FPatchNotesManager*                           PatchNotesManager;                                            // 0x0150(0x0008)
    FAresWatermarkManager*                        WatermarkManager;                                             // 0x0158(0x0008)
    FInventoryManager*                            InventoryManager;                                             // 0x0160(0x0008)
    FPlayerListingManager*                        PlayerListingManager;                                         // 0x0168(0x0008)
    FPartyListingManager*                         PartyListingManager;                                          // 0x0170(0x0008)
    FWhisperChatManager*                          WhisperChatManager;                                           // 0x0178(0x0008)
    FNotificationManager*                         NotificationManager;                                          // 0x0180(0x0008)
    FDebugNotificationEmitter*                    DebugNotificationEmitter;                                     // 0x0188(0x0008)
    FPartyNotificationManager*                    PartyNotificationManager;                                     // 0x0190(0x0008)
    FFriendNotificationManager*                   FriendNotificationManager;                                    // 0x0198(0x0008)
    FPlayerReportNotificationManager*             PlayerReportNotificationManager;                              // 0x01A0(0x0008)
    FVoiceModel*                                  VoiceModel;                                                   // 0x01A8(0x0008)
    FVoicePreferencesManager*                     VoicePreferencesManager;                                      // 0x01B0(0x0008)
    FVoiceViewController*                         VoiceViewController;                                          // 0x01B8(0x0008)
    FMatchmakingManager*                          MatchmakingManager;                                           // 0x01C0(0x0008)
    FPregameManager*                              PregameManager;                                               // 0x01C8(0x0008)
    FContractsManager*                            ContractsManager;                                             // 0x01D0(0x0008)
    FBTEManager*                                  BTEManager;                                                   // 0x01D8(0x0008)
    FContractDefinitionsManager*                  ContractDefinitionsManager;                                   // 0x01E0(0x0008)
    FContractsViewController*                     ContractsViewController;                                      // 0x01E8(0x0008)
    FCrosshairManager*                            CrosshairManager;                                             // 0x01F0(0x0008)
    FRewardGrantModelFactory*                     RewardGrantModelFactory;                                      // 0x01F8(0x0008)
    FVanguardManager*                             VanguardManager;                                              // 0x0200(0x0008)
    FACEManager*                                  ACEManager;                                                   // 0x0208(0x0008)
    FDropInLoadingManager*                        DropInLoadingManager;                                         // 0x0210(0x0008)
    FChatSessionManager*                          ChatSessionManager;                                           // 0x0218(0x0008)
    FPurchaseManager*                             PurchaseManager;                                              // 0x0220(0x0008)
    FPlatformOffersManager*                       PlatformOffersManager;                                        // 0x0228(0x0008)
    FStoreManager*                                StoreManager;                                                 // 0x0230(0x0008)
    FStoreUITelemetryManager*                     StoreUITelemetryManager;                                      // 0x0238(0x0008)
    FStoreViewControllerV2*                       StoreViewController;                                          // 0x0240(0x0008)
    FPlayerFeedbackToolViewController*            PlayerFeedbackToolViewController;                             // 0x0248(0x0008)
    FAresClientEvents*                            AresClientEvents;                                             // 0x0250(0x0008)
    FCompetitiveTierUpdater*                      CompetitiveTierUpdater;                                       // 0x0258(0x0008)
    FPlayerIdentityUpdater*                       PlayerIdentityUpdater;                                        // 0x0260(0x0008)
    FProvisioningErrorNotificationManager*        ProvisioningErrorNotificationManager;                         // 0x0268(0x0008)
    FLegalInfoManager*                            LegalInfoManager;                                             // 0x0270(0x0008)
    FMapLoadModel*                                MapLoadModel;                                                 // 0x0278(0x0008)
    FMenuStackManager*                            MenuStackManager;                                             // 0x0280(0x0008)
    FUINavigationManager*                         UINavigationManager;                                          // 0x0288(0x0008)
    FModalManager*                                ModalManager;                                                 // 0x0290(0x0008)
    FFlyoutManager*                               FlyoutManager;                                                // 0x0298(0x0008)
    FPlayerAliasManager*                          PlayerAliasManager;                                           // 0x02A0(0x0008)
    FPaymentsManager*                             PaymentsManager;                                              // 0x02A8(0x0008)
    FPingManager*                                 PingManager;                                                  // 0x02B0(0x0008)
    FOnlineIdentityManager*                       OnlineIdentityManager;                                        // 0x02B8(0x0008)
    FPlayerSettingsTelemetry*                     PlayerSettingsTelemetry;                                      // 0x02C0(0x0008)
    FUITelemetryManager*                          UITelemetryManager;                                           // 0x02C8(0x0008)
    FActionTraitsManager*                         ActionTraitsManager;                                          // 0x02D0(0x0008)
    FActionBindingsManager*                       ActionBindingsManager;                                        // 0x02D8(0x0008)
    FPlayerFacingPerfManager*                     PlayerFacingPerfManager;                                      // 0x02E0(0x0008)
    FApplicationRepairManager*                    ApplicationRepairManager;                                     // 0x02E8(0x0008)
    FArsenalViewController*                       ArsenalViewController;                                        // 0x02F0(0x0008)
    FPlayerAffinityManager*                       PlayerAffinityManager;                                        // 0x02F8(0x0008)
    FPatchAvailabilityManager*                    PatchAvailabilityManager;                                     // 0x0300(0x0008)
    FPatchManager*                                PatchManager;                                                 // 0x0308(0x0008)
    FRiotClientConfigManager*                     RiotClientConfigManager;                                      // 0x0310(0x0008)
    FNPELoader*                                   NPELoader;                                                    // 0x0318(0x0008)
    FTransitionModelManager*                      TransitionModelManager;                                       // 0x0320(0x0008)
    FTutorialManager*                             TutorialManager;                                              // 0x0328(0x0008)
    FLoginQueueManager*                           LoginQueueManager;                                            // 0x0330(0x0008)
    FRiotClientHeartbeatManager*                  RiotClientHeartbeatManager;                                   // 0x0338(0x0008)
    FLocalePreferenceManager*                     LocalePreferenceManager;                                      // 0x0340(0x0008)
    FVNGManager*                                  VNGManager;                                                   // 0x0348(0x0008)
    FMassRewardsManager*                          MassRewardsManager;                                           // 0x0350(0x0008)
    FPlayerLoginLocationHistoryManager*           PlayerLoginLocationHistoryManager;                            // 0x0358(0x0008)
    FRestrictionsManager*                         RestrictionsManager;                                          // 0x0360(0x0008)
    FAccountXPManager*                            AccountXPManager;                                             // 0x0368(0x0008)
    FReporterFeedbackManager*                     ReporterFeedbackManager;                                      // 0x0370(0x0008)
    FRiotWarningManager*                          RiotWarningManager;                                           // 0x0378(0x0008)
    FRosterManager*                               RosterManager;                                                // 0x0380(0x0008)
    FTournamentsManager*                          TournamentsManager;                                           // 0x0388(0x0008)
    FPremierManager*                              PremierManager;                                               // 0x0390(0x0008)
    FPremierRosterManager*                        PremierRosterManager;                                         // 0x0398(0x0008)
    FPremierRosterViewController*                 PremierRosterViewController;                                  // 0x03A0(0x0008)
    FLeaderboardManager*                          LeaderboardManager;                                           // 0x03A8(0x0008)
    FLeaderboardViewController*                   LeaderboardViewController;                                    // 0x03B0(0x0008)
    FMainMenuTelemetryManager*                    MainMenuTelemetryManager;                                     // 0x03B8(0x0008)
    FHovercardCacheManager*                       HovercardCacheManager;                                        // 0x03C0(0x0008)
    FEULAManager*                                 EULAManager;                                                  // 0x03C8(0x0008)
    FAVSManager*                                  AVSManager;                                                   // 0x03D0(0x0008)
    FDailyRewardsManager*                         DailyRewardsManager;                                          // 0x03D8(0x0008)
    FJuiceScreenViewController*                   JuiceScreenViewController;                                    // 0x03E0(0x0008)
    FFavoritesManager*                            FavoritesManager;                                             // 0x03E8(0x0008)
    FContentFilterViewController*                 ContentFilterViewController;                                  // 0x03F0(0x0008)
    FContentFilterUITelemetryManager*             ContentFilterUITelemetryManager;                              // 0x03F8(0x0008)
    FUserInfoNotificationManager*                 UserInfoNotificationManager;                                  // 0x0400(0x0008)
    FClientTelemetryPersistence*                  TelemetryPersistence;                                         // 0x0408(0x0008)
    FLatencyService*                              LatencyService;                                               // 0x0410(0x0008)
    FPlatformEnvironmentManager*                  PlatformEnvironmentManager;                                   // 0x0418(0x0008)
    FConfigManager*                               ConfigManager;                                                // 0x0420(0x0008)
    FRSOManager*                                  RSOManager;                                                   // 0x0428(0x0008)
    FPlatformSessionManager*                      SessionManager;                                               // 0x0430(0x0008)
    FRMSManager*                                  RMSManager;                                                   // 0x0438(0x0008)
    FPersonalizationManagerV2*                    PersonalizationManagerV2;                                     // 0x0440(0x0008)
    FPartyManager*                                PartyManager;                                                 // 0x0448(0x0008)
    FPlayerReportManager*                         PlayerReportManager;                                          // 0x0450(0x0008)
    FGlobalAudioManager*                          GlobalAudioManager;                                           // 0x0458(0x0008)
    FEsportsManager*                              EsportsManager;                                               // 0x0460(0x0008)
    FEsportsTelemetryManager*                     EsportsTelemetryManager;                                      // 0x0468(0x0008)
    FReplayCatalogManager*                        ReplayManager;                                                // 0x0470(0x0008)
    FAresRGIFriendsClient*                        RGIFriendsClient;                                             // 0x0478(0x0008)
    FMainMenuParentWidget*                        MainMenuParent;                                               // 0x0480(0x0008)
    FNativePlatformAuthManager*                   NativePlatformAuthManager;                                    // 0x0488(0x0008)
};


// ScriptStruct  ShooterGame.ConnectToServerDetails
// Struct Size::0x0058
struct FConnectToServerDetails
{
    FString                                       Host;                                                         // 0x0000(0x0010)
    int32_t                                       Port;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       DisplayName;                                                  // 0x0018(0x0010)
    FString                                       Subject;                                                      // 0x0028(0x0010)
    FString                                       Team;                                                         // 0x0038(0x0010)
    FString                                       Map;                                                          // 0x0048(0x0010)
};


// ScriptStruct  ShooterGame.ButtonMaterialAnimations
// Struct Size::0x0010
struct FButtonMaterialAnimations
{
    TArray<FButtonMaterialAnimationInfo>          AnimationInfos;                                               // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ButtonMaterialAnimationInfo
// Struct Size::0x0038
struct FButtonMaterialAnimationInfo
{
    float                                         AnimationLength;                                              // 0x0000(0x0004)
    FName                                         MaterialParameter;                                            // 0x0004(0x000C)
    FCurveFloat*                                  AnimationCurve;                                               // 0x0010(0x0008)
    FName                                         MaterialName;                                                 // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FMaterialInstanceDynamic*                     MaterialInstance;                                             // 0x0028(0x0008)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  ShooterGame.HeldProgressMaterialPair
// Struct Size::0x0018
struct FHeldProgressMaterialPair
{
    FMaterialInstanceDynamic*                     ProgressMaterial;                                             // 0x0000(0x0008)
    FName                                         ProgressParameter;                                            // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.AresCommonConditionalInputAction
// Struct Size::0x0038
struct FAresCommonConditionalInputAction
{
    FText                                         OverrideConditionalActionDisplayName;                         // 0x0000(0x0018)
    FDataTableRowHandle                           InputAction;                                                  // 0x0018(0x0018)
    enum class EAresCommonInputCondition          InputCondition;                                               // 0x0030(0x0001)
    bool                                          bShouldOverrideInputActionIcon;                               // 0x0031(0x0001)
    bool                                          bConditionActive;                                             // 0x0032(0x0001)
    char                                          pa_0033[0x0005]                                               // 0x0033(0x0005)
};


// ScriptStruct  ShooterGame.AresActionBindingHandle
// Struct Size::0x0004
struct FAresActionBindingHandle
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
};


// ScriptStruct  ShooterGame.OverridableTextProperties
// Struct Size::0x0008
struct FOverridableTextProperties
{
    int32_t                                       Size;                                                         // 0x0000(0x0004)
    int32_t                                       Tracking;                                                     // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.AresPaginatedListViewConfig
// Struct Size::0x0018
struct FAresPaginatedListViewConfig
{
    FUserWidget*                                  EntryWidgetClass;                                             // 0x0000(0x0008)
    int32_t                                       EntriesPerPage;                                               // 0x0008(0x0004)
    bool                                          bDirectionalNavigationInPages;                                // 0x000C(0x0001)
    bool                                          bPageTabbingLoops;                                            // 0x000D(0x0001)
    bool                                          bRightClickScrolling;                                         // 0x000E(0x0001)
    bool                                          bNavigationIsSelection;                                       // 0x000F(0x0001)
    bool                                          bWrapHorizontalNavigation;                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.AresContextMenuItemDefinition
// Struct Size::0x0010
struct FAresContextMenuItemDefinition
{
    FAresContextMenuItemViewModel*                ViewModelClass;                                               // 0x0000(0x0008)
    FAresContextMenuItemWidget*                   ViewClass;                                                    // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.ContextMenuItemDelegateHandles
// Struct Size::0x0020
struct FContextMenuItemDelegateHandles
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  ShooterGame.CrosshairPresetEntry
// Struct Size::0x0048
struct FCrosshairPresetEntry
{
    FString                                       ShareableCrosshairString;                                     // 0x0000(0x0010)
    FText                                         PresetName;                                                   // 0x0010(0x0018)
    FGameplayTagContainer                         CrosshairFilters;                                             // 0x0028(0x0020)
};


// ScriptStruct  Engine.PointDamageEvent
// Struct Size::0x00B0
struct FPointDamageEvent : public FDamageEvent
{
    float                                         Damage;                                                       // 0x0010(0x0004)
    FVector                                       ShotDirection;                                                // 0x0014(0x000C)
    FHitResult                                    HitInfo;                                                      // 0x0020(0x0090)
};


// ScriptStruct  ShooterGame.AresPointDamageEvent
// Struct Size::0x00C0
struct FAresPointDamageEvent : public FPointDamageEvent
{
    enum class EAresRegionalDamage                RegionalDamage;                                               // 0x00B0(0x0001)
    char                                          pa_00B1[0x0003]                                               // 0x00B1(0x0003)
    float                                         DamageFalloff;                                                // 0x00B4(0x0004)
    bool                                          bDamageThroughWall;                                           // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
};


// ScriptStruct  ShooterGame.AresDamageInstance
// Struct Size::0x0020
struct FAresDamageInstance
{
    bool                                          bIsDamagedActorTargetsCharacter;                              // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FDamageResponse*                              DamageResponse;                                               // 0x0008(0x0008)
    FShooterPlayerState*                          InstigatorInfo;                                               // 0x0010(0x0008)
    FShooterPlayerState*                          TargetInfo;                                                   // 0x0018(0x0008)
};


// ScriptStruct  ShooterGame.DeveloperCommand
// Struct Size::0x0020
struct FDeveloperCommand
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  ShooterGame.AresDoorStatus
// Struct Size::0x0002
struct FAresDoorStatus
{
    enum class EAresDoorState                     DoorState;                                                    // 0x0000(0x0001)
    enum class EAresDoorTransition                Transition;                                                   // 0x0001(0x0001)
};


// ScriptStruct  ShooterGame.DPIScalingParameters
// Struct Size::0x000C
struct FDPIScalingParameters
{
    FIntPoint                                     ScreenResolution;                                             // 0x0000(0x0008)
    int32_t                                       ScreenDensity;                                                // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.EditControlsWidgetList
// Struct Size::0x0010
struct FEditControlsWidgetList
{
    TArray<FUserWidget*>                          WidgetList;                                                   // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.EquippableAimToolingModifiers
// Struct Size::0x0048
struct FEquippableAimToolingModifiers
{
    float                                         BendingEfficacyScale;                                         // 0x0000(0x0004)
    float                                         PullToCenterEfficacyScale;                                    // 0x0004(0x0004)
    FString                                       TuningTagHipfire;                                             // 0x0008(0x0010)
    FString                                       TuningTagHipfireCloseRange;                                   // 0x0018(0x0010)
    FString                                       TuningTagFocus;                                               // 0x0028(0x0010)
    FString                                       TuningTagADS;                                                 // 0x0038(0x0010)
};


// ScriptStruct  ShooterGame.AsyncLoadedEquippableGunAnim
// Struct Size::0x0048
struct FAsyncLoadedEquippableGunAnim
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    FAnimationAsset*                              LoadedDefaultAsset;                                           // 0x0010(0x0008)
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
    FAnimationAsset*                              LoadedCosmeticAsset;                                          // 0x0028(0x0008)
    char                                          pa_0030[0x0010]                                               // 0x0030(0x0010)
    FAnimationAsset*                              LoadedCosmeticAltModeAsset;                                   // 0x0040(0x0008)
};


// ScriptStruct  ShooterGame.AsyncLoadedEquippableCharacterAnim
// Struct Size::0x0030
struct FAsyncLoadedEquippableCharacterAnim
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    FAnimationAsset*                              LoadedAltModeAsset;                                           // 0x0010(0x0008)
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
    FAnimationAsset*                              LoadedDefaultAsset;                                           // 0x0028(0x0008)
};


// ScriptStruct  ShooterGame.PurchasableOverrideTableRow
// Struct Size::0x0040
struct FPurchasableOverrideTableRow : public FTableRowBase
{
    FAresPurchasable*                             OriginalPurchasable;                                          // 0x0008(0x0008)
    TSoftClassPtr<UObject>                        OverridePurchasable;                                          // 0x0010(0x0030)
};


// ScriptStruct  ShooterGame.FireButtonWeaponCustomizationSettingData
// Struct Size::0x00E8
struct FFireButtonWeaponCustomizationSettingData
{
    TSoftClassPtr<UObject>                        EquippableUIData;                                             // 0x0000(0x0030)
    FString                                       WeaponName;                                                   // 0x0030(0x0010)
    enum class EEquippableCategory                WeaponCategory;                                               // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    FSlateBrush                                   WeaponImage;                                                  // 0x0048(0x0090)
    TArray<enum class EWidgetLayoutSettingName>   ValidLayoutSettings;                                          // 0x00D8(0x0010)
};


// ScriptStruct  ShooterGame.AresSystemTelemetryMetrics
// Struct Size::0x05A0
struct FAresSystemTelemetryMetrics
{
    FMetric                                       AI;                                                           // 0x0000(0x0014)
    FMetric                                       AI;                                                           // 0x0014(0x0014)
    FMetric                                       AI;                                                           // 0x0028(0x0014)
    FMetric                                       AI;                                                           // 0x003C(0x0014)
    FMetric                                       AI;                                                           // 0x0050(0x0014)
    FMetric                                       AI;                                                           // 0x0064(0x0014)
    FMetric                                       AI;                                                           // 0x0078(0x0014)
    FMetric                                       Animation;                                                    // 0x008C(0x0014)
    FMetric                                       Animation;                                                    // 0x00A0(0x0014)
    FMetric                                       Animation;                                                    // 0x00B4(0x0014)
    FMetric                                       Animation;                                                    // 0x00C8(0x0014)
    FMetric                                       Animation;                                                    // 0x00DC(0x0014)
    FMetric                                       Animation;                                                    // 0x00F0(0x0014)
    FMetric                                       Character;                                                    // 0x0104(0x0014)
    FMetric                                       Character;                                                    // 0x0118(0x0014)
    FMetric                                       Character;                                                    // 0x012C(0x0014)
    FMetric                                       Character;                                                    // 0x0140(0x0014)
    FMetric                                       Character;                                                    // 0x0154(0x0014)
    FMetric                                       Equippable;                                                   // 0x0168(0x0014)
    FMetric                                       Equippable;                                                   // 0x017C(0x0014)
    FMetric                                       Esports;                                                      // 0x0190(0x0014)
    FMetric                                       Esports;                                                      // 0x01A4(0x0014)
    FMetric                                       FogOfWar;                                                     // 0x01B8(0x0014)
    FMetric                                       FogOfWar;                                                     // 0x01CC(0x0014)
    FMetric                                       FogOfWar;                                                     // 0x01E0(0x0014)
    FMetric                                       FogOfWar;                                                     // 0x01F4(0x0014)
    FMetric                                       FogOfWar;                                                     // 0x0208(0x0014)
    FMetric                                       Gameplay;                                                     // 0x021C(0x0014)
    FMetric                                       Gameplay;                                                     // 0x0230(0x0014)
    FMetric                                       Gameplay;                                                     // 0x0244(0x0014)
    FMetric                                       Gameplay;                                                     // 0x0258(0x0014)
    FMetric                                       Gameplay;                                                     // 0x026C(0x0014)
    FMetric                                       Gameplay;                                                     // 0x0280(0x0014)
    FMetric                                       Gameplay;                                                     // 0x0294(0x0014)
    FMetric                                       Gameplay;                                                     // 0x02A8(0x0014)
    FMetric                                       Gameplay;                                                     // 0x02BC(0x0014)
    FMetric                                       Movement;                                                     // 0x02D0(0x0014)
    FMetric                                       Movement;                                                     // 0x02E4(0x0014)
    FMetric                                       Network;                                                      // 0x02F8(0x0014)
    FMetric                                       Network;                                                      // 0x030C(0x0014)
    FMetric                                       Network;                                                      // 0x0320(0x0014)
    FMetric                                       Network;                                                      // 0x0334(0x0014)
    FMetric                                       Particles;                                                    // 0x0348(0x0014)
    FMetric                                       Particles;                                                    // 0x035C(0x0014)
    FMetric                                       Physics;                                                      // 0x0370(0x0014)
    FMetric                                       Physics;                                                      // 0x0384(0x0014)
    FMetric                                       Render;                                                       // 0x0398(0x0014)
    FMetric                                       Render;                                                       // 0x03AC(0x0014)
    FMetric                                       Render;                                                       // 0x03C0(0x0014)
    FMetric                                       Render;                                                       // 0x03D4(0x0014)
    FMetric                                       Render;                                                       // 0x03E8(0x0014)
    FMetric                                       Replay;                                                       // 0x03FC(0x0014)
    FMetric                                       Replay;                                                       // 0x0410(0x0014)
    FMetric                                       Replay;                                                       // 0x0424(0x0014)
    FMetric                                       Replay;                                                       // 0x0438(0x0014)
    FMetric                                       Replication;                                                  // 0x044C(0x0014)
    FMetric                                       Replication;                                                  // 0x0460(0x0014)
    FMetric                                       Idle;                                                         // 0x0474(0x0014)
    FMetric                                       Other;                                                        // 0x0488(0x0014)
    FMetric                                       Other;                                                        // 0x049C(0x0014)
    FMetric                                       Other;                                                        // 0x04B0(0x0014)
    FMetric                                       Other;                                                        // 0x04C4(0x0014)
    FMetric                                       Other;                                                        // 0x04D8(0x0014)
    FMetric                                       Other;                                                        // 0x04EC(0x0014)
    FMetric                                       Other;                                                        // 0x0500(0x0014)
    FMetric                                       Other;                                                        // 0x0514(0x0014)
    FMetric                                       Other;                                                        // 0x0528(0x0014)
    FMetric                                       TempDebug;                                                    // 0x053C(0x0014)
    FMetric                                       TempDebug;                                                    // 0x0550(0x0014)
    FMetric                                       TempDebug;                                                    // 0x0564(0x0014)
    FMetric                                       TempDebug;                                                    // 0x0578(0x0014)
    FMetric                                       TempDebug;                                                    // 0x058C(0x0014)
};


// ScriptStruct  ShooterGame.Metric
// Struct Size::0x0014
struct FMetric
{
    float                                         Mean;                                                         // 0x0000(0x0004)
    float                                         Median;                                                       // 0x0004(0x0004)
    float                                         Min;                                                          // 0x0008(0x0004)
    float                                         Max;                                                          // 0x000C(0x0004)
    float                                         StdDev;                                                       // 0x0010(0x0004)
};


// ScriptStruct  ShooterGame.MediaSourceParams
// Struct Size::0x0030
struct FMediaSourceParams
{
    TSoftObjectPtr<FMediaSource>                  MediaSourceAsset;                                             // 0x0000(0x0030)
};


// ScriptStruct  ShooterGame.AssetCategoryInfo
// Struct Size::0x0030
struct FAssetCategoryInfo
{
    FString                                       RootPath;                                                     // 0x0000(0x0010)
    FString                                       SubFolder;                                                    // 0x0010(0x0010)
    FString                                       Category;                                                     // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.WeaponOrbRewardDroppedEvent
// Struct Size::0x00E8
struct FWeaponOrbRewardDroppedEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0068(0x0028)
    FString                                       Subject;                                                      // 0x0090(0x0010)
    FName                                         OrbSpawnerName;                                               // 0x00A0(0x000C)
    int32_t                                       OrbSpawnedStage;                                              // 0x00AC(0x0004)
    float                                         OrbSpawnedTimeStamp;                                          // 0x00B0(0x0004)
    int32_t                                       OrbClaimedStage;                                              // 0x00B4(0x0004)
    float                                         OrbClaimedTimeStamp;                                          // 0x00B8(0x0004)
    int32_t                                       OrbRewardDroppedStage;                                        // 0x00BC(0x0004)
    float                                         OrbRewardDroppedTimeStamp;                                    // 0x00C0(0x0004)
    FVector                                       PickupLocation;                                               // 0x00C4(0x000C)
    FVector                                       DropLocation;                                                 // 0x00D0(0x000C)
    int32_t                                       BulletsLeft;                                                  // 0x00DC(0x0004)
    bool                                          bIsPlayerAlive;                                               // 0x00E0(0x0001)
    char                                          pa_00E1[0x0007]                                               // 0x00E1(0x0007)
};


// ScriptStruct  ShooterGame.GameEventRoundInfo
// Struct Size::0x0028
struct FGameEventRoundInfo
{
    int32_t                                       RoundNumber;                                                  // 0x0000(0x0004)
    float                                         RoundTime;                                                    // 0x0004(0x0004)
    FString                                       RoundPhase;                                                   // 0x0008(0x0010)
    int64_t                                       MatchTime;                                                    // 0x0018(0x0008)
    int32_t                                       AttackerScore;                                                // 0x0020(0x0004)
    int32_t                                       DefenderScore;                                                // 0x0024(0x0004)
};


// ScriptStruct  ShooterGame.GameEventMatchInfo
// Struct Size::0x0068
struct FGameEventMatchInfo
{
    FString                                       Version;                                                      // 0x0000(0x0010)
    FString                                       Changelist;                                                   // 0x0010(0x0010)
    FString                                       Branch;                                                       // 0x0020(0x0010)
    FString                                       GameMode;                                                     // 0x0030(0x0010)
    int64_t                                       GameID;                                                       // 0x0040(0x0008)
    FString                                       MatchID;                                                      // 0x0048(0x0010)
    FString                                       Map;                                                          // 0x0058(0x0010)
};


// ScriptStruct  ShooterGame.OrbEventInfo
// Struct Size::0x0008
struct FOrbEventInfo
{
    int32_t                                       Stage;                                                        // 0x0000(0x0004)
    float                                         WorldTimeStamp;                                               // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.AscenderUseEvent
// Struct Size::0x00B8
struct FAscenderUseEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0068(0x0028)
    FString                                       Subject;                                                      // 0x0090(0x0010)
    FString                                       AscenderName;                                                 // 0x00A0(0x0010)
    float                                         UseDuration;                                                  // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
};


// ScriptStruct  ShooterGame.TeleporterUseEvent
// Struct Size::0x00D0
struct FTeleporterUseEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0068(0x0028)
    FString                                       Subject;                                                      // 0x0090(0x0010)
    FString                                       TeleporterName;                                               // 0x00A0(0x0010)
    FString                                       ObjectClassName;                                              // 0x00B0(0x0010)
    FString                                       ObjectType;                                                   // 0x00C0(0x0010)
};


// ScriptStruct  ShooterGame.OrbInteractionEvent
// Struct Size::0x00D8
struct FOrbInteractionEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0068(0x0028)
    FString                                       Subject;                                                      // 0x0090(0x0010)
    FString                                       OrbName;                                                      // 0x00A0(0x0010)
    FString                                       OrbType;                                                      // 0x00B0(0x0010)
    FVector                                       OrbLocation;                                                  // 0x00C0(0x000C)
    float                                         TimeSinceSpawned;                                             // 0x00CC(0x0004)
    int32_t                                       NumCharacterCollectors;                                       // 0x00D0(0x0004)
    char                                          pa_00D4[0x0004]                                               // 0x00D4(0x0004)
};


// ScriptStruct  ShooterGame.FogOfWarStatsEvent
// Struct Size::0x00F8
struct FFogOfWarStatsEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0068(0x0028)
    int32_t                                       TotalQueries;                                                 // 0x0090(0x0004)
    int32_t                                       RelevantCount;                                                // 0x0094(0x0004)
    int32_t                                       NotRelevantCount;                                             // 0x0098(0x0004)
    int32_t                                       RelevantVisionCount;                                          // 0x009C(0x0004)
    int32_t                                       RelevantAudioCount;                                           // 0x00A0(0x0004)
    int32_t                                       RelevantOverrideCount;                                        // 0x00A4(0x0004)
    int32_t                                       RelevantNoComponentCount;                                     // 0x00A8(0x0004)
    int32_t                                       RelevantTeamCount;                                            // 0x00AC(0x0004)
    int32_t                                       RelevantDistanceCount;                                        // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
    FString                                       CharacterName;                                                // 0x00B8(0x0010)
    FMetric                                       NotRelevantDurationSeconds;                                   // 0x00C8(0x0014)
    FMetric                                       RelevantDurationSeconds;                                      // 0x00DC(0x0014)
    float                                         TotalRelevantDurationSeconds;                                 // 0x00F0(0x0004)
    float                                         TotalNotRelevantDurationSeconds;                              // 0x00F4(0x0004)
};


// ScriptStruct  ShooterGame.ShotsFiredOverRoundEvent
// Struct Size::0x0088
struct FShotsFiredOverRoundEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    TArray<FShotProjectileInfo>                   ShotsMissed;                                                  // 0x0068(0x0010)
    TArray<FShotProjectileOnHitInfo>              ShotsHit;                                                     // 0x0078(0x0010)
};


// ScriptStruct  ShooterGame.ShotProjectileInfo
// Struct Size::0x0268
struct FShotProjectileInfo
{
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0000(0x0028)
    FGameEventPlayerInfo                          DealerInfo;                                                   // 0x0028(0x0060)
    FGameEventCharacterState                      DealerCharacterState;                                         // 0x0088(0x01A8)
    int32_t                                       NumberProjectiles;                                            // 0x0230(0x0004)
    int32_t                                       ZoomLevel;                                                    // 0x0234(0x0004)
    bool                                          IsFocusMode;                                                  // 0x0238(0x0001)
    char                                          pa_0239[0x0003]                                               // 0x0239(0x0003)
    FStabilityValues                              StabilityValues;                                              // 0x023C(0x0018)
    char                                          pa_0254[0x0004]                                               // 0x0254(0x0004)
    FString                                       DamageEquippableInventoryTransactionType;                     // 0x0258(0x0010)
};


// ScriptStruct  ShooterGame.StabilityValues
// Struct Size::0x0018
struct FStabilityValues
{
    float                                         StabilityIndex;                                               // 0x0000(0x0004)
    FErrorValues                                  Error;                                                        // 0x0004(0x0008)
    FRecoilValues                                 Recoil;                                                       // 0x000C(0x0008)
    float                                         ErrorPower;                                                   // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.RecoilValues
// Struct Size::0x0008
struct FRecoilValues
{
    float                                         Pitch;                                                        // 0x0000(0x0004)
    float                                         Yaw;                                                          // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.ErrorValues
// Struct Size::0x0008
struct FErrorValues
{
    float                                         FiringError;                                                  // 0x0000(0x0004)
    float                                         MovementError;                                                // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.GameEventCharacterState
// Struct Size::0x01A8
struct FGameEventCharacterState
{
    FGameEventHpState                             HpState;                                                      // 0x0000(0x0008)
    FGameEventHpState                             HpStateBefore;                                                // 0x0008(0x0008)
    int32_t                                       Money;                                                        // 0x0010(0x0004)
    FVector                                       Location;                                                     // 0x0014(0x000C)
    FVector                                       ViewVector;                                                   // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       MovementType;                                                 // 0x0030(0x0010)
    float                                         Speed;                                                        // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FGameEventInventory                           Inventory;                                                    // 0x0048(0x0148)
    FString                                       StabilityType;                                                // 0x0190(0x0010)
    float                                         StabilityFiringError;                                         // 0x01A0(0x0004)
    float                                         StabilityMovementError;                                       // 0x01A4(0x0004)
};


// ScriptStruct  ShooterGame.GameEventInventory
// Struct Size::0x0148
struct FGameEventInventory
{
    FGameEventItem                                CurrentlyEquipped;                                            // 0x0000(0x0038)
    FGameEventItem                                PrimaryWeapon;                                                // 0x0038(0x0038)
    FGameEventItem                                SecondaryWeapon;                                              // 0x0070(0x0038)
    FGameEventItem                                Melee;                                                        // 0x00A8(0x0038)
    FGameEventItem                                Armor;                                                        // 0x00E0(0x0038)
    TArray<FGameEventItem>                        Abilities;                                                    // 0x0118(0x0010)
    TArray<FGameEventItem>                        BackpackItems;                                                // 0x0128(0x0010)
    TArray<FGameEventItem>                        Passives;                                                     // 0x0138(0x0010)
};


// ScriptStruct  ShooterGame.GameEventItem
// Struct Size::0x0038
struct FGameEventItem
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Id;                                                           // 0x0010(0x0010)
    FString                                       Type;                                                         // 0x0020(0x0010)
    int32_t                                       AvailableAmount;                                              // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.GameEventHpState
// Struct Size::0x0008
struct FGameEventHpState
{
    float                                         CharacterHp;                                                  // 0x0000(0x0004)
    float                                         ShieldHp;                                                     // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.GameEventPlayerInfo
// Struct Size::0x0060
struct FGameEventPlayerInfo
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Subject;                                                      // 0x0010(0x0010)
    FString                                       Side;                                                         // 0x0020(0x0010)
    FString                                       TeamRole;                                                     // 0x0030(0x0010)
    FString                                       TeamId;                                                       // 0x0040(0x0010)
    FString                                       Character;                                                    // 0x0050(0x0010)
};


// ScriptStruct  ShooterGame.ShotProjectileOnHitInfo
// Struct Size::0x0298
struct FShotProjectileOnHitInfo : public FShotProjectileInfo
{
    FString                                       DamageSource;                                                 // 0x0268(0x0010)
    FString                                       DamageSourceId;                                               // 0x0278(0x0010)
    TArray<FShotProjectileDamageInfo>             DamageEvents;                                                 // 0x0288(0x0010)
};


// ScriptStruct  ShooterGame.ShotProjectileDamageInfo
// Struct Size::0x0080
struct FShotProjectileDamageInfo
{
    float                                         DamageDone;                                                   // 0x0000(0x0004)
    float                                         Distance;                                                     // 0x0004(0x0004)
    FString                                       DamageRegion;                                                 // 0x0008(0x0010)
    FGameEventPlayerInfo                          ReceiverInfo;                                                 // 0x0018(0x0060)
    bool                                          PlayerReceivedDamage;                                         // 0x0078(0x0001)
    bool                                          IsPenetration;                                                // 0x0079(0x0001)
    char                                          pa_007A[0x0006]                                               // 0x007A(0x0006)
};


// ScriptStruct  ShooterGame.DamageLogEvent
// Struct Size::0x0560
struct FDamageLogEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0068(0x0028)
    FGameEventPlayerInfo                          DealerInfo;                                                   // 0x0090(0x0060)
    FGameEventPlayerInfo                          ReceiverInfo;                                                 // 0x00F0(0x0060)
    FGameEventCharacterState                      DealerCharacterState;                                         // 0x0150(0x01A8)
    FGameEventCharacterState                      ReceiverCharacterState;                                       // 0x02F8(0x01A8)
    FString                                       DamageSource;                                                 // 0x04A0(0x0010)
    FString                                       DamageSourceId;                                               // 0x04B0(0x0010)
    float                                         DamageAmount;                                                 // 0x04C0(0x0004)
    float                                         DamageTaken;                                                  // 0x04C4(0x0004)
    FString                                       DamageRegion;                                                 // 0x04C8(0x0010)
    bool                                          IsPenetration;                                                // 0x04D8(0x0001)
    bool                                          IsKill;                                                       // 0x04D9(0x0001)
    char                                          pa_04DA[0x0006]                                               // 0x04DA(0x0006)
    FAimReport                                    AimReport;                                                    // 0x04E0(0x0068)
    bool                                          IsZoomed;                                                     // 0x0548(0x0001)
    bool                                          IsFocusMode;                                                  // 0x0549(0x0001)
    bool                                          DamageReceiverIsPlayer;                                       // 0x054A(0x0001)
    char                                          pa_054B[0x0005]                                               // 0x054B(0x0005)
    FString                                       DamageEquippableInventoryTransactionType;                     // 0x0550(0x0010)
};


// ScriptStruct  ShooterGame.RoundScoreLogEvent
// Struct Size::0x00F0
struct FRoundScoreLogEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0068(0x0028)
    FGameEventTeamResources                       AttackerResources;                                            // 0x0090(0x0008)
    FGameEventTeamResources                       DefenderResources;                                            // 0x0098(0x0008)
    FString                                       Winner;                                                       // 0x00A0(0x0010)
    FString                                       WinnerTeam;                                                   // 0x00B0(0x0010)
    FString                                       Result;                                                       // 0x00C0(0x0010)
    TArray<FGameEventPlayerInfo>                  AttackerRoster;                                               // 0x00D0(0x0010)
    TArray<FGameEventPlayerInfo>                  DefenderRoster;                                               // 0x00E0(0x0010)
};


// ScriptStruct  ShooterGame.GameEventTeamResources
// Struct Size::0x0008
struct FGameEventTeamResources
{
    int32_t                                       Total;                                                        // 0x0000(0x0004)
    int32_t                                       Inventory;                                                    // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.LocationLogEvent
// Struct Size::0x0118
struct FLocationLogEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0068(0x0028)
    FGameEventPlayerInfo                          PlayerInfo;                                                   // 0x0090(0x0060)
    FVector                                       Location;                                                     // 0x00F0(0x000C)
    FVector                                       ViewVector;                                                   // 0x00FC(0x000C)
    FString                                       MovementType;                                                 // 0x0108(0x0010)
};


// ScriptStruct  ShooterGame.GameModeMatchDetailsConfig
// Struct Size::0x0018
struct FGameModeMatchDetailsConfig
{
    bool                                          ShowProgression;                                              // 0x0000(0x0001)
    bool                                          ShowSummary;                                                  // 0x0001(0x0001)
    bool                                          ShowScoreboard;                                               // 0x0002(0x0001)
    bool                                          ShowTimeline;                                                 // 0x0003(0x0001)
    bool                                          ShowPerformance;                                              // 0x0004(0x0001)
    bool                                          ShowMVP;                                                      // 0x0005(0x0001)
    enum class EMVPCriteria                       MVPCriteria;                                                  // 0x0006(0x0001)
    char                                          pa_0007[0x0001]                                               // 0x0007(0x0001)
    FUserWidget*                                  DetailsTabWidget;                                             // 0x0008(0x0008)
    FUserWidget*                                  ScoreboardTabWidget;                                          // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.AresGameplayMessage
// Struct Size::0x0098
struct FAresGameplayMessage
{
    FGameplayTag                                  Channel;                                                      // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    AActor*                                       Instigator;                                                   // 0x0010(0x0008)
    AActor*                                       Source;                                                       // 0x0018(0x0008)
    AActor*                                       Target;                                                       // 0x0020(0x0008)
    FGameplayTagContainer                         Descriptors;                                                  // 0x0028(0x0020)
    TMap<FGameplayTag,float>                      Magnitudes;                                                   // 0x0048(0x0050)
};


// ScriptStruct  ShooterGame.NetworkLoadedClass
// Struct Size::0x0058
struct FNetworkLoadedClass
{
    FSoftObjectPath                               ClassPath;                                                    // 0x0000(0x0020)
    bool                                          bBlockingLoad;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0017]                                               // 0x0021(0x0017)
    TArray<TWeakObjectPtr<FPlayerController>>     UnacknowledgedLoad;                                           // 0x0038(0x0010)
    TArray<FDelegate>                             CompletedEvents;                                              // 0x0048(0x0010)
};


// ScriptStruct  ShooterGame.GauntletTestResultCollection
// Struct Size::0x0050
struct FGauntletTestResultCollection
{
    TMap<FString,FGauntletTestResult>             TestResults;                                                  // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.GauntletTestResult
// Struct Size::0x0001
struct FGauntletTestResult
{
    bool                                          Passed;                                                       // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.StaticActorMaterialMapping
// Struct Size::0x0018
struct FStaticActorMaterialMapping
{
    FStaticMeshActor*                             StaticActor;                                                  // 0x0000(0x0008)
    TArray<FMaterialInterface*>                   SavedMaterials;                                               // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.HitReactionResult
// Struct Size::0x0010
struct FHitReactionResult
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.AresHitReactionEntry
// Struct Size::0x0038
struct FAresHitReactionEntry
{
    enum class EAresDamageAnimationCategory       AnimationCategory;                                            // 0x0000(0x0001)
    enum class EAresDirectionalDamage             DirectionalDamage;                                            // 0x0001(0x0001)
    enum class EAresRegionalDamage                RegionalDamage;                                               // 0x0002(0x0001)
    enum class EAresDamageCategory                DamageCategory;                                               // 0x0003(0x0001)
    enum class EAresBodySection                   DamageBodySection;                                            // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    TArray<FName>                                 BoneList;                                                     // 0x0008(0x0010)
    FShooterDamageType*                           DamageType;                                                   // 0x0018(0x0008)
    float                                         DamageAmount;                                                 // 0x0020(0x0004)
    bool                                          bFaceDamageCauser;                                            // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    int32_t                                       Priority;                                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FAnimMontage*                                 Anim3P;                                                       // 0x0030(0x0008)
};


// ScriptStruct  ShooterGame.CircularMeter
// Struct Size::0x00A4
struct FCircularMeter
{
    FLinearColor                                  MeterFullyLitColor;                                           // 0x0000(0x0010)
    FLinearColor                                  MeterUnlitColor;                                              // 0x0010(0x0010)
    FLinearColor                                  PartiallyLitStartColor;                                       // 0x0020(0x0010)
    FLinearColor                                  NotchColor;                                                   // 0x0030(0x0010)
    float                                         NotchWidth;                                                   // 0x0040(0x0004)
    FName                                         MeterFullyLitPercentMaterialParameterName;                    // 0x0044(0x000C)
    FName                                         MeterPartiallyLitPercentMaterialParameterName;                // 0x0050(0x000C)
    FName                                         MeterFullyLitColorMaterialParameterName;                      // 0x005C(0x000C)
    FName                                         MeterPartiallyLitColorMaterialParameterName;                  // 0x0068(0x000C)
    FName                                         MeterUnlitColorMaterialParameterName;                         // 0x0074(0x000C)
    FName                                         MeterNotchPercentMaterialParameterName;                       // 0x0080(0x000C)
    FName                                         MeterNotchColorMaterialParameterName;                         // 0x008C(0x000C)
    FName                                         MeterNotchWidthMaterialParameterName;                         // 0x0098(0x000C)
};


// ScriptStruct  ShooterGame.CharacterMeterDynamicMaterials
// Struct Size::0x0010
struct FCharacterMeterDynamicMaterials
{
    FMaterialInstanceDynamic*                     FullMaterialInstanceDynamic;                                  // 0x0000(0x0008)
    FMaterialInstanceDynamic*                     EmptyMaterialInstanceDynamic;                                 // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.CharacterMeter
// Struct Size::0x0128
struct FCharacterMeter
{
    FVector2D                                     BaseOffset;                                                   // 0x0000(0x0008)
    FAresHudBackgroundImage                       MeterIcon;                                                    // 0x0008(0x0028)
    FVector2D                                     MeterDrawOffset;                                              // 0x0030(0x0008)
    FVector2D                                     Extents;                                                      // 0x0038(0x0008)
    bool                                          bShrinkFullMaterialExtentsWithMeterValue;                     // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    FMaterialInterface*                           FullMaterial;                                                 // 0x0048(0x0008)
    FMaterialInterface*                           EmptyMaterial;                                                // 0x0050(0x0008)
    FName                                         MeterPercentMaterialParameterName;                            // 0x0058(0x000C)
    FName                                         MeterColorPercentParameterName;                               // 0x0064(0x000C)
    bool                                          bDrawMeterText;                                               // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FVector2D                                     TextDrawOffset;                                               // 0x0074(0x0008)
    enum class EAresDrawOrigin                    TextDrawOrigin;                                               // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
    FAresHudFontParams                            TextFontParams;                                               // 0x0080(0x0070)
    bool                                          bDrawMeterMaxValue;                                           // 0x00F0(0x0001)
    char                                          pa_00F1[0x0003]                                               // 0x00F1(0x0003)
    float                                         HorizontalSpacingBetweenTextElements;                         // 0x00F4(0x0004)
    FLinearColor                                  FullColor;                                                    // 0x00F8(0x0010)
    FLinearColor                                  EmptyColor;                                                   // 0x0108(0x0010)
    FCurveFloat*                                  MeterFillPercentToColorInterpolationPercentCurve;             // 0x0118(0x0008)
    bool                                          bApplyColorTintToText;                                        // 0x0120(0x0001)
    bool                                          bApplyColorTintToIcon;                                        // 0x0121(0x0001)
    char                                          pa_0122[0x0006]                                               // 0x0122(0x0006)
};


// ScriptStruct  ShooterGame.AresHudFontParams
// Struct Size::0x0070
struct FAresHudFontParams
{
    FSlateFontInfo                                Font;                                                         // 0x0000(0x0060)
    bool                                          bEnableShadow;                                                // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    FVector2D                                     ShadowOffset;                                                 // 0x0064(0x0008)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  ShooterGame.AresHudBackgroundImage
// Struct Size::0x0028
struct FAresHudBackgroundImage
{
    FVector2D                                     DrawOffset;                                                   // 0x0000(0x0008)
    enum class EAresDrawOrigin                    DrawOrigin;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FTexture*                                     Image;                                                        // 0x0010(0x0008)
    FAresHudImageParams                           ImageParams;                                                  // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.AresHudImageParams
// Struct Size::0x0010
struct FAresHudImageParams
{
    bool                                          bUseTextureExtents;                                           // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector2D                                     Extents;                                                      // 0x0004(0x0008)
    float                                         Alpha;                                                        // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.AresTimedOvershootValue
// Struct Size::0x0020
struct FAresTimedOvershootValue
{
    float                                         StartingValue;                                                // 0x0000(0x0004)
    float                                         OvershootValue;                                               // 0x0004(0x0004)
    float                                         OvershootTime;                                                // 0x0008(0x0004)
    float                                         OvershootHoldTime;                                            // 0x000C(0x0004)
    float                                         FallbackValue;                                                // 0x0010(0x0004)
    float                                         FallbackTime;                                                 // 0x0014(0x0004)
    enum class EAresInterpolationFunction         OvershootInterpolationFunction;                               // 0x0018(0x0001)
    enum class EAresInterpolationFunction         FallbackInterpolationFunction;                                // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         StartTime;                                                    // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.AresTimedInterpolant
// Struct Size::0x001C
struct FAresTimedInterpolant
{
    float                                         InitialDelayBeforeRampUp;                                     // 0x0000(0x0004)
    float                                         RampUpTime;                                                   // 0x0004(0x0004)
    float                                         HoldTime;                                                     // 0x0008(0x0004)
    bool                                          bDoRampOff;                                                   // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         RampOffTime;                                                  // 0x0010(0x0004)
    enum class EAresInterpolationFunction         RampUpInterpolationFunction;                                  // 0x0014(0x0001)
    enum class EAresInterpolationFunction         RampOffInterpolationFunction;                                 // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    float                                         StartTime;                                                    // 0x0018(0x0004)
};


// ScriptStruct  ShooterGame.AresHudElementRectangle
// Struct Size::0x0014
struct FAresHudElementRectangle
{
    enum class EAresHudAnchorPoint                AnchorPoint;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector2D                                     AnchorOffset;                                                 // 0x0004(0x0008)
    FVector2D                                     Extents;                                                      // 0x000C(0x0008)
};


// ScriptStruct  ShooterGame.AresKillBannerImage
// Struct Size::0x0018
struct FAresKillBannerImage
{
    FTexture*                                     Image;                                                        // 0x0000(0x0008)
    FAresHudImageParams                           ImageParams;                                                  // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.AresHudTextLabel
// Struct Size::0x0098
struct FAresHudTextLabel
{
    FVector2D                                     DrawOffset;                                                   // 0x0000(0x0008)
    enum class EAresDrawOrigin                    DrawOrigin;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FText                                         Text;                                                         // 0x0010(0x0018)
    FAresHudFontParams                            FontParams;                                                   // 0x0028(0x0070)
};


// ScriptStruct  ShooterGame.AresUMGElementAsset
// Struct Size::0x00B0
struct FAresUMGElementAsset
{
    TSoftClassPtr<UObject>                        Asset;                                                        // 0x0000(0x0030)
    TSoftClassPtr<UObject>                        AssetLookupOverride;                                          // 0x0030(0x0030)
    TMap<TSoftClassPtr<UObject>,TSoftClassPtr<UObject>>GameModeOverrides;                                       // 0x0060(0x0050)
};


// ScriptStruct  ShooterGame.AresIconButtonOverridesData
// Struct Size::0x0060
struct FAresIconButtonOverridesData
{
    TArray<enum class EAresIconButtonOverrides>   Overrides;                                                    // 0x0000(0x0010)
    FTexture2D*                                   IconTexture;                                                  // 0x0010(0x0008)
    float                                         IconScale;                                                    // 0x0018(0x0004)
    FLinearColor                                  IconColor;                                                    // 0x001C(0x0010)
    FLinearColor                                  ButtonColor;                                                  // 0x002C(0x0010)
    enum class EAresIconButtonSize                ButtonSize;                                                   // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    FText                                         ButtonText;                                                   // 0x0040(0x0018)
    bool                                          bResetUnspecifiedValuesToDefaults;                            // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
};


// ScriptStruct  ShooterGame.AresIconButtonStyle
// Struct Size::0x0024
struct FAresIconButtonStyle
{
    float                                         IconScale;                                                    // 0x0000(0x0004)
    FLinearColor                                  IconColor;                                                    // 0x0004(0x0010)
    FLinearColor                                  ButtonColor;                                                  // 0x0014(0x0010)
};


// ScriptStruct  ShooterGame.ImpactEffectDecalInfo
// Struct Size::0x0048
struct FImpactEffectDecalInfo
{
    bool                                          bCreatedDecal;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FDecalData                                    DecalData;                                                    // 0x0008(0x0040)
};


// ScriptStruct  ShooterGame.DecalData
// Struct Size::0x0040
struct FDecalData
{
    FMaterialInterface*                           DecalMaterial;                                                // 0x0000(0x0008)
    float                                         DecalSize;                                                    // 0x0008(0x0004)
    float                                         DecalHeight;                                                  // 0x000C(0x0004)
    FCurveFloat*                                  ScaleDistance;                                                // 0x0010(0x0008)
    FVector2D                                     RangeScaleMin;                                                // 0x0018(0x0008)
    FVector2D                                     RangeScaleMax;                                                // 0x0020(0x0008)
    float                                         FadeInTime;                                                   // 0x0028(0x0004)
    float                                         FadeOutTime;                                                  // 0x002C(0x0004)
    float                                         LifeSpan;                                                     // 0x0030(0x0004)
    float                                         FadeOutSizeOnScreenPercent;                                   // 0x0034(0x0004)
    float                                         RandomRotationAngleBase;                                      // 0x0038(0x0004)
    float                                         RandomRotationAngleRange;                                     // 0x003C(0x0004)
};


// ScriptStruct  ShooterGame.ImpactEffectAudioInfo
// Struct Size::0x0018
struct FImpactEffectAudioInfo
{
    enum class EImpactEffectAudioCreationState    CreationState;                                                // 0x0000(0x0001)
    enum class EAresSurfaceType                   AudioSurfaceType;                                             // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FPawn*                                        ContextInstigator;                                            // 0x0008(0x0008)
    FAresAudioComponent*                          AudioComponent;                                               // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.ImpactEffects
// Struct Size::0x0028
struct FImpactEffects
{
    FEffectContainer*                             ImpactEffects;                                                // 0x0000(0x0008)
    char                                          pa_0008[0x0020]                                               // 0x0008(0x0020)
};


// ScriptStruct  ShooterGame.InputStateCorrectionStatus
// Struct Size::0x0014
struct FInputStateCorrectionStatus
{
    char                                          pa_0000[0x0014]                                               // 0x0000(0x0014)
};


// ScriptStruct  ShooterGame.AresInputStream
// Struct Size::0x0468
struct FAresInputStream
{
    char                                          pa_0000[0x0468]                                               // 0x0000(0x0468)
};


// ScriptStruct  ShooterGame.AresInputRecord
// Struct Size::0x000C
struct FAresInputRecord
{
    FAresInputSnapshot                            InputSnapshot;                                                // 0x0000(0x0008)
    char                                          InputIdentifier;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  ShooterGame.AresInputSnapshot
// Struct Size::0x0008
struct FAresInputSnapshot
{
    enum class EAresInputState                    InputState;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         TimeInSeconds;                                                // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.EquipDebugRecord
// Struct Size::0x0010
struct FEquipDebugRecord
{
    FAresEquippable*                              EquippedEquippable;                                           // 0x0000(0x0008)
    enum class EEquipSource                       EquipSource;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ShooterGame.InventoryServerCorrectRepVariables
// Struct Size::0x0010
struct FInventoryServerCorrectRepVariables
{
    FAresEquippable*                              CurrentEquippable;                                            // 0x0000(0x0008)
    int32_t                                       CorrectionIndex;                                              // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.PendingEquippableChange
// Struct Size::0x0018
struct FPendingEquippableChange
{
    FAresEquippable*                              NewCurrentEquippable;                                         // 0x0000(0x0008)
    FNetworkedMovementTimestamp                   Timestamp;                                                    // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.NetworkedMovementTimestamp
// Struct Size::0x0010
struct FNetworkedMovementTimestamp
{
    TWeakObjectPtr<FShooterCharacter>             Character;                                                    // 0x0000(0x0008)
    float                                         NetTimestamp;                                                 // 0x0008(0x0004)
    int32_t                                       RespawnNumber;                                                // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.DeltaAnimationParameter
// Struct Size::0x0008
struct FDeltaAnimationParameter
{
    enum class DeltaBarToAnimate                  Bar;                                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DeltaPercent;                                                 // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.BasicMetric
// Struct Size::0x0010
struct FBasicMetric
{
    uint32_t                                      NumSamples;                                                   // 0x0000(0x0004)
    float                                         Min;                                                          // 0x0004(0x0004)
    float                                         Max;                                                          // 0x0008(0x0004)
    float                                         Mean;                                                         // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.RecycledWidgetArray
// Struct Size::0x0010
struct FRecycledWidgetArray
{
    TArray<FUserWidget*>                          Widgets;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PacketDeltaTimeBuckets
// Struct Size::0x001C
struct FPacketDeltaTimeBuckets
{
    int32_t                                       Over256ms;                                                    // 0x0000(0x0004)
    int32_t                                       Between128and256ms;                                           // 0x0004(0x0004)
    int32_t                                       Between64and128ms;                                            // 0x0008(0x0004)
    int32_t                                       Between32and64ms;                                             // 0x000C(0x0004)
    int32_t                                       Between16and32ms;                                             // 0x0010(0x0004)
    int32_t                                       Between8and16ms;                                              // 0x0014(0x0004)
    int32_t                                       Below8ms;                                                     // 0x0018(0x0004)
};


// ScriptStruct  ShooterGame.AresGenericAsset
// Struct Size::0x0040
struct FAresGenericAsset
{
    TSoftObjectPtr<UObject>                       Asset;                                                        // 0x0000(0x0030)
    TArray<FString>                               MetaTags;                                                     // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.AresUserWidgetAsset
// Struct Size::0x0040
struct FAresUserWidgetAsset
{
    TSoftClassPtr<UObject>                        UserWidgetClass;                                              // 0x0000(0x0030)
    TArray<FString>                               MetaTags;                                                     // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.VisibilityContext
// Struct Size::0x0038
struct FVisibilityContext
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
    FBaseTeamComponent*                           TeamComponent;                                                // 0x0030(0x0008)
};


// ScriptStruct  ShooterGame.AresClientDemoPlayback
// Struct Size::0x0020
struct FAresClientDemoPlayback
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  ShooterGame.AresClientDemoData
// Struct Size::0x0040
struct FAresClientDemoData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    float                                         Age;                                                          // 0x0010(0x0004)
    FAresDemoXYZ                                  AbsoluteOrigin;                                               // 0x0014(0x000C)
    FAresDemoXYZ                                  AbsoluteAim;                                                  // 0x0020(0x000C)
    int32_t                                       FPS;                                                          // 0x002C(0x0004)
    TArray<FAresClientDemoFrame>                  Frames;                                                       // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.AresClientDemoFrame
// Struct Size::0x0018
struct FAresClientDemoFrame
{
    float                                         Age;                                                          // 0x0000(0x0004)
    FAresDemoXYZ                                  AimVector;                                                    // 0x0004(0x000C)
    bool                                          bCrouching;                                                   // 0x0010(0x0001)
    bool                                          bWalking;                                                     // 0x0011(0x0001)
    bool                                          bJumping;                                                     // 0x0012(0x0001)
    enum class EAresAutomationMovement            YAxisMovement;                                                // 0x0013(0x0001)
    enum class EAresAutomationMovement            XAxisMovement;                                                // 0x0014(0x0001)
    enum class EAresAutomationInput               ItemSlotPressed;                                              // 0x0015(0x0001)
    enum class EAresAutomationInput               EquippableInputPressed;                                       // 0x0016(0x0001)
    char                                          pa_0017[0x0001]                                               // 0x0017(0x0001)
};


// ScriptStruct  ShooterGame.AresDemoXYZ
// Struct Size::0x000C
struct FAresDemoXYZ
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
    float                                         Z;                                                            // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.RoundPersistentDataDefinition
// Struct Size::0x0010
struct FRoundPersistentDataDefinition
{
    TArray<FRoundPersistedItem>                   SavedItems;                                                   // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.RoundPersistedItem
// Struct Size::0x0010
struct FRoundPersistedItem
{
    enum class EAresItemSlot                      Key;                                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FAresItem*                                    Value;                                                        // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.AresPlatformParticipantInfo
// Struct Size::0x0010
struct FAresPlatformParticipantInfo
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PurchasableList
// Struct Size::0x0010
struct FPurchasableList
{
    TArray<FAresPurchasable*>                     Purchasables;                                                 // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ShopGridPosition
// Struct Size::0x0008
struct FShopGridPosition
{
    int32_t                                       Row;                                                          // 0x0000(0x0004)
    int32_t                                       Column;                                                       // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.RadialMenuShowAndHideSettings
// Struct Size::0x0014
struct FRadialMenuShowAndHideSettings
{
    FName                                         SummonWheelActionName;                                        // 0x0000(0x000C)
    float                                         WheelShowupDelay;                                             // 0x000C(0x0004)
    bool                                          bEnableRightKeyCancellation;                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  ShooterGame.RadialMenuRateLimitSettings
// Struct Size::0x000C
struct FRadialMenuRateLimitSettings
{
    float                                         RateLimitCycleTime;                                           // 0x0000(0x0004)
    int32_t                                       RateLimitTokensPerCycle;                                      // 0x0004(0x0004)
    float                                         RateLimitMinInterval;                                         // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.RadialMenuSlotDescriptor
// Struct Size::0x0068
struct FRadialMenuSlotDescriptor
{
    enum class RadialMenuSlotDisplayType          DisplayType;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FRadialMenuIconSlotDisplay                    IconDisplay;                                                  // 0x0008(0x0020)
    FRadialMenuTextSlotDisplay                    TextDisplay;                                                  // 0x0028(0x0018)
    FText                                         SlotName;                                                     // 0x0040(0x0018)
    FName                                         DirectCastEventName;                                          // 0x0058(0x000C)
    enum class ERadialMenuContextIndicator        ContextIndicator;                                             // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
};


// ScriptStruct  ShooterGame.RadialMenuTextSlotDisplay
// Struct Size::0x0018
struct FRadialMenuTextSlotDisplay
{
    FText                                         Text;                                                         // 0x0000(0x0018)
};


// ScriptStruct  ShooterGame.RadialMenuIconSlotDisplay
// Struct Size::0x0020
struct FRadialMenuIconSlotDisplay
{
    FTexture*                                     IconImage;                                                    // 0x0000(0x0008)
    bool                                          OverrideColor;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FLinearColor                                  ColorToOverride;                                              // 0x000C(0x0010)
    float                                         SizeScale;                                                    // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.ServerHardwareInfo
// Struct Size::0x0030
struct FServerHardwareInfo
{
    FString                                       Cpu;                                                          // 0x0000(0x0010)
    FString                                       CpuVendor;                                                    // 0x0010(0x0010)
    int32_t                                       CpuMhz;                                                       // 0x0020(0x0004)
    int32_t                                       CpuCoreCount;                                                 // 0x0024(0x0004)
    int32_t                                       CpuThreadCount;                                               // 0x0028(0x0004)
    int32_t                                       TotalPhysicalMemoryMB;                                        // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.ClientHardwareInfo
// Struct Size::0x00A0
struct FClientHardwareInfo
{
    FString                                       Cpu;                                                          // 0x0000(0x0010)
    FString                                       CpuVendor;                                                    // 0x0010(0x0010)
    int32_t                                       CpuMhz;                                                       // 0x0020(0x0004)
    int32_t                                       CpuCoreCount;                                                 // 0x0024(0x0004)
    int32_t                                       CpuThreadCount;                                               // 0x0028(0x0004)
    int32_t                                       TotalPhysicalMemoryMB;                                        // 0x002C(0x0004)
    FString                                       Gpu;                                                          // 0x0030(0x0010)
    FString                                       GpuVendor;                                                    // 0x0040(0x0010)
    FString                                       GpuUserDriverVersion;                                         // 0x0050(0x0010)
    FString                                       GpuInternalDriverVersion;                                     // 0x0060(0x0010)
    int32_t                                       GpuVramMB;                                                    // 0x0070(0x0004)
    int32_t                                       NativeScreenResolutionX;                                      // 0x0074(0x0004)
    int32_t                                       NativeScreenResolutionY;                                      // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FString                                       DeviceModel;                                                  // 0x0080(0x0010)
    FString                                       DefaultDeviceQuality;                                         // 0x0090(0x0010)
};


// ScriptStruct  ShooterGame.MachinePerfStats
// Struct Size::0x0064
struct FMachinePerfStats
{
    FMetric                                       CpuUtilizationPercentForProcess;                              // 0x0000(0x0014)
    FMetric                                       CpuUtilizationPercentSystemwide;                              // 0x0014(0x0014)
    FMetric                                       PhysicalMemoryUtilizationPercentForProcess;                   // 0x0028(0x0014)
    FMetric                                       PhysicalMemoryUtilizationPercentSystemwide;                   // 0x003C(0x0014)
    FMetric                                       PhysicalMemoryUtilizationForProcessMB;                        // 0x0050(0x0014)
};


// ScriptStruct  ShooterGame.AresObjectMetrics
// Struct Size::0x0064
struct FAresObjectMetrics
{
    FMetric                                       ActorCount;                                                   // 0x0000(0x0014)
    FMetric                                       ObjectCount;                                                  // 0x0014(0x0014)
    FMetric                                       ReplicatingObjectCount;                                       // 0x0028(0x0014)
    FMetric                                       ActiveNetworkedObjectCount;                                   // 0x003C(0x0014)
    FMetric                                       EnabledTickFunctionCount;                                     // 0x0050(0x0014)
};


// ScriptStruct  ShooterGame.ServerFrameBuckets
// Struct Size::0x001C
struct FServerFrameBuckets
{
    int32_t                                       Sub4MsFrames;                                                 // 0x0000(0x0004)
    int32_t                                       Sub8MsFrames;                                                 // 0x0004(0x0004)
    int32_t                                       Sub10MsFrames;                                                // 0x0008(0x0004)
    int32_t                                       Sub20MsFrames;                                                // 0x000C(0x0004)
    int32_t                                       Sub100MsFrames;                                               // 0x0010(0x0004)
    int32_t                                       Sub300MsFrames;                                               // 0x0014(0x0004)
    int32_t                                       Over300MsFrames;                                              // 0x0018(0x0004)
};


// ScriptStruct  ShooterGame.GPUStats
// Struct Size::0x005C
struct FGPUStats
{
    FMetric                                       GPUTimeMs;                                                    // 0x0000(0x0014)
    FGPUFpsBuckets                                GPUFpsBuckets;                                                // 0x0014(0x0034)
    FGPUFlipBuckets                               GPUFlipBuckets;                                               // 0x0048(0x0014)
};


// ScriptStruct  ShooterGame.GPUFlipBuckets
// Struct Size::0x0014
struct FGPUFlipBuckets
{
    int32_t                                       FlipsAt120Hz;                                                 // 0x0000(0x0004)
    int32_t                                       FlipsAt60Hz;                                                  // 0x0004(0x0004)
    int32_t                                       FlipsFasterThan120Hz;                                         // 0x0008(0x0004)
    int32_t                                       FlipsSlowerThan60Hz;                                          // 0x000C(0x0004)
    int32_t                                       FlipsBetween120HzAnd60Hz;                                     // 0x0010(0x0004)
};


// ScriptStruct  ShooterGame.GPUFpsBuckets
// Struct Size::0x0034
struct FGPUFpsBuckets
{
    int32_t                                       Over360Fps;                                                   // 0x0000(0x0004)
    int32_t                                       Over300Fps;                                                   // 0x0004(0x0004)
    int32_t                                       Over240Fps;                                                   // 0x0008(0x0004)
    int32_t                                       Over144Fps;                                                   // 0x000C(0x0004)
    int32_t                                       Over120Fps;                                                   // 0x0010(0x0004)
    int32_t                                       Over90Fps;                                                    // 0x0014(0x0004)
    int32_t                                       Over60Fps;                                                    // 0x0018(0x0004)
    int32_t                                       Over45Fps;                                                    // 0x001C(0x0004)
    int32_t                                       Over30Fps;                                                    // 0x0020(0x0004)
    int32_t                                       Over15Fps;                                                    // 0x0024(0x0004)
    int32_t                                       Over10Fps;                                                    // 0x0028(0x0004)
    int32_t                                       Over1Fps;                                                     // 0x002C(0x0004)
    int32_t                                       Under1Fps;                                                    // 0x0030(0x0004)
};


// ScriptStruct  ShooterGame.InputLatencyStats
// Struct Size::0x0134
struct FInputLatencyStats
{
    FMetric                                       TotalEngineLatencyMs;                                         // 0x0000(0x0014)
    FMetric                                       TotalWorkMs;                                                  // 0x0014(0x0014)
    FMetric                                       TotalSlopMs;                                                  // 0x0028(0x0014)
    FMetric                                       TotalSlackMs;                                                 // 0x003C(0x0014)
    FMetric                                       PresentEndIntervalMs;                                         // 0x0050(0x0014)
    FInputLatencyFpsBuckets                       TotalEngineLatencyFpsBuckets;                                 // 0x0064(0x0034)
    FInputLatencyFpsBuckets                       TotalWorkFpsBuckets;                                          // 0x0098(0x0034)
    FInputLatencyFpsBuckets                       TotalWorkAndSlackFpsBuckets;                                  // 0x00CC(0x0034)
    FInputLatencyFpsBuckets                       PresentEndIntervalFpsBuckets;                                 // 0x0100(0x0034)
};


// ScriptStruct  ShooterGame.InputLatencyFpsBuckets
// Struct Size::0x0034
struct FInputLatencyFpsBuckets
{
    int32_t                                       Over360Fps;                                                   // 0x0000(0x0004)
    int32_t                                       Over300Fps;                                                   // 0x0004(0x0004)
    int32_t                                       Over240Fps;                                                   // 0x0008(0x0004)
    int32_t                                       Over144Fps;                                                   // 0x000C(0x0004)
    int32_t                                       Over120Fps;                                                   // 0x0010(0x0004)
    int32_t                                       Over90Fps;                                                    // 0x0014(0x0004)
    int32_t                                       Over60Fps;                                                    // 0x0018(0x0004)
    int32_t                                       Over45Fps;                                                    // 0x001C(0x0004)
    int32_t                                       Over30Fps;                                                    // 0x0020(0x0004)
    int32_t                                       Over15Fps;                                                    // 0x0024(0x0004)
    int32_t                                       Over10Fps;                                                    // 0x0028(0x0004)
    int32_t                                       Over1Fps;                                                     // 0x002C(0x0004)
    int32_t                                       Under1Fps;                                                    // 0x0030(0x0004)
};


// ScriptStruct  ShooterGame.ClientFrameBuckets
// Struct Size::0x0024
struct FClientFrameBuckets
{
    int32_t                                       FramesOver240FPS;                                             // 0x0000(0x0004)
    int32_t                                       FramesOver144FPS;                                             // 0x0004(0x0004)
    int32_t                                       FramesOver120FPS;                                             // 0x0008(0x0004)
    int32_t                                       FramesOver60FPS;                                              // 0x000C(0x0004)
    int32_t                                       FramesOver30FPS;                                              // 0x0010(0x0004)
    int32_t                                       FramesOver15FPS;                                              // 0x0014(0x0004)
    int32_t                                       FramesOver10FPS;                                              // 0x0018(0x0004)
    int32_t                                       FramesOver1FPS;                                               // 0x001C(0x0004)
    int32_t                                       FramesUnder1FPS;                                              // 0x0020(0x0004)
};


// ScriptStruct  ShooterGame.GameBaseInstanceInfo
// Struct Size::0x00A8
struct FGameBaseInstanceInfo
{
    FString                                       InstanceId;                                                   // 0x0000(0x0010)
    FString                                       Branch;                                                       // 0x0010(0x0010)
    FString                                       BuildConfiguration;                                           // 0x0020(0x0010)
    FString                                       BuildVersion;                                                 // 0x0030(0x0010)
    int32_t                                       Changelist;                                                   // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       OsMajor;                                                      // 0x0048(0x0010)
    FString                                       OsMinor;                                                      // 0x0058(0x0010)
    FString                                       OsHostname;                                                   // 0x0068(0x0010)
    FString                                       Cpu;                                                          // 0x0078(0x0010)
    FString                                       CpuVendor;                                                    // 0x0088(0x0010)
    int32_t                                       CpuMhz;                                                       // 0x0098(0x0004)
    int32_t                                       CpuCoreCount;                                                 // 0x009C(0x0004)
    int32_t                                       CpuThreadCount;                                               // 0x00A0(0x0004)
    int32_t                                       TotalPhysicalMemoryMB;                                        // 0x00A4(0x0004)
};


// ScriptStruct  ShooterGame.GameServerInstanceInfo
// Struct Size::0x00B8
struct FGameServerInstanceInfo : public FGameBaseInstanceInfo
{
    FString                                       MatchID;                                                      // 0x00A8(0x0010)
};


// ScriptStruct  ShooterGame.GameClientInstanceInfo
// Struct Size::0x0180
struct FGameClientInstanceInfo : public FGameBaseInstanceInfo
{
    FString                                       PlayerName;                                                   // 0x00A8(0x0010)
    FString                                       RSOSubject;                                                   // 0x00B8(0x0010)
    bool                                          IsSoftReset;                                                  // 0x00C8(0x0001)
    char                                          pa_00C9[0x0007]                                               // 0x00C9(0x0007)
    FString                                       Gpu;                                                          // 0x00D0(0x0010)
    FString                                       GpuVendor;                                                    // 0x00E0(0x0010)
    FString                                       GpuUserDriverVersion;                                         // 0x00F0(0x0010)
    FString                                       GpuInternalDriverVersion;                                     // 0x0100(0x0010)
    int32_t                                       GpuVramMB;                                                    // 0x0110(0x0004)
    int32_t                                       NativeScreenResolutionX;                                      // 0x0114(0x0004)
    int32_t                                       NativeScreenResolutionY;                                      // 0x0118(0x0004)
    char                                          pa_011C[0x0004]                                               // 0x011C(0x0004)
    FString                                       Platform;                                                     // 0x0120(0x0010)
    FString                                       DeviceModel;                                                  // 0x0130(0x0010)
    FString                                       DefaultDeviceQuality;                                         // 0x0140(0x0010)
    bool                                          IsRunningOnSSD;                                               // 0x0150(0x0001)
    bool                                          IsRunningOnUnknownDriveType;                                  // 0x0151(0x0001)
    char                                          pa_0152[0x0002]                                               // 0x0152(0x0002)
    int32_t                                       SIMDSupport;                                                  // 0x0154(0x0004)
    int32_t                                       DxHighestVersion;                                             // 0x0158(0x0004)
    char                                          pa_015C[0x0004]                                               // 0x015C(0x0004)
    FString                                       DxMaxFeatureLevel;                                            // 0x0160(0x0010)
    FString                                       DxShaderModelVersion;                                         // 0x0170(0x0010)
};


// ScriptStruct  ShooterGame.BoolPlatformSettingOverride
// Struct Size::0x003C
struct FBoolPlatformSettingOverride
{
    FDelegate                                     HasPlatformOverrideValue;                                     // 0x0000(0x0014)
    FDelegate                                     GetPlatformOverrideValue;                                     // 0x0014(0x0014)
    FDelegate                                     SetPlatformOverrideValue;                                     // 0x0028(0x0014)
};


// ScriptStruct  ShooterGame.StringSettingChangedDelegateList
// Struct Size::0x0010
struct FStringSettingChangedDelegateList
{
    TArray<FDelegate>                             Delegates;                                                    // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.BoolSettingChangedDelegateList
// Struct Size::0x0010
struct FBoolSettingChangedDelegateList
{
    TArray<FDelegate>                             Delegates;                                                    // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.IntSettingChangedDelegateList
// Struct Size::0x0010
struct FIntSettingChangedDelegateList
{
    TArray<FDelegate>                             Delegates;                                                    // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.FloatSettingChangedDelegateList
// Struct Size::0x0010
struct FFloatSettingChangedDelegateList
{
    TArray<FDelegate>                             Delegates;                                                    // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ReflectedSettingsInitializationBlob
// Struct Size::0x0080
struct FReflectedSettingsInitializationBlob
{
    TArray<enum class EAresFloatSettingName>      ReflectedFloatSettingNames;                                   // 0x0000(0x0010)
    TArray<enum class EAresIntSettingName>        ReflectedIntSettingNames;                                     // 0x0010(0x0010)
    TArray<enum class EAresBoolSettingName>       ReflectedBoolSettingNames;                                    // 0x0020(0x0010)
    TArray<enum class EAresStringSettingName>     ReflectedStringSettingNames;                                  // 0x0030(0x0010)
    TArray<float>                                 ReflectedFloatSettingValues;                                  // 0x0040(0x0010)
    TArray<int32_t>                               ReflectedIntSettingValues;                                    // 0x0050(0x0010)
    TArray<bool>                                  ReflectedBoolSettingValues;                                   // 0x0060(0x0010)
    TArray<FString>                               ReflectedStringSettingValues;                                 // 0x0070(0x0010)
};


// ScriptStruct  ShooterGame.AresSettingsPresetsOption
// Struct Size::0x0158
struct FAresSettingsPresetsOption
{
    FText                                         PresetName;                                                   // 0x0000(0x0018)
    TMap<enum class EAresFloatSettingName,float>  FloatSettings;                                                // 0x0018(0x0050)
    TMap<enum class EAresIntSettingName,int32_t>  IntSettings;                                                  // 0x0068(0x0050)
    TMap<enum class EAresBoolSettingName,bool>    BoolSettings;                                                 // 0x00B8(0x0050)
    TMap<enum class EAresStringSettingName,FString>StringSettings;                                              // 0x0108(0x0050)
};


// ScriptStruct  ShooterGame.AresVoidSetting
// Struct Size::0x000C
struct FAresVoidSetting
{
    enum class EAresVoidSettingName               SettingEnum;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       PlatformRequirements;                                         // 0x0004(0x0004)
    enum class ESettingStorageType                StorageType;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  ShooterGame.AresStringSetting
// Struct Size::0x0040
struct FAresStringSetting
{
    enum class EAresStringSettingName             SettingEnum;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       PlatformRequirements;                                         // 0x0004(0x0004)
    enum class ESettingStorageType                StorageType;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FString                                       DefaultValue;                                                 // 0x0010(0x0010)
    FString                                       PlatformAgnosticDefault;                                      // 0x0020(0x0010)
    FString                                       Value;                                                        // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.BaseBoolSetting
// Struct Size::0x0004
struct FBaseBoolSetting
{
    enum class EAresBoolSettingName               SettingEnum;                                                  // 0x0000(0x0001)
    bool                                          DefaultValue;                                                 // 0x0001(0x0001)
    bool                                          PlatformAgnosticDefault;                                      // 0x0002(0x0001)
    bool                                          Value;                                                        // 0x0003(0x0001)
};


// ScriptStruct  ShooterGame.AresBoolSetting
// Struct Size::0x000C
struct FAresBoolSetting : public FBaseBoolSetting
{
    int32_t                                       PlatformRequirements;                                         // 0x0004(0x0004)
    enum class ESettingStorageType                StorageType;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  ShooterGame.BaseIntSetting
// Struct Size::0x0018
struct FBaseIntSetting
{
    enum class EAresIntSettingName                SettingEnum;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       MinValue;                                                     // 0x0004(0x0004)
    int32_t                                       MaxValue;                                                     // 0x0008(0x0004)
    int32_t                                       DefaultValue;                                                 // 0x000C(0x0004)
    int32_t                                       PlatformAgnosticDefault;                                      // 0x0010(0x0004)
    int32_t                                       Value;                                                        // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.AresIntSetting
// Struct Size::0x0020
struct FAresIntSetting : public FBaseIntSetting
{
    int32_t                                       PlatformRequirements;                                         // 0x0018(0x0004)
    enum class ESettingStorageType                StorageType;                                                  // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  ShooterGame.BaseFloatSetting
// Struct Size::0x0018
struct FBaseFloatSetting
{
    enum class EAresFloatSettingName              SettingEnum;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MinValue;                                                     // 0x0004(0x0004)
    float                                         MaxValue;                                                     // 0x0008(0x0004)
    float                                         DefaultValue;                                                 // 0x000C(0x0004)
    float                                         PlatformAgnosticDefault;                                      // 0x0010(0x0004)
    float                                         Value;                                                        // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.AresFloatSetting
// Struct Size::0x0038
struct FAresFloatSetting : public FBaseFloatSetting
{
    int32_t                                       PlatformRequirements;                                         // 0x0018(0x0004)
    enum class ESettingStorageType                StorageType;                                                  // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    int32_t                                       ValueIncrementCount;                                          // 0x0020(0x0004)
    bool                                          bDisplayNormalizedValues;                                     // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         NormalizedMinValue;                                           // 0x0028(0x0004)
    float                                         NormalizedMaxValue;                                           // 0x002C(0x0004)
    bool                                          bShouldUseRealSettingSliderMinMax;                            // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         RealSettingSliderStep;                                        // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.AresStringSettingDTO
// Struct Size::0x0020
struct FAresStringSettingDTO
{
    FString                                       SettingEnum;                                                  // 0x0000(0x0010)
    FString                                       Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.AresBoolSettingDTO
// Struct Size::0x0018
struct FAresBoolSettingDTO
{
    FString                                       SettingEnum;                                                  // 0x0000(0x0010)
    bool                                          Value;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.AresIntSettingDTO
// Struct Size::0x0018
struct FAresIntSettingDTO
{
    FString                                       SettingEnum;                                                  // 0x0000(0x0010)
    int32_t                                       Value;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.AresFloatSettingDTO
// Struct Size::0x0018
struct FAresFloatSettingDTO
{
    FString                                       SettingEnum;                                                  // 0x0000(0x0010)
    float                                         Value;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.ShellBlurredInputGuardArgs
// Struct Size::0x0138
struct FShellBlurredInputGuardArgs
{
    bool                                          bApplyAlphaToBlur;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         BlurStrength;                                                 // 0x0004(0x0004)
    FSlateBrush                                   LowQualityFallbackBrush;                                      // 0x0008(0x0090)
    FSlateBrush                                   MaskImage;                                                    // 0x0098(0x0090)
    FLinearColor                                  Tint;                                                         // 0x0128(0x0010)
};


// ScriptStruct  ShooterGame.ShellContainerLayoutArgs
// Struct Size::0x003C
struct FShellContainerLayoutArgs
{
    FMargin                                       Padding;                                                      // 0x0000(0x0010)
    enum class EHorizontalAlignment               HorizontalAlignment;                                          // 0x0010(0x0001)
    enum class EVerticalAlignment                 VerticalAlignment;                                            // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    float                                         WidthOverride;                                                // 0x0014(0x0004)
    float                                         HeightOverride;                                               // 0x0018(0x0004)
    float                                         MinDesiredWidth;                                              // 0x001C(0x0004)
    float                                         MinDesiredHeight;                                             // 0x0020(0x0004)
    float                                         MaxDesiredWidth;                                              // 0x0024(0x0004)
    float                                         MaxDesiredHeight;                                             // 0x0028(0x0004)
    float                                         MinAspectRatio;                                               // 0x002C(0x0004)
    float                                         MaxAspectRatio;                                               // 0x0030(0x0004)
    bool                                          bWidthOverride;                                               // 0x0034(0x0001)
    bool                                          bHeightOverride;                                              // 0x0035(0x0001)
    bool                                          bMinDesiredWidth;                                             // 0x0036(0x0001)
    bool                                          bMinDesiredHeight;                                            // 0x0037(0x0001)
    bool                                          bMaxDesiredWidth;                                             // 0x0038(0x0001)
    bool                                          bMaxDesiredHeight;                                            // 0x0039(0x0001)
    bool                                          bMinAspectRatio;                                              // 0x003A(0x0001)
    bool                                          bMaxAspectRatio;                                              // 0x003B(0x0001)
};


// ScriptStruct  ShooterGame.ContentListing
// Struct Size::0x0390
struct FContentListing
{
    TArray<FCharacterCatalogData>                 Characters;                                                   // 0x0000(0x0010)
    TArray<FContentData>                          Equips;                                                       // 0x0010(0x0010)
    TArray<FContentData>                          Attachments;                                                  // 0x0020(0x0010)
    TArray<FGunSkinCatalogData>                   Skins;                                                        // 0x0030(0x0010)
    TArray<FContentData>                          SkinLevels;                                                   // 0x0040(0x0010)
    TArray<FContentData>                          Chromas;                                                      // 0x0050(0x0010)
    TArray<FMapCatalogData>                       Maps;                                                         // 0x0060(0x0010)
    TArray<FThemeCatalogData>                     Themes;                                                       // 0x0070(0x0010)
    TArray<FGameModeCatalogData>                  GameModes;                                                    // 0x0080(0x0010)
    TArray<FContentData>                          Currencies;                                                   // 0x0090(0x0010)
    TArray<FContentData>                          Totems;                                                       // 0x00A0(0x0010)
    TArray<FThematicContentData>                  Sprays;                                                       // 0x00B0(0x0010)
    TArray<FContentData>                          SprayLevels;                                                  // 0x00C0(0x0010)
    TArray<FCharmCatalogData>                     Charms;                                                       // 0x00D0(0x0010)
    TArray<FContentData>                          CharmLevels;                                                  // 0x00E0(0x0010)
    TArray<FThematicContentData>                  PlayerCards;                                                  // 0x00F0(0x0010)
    TArray<FContentData>                          PlayerTitles;                                                 // 0x0100(0x0010)
    TArray<FContentData>                          StorefrontItems;                                              // 0x0110(0x0010)
    TArray<FContentTierCatalogData>               ContentTiers;                                                 // 0x0120(0x0010)
    FJuiceSpendRules                              JuiceSpendRules;                                              // 0x0130(0x0110)
    TArray<FMissionCatalogData>                   Missions;                                                     // 0x0240(0x0010)
    TArray<FEventCatalogData>                     Events;                                                       // 0x0250(0x0010)
    TArray<FSeasonCatalogData>                    Seasons;                                                      // 0x0260(0x0010)
    TArray<FCompetitiveSeasonCatalogData>         CompetitiveSeasons;                                           // 0x0270(0x0010)
    TArray<FPremierSeasonCatalogData>             PremierSeasons;                                               // 0x0280(0x0010)
    TArray<FPremierConferenceCatalogData>         PremierConferences;                                           // 0x0290(0x0010)
    FPremierCustomizationCatalogData              PremierCustomizationData;                                     // 0x02A0(0x0020)
    TArray<FStreamedVideoFileCatalogData>         StreamedVideoFiles;                                           // 0x02C0(0x0010)
    FContractListing                              ContractListing;                                              // 0x02D0(0x0020)
    FServiceDictionary                            ServiceDictionary;                                            // 0x02F0(0x0050)
    TArray<FLevelBorderCatalogData>               LevelBorders;                                                 // 0x0340(0x0010)
    TArray<FContentData>                          Ceremonies;                                                   // 0x0350(0x0010)
    TArray<FSubscriptionCatalogData>              Subscriptions;                                                // 0x0360(0x0010)
    TArray<FArchiveCatalogData>                   Archives;                                                     // 0x0370(0x0010)
    TArray<FRecruitmentCatalogData>               RecruitmentData;                                              // 0x0380(0x0010)
};


// ScriptStruct  ShooterGame.RecruitmentCatalogData
// Struct Size::0x00A8
struct FRecruitmentCatalogData
{
    FGuid                                         AgentID;                                                      // 0x0000(0x0010)
    FGuid                                         CounterID;                                                    // 0x0010(0x0010)
    int32_t                                       MilestoneThreshold;                                           // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FDateTime                                     StartDate;                                                    // 0x0028(0x0008)
    FDateTime                                     EndDate;                                                      // 0x0030(0x0008)
    bool                                          DevelopmentOnly;                                              // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    TArray<FString>                               ExcludedPlatforms;                                            // 0x0040(0x0010)
    TMap<FString,FPlatformInclusionFlags>         IncludedPlatforms;                                            // 0x0050(0x0050)
    UObject*                                      PrimaryAsset;                                                 // 0x00A0(0x0008)
};


// ScriptStruct  ShooterGame.PlatformInclusionFlags
// Struct Size::0x0001
struct FPlatformInclusionFlags
{
    bool                                          DevelopmentOnly;                                              // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.ContentData
// Struct Size::0x0110
struct FContentData
{
    FText                                         Name;                                                         // 0x0000(0x0018)
    TMap<FString,FString>                         LocalizedNamesByCulture;                                      // 0x0018(0x0050)
    FString                                       Guid;                                                         // 0x0068(0x0010)
    FString                                       AssetName;                                                    // 0x0078(0x0010)
    FString                                       AssetPath;                                                    // 0x0088(0x0010)
    bool                                          DevelopmentOnly;                                              // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
    TArray<FString>                               ExcludedPlatforms;                                            // 0x00A0(0x0010)
    TMap<FString,FPlatformInclusionFlags>         IncludedPlatforms;                                            // 0x00B0(0x0050)
    bool                                          BaseContent;                                                  // 0x0100(0x0001)
    char                                          pa_0101[0x0007]                                               // 0x0101(0x0007)
    UObject*                                      PrimaryAsset;                                                 // 0x0108(0x0008)
};


// ScriptStruct  ShooterGame.ArchiveCatalogData
// Struct Size::0x0120
struct FArchiveCatalogData : public FContentData
{
    TArray<FGuid>                                 ContractIDs;                                                  // 0x0110(0x0010)
};


// ScriptStruct  ShooterGame.SubscriptionCatalogData
// Struct Size::0x0148
struct FSubscriptionCatalogData : public FContentData
{
    FGuid                                         EntitlementTypeID;                                            // 0x0110(0x0010)
    FGuid                                         AuthoringSubscriptionID;                                      // 0x0120(0x0010)
    float                                         XPBoostAmount;                                                // 0x0130(0x0004)
    char                                          pa_0134[0x0004]                                               // 0x0134(0x0004)
    FString                                       XPBoostType;                                                  // 0x0138(0x0010)
};


// ScriptStruct  ShooterGame.LevelBorderCatalogData
// Struct Size::0x0080
struct FLevelBorderCatalogData
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    int32_t                                       StartingLevel;                                                // 0x0010(0x0004)
    bool                                          DevelopmentOnly;                                              // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    TArray<FString>                               ExcludedPlatforms;                                            // 0x0018(0x0010)
    TMap<FString,FPlatformInclusionFlags>         IncludedPlatforms;                                            // 0x0028(0x0050)
    UObject*                                      PrimaryAsset;                                                 // 0x0078(0x0008)
};


// ScriptStruct  ShooterGame.ServiceDictionary
// Struct Size::0x0050
struct FServiceDictionary
{
    TMap<FString,FServiceDictionaryEntry>         Entries;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.ServiceDictionaryEntry
// Struct Size::0x0050
struct FServiceDictionaryEntry
{
    TMap<FString,FString>                         Translations;                                                 // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.ContractListing
// Struct Size::0x0020
struct FContractListing
{
    TArray<FContractDefinition>                   Contracts;                                                    // 0x0000(0x0010)
    FGuid                                         DefaultSpecialContractID;                                     // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.ContractDefinition
// Struct Size::0x01D0
struct FContractDefinition
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FText                                         Name;                                                         // 0x0010(0x0018)
    TMap<FString,FString>                         LocalizedNamesByCulture;                                      // 0x0028(0x0050)
    FString                                       AssetName;                                                    // 0x0078(0x0010)
    FString                                       AssetPath;                                                    // 0x0088(0x0010)
    bool                                          DevelopmentOnly;                                              // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
    TArray<FString>                               ExcludedPlatforms;                                            // 0x00A0(0x0010)
    TMap<FString,FPlatformInclusionFlags>         IncludedPlatforms;                                            // 0x00B0(0x0050)
    bool                                          BaseContent;                                                  // 0x0100(0x0001)
    char                                          pa_0101[0x0007]                                               // 0x0101(0x0007)
    FString                                       ContractType;                                                 // 0x0108(0x0010)
    FGuid                                         SeasonID;                                                     // 0x0118(0x0010)
    FGuid                                         EventID;                                                      // 0x0128(0x0010)
    FProgressionSchedule                          ProgressionSchedule;                                          // 0x0138(0x0020)
    TArray<FAlternateProgressionSchedule>         AlternateProgressionSchedules;                                // 0x0158(0x0010)
    TArray<FRewardSchedule>                       RewardSchedules;                                              // 0x0168(0x0010)
    FPremiumContractDetails                       PremiumContractDetails;                                       // 0x0178(0x0034)
    char                                          pa_01AC[0x0004]                                               // 0x01AC(0x0004)
    TArray<FEntitlementIdentifier>                RequiredEntitlementsForLevelPurchases;                        // 0x01B0(0x0010)
    TArray<int32_t>                               AccordThresholds;                                             // 0x01C0(0x0010)
};


// ScriptStruct  ShooterGame.EntitlementIdentifier
// Struct Size::0x0020
struct FEntitlementIdentifier
{
    FGuid                                         ItemTypeID;                                                   // 0x0000(0x0010)
    FGuid                                         ItemID;                                                       // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PremiumContractDetails
// Struct Size::0x0034
struct FPremiumContractDetails
{
    FEntitlementIdentifier                        Entitlement;                                                  // 0x0000(0x0020)
    FGuid                                         PurchaseCurrencyID;                                           // 0x0020(0x0010)
    int32_t                                       PurchaseCost;                                                 // 0x0030(0x0004)
};


// ScriptStruct  ShooterGame.RewardSchedule
// Struct Size::0x0030
struct FRewardSchedule
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FRewardSchedulePrerequisites                  Prerequisites;                                                // 0x0010(0x0010)
    TArray<FRewardGrant>                          RewardsPerLevel;                                              // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.RewardGrant
// Struct Size::0x0020
struct FRewardGrant
{
    TArray<FEntitlementReward>                    EntitlementRewards;                                           // 0x0000(0x0010)
    TArray<FWalletReward>                         WalletRewards;                                                // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.WalletReward
// Struct Size::0x0018
struct FWalletReward
{
    FGuid                                         CurrencyID;                                                   // 0x0000(0x0010)
    int64_t                                       Amount;                                                       // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.EntitlementReward
// Struct Size::0x0028
struct FEntitlementReward
{
    FGuid                                         ItemTypeID;                                                   // 0x0000(0x0010)
    FGuid                                         ItemID;                                                       // 0x0010(0x0010)
    int64_t                                       Amount;                                                       // 0x0020(0x0008)
};


// ScriptStruct  ShooterGame.RewardSchedulePrerequisites
// Struct Size::0x0010
struct FRewardSchedulePrerequisites
{
    TArray<FEntitlementIdentifier>                RequiredEntitlements;                                         // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.AlternateProgressionSchedule
// Struct Size::0x0020
struct FAlternateProgressionSchedule
{
    FGuid                                         ProgressionCurrencyID;                                        // 0x0000(0x0010)
    TArray<FAlternateProgressionLevel>            ProgressionDeltaPerLevel;                                     // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.AlternateProgressionLevel
// Struct Size::0x0008
struct FAlternateProgressionLevel
{
    bool                                          IsAvailable;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    uint32_t                                      ProgressionDelta;                                             // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.ProgressionSchedule
// Struct Size::0x0020
struct FProgressionSchedule
{
    FGuid                                         ProgressionCurrencyID;                                        // 0x0000(0x0010)
    TArray<uint32_t>                              ProgressionDeltaPerLevel;                                     // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.StreamedVideoFileCatalogData
// Struct Size::0x0020
struct FStreamedVideoFileCatalogData
{
    FString                                       SourcePath;                                                   // 0x0000(0x0010)
    FString                                       TargetFileName;                                               // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PremierCustomizationCatalogData
// Struct Size::0x0020
struct FPremierCustomizationCatalogData
{
    TArray<FPremierCustomizationIconCatalogData>  PremierIcons;                                                 // 0x0000(0x0010)
    TArray<FPremierCustomizationColorCatalogData> PremierCustomizationColors;                                   // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PremierCustomizationColorCatalogData
// Struct Size::0x0038
struct FPremierCustomizationColorCatalogData
{
    FText                                         ColorName;                                                    // 0x0000(0x0018)
    FString                                       Guid;                                                         // 0x0018(0x0010)
    FString                                       LinearColorString;                                            // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.PremierCustomizationIconCatalogData
// Struct Size::0x0090
struct FPremierCustomizationIconCatalogData
{
    FString                                       IconGuid;                                                     // 0x0000(0x0010)
    FString                                       IconName;                                                     // 0x0010(0x0010)
    bool                                          DevelopmentOnly;                                              // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FString>                               ExcludedPlatforms;                                            // 0x0028(0x0010)
    TMap<FString,FPlatformInclusionFlags>         IncludedPlatforms;                                            // 0x0038(0x0050)
    UObject*                                      PrimaryAsset;                                                 // 0x0088(0x0008)
};


// ScriptStruct  ShooterGame.PremierConferenceCatalogData
// Struct Size::0x0098
struct FPremierConferenceCatalogData
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FString                                       Key;                                                          // 0x0010(0x0010)
    bool                                          DevelopmentOnly;                                              // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FString>                               ExcludedPlatforms;                                            // 0x0028(0x0010)
    bool                                          IsSuper;                                                      // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    TMap<FString,FPlatformInclusionFlags>         IncludedPlatforms;                                            // 0x0040(0x0050)
    UObject*                                      PrimaryAsset;                                                 // 0x0090(0x0008)
};


// ScriptStruct  ShooterGame.PremierSeasonCatalogData
// Struct Size::0x0160
struct FPremierSeasonCatalogData
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FGuid                                         CompetitiveSeasonID;                                          // 0x0010(0x0010)
    FDateTime                                     StartTime;                                                    // 0x0020(0x0008)
    FDateTime                                     EndTime;                                                      // 0x0028(0x0008)
    TArray<FPremierEventCatalogData>              Events;                                                       // 0x0030(0x0010)
    TArray<FPremierDivisionCatalogData>           Divisions;                                                    // 0x0040(0x0010)
    TArray<FGuid>                                 ParticipationRewardsActIDs;                                   // 0x0050(0x0010)
    FRewardGrant                                  ParticipationRewards;                                         // 0x0060(0x0020)
    FRewardGrant                                  TournamentWinnerRewards;                                      // 0x0080(0x0020)
    TMap<FString,FRewardGrant>                    DivisionWinnerRewards;                                        // 0x00A0(0x0050)
    bool                                          DevelopmentOnly;                                              // 0x00F0(0x0001)
    char                                          pa_00F1[0x0007]                                               // 0x00F1(0x0007)
    TArray<FString>                               ExcludedPlatforms;                                            // 0x00F8(0x0010)
    TMap<FString,FPlatformInclusionFlags>         IncludedPlatforms;                                            // 0x0108(0x0050)
    UObject*                                      PrimaryAsset;                                                 // 0x0158(0x0008)
};


// ScriptStruct  ShooterGame.PremierDivisionCatalogData
// Struct Size::0x0030
struct FPremierDivisionCatalogData
{
    int32_t                                       Division;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FText                                         DivisionName;                                                 // 0x0008(0x0018)
    FString                                       DivisionGroup;                                                // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.PremierEventCatalogData
// Struct Size::0x0060
struct FPremierEventCatalogData
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FString                                       Type;                                                         // 0x0010(0x0010)
    FDateTime                                     StartDateTime;                                                // 0x0020(0x0008)
    FDateTime                                     EndDateTime;                                                  // 0x0028(0x0008)
    TArray<FPremierEventDivisionScheduleCatalogData>SchedulePerDivision;                                        // 0x0030(0x0010)
    FString                                       MapSelectionStrategy;                                         // 0x0040(0x0010)
    TArray<FGuid>                                 MapPoolMapIds;                                                // 0x0050(0x0010)
};


// ScriptStruct  ShooterGame.PremierEventDivisionScheduleCatalogData
// Struct Size::0x0018
struct FPremierEventDivisionScheduleCatalogData
{
    int32_t                                       Division;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FDateTime                                     StartDateTime;                                                // 0x0008(0x0008)
    FDateTime                                     EndDateTime;                                                  // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.CompetitiveSeasonCatalogData
// Struct Size::0x01C8
struct FCompetitiveSeasonCatalogData
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FGuid                                         SeasonID;                                                     // 0x0010(0x0010)
    TMap<FString,FRewardGrant>                    RankedRewards;                                                // 0x0020(0x0050)
    TArray<FCompetitiveTierCatalogData>           CompetitiveTiers;                                             // 0x0070(0x0010)
    FCompetitiveSeasonConfigCatalogData           Config;                                                       // 0x0080(0x00C8)
    FDateTime                                     StartTime;                                                    // 0x0148(0x0008)
    FDateTime                                     EndTime;                                                      // 0x0150(0x0008)
    bool                                          DevelopmentOnly;                                              // 0x0158(0x0001)
    char                                          pa_0159[0x0007]                                               // 0x0159(0x0007)
    TArray<FString>                               ExcludedPlatforms;                                            // 0x0160(0x0010)
    TMap<FString,FPlatformInclusionFlags>         IncludedPlatforms;                                            // 0x0170(0x0050)
    UObject*                                      PrimaryAsset;                                                 // 0x01C0(0x0008)
};


// ScriptStruct  ShooterGame.CompetitiveSeasonConfigCatalogData
// Struct Size::0x00C8
struct FCompetitiveSeasonConfigCatalogData
{
    int32_t                                       SeasonRankIndex;                                              // 0x0000(0x0004)
    int32_t                                       SeasonTopWinsMaximum;                                         // 0x0004(0x0004)
    int32_t                                       WinsNeededForSeasonRank;                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TMap<int32_t,int32_t>                         PlacementTierAdjustments;                                     // 0x0010(0x0050)
    int32_t                                       PlacementMaxTier;                                             // 0x0060(0x0004)
    int32_t                                       PlacementProgress;                                            // 0x0064(0x0004)
    float                                         LeaderboardRankRatingResetValue;                              // 0x0068(0x0004)
    float                                         NewSeasonMinVariance;                                         // 0x006C(0x0004)
    int32_t                                       SeasonGamesToShowSkill;                                       // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    TMap<FGuid,FCompetitiveSeasonConfigArchiveCatalogData>Archives;                                             // 0x0078(0x0050)
};


// ScriptStruct  ShooterGame.CompetitiveSeasonConfigArchiveCatalogData
// Struct Size::0x0020
struct FCompetitiveSeasonConfigArchiveCatalogData
{
    TArray<FGuid>                                 Archives;                                                     // 0x0000(0x0010)
    FGuid                                         CompleteMasteryArchiveID;                                     // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.CompetitiveTierCatalogData
// Struct Size::0x0030
struct FCompetitiveTierCatalogData
{
    int32_t                                       Tier;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FText                                         TierName;                                                     // 0x0008(0x0018)
    FString                                       Division;                                                     // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.SeasonCatalogData
// Struct Size::0x0118
struct FSeasonCatalogData
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FText                                         Name;                                                         // 0x0010(0x0018)
    TMap<FString,FString>                         LocalizedNamesByCulture;                                      // 0x0028(0x0050)
    FGuid                                         ParentSeasonID;                                               // 0x0078(0x0010)
    FString                                       Type;                                                         // 0x0088(0x0010)
    FDateTime                                     StartTime;                                                    // 0x0098(0x0008)
    FDateTime                                     EndTime;                                                      // 0x00A0(0x0008)
    bool                                          DevelopmentOnly;                                              // 0x00A8(0x0001)
    char                                          pa_00A9[0x0007]                                               // 0x00A9(0x0007)
    TArray<FString>                               ExcludedPlatforms;                                            // 0x00B0(0x0010)
    TMap<FString,FPlatformInclusionFlags>         IncludedPlatforms;                                            // 0x00C0(0x0050)
    UObject*                                      PrimaryAsset;                                                 // 0x0110(0x0008)
};


// ScriptStruct  ShooterGame.EventCatalogData
// Struct Size::0x00F8
struct FEventCatalogData
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FText                                         Name;                                                         // 0x0010(0x0018)
    TMap<FString,FString>                         LocalizedNamesByCulture;                                      // 0x0028(0x0050)
    FDateTime                                     StartTime;                                                    // 0x0078(0x0008)
    FDateTime                                     EndTime;                                                      // 0x0080(0x0008)
    bool                                          DevelopmentOnly;                                              // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
    TArray<FString>                               ExcludedPlatforms;                                            // 0x0090(0x0010)
    TMap<FString,FPlatformInclusionFlags>         IncludedPlatforms;                                            // 0x00A0(0x0050)
    UObject*                                      PrimaryAsset;                                                 // 0x00F0(0x0008)
};


// ScriptStruct  ShooterGame.MissionCatalogData
// Struct Size::0x01E0
struct FMissionCatalogData
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FText                                         Title;                                                        // 0x0010(0x0018)
    TMap<FString,FString>                         LocalizedTitlesByCulture;                                     // 0x0028(0x0050)
    FString                                       Type;                                                         // 0x0078(0x0010)
    TArray<FString>                               Tags;                                                         // 0x0088(0x0010)
    FDateTime                                     Expiration;                                                   // 0x0098(0x0008)
    FDateTime                                     Activation;                                                   // 0x00A0(0x0008)
    int64_t                                       XPGrant;                                                      // 0x00A8(0x0008)
    TMap<FGuid,int64_t>                           ProgressToCompleteObjectives;                                 // 0x00B0(0x0050)
    TMap<FGuid,FString>                           ObjectiveNames;                                               // 0x0100(0x0050)
    FGuid                                         AccordAgent;                                                  // 0x0150(0x0010)
    FGuid                                         AccordContract;                                               // 0x0160(0x0010)
    bool                                          DevelopmentOnly;                                              // 0x0170(0x0001)
    char                                          pa_0171[0x0007]                                               // 0x0171(0x0007)
    TArray<FString>                               ExcludedPlatforms;                                            // 0x0178(0x0010)
    TMap<FString,FPlatformInclusionFlags>         IncludedPlatforms;                                            // 0x0188(0x0050)
    UObject*                                      PrimaryAsset;                                                 // 0x01D8(0x0008)
};


// ScriptStruct  ShooterGame.JuiceSpendRules
// Struct Size::0x0110
struct FJuiceSpendRules
{
    TMap<FGuid,int32_t>                           WeaponSkinEnergyValueByContentTier;                           // 0x0000(0x0050)
    TMap<FGuid,int32_t>                           WeaponSkinEnergyCostByContentTier;                            // 0x0050(0x0050)
    int32_t                                       WeaponSkinLevelEnergyCost;                                    // 0x00A0(0x0004)
    int32_t                                       WeaponSkinVariantEnergyCost;                                  // 0x00A4(0x0004)
    bool                                          DevelopmentOnly;                                              // 0x00A8(0x0001)
    char                                          pa_00A9[0x0007]                                               // 0x00A9(0x0007)
    TArray<FString>                               ExcludedPlatforms;                                            // 0x00B0(0x0010)
    TMap<FString,FPlatformInclusionFlags>         IncludedPlatforms;                                            // 0x00C0(0x0050)
};


// ScriptStruct  ShooterGame.ContentTierCatalogData
// Struct Size::0x0118
struct FContentTierCatalogData : public FContentData
{
    int32_t                                       TierRank;                                                     // 0x0110(0x0004)
    char                                          pa_0114[0x0004]                                               // 0x0114(0x0004)
};


// ScriptStruct  ShooterGame.ThematicContentData
// Struct Size::0x0120
struct FThematicContentData : public FContentData
{
    FGuid                                         ThemeID;                                                      // 0x0110(0x0010)
};


// ScriptStruct  ShooterGame.CharmCatalogData
// Struct Size::0x0130
struct FCharmCatalogData : public FThematicContentData
{
    TArray<FGuid>                                 LevelIDs;                                                     // 0x0120(0x0010)
};


// ScriptStruct  ShooterGame.GameModeCatalogData
// Struct Size::0x0170
struct FGameModeCatalogData : public FContentData
{
    TMap<FString,FString>                         GameRuleOverrides;                                            // 0x0110(0x0050)
    TArray<FName>                                 MapToModeTags;                                                // 0x0160(0x0010)
};


// ScriptStruct  ShooterGame.ThemeCatalogData
// Struct Size::0x0160
struct FThemeCatalogData : public FContentData
{
    FThemeFeatures                                Features;                                                     // 0x0110(0x0050)
};


// ScriptStruct  ShooterGame.ThemeFeatures
// Struct Size::0x0050
struct FThemeFeatures
{
    FDateTime                                     ReleaseDate;                                                  // 0x0000(0x0008)
    FString                                       PrimaryThematicCategory;                                      // 0x0008(0x0010)
    FString                                       SecondaryThematicCategory;                                    // 0x0018(0x0010)
    FString                                       ThemeContinuationCategory;                                    // 0x0028(0x0010)
    FString                                       PromotionCategory;                                            // 0x0038(0x0010)
    bool                                          LimitedEdition;                                               // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  ShooterGame.MapCatalogData
// Struct Size::0x0120
struct FMapCatalogData : public FContentData
{
    TArray<FName>                                 MapToModeTags;                                                // 0x0110(0x0010)
};


// ScriptStruct  ShooterGame.GunSkinCatalogData
// Struct Size::0x0228
struct FGunSkinCatalogData : public FContentData
{
    FGuid                                         EquippableID;                                                 // 0x0110(0x0010)
    FGuid                                         ContentTierID;                                                // 0x0120(0x0010)
    FGuid                                         DefaultChromaID;                                              // 0x0130(0x0010)
    TArray<FGuid>                                 ChromaIDs;                                                    // 0x0140(0x0010)
    TArray<FGuid>                                 LevelIDs;                                                     // 0x0150(0x0010)
    FGuid                                         ThemeID;                                                      // 0x0160(0x0010)
    FGunSkinFeatures                              Features;                                                     // 0x0170(0x00B8)
};


// ScriptStruct  ShooterGame.GunSkinFeatures
// Struct Size::0x00B8
struct FGunSkinFeatures
{
    FString                                       ModelCategory;                                                // 0x0000(0x0010)
    FString                                       ReloadVFXCategory;                                            // 0x0010(0x0010)
    FString                                       InspectVFXCategory;                                           // 0x0020(0x0010)
    FString                                       EquipVFXCategory;                                             // 0x0030(0x0010)
    FString                                       IdleVFXCategory;                                              // 0x0040(0x0010)
    FString                                       FiringVFXCategory;                                            // 0x0050(0x0010)
    FString                                       SFXCategory;                                                  // 0x0060(0x0010)
    FString                                       FiringSFXCategory;                                            // 0x0070(0x0010)
    FString                                       FinisherCategory;                                             // 0x0080(0x0010)
    bool                                          KillBanner;                                                   // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
    FString                                       MeleeCategory;                                                // 0x0098(0x0010)
    FString                                       MeleeArchetypeCategory;                                       // 0x00A8(0x0010)
};


// ScriptStruct  ShooterGame.CharacterCatalogData
// Struct Size::0x0118
struct FCharacterCatalogData : public FContentData
{
    FDateTime                                     ReleaseDate;                                                  // 0x0110(0x0008)
};


// ScriptStruct  ShooterGame.AresSocialPageDefinition
// Struct Size::0x0040
struct FAresSocialPageDefinition
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FCommonActivatableWidget*                     PageClass;                                                    // 0x0010(0x0008)
    FAresCommonButton*                            TabButtonClass;                                               // 0x0018(0x0008)
    FAresButtonImageBrushContainer*               IconBrushClass;                                               // 0x0020(0x0008)
    FText                                         DisplayName;                                                  // 0x0028(0x0018)
};


// ScriptStruct  ShooterGame.SortPartyData
// Struct Size::0x0030
struct FSortPartyData
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       FirstMemberFullName;                                          // 0x0010(0x0010)
    FAresSocialPresenceState                      FirstMemberPresenceState;                                     // 0x0020(0x0005)
    enum class EAresPartyAccessibility            PartyAccessibility;                                           // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
    int32_t                                       PartySize;                                                    // 0x0028(0x0004)
    int32_t                                       MembersListSize;                                              // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.FriendData
// Struct Size::0x0028
struct FFriendData
{
    FString                                       Id;                                                           // 0x0000(0x0010)
    FString                                       FullName;                                                     // 0x0010(0x0010)
    FAresSocialPresenceState                      PresenceState;                                                // 0x0020(0x0005)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  ShooterGame.PurchsableTableRow
// Struct Size::0x0038
struct FPurchsableTableRow : public FTableRowBase
{
    TSoftClassPtr<UObject>                        PurchsableClass;                                              // 0x0008(0x0030)
};


// ScriptStruct  ShooterGame.BlueprintAutomatedTest
// Struct Size::0x0028
struct FBlueprintAutomatedTest
{
    FString                                       ShortName;                                                    // 0x0000(0x0010)
    FAresTestLogic*                               ServerTestLogic;                                              // 0x0010(0x0008)
    TArray<FAresTestLogic*>                       ClientTestLogic;                                              // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.AresAutomationEvent
// Struct Size::0x0020
struct FAresAutomationEvent
{
    FString                                       Type;                                                         // 0x0000(0x0010)
    TArray<FString>                               Params;                                                       // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.AresTouchDoubleTapGestureProperties
// Struct Size::0x0014
struct FAresTouchDoubleTapGestureProperties
{
    float                                         MaxTimeBetweenTaps;                                           // 0x0000(0x0004)
    float                                         MaxDistanceBetweenTapsInInches;                               // 0x0004(0x0004)
    FAresTouchHoldGestureProperties               HoldProperties;                                               // 0x0008(0x000C)
};


// ScriptStruct  ShooterGame.AresTouchHoldGestureProperties
// Struct Size::0x000C
struct FAresTouchHoldGestureProperties
{
    float                                         MinimumTimeToHold;                                            // 0x0000(0x0004)
    float                                         MaximumMoveDistanceInInches;                                  // 0x0004(0x0004)
    char                                          MaxTouchesTracked;                                            // 0x0008(0x0001)
    bool                                          bRestartChargeOnInterrupt;                                    // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  ShooterGame.orwardedTouchInputRegistryEntry
// Struct Size::0x0010
struct ForwardedTouchInputRegistryEntry
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.AresTouchWheelSegmentTableEntry
// Struct Size::0x0048
struct FAresTouchWheelSegmentTableEntry : public FTableRowBase
{
    bool                                          bIsStaticSectionSegment;                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FAresTouchWheelSegmentData                    SegmentData;                                                  // 0x0010(0x0028)
    TArray<FAresTouchWheelSegmentData>            SegmentSuboptions;                                            // 0x0038(0x0010)
};


// ScriptStruct  ShooterGame.AresTouchWheelSegmentData
// Struct Size::0x0028
struct FAresTouchWheelSegmentData
{
    FAresTouchWheelSegment*                       SegmentBehaviorClass;                                         // 0x0000(0x0008)
    FText                                         OverrideSegmentText;                                          // 0x0008(0x0018)
    FTexture2D*                                   OverrideSegmentIconTexture;                                   // 0x0020(0x0008)
};


// ScriptStruct  ShooterGame.TrailNodeData
// Struct Size::0x0018
struct FTrailNodeData
{
    FParticleSystemComponent*                     SpawnedBeam;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.UINavigationGlobalsEntry
// Struct Size::0x0210
struct FUINavigationGlobalsEntry
{
    TSoftClassPtr<UObject>                        ScreenAsset;                                                  // 0x0000(0x0030)
    FText                                         ScreenDisplayName;                                            // 0x0030(0x0018)
    FText                                         ScreenDisplayNameAllCaps;                                     // 0x0048(0x0018)
    bool                                          bUseDisplayNameAsBreadcrumb;                                  // 0x0060(0x0001)
    bool                                          bHideParentBreadcrumb;                                        // 0x0061(0x0001)
    char                                          pa_0062[0x0006]                                               // 0x0062(0x0006)
    TSoftObjectPtr<FTexture2D>                    ScreenIcon;                                                   // 0x0068(0x0030)
    TSoftObjectPtr<FTexture2D>                    BackgroundArtOverride;                                        // 0x0098(0x0030)
    FSlateBrush                                   BackgroundImageOverride;                                      // 0x00C8(0x0090)
    bool                                          bUseSlateBrushBackground;                                     // 0x0158(0x0001)
    char                                          pa_0159[0x0007]                                               // 0x0159(0x0007)
    FMenuStackMediaSourceParams                   BackgroundVideoOverride;                                      // 0x0160(0x0030)
    FText                                         OverrideBackActionName;                                       // 0x0190(0x0018)
    enum class EHandleUserBackActionOption        BackHandlingBehaviour;                                        // 0x01A8(0x0001)
    FShellWidgetVisibilityOptions                 ShellWidgetVisibilityOptions;                                 // 0x01A9(0x0009)
    bool                                          bIsLandingScreen;                                             // 0x01B2(0x0001)
    char                                          pa_01B3[0x0005]                                               // 0x01B3(0x0005)
    TSoftClassPtr<UObject>                        NavigationButtonClass;                                        // 0x01B8(0x0030)
    TArray<FName>                                 ValidChildScreens;                                            // 0x01E8(0x0010)
    int32_t                                       NavigationBarIndex;                                           // 0x01F8(0x0004)
    char                                          pa_01FC[0x0004]                                               // 0x01FC(0x0004)
    TArray<FModalContextInfo>                     ModalContext;                                                 // 0x0200(0x0010)
};


// ScriptStruct  ShooterGame.ModalContextInfo
// Struct Size::0x0018
struct FModalContextInfo
{
    enum class EModalContextType                  ContextType;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FGameplayTag>                          ContextList;                                                  // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.AresUIPropertyMap
// Struct Size::0x02D0
struct FAresUIPropertyMap
{
    TMap<FString,int32_t>                         IntProperties;                                                // 0x0000(0x0050)
    TMap<FString,float>                           FloatProperties;                                              // 0x0050(0x0050)
    TMap<FString,bool>                            BoolProperties;                                               // 0x00A0(0x0050)
    TMap<FString,FText>                           TextProperties;                                               // 0x00F0(0x0050)
    TMap<FString,FLinearColor>                    LinearColorProperties;                                        // 0x0140(0x0050)
    TMap<FString,FVector2D>                       Vector2DProperties;                                           // 0x0190(0x0050)
    TMap<FString,FTexture2D*>                     Texture2DProperties;                                          // 0x01E0(0x0050)
    TMap<FString,FMaterialInstance*>              MaterialInstanceProperties;                                   // 0x0230(0x0050)
    TMap<FString,FMaterialInterface*>             MaterialInterfaceProperties;                                  // 0x0280(0x0050)
};


// ScriptStruct  ShooterGame.AresWhizBySoundTuning
// Struct Size::0x0018
struct FAresWhizBySoundTuning
{
    FName                                         WhizByName;                                                   // 0x0000(0x000C)
    int32_t                                       NumWhizByVariations;                                          // 0x000C(0x0004)
    bool                                          bBypassWhizCooldown;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         WhizByChance;                                                 // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.NormalizedScreenDistanceCheck
// Struct Size::0x0008
struct FNormalizedScreenDistanceCheck
{
    float                                         HorizontalMaxScreenDistanceNormalized01;                      // 0x0000(0x0004)
    float                                         VerticalMaxScreenDistanceNormalized01;                        // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.MinimapFloorConfig
// Struct Size::0x0010
struct FMinimapFloorConfig
{
    float                                         ZHeight;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FTexture2D*                                   MinimapFloorOverlay;                                          // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.MaterialParamCollectionOverrides
// Struct Size::0x0010
struct FMaterialParamCollectionOverrides
{
    TArray<FMaterialParamCollectionOverride>      OverrideList;                                                 // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.MaterialParamCollectionOverride
// Struct Size::0x0010
struct FMaterialParamCollectionOverride
{
    FMaterialParameterCollection*                 BaseCollection;                                               // 0x0000(0x0008)
    FMaterialParameterCollection*                 OverrideCollection;                                           // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.VisionOccluderGroup
// Struct Size::0x0028
struct FVisionOccluderGroup
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  ShooterGame.GameModeSpecificSublevelsByKey
// Struct Size::0x0018
struct FGameModeSpecificSublevelsByKey
{
    enum class EGameModeSublevelKey               SublevelKey;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<TSoftObjectPtr<FWorld>>                Sublevels;                                                    // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.CalloutRegion
// Struct Size::0x0010
struct FCalloutRegion
{
    TArray<FString>                               SubRegions;                                                   // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.VisionGeometry
// Struct Size::0x0020
struct FVisionGeometry : public FTableRowBase
{
    FString                                       Type;                                                         // 0x0008(0x0010)
    float                                         X;                                                            // 0x0018(0x0004)
    float                                         Y;                                                            // 0x001C(0x0004)
};


// ScriptStruct  Engine.NetViewer
// Struct Size::0x0030
struct FNetViewer
{
    FNetConnection*                               Connection;                                                   // 0x0000(0x0008)
    AActor*                                       InViewer;                                                     // 0x0008(0x0008)
    AActor*                                       ViewTarget;                                                   // 0x0010(0x0008)
    FVector                                       ViewLocation;                                                 // 0x0018(0x000C)
    FVector                                       ViewDir;                                                      // 0x0024(0x000C)
};


// ScriptStruct  ShooterGame.AresNetViewer
// Struct Size::0x0030
struct FAresNetViewer : public FNetViewer
{
};


// ScriptStruct  ShooterGame.DamageTrackingEntry
// Struct Size::0x0010
struct FDamageTrackingEntry
{
    float                                         AccumulatedDamage;                                            // 0x0000(0x0004)
    float                                         ConsumedDamage;                                               // 0x0004(0x0004)
    float                                         LastTimeDamageDealt;                                          // 0x0008(0x0004)
    float                                         AssistExpiryTime;                                             // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.DamagingAssistThreshold
// Struct Size::0x0008
struct FDamagingAssistThreshold
{
    float                                         DamageThreshold;                                              // 0x0000(0x0004)
    float                                         AssistDuration;                                               // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.AssistDefinitionTableRow
// Struct Size::0x0058
struct FAssistDefinitionTableRow : public FTableRowBase
{
    FGameplayTag                                  Tag;                                                          // 0x0008(0x000C)
    enum class EAresAssistType                    AssistType;                                                   // 0x0014(0x0001)
    enum class EBasicAssistType                   BasicType;                                                    // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    FGameplayTag                                  HigherPriorityThan;                                           // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TSoftClassPtr<UObject>                        ShipsWithAssetLabel;                                          // 0x0028(0x0030)
};


// ScriptStruct  ShooterGame.AttachmentSettings
// Struct Size::0x000C
struct FAttachmentSettings
{
    FName                                         AttachPoint;                                                  // 0x0000(0x000C)
};


// ScriptStruct  ShooterGame.AVSResponseCallback
// Struct Size::0x0028
struct FAVSResponseCallback
{
    FDelegate                                     OnSuccess;                                                    // 0x0000(0x0014)
    FDelegate                                     OnError;                                                      // 0x0014(0x0014)
};


// ScriptStruct  ShooterGame.AVSCountry
// Struct Size::0x0038
struct FAVSCountry : public FTableRowBase
{
    FString                                       CountryISO;                                                   // 0x0008(0x0010)
    FText                                         CountryName;                                                  // 0x0018(0x0018)
    int32_t                                       CountryCode;                                                  // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.AVSRMSResponse
// Struct Size::0x0070
struct FAVSRMSResponse
{
    FAVSRMSData                                   Data;                                                         // 0x0000(0x0040)
    FAVSRMSError                                  Error;                                                        // 0x0040(0x0020)
    FString                                       ClientMessageId;                                              // 0x0060(0x0010)
};


// ScriptStruct  ShooterGame.AVSRMSError
// Struct Size::0x0020
struct FAVSRMSError
{
    FString                                       ErrorCode;                                                    // 0x0000(0x0010)
    FString                                       Message;                                                      // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.AVSRMSData
// Struct Size::0x0040
struct FAVSRMSData
{
    FString                                       Status;                                                       // 0x0000(0x0010)
    int64_t                                       PinExpiresAtEpochMillis;                                      // 0x0010(0x0008)
    FAVSPhoneNumberData                           MessagedPhoneNumberObfuscated;                                // 0x0018(0x0028)
};


// ScriptStruct  ShooterGame.AVSPhoneNumberData
// Struct Size::0x0028
struct FAVSPhoneNumberData
{
    FString                                       CountryCode;                                                  // 0x0000(0x0010)
    FString                                       EndsWith;                                                     // 0x0010(0x0010)
    int64_t                                       Length;                                                       // 0x0020(0x0008)
};


// ScriptStruct  ShooterGame.AVSDebugUnverifyAccountRequest
// Struct Size::0x0010
struct FAVSDebugUnverifyAccountRequest
{
    FString                                       Puuid;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.AVSDebugVerifyAccountRequest
// Struct Size::0x0020
struct FAVSDebugVerifyAccountRequest
{
    FString                                       Puuid;                                                        // 0x0000(0x0010)
    FString                                       PhoneNumber;                                                  // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.AVSConfirmPinRequest
// Struct Size::0x0010
struct FAVSConfirmPinRequest
{
    FString                                       OneTimePin;                                                   // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.AVSSendDeactivationPinRequest
// Struct Size::0x0010
struct FAVSSendDeactivationPinRequest
{
    FString                                       Locale;                                                       // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.AVSSendActivationPinRequest
// Struct Size::0x0020
struct FAVSSendActivationPinRequest
{
    FString                                       PhoneNumber;                                                  // 0x0000(0x0010)
    FString                                       Locale;                                                       // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.CrosshairShape
// Struct Size::0x0018
struct FCrosshairShape
{
    bool                                          bElementVisible;                                              // 0x0000(0x0001)
    enum class ECrosshairShapeType                ShapeType;                                                    // 0x0001(0x0001)
    enum class EAresHudCrosshairPoints            PointType;                                                    // 0x0002(0x0001)
    enum class EAresDrawOrigin                    DrawOrigin;                                                   // 0x0003(0x0001)
    FVector2D                                     ElementOffset;                                                // 0x0004(0x0008)
    FVector2D                                     ElementErrorDirection;                                        // 0x000C(0x0008)
    enum class ECrosshairLocation                 CrosshairLocation;                                            // 0x0014(0x0001)
    bool                                          bFadeOutWithRecoil;                                           // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
};


// ScriptStruct  ShooterGame.AresHitConfirmTuning
// Struct Size::0x0058
struct FAresHitConfirmTuning
{
    FTexture*                                     Image;                                                        // 0x0000(0x0008)
    FAresHudImageParams                           ImageParams;                                                  // 0x0008(0x0010)
    FAresTimedInterpolant                         AlphaTuning;                                                  // 0x0018(0x001C)
    FAresTimedOvershootValue                      ScaleTuning;                                                  // 0x0034(0x0020)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  ShooterGame.AresBaseGameMatchState
// Struct Size::0x0001
struct FAresBaseGameMatchState
{
    bool                                          bHasMatchStarted;                                             // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.BehaviorScoreTrackerTelemetryEvent
// Struct Size::0x0030
struct FBehaviorScoreTrackerTelemetryEvent
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    FString                                       Subject;                                                      // 0x0010(0x0010)
    FBehaviorScoreTrackerMouseMovementTelemetry   MouseMovementTelemetry;                                       // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.BehaviorScoreTrackerMouseMovementTelemetry
// Struct Size::0x0010
struct FBehaviorScoreTrackerMouseMovementTelemetry
{
    float                                         PitchDeltaMean;                                               // 0x0000(0x0004)
    float                                         PitchDeltaStandardDeviation;                                  // 0x0004(0x0004)
    float                                         YawDeltaMean;                                                 // 0x0008(0x0004)
    float                                         YawDeltaStandardDeviation;                                    // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.BlindManagerState
// Struct Size::0x0018
struct FBlindManagerState
{
    TArray<FActiveBlind>                          ActiveBlinds;                                                 // 0x0000(0x0010)
    float                                         LongestActiveBlindDuration;                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.ActiveBlind
// Struct Size::0x0040
struct FActiveBlind
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
    uint32_t                                      BlindId;                                                      // 0x000C(0x0004)
    FEffectID                                     BlindEffectID;                                                // 0x0010(0x0020)
    float                                         InitialDuration;                                              // 0x0030(0x0004)
    float                                         StartNetMovementTime;                                         // 0x0034(0x0004)
    FBlindConfig*                                 BlindConfig;                                                  // 0x0038(0x0008)
};


// ScriptStruct  ShooterGame.EffectID
// Struct Size::0x0020
struct FEffectID
{
    FName                                         SourceID;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       EffectID;                                                     // 0x0010(0x0008)
    bool                                          bLocalEffect;                                                 // 0x0018(0x0001)
    bool                                          bTransient;                                                   // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
};


// ScriptStruct  ShooterGame.BlindSpawnParams
// Struct Size::0x0030
struct FBlindSpawnParams
{
    float                                         BlindDuration;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FBlindConfig*                                 BlindConfig;                                                  // 0x0008(0x0008)
    FVector                                       BlindExplosionLocation;                                       // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    AActor*                                       CausingActor;                                                 // 0x0020(0x0008)
    float                                         NetBlindTimestamp;                                            // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.PendingBlindValidation
// Struct Size::0x0008
struct FPendingBlindValidation
{
    float                                         BlindDuration;                                                // 0x0000(0x0004)
    bool                                          bIsServerResult;                                              // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  ShooterGame.AresBombGameMatchState
// Struct Size::0x0008
struct FAresBombGameMatchState : public FAresBaseGameMatchState
{
    bool                                          bIsStoreAvaliable;                                            // 0x0001(0x0001)
    bool                                          bShouldDisplayTimer;                                          // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         TimeToDisplay;                                                // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.BracketLineConfig
// Struct Size::0x0048
struct FBracketLineConfig
{
    FLinearColor                                  EliminationLineColor;                                         // 0x0000(0x0010)
    float                                         EliminationLineThickness;                                     // 0x0010(0x0004)
    float                                         EliminationInitialLeadOff;                                    // 0x0014(0x0004)
    float                                         EliminationCornerDiagonalLength;                              // 0x0018(0x0004)
    FBracketLineConnectionPadding                 EliminationConnectionPadding;                                 // 0x001C(0x0008)
    FLinearColor                                  SwissLineColor;                                               // 0x0024(0x0010)
    float                                         SwissLineThickness;                                           // 0x0034(0x0004)
    float                                         SwissInitialLeadOff;                                          // 0x0038(0x0004)
    float                                         SwissLineOverlapPadding;                                      // 0x003C(0x0004)
    FBracketLineConnectionPadding                 SwissConnectionPadding;                                       // 0x0040(0x0008)
};


// ScriptStruct  ShooterGame.BracketLineConnectionPadding
// Struct Size::0x0008
struct FBracketLineConnectionPadding
{
    float                                         Start;                                                        // 0x0000(0x0004)
    float                                         End;                                                          // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.BracketLineParams
// Struct Size::0x0003
struct FBracketLineParams
{
    char                                          pa_0000[0x0003]                                               // 0x0000(0x0003)
};


// ScriptStruct  ShooterGame.BracketLineConnection
// Struct Size::0x0068
struct FBracketLineConnection
{
    char                                          pa_0000[0x0068]                                               // 0x0000(0x0068)
};


// ScriptStruct  ShooterGame.BTEMilestone
// Struct Size::0x0090
struct FBTEMilestone
{
    FGuid                                         Uuid;                                                         // 0x0000(0x0010)
    TArray<FEditableReward*>                      Rewards;                                                      // 0x0010(0x0010)
    TArray<FMissionDataAsset*>                    Missions;                                                     // 0x0020(0x0010)
    FString                                       ButtonURL;                                                    // 0x0030(0x0010)
    FString                                       ConsoleQueueID;                                               // 0x0040(0x0010)
    FString                                       PCQueueID;                                                    // 0x0050(0x0010)
    TSoftClassPtr<UObject>                        UIData;                                                       // 0x0060(0x0030)
};


// ScriptStruct  ShooterGame.CAPProgressionConfig
// Struct Size::0x0050
struct FCAPProgressionConfig
{
    FString                                       Discriminator;                                                // 0x0000(0x0010)
    FCAPProgressionConfigGroup                    Content;                                                      // 0x0010(0x0040)
};


// ScriptStruct  ShooterGame.CAPProgressionConfigGroup
// Struct Size::0x0040
struct FCAPProgressionConfigGroup
{
    FGuid                                         Id;                                                           // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    TArray<FCAPProgressionConfigCounter>          Counters;                                                     // 0x0020(0x0010)
    TArray<FCAPProgressionConfigMilestone>        Milestones;                                                   // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.CAPProgressionConfigMilestone
// Struct Size::0x0060
struct FCAPProgressionConfigMilestone
{
    FGuid                                         Id;                                                           // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    TArray<FCAPProgressionConfigTriggerCounter>   CounterTriggers;                                              // 0x0020(0x0010)
    FCAPProgressionConfigRewards                  Rewards;                                                      // 0x0030(0x0030)
};


// ScriptStruct  ShooterGame.CAPProgressionConfigRewards
// Struct Size::0x0030
struct FCAPProgressionConfigRewards
{
    TArray<FCAPProgressionConfigRewardEntitlement>EntitlementRewards;                                           // 0x0000(0x0010)
    TArray<FCAPProgressionConfigRewardCurrency>   CurrencyRewards;                                              // 0x0010(0x0010)
    TArray<FCAPProgressionConfigRewardProgressionDelta>DeltaRewards;                                            // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.CAPProgressionConfigReward
// Struct Size::0x0010
struct FCAPProgressionConfigReward
{
    FString                                       Type;                                                         // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.CAPProgressionConfigRewardProgressionDelta
// Struct Size::0x0020
struct FCAPProgressionConfigRewardProgressionDelta : public FCAPProgressionConfigReward
{
    TArray<FCAPProgressionConfigProgressionCounterDelta>Deltas;                                                 // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.CAPProgressionConfigProgressionCounterDelta
// Struct Size::0x0018
struct FCAPProgressionConfigProgressionCounterDelta
{
    FGuid                                         CounterID;                                                    // 0x0000(0x0010)
    int64_t                                       Amount;                                                       // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.CAPProgressionConfigRewardCurrency
// Struct Size::0x0028
struct FCAPProgressionConfigRewardCurrency : public FCAPProgressionConfigReward
{
    FGuid                                         CurrencyId;                                                   // 0x0010(0x0010)
    int64_t                                       Amount;                                                       // 0x0020(0x0008)
};


// ScriptStruct  ShooterGame.CAPProgressionConfigRewardEntitlement
// Struct Size::0x0048
struct FCAPProgressionConfigRewardEntitlement : public FCAPProgressionConfigReward
{
    FGuid                                         ItemID;                                                       // 0x0010(0x0010)
    FGuid                                         ItemTypeID;                                                   // 0x0020(0x0010)
    FGuid                                         TypeID;                                                       // 0x0030(0x0010)
    int64_t                                       Quantity;                                                     // 0x0040(0x0008)
};


// ScriptStruct  ShooterGame.CAPProgressionConfigTrigger
// Struct Size::0x0010
struct FCAPProgressionConfigTrigger
{
    FString                                       Type;                                                         // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.CAPProgressionConfigTriggerCounter
// Struct Size::0x0028
struct FCAPProgressionConfigTriggerCounter : public FCAPProgressionConfigTrigger
{
    FGuid                                         CounterID;                                                    // 0x0010(0x0010)
    int64_t                                       TriggerValue;                                                 // 0x0020(0x0008)
};


// ScriptStruct  ShooterGame.CAPProgressionConfigCounter
// Struct Size::0x0038
struct FCAPProgressionConfigCounter
{
    FGuid                                         Id;                                                           // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       Direction;                                                    // 0x0020(0x0010)
    int32_t                                       StartValue;                                                   // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.SortedNode
// Struct Size::0x0010
struct FSortedNode
{
    float                                         Distance;                                                     // 0x0000(0x0004)
    FIntPoint                                     Coords;                                                       // 0x0004(0x0008)
    char                                          ZLevel;                                                       // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  ShooterGame.NodeGrid
// Struct Size::0x0038
struct FNodeGrid
{
    FIntPoint                                     Min;                                                          // 0x0000(0x0008)
    FIntPoint                                     Max;                                                          // 0x0008(0x0008)
    float                                         LowestNode;                                                   // 0x0010(0x0004)
    float                                         HeighestNode;                                                 // 0x0014(0x0004)
    float                                         MaxDistance;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FPatchNode>                            NodeArray;                                                    // 0x0020(0x0010)
    bool                                          bPatchIsValid;                                                // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       LineSize;                                                     // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.PatchNode
// Struct Size::0x0070
struct FPatchNode
{
    float                                         FloorZ;                                                       // 0x0000(0x0004)
    float                                         CeilingZ;                                                     // 0x0004(0x0004)
    float                                         Distance;                                                     // 0x0008(0x0004)
    FVector                                       Normal;                                                       // 0x000C(0x000C)
    char                                          bEdgePoint;                                                   // 0x0018(0x0001)
    enum class ENodeStatus                        Status;                                                       // 0x0019(0x0001)
    int16_t                                       ListIndex;                                                    // 0x001A(0x0002)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TMap<FIntPoint,FVector>                       BlockedLocations;                                             // 0x0020(0x0050)
};


// ScriptStruct  ShooterGame.CellEdge
// Struct Size::0x003C
struct FCellEdge
{
    FVector                                       Start;                                                        // 0x0000(0x000C)
    float                                         StartDistance;                                                // 0x000C(0x0004)
    FIntPoint                                     StartPoint;                                                   // 0x0010(0x0008)
    FVector                                       End;                                                          // 0x0018(0x000C)
    float                                         EndDistance;                                                  // 0x0024(0x0004)
    FIntPoint                                     EndPoint;                                                     // 0x0028(0x0008)
    FVector                                       OutsideDirection;                                             // 0x0030(0x000C)
};


// ScriptStruct  ShooterGame.CharacterHudDrawValues
// Struct Size::0x0030
struct FCharacterHudDrawValues
{
    FTexture*                                     Icon;                                                         // 0x0000(0x0008)
    FLinearColor                                  IconTint;                                                     // 0x0008(0x0010)
    int32_t                                       Value;                                                        // 0x0018(0x0004)
    FLinearColor                                  ValueTint;                                                    // 0x001C(0x0010)
    int32_t                                       MaxValue;                                                     // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.CharacterHUDUIDataStruct
// Struct Size::0x0030
struct FCharacterHUDUIDataStruct
{
    TSoftClassPtr<UObject>                        UIData;                                                       // 0x0000(0x0030)
};


// ScriptStruct  ShooterGame.ChatFriendMetadatas
// Struct Size::0x0010
struct FChatFriendMetadatas
{
    TArray<FChatFriendMetadata>                   Friends;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ChatFriendMetadata
// Struct Size::0x0090
struct FChatFriendMetadata
{
    FString                                       DisplayGroup;                                                 // 0x0000(0x0010)
    FString                                       GameName;                                                     // 0x0010(0x0010)
    FString                                       GameTag;                                                      // 0x0020(0x0010)
    FString                                       Group;                                                        // 0x0030(0x0010)
    FString                                       Name;                                                         // 0x0040(0x0010)
    FString                                       Note;                                                         // 0x0050(0x0010)
    FString                                       Pid;                                                          // 0x0060(0x0010)
    FString                                       Puuid;                                                        // 0x0070(0x0010)
    FString                                       Region;                                                       // 0x0080(0x0010)
};


// ScriptStruct  ShooterGame.ChatFriendMetadataUpdate
// Struct Size::0x0030
struct FChatFriendMetadataUpdate
{
    FString                                       Puuid;                                                        // 0x0000(0x0010)
    FString                                       Group;                                                        // 0x0010(0x0010)
    FString                                       Note;                                                         // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.Chronometer
// Struct Size::0x0030
struct FChronometer
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
    float                                         TimeElapsed;                                                  // 0x0018(0x0004)
    float                                         WallTimeElapsed;                                              // 0x001C(0x0004)
    float                                         TimeDilation;                                                 // 0x0020(0x0004)
    float                                         LastBroadcastRate;                                            // 0x0024(0x0004)
    bool                                          bPaused;                                                      // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  ShooterGame.CinematicCameraDebugData
// Struct Size::0x00F0
struct FCinematicCameraDebugData
{
    FCinematicCameraData                          CameraData;                                                   // 0x0000(0x0060)
    FCinematicCameraScoreData                     ScoreData;                                                    // 0x0060(0x0070)
    FString                                       CameraActorName;                                              // 0x00D0(0x0010)
    AActor*                                       CameraActor;                                                  // 0x00E0(0x0008)
    bool                                          bIsDestroyed;                                                 // 0x00E8(0x0001)
    char                                          pa_00E9[0x0007]                                               // 0x00E9(0x0007)
};


// ScriptStruct  ShooterGame.CinematicCameraScoreData
// Struct Size::0x0070
struct FCinematicCameraScoreData
{
    FCinematicCameraData                          CameraData;                                                   // 0x0000(0x0060)
    float                                         Score;                                                        // 0x0060(0x0004)
    float                                         CameraToTargetDotProduct;                                     // 0x0064(0x0004)
    float                                         DistanceFromCamera;                                           // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  ShooterGame.ClientFilteredPerformanceProfile
// Struct Size::0x0160
struct FClientFilteredPerformanceProfile
{
    TArray<FClientPerRoundPerformanceData>        PerRoundPerformanceData;                                      // 0x0000(0x0010)
    char                                          GameplayFlagsFilter;                                          // 0x0010(0x0001)
    bool                                          IsCoachOrObserver;                                            // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
    FString                                       InstanceId;                                                   // 0x0018(0x0010)
    FString                                       Subject;                                                      // 0x0028(0x0010)
    FString                                       MatchId;                                                      // 0x0038(0x0010)
    FTelemetryPlatformInfo                        PlatformInfo;                                                 // 0x0048(0x0020)
    FClientHardwareInfo                           HardwareInfo;                                                 // 0x0068(0x00A0)
    FPerfSettings                                 Settings;                                                     // 0x0108(0x0058)
};


// ScriptStruct  ShooterGame.PerfSettings
// Struct Size::0x0058
struct FPerfSettings
{
    FString                                       WindowMode;                                                   // 0x0000(0x0010)
    float                                         FpsCap;                                                       // 0x0010(0x0004)
    int32_t                                       VSyncMode;                                                    // 0x0014(0x0004)
    int32_t                                       UserSelectedResolutionX;                                      // 0x0018(0x0004)
    int32_t                                       UserSelectedResolutionY;                                      // 0x001C(0x0004)
    int32_t                                       DetailQuality;                                                // 0x0020(0x0004)
    int32_t                                       MaterialQuality;                                              // 0x0024(0x0004)
    int32_t                                       TextureQuality;                                               // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       AntiAliasing;                                                 // 0x0030(0x0010)
    int32_t                                       ClarityEnabled;                                               // 0x0040(0x0004)
    int32_t                                       SharpenEnabled;                                               // 0x0044(0x0004)
    int32_t                                       CharacterOutlines;                                            // 0x0048(0x0004)
    int32_t                                       OneFrameLatency;                                              // 0x004C(0x0004)
    int32_t                                       RGIInputLatencyEnabled;                                       // 0x0050(0x0004)
    int32_t                                       VariableRefreshRateEnabled;                                   // 0x0054(0x0004)
};


// ScriptStruct  ShooterGame.TelemetryPlatformInfo
// Struct Size::0x0020
struct FTelemetryPlatformInfo
{
    FString                                       platformType;                                                 // 0x0000(0x0010)
    FString                                       platformOS;                                                   // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.ClientPerRoundPerformanceData
// Struct Size::0x06C8
struct FClientPerRoundPerformanceData
{
    int64_t                                       RoundDuration;                                                // 0x0000(0x0008)
    int32_t                                       RoundNumber;                                                  // 0x0008(0x0004)
    FMetric                                       TotalFrameTime;                                               // 0x000C(0x0014)
    FMetric                                       ProcessingTime;                                               // 0x0020(0x0014)
    FAresSystemTelemetryMetrics                   SystemMetrics;                                                // 0x0034(0x05A0)
    FClientFrameBuckets                           FrameBuckets;                                                 // 0x05D4(0x0024)
    FMachinePerfStats                             MachinePerfStats;                                             // 0x05F8(0x0064)
    FAresObjectMetrics                            ObjectMetrics;                                                // 0x065C(0x0064)
    char                                          MoveTimestepsPerSecond;                                       // 0x06C0(0x0001)
    char                                          pa_06C1[0x0007]                                               // 0x06C1(0x0007)
};


// ScriptStruct  ShooterGame.ClientEndOfRoundPerformanceProfile
// Struct Size::0x09E0
struct FClientEndOfRoundPerformanceProfile
{
    FMetric                                       TotalFrameTime;                                               // 0x0000(0x0014)
    FMetric                                       ProcessingTime;                                               // 0x0014(0x0014)
    FAresSystemTelemetryMetrics                   SystemMetrics;                                                // 0x0028(0x05A0)
    FAresObjectMetrics                            ObjectMetrics;                                                // 0x05C8(0x0064)
    FMetric                                       GPUTime;                                                      // 0x062C(0x0014)
    FGPUStats                                     GPUStats;                                                     // 0x0640(0x005C)
    FClientFrameBuckets                           FrameBuckets;                                                 // 0x069C(0x0024)
    FString                                       MatchID;                                                      // 0x06C0(0x0010)
    int32_t                                       RoundNumber;                                                  // 0x06D0(0x0004)
    char                                          pa_06D4[0x0004]                                               // 0x06D4(0x0004)
    int64_t                                       RoundDuration;                                                // 0x06D8(0x0008)
    FString                                       InstanceId;                                                   // 0x06E0(0x0010)
    FPerfSettings                                 Settings;                                                     // 0x06F0(0x0058)
    FMachinePerfStats                             MachinePerfStats;                                             // 0x0748(0x0064)
    char                                          MoveTimestepsPerSecond;                                       // 0x07AC(0x0001)
    char                                          pa_07AD[0x0003]                                               // 0x07AD(0x0003)
    FNetworkPacketStats                           NetworkPacketStats;                                           // 0x07B0(0x0054)
    char                                          pa_0804[0x0004]                                               // 0x0804(0x0004)
    FNetworkLatencyStats                          NetworkLatencyStats;                                          // 0x0808(0x0070)
    FInputLatencyStats                            InputLatencyStats;                                            // 0x0878(0x0134)
    char                                          pa_09AC[0x0004]                                               // 0x09AC(0x0004)
    FString                                       PUUID;                                                        // 0x09B0(0x0010)
    FTelemetryPlatformInfo                        PlatformInfo;                                                 // 0x09C0(0x0020)
};


// ScriptStruct  ShooterGame.NetworkLatencyStats
// Struct Size::0x0070
struct FNetworkLatencyStats
{
    FMetric                                       NetworkRTTms;                                                 // 0x0000(0x0014)
    FPingBuckets                                  NetworkRTTmsBuckets;                                          // 0x0014(0x001C)
    FPacketDeltaTimeBuckets                       PacketDeltaTimeBuckets;                                       // 0x0030(0x001C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FString                                       NetworkConnectionType;                                        // 0x0050(0x0010)
    FString                                       SimulatedNetworkDegradationPreset;                            // 0x0060(0x0010)
};


// ScriptStruct  ShooterGame.PingBuckets
// Struct Size::0x001C
struct FPingBuckets
{
    int32_t                                       Over200ms;                                                    // 0x0000(0x0004)
    int32_t                                       Between100and200ms;                                           // 0x0004(0x0004)
    int32_t                                       Between50and100ms;                                            // 0x0008(0x0004)
    int32_t                                       Between35and50ms;                                             // 0x000C(0x0004)
    int32_t                                       Between20and35ms;                                             // 0x0010(0x0004)
    int32_t                                       Between10and20ms;                                             // 0x0014(0x0004)
    int32_t                                       Below10ms;                                                    // 0x0018(0x0004)
};


// ScriptStruct  ShooterGame.NetworkPacketStats
// Struct Size::0x0054
struct FNetworkPacketStats
{
    FMetric                                       SentPacketSize;                                               // 0x0000(0x0014)
    uint32_t                                      BytesSent;                                                    // 0x0014(0x0004)
    uint32_t                                      PacketsSent;                                                  // 0x0018(0x0004)
    uint32_t                                      LostOutgoingPackets;                                          // 0x001C(0x0004)
    uint32_t                                      PacketsSentOutOfOrder;                                        // 0x0020(0x0004)
    uint32_t                                      PacketsSplit;                                                 // 0x0024(0x0004)
    uint32_t                                      PacketsOverSizeSoftLimit;                                     // 0x0028(0x0004)
    uint32_t                                      PacketsOverSizeHardLimit;                                     // 0x002C(0x0004)
    FMetric                                       ReceivedPacketSize;                                           // 0x0030(0x0014)
    uint32_t                                      BytesReceived;                                                // 0x0044(0x0004)
    uint32_t                                      PacketsReceived;                                              // 0x0048(0x0004)
    uint32_t                                      LostIncomingPackets;                                          // 0x004C(0x0004)
    uint32_t                                      PacketsReceivedOutOfOrder;                                    // 0x0050(0x0004)
};


// ScriptStruct  ShooterGame.ClientRemoteClientTimingErrorEvent
// Struct Size::0x0038
struct FClientRemoteClientTimingErrorEvent
{
    FString                                       MatchId;                                                      // 0x0000(0x0010)
    FString                                       Subject;                                                      // 0x0010(0x0010)
    float                                         MovementTimestampLocal;                                       // 0x0020(0x0004)
    float                                         MovementTimestampServer;                                      // 0x0024(0x0004)
    int32_t                                       TimeStampBasis;                                               // 0x0028(0x0004)
    float                                         SimulationTimeAvailable;                                      // 0x002C(0x0004)
    float                                         SyncedSimulationTimeAvailable;                                // 0x0030(0x0004)
    bool                                          HaveProcessedAnyMove;                                         // 0x0034(0x0001)
    bool                                          HasBasis;                                                     // 0x0035(0x0001)
    char                                          pa_0036[0x0002]                                               // 0x0036(0x0002)
};


// ScriptStruct  ShooterGame.ClientGameplaySystemTrackingData
// Struct Size::0x00C8
struct FClientGameplaySystemTrackingData
{
    char                                          pa_0000[0x00C8]                                               // 0x0000(0x00C8)
};


// ScriptStruct  ShooterGame.ClientGameplaySystemSummaryEvent
// Struct Size::0x00E8
struct FClientGameplaySystemSummaryEvent
{
    FString                                       MatchId;                                                      // 0x0000(0x0010)
    FString                                       Subject;                                                      // 0x0010(0x0010)
    FClientGameplaySystemSummary                  CombatData;                                                   // 0x0020(0x0064)
    FClientGameplaySystemSummary                  NonCombatData;                                                // 0x0084(0x0064)
};


// ScriptStruct  ShooterGame.ClientGameplaySystemSummary
// Struct Size::0x0064
struct FClientGameplaySystemSummary
{
    FMoveCorrectionSizeBuckets                    MoveCorrectionSizeBuckets;                                    // 0x0000(0x0018)
    uint32_t                                      EquippableCorrectionCount;                                    // 0x0018(0x0004)
    uint32_t                                      DroppedMoveEventCount;                                        // 0x001C(0x0004)
    float                                         DroppedMoveEventMeanDuration;                                 // 0x0020(0x0004)
    float                                         DroppedMoveEventMaxDuration;                                  // 0x0024(0x0004)
    uint32_t                                      DroppedInputEventCount;                                       // 0x0028(0x0004)
    float                                         DroppedInputEventMeanDuration;                                // 0x002C(0x0004)
    float                                         DroppedInputEventMaxDuration;                                 // 0x0030(0x0004)
    FRemoteMoveQueueSizeBuckets                   RemoteMoveQueueSizeBuckets;                                   // 0x0034(0x0018)
    uint32_t                                      RemoteForwardPredictEventCount;                               // 0x004C(0x0004)
    float                                         RemoteForwardPredictMeanDuration;                             // 0x0050(0x0004)
    float                                         RemoteForwardPredictMaxDuration;                              // 0x0054(0x0004)
    float                                         RemoteMoveProcessingDelayMean;                                // 0x0058(0x0004)
    float                                         RemoteMoveProcessingDelayStdDeviation;                        // 0x005C(0x0004)
    float                                         RemoteMoveProcessingDelayP95;                                 // 0x0060(0x0004)
};


// ScriptStruct  ShooterGame.RemoteMoveQueueSizeBuckets
// Struct Size::0x0018
struct FRemoteMoveQueueSizeBuckets
{
    int32_t                                       EmptyQueue;                                                   // 0x0000(0x0004)
    int32_t                                       Between0and2;                                                 // 0x0004(0x0004)
    int32_t                                       Between2and4;                                                 // 0x0008(0x0004)
    int32_t                                       Between4and6;                                                 // 0x000C(0x0004)
    int32_t                                       Between6and8;                                                 // 0x0010(0x0004)
    int32_t                                       Over8;                                                        // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.MoveCorrectionSizeBuckets
// Struct Size::0x0018
struct FMoveCorrectionSizeBuckets
{
    int32_t                                       LessThan10;                                                   // 0x0000(0x0004)
    int32_t                                       Between10and50;                                               // 0x0004(0x0004)
    int32_t                                       Between50and100;                                              // 0x0008(0x0004)
    int32_t                                       Between100and200;                                             // 0x000C(0x0004)
    int32_t                                       Between200and400;                                             // 0x0010(0x0004)
    int32_t                                       AtLeast400;                                                   // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.ClientTelemetryPeristenceData
// Struct Size::0x0030
struct FClientTelemetryPeristenceData
{
    FMidMatchNetworkFailureDetails                LastMidMatchNetworkFailureDetails;                            // 0x0000(0x0018)
    FMidMatchCrashDetails                         LastMidMatchCrashDetails;                                     // 0x0018(0x0018)
};


// ScriptStruct  ShooterGame.MidMatchCrashDetails
// Struct Size::0x0018
struct FMidMatchCrashDetails
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       MatchID;                                                      // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.MidMatchNetworkFailureDetails
// Struct Size::0x0018
struct FMidMatchNetworkFailureDetails
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    enum class ENetworkFailure                    FailureType;                                                  // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FString                                       MatchID;                                                      // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.UINotification
// Struct Size::0x0020
struct FUINotification
{
    FString                                       Title;                                                        // 0x0000(0x0010)
    FString                                       Message;                                                      // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.CNHopeNotification
// Struct Size::0x0048
struct FCNHopeNotification
{
    enum class ECNPolicyType                      PolicyTypeEnum;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       PolicyType;                                                   // 0x0008(0x0010)
    FString                                       HopeTitle;                                                    // 0x0018(0x0010)
    FString                                       HopeMessage;                                                  // 0x0028(0x0010)
    int64_t                                       LogoutTime;                                                   // 0x0038(0x0008)
    int64_t                                       SecondsToLogoutTime;                                          // 0x0040(0x0008)
};


// ScriptStruct  ShooterGame.RoundReportEvents
// Struct Size::0x0018
struct FRoundReportEvents
{
    int32_t                                       RoundNum;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FRoundReportEvent*>                    Events;                                                       // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.RoundReportEventDeferral
// Struct Size::0x0010
struct FRoundReportEventDeferral
{
    char                                          DeferralFlag;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FShooterPlayerState*                          TargetPlayerState;                                            // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.RoundReports
// Struct Size::0x0028
struct FRoundReports
{
    int32_t                                       RoundNum;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FCharacterCombatReport>                Reports;                                                      // 0x0008(0x0010)
    TArray<FExtendedCharacterCombatReport*>       ExtendedCombatReports;                                        // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.CharacterCombatReport
// Struct Size::0x0078
struct FCharacterCombatReport
{
    int32_t                                       RoundNumber;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FRoundTimestamp                               LastInteractionTime;                                          // 0x0008(0x0018)
    TArray<FParticipantInteractions>              Interactions;                                                 // 0x0020(0x0010)
    FCombatReportRespawnInfo                      RespawnInfo;                                                  // 0x0030(0x0020)
    FCombatReportDeathDetails                     DeathDetails;                                                 // 0x0050(0x0028)
};


// ScriptStruct  ShooterGame.CombatReportDeathDetails
// Struct Size::0x0028
struct FCombatReportDeathDetails
{
    bool                                          bDied;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       DeathLocation;                                                // 0x0004(0x000C)
    FRoundTimestamp                               DeathTime;                                                    // 0x0010(0x0018)
};


// ScriptStruct  ShooterGame.RoundTimestamp
// Struct Size::0x0018
struct FRoundTimestamp
{
    FGameStateHUDConfig*                          HUDConfig;                                                    // 0x0000(0x0008)
    float                                         StateRemainingTime;                                           // 0x0008(0x0004)
    float                                         GameTime;                                                     // 0x000C(0x0004)
    enum class EAresGamePhase                     GamePhase;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.CombatReportRespawnInfo
// Struct Size::0x0020
struct FCombatReportRespawnInfo
{
    FShooterPlayerState*                          ResurrectorPlayerState;                                       // 0x0000(0x0008)
    FRoundTimestamp                               RespawnTime;                                                  // 0x0008(0x0018)
};


// ScriptStruct  ShooterGame.ParticipantInteractions
// Struct Size::0x0070
struct FParticipantInteractions
{
    FShooterPlayerState*                          ParticipantInfo;                                              // 0x0000(0x0008)
    FRoundTimestamp                               LastInteractionTime;                                          // 0x0008(0x0018)
    float                                         DamageDealt;                                                  // 0x0020(0x0004)
    int32_t                                       HitsDealt;                                                    // 0x0024(0x0004)
    float                                         DamageRecieved;                                               // 0x0028(0x0004)
    int32_t                                       HitsRecieved;                                                 // 0x002C(0x0004)
    bool                                          bDidKill;                                                     // 0x0030(0x0001)
    enum class EAresAssistType                    AssistType;                                                   // 0x0031(0x0001)
    char                                          pa_0032[0x0006]                                               // 0x0032(0x0006)
    FShooterPlayerState*                          ParticipantsKillerState;                                      // 0x0038(0x0008)
    bool                                          bWasKiller;                                                   // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    TArray<FCombatInteraction>                    DealtIteractions;                                             // 0x0048(0x0010)
    TArray<FCombatInteraction>                    ReceivedInteractions;                                         // 0x0058(0x0010)
    int32_t                                       CombatReportIndex;                                            // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  ShooterGame.CombatInteraction
// Struct Size::0x0068
struct FCombatInteraction
{
    FRoundTimestamp                               StartTime;                                                    // 0x0000(0x0018)
    FRoundTimestamp                               EndTime;                                                      // 0x0018(0x0018)
    FShooterDamageType*                           DamageType;                                                   // 0x0030(0x0008)
    TArray<FNonRegionalDamageInteraction>         NonRegionalDamageInteractions;                                // 0x0038(0x0010)
    TArray<FRegionalDamageInteraction>            RegionalDamageInteractions;                                   // 0x0048(0x0010)
    TArray<FNonRegionalDamageInteraction>         BlockedDamageInteractions;                                    // 0x0058(0x0010)
};


// ScriptStruct  ShooterGame.NonRegionalDamageInteraction
// Struct Size::0x0020
struct FNonRegionalDamageInteraction
{
    FCombatReportDamagedDisplayConfig*            DamagedDisplayConfig;                                         // 0x0000(0x0008)
    int32_t                                       Hits;                                                         // 0x0008(0x0004)
    float                                         Damage;                                                       // 0x000C(0x0004)
    bool                                          bIsWallPen;                                                   // 0x0010(0x0001)
    bool                                          bIsKill;                                                      // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
    FAresItem*                                    DestroyedArmor;                                               // 0x0018(0x0008)
};


// ScriptStruct  ShooterGame.RegionalDamageInteraction
// Struct Size::0x0018
struct FRegionalDamageInteraction
{
    enum class EAresRegionalDamage                Region;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Hits;                                                         // 0x0004(0x0004)
    float                                         Damage;                                                       // 0x0008(0x0004)
    bool                                          bIsWallPen;                                                   // 0x000C(0x0001)
    bool                                          bIsKill;                                                      // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    FAresItem*                                    DestroyedArmor;                                               // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.CombatReportTrackingConfig
// Struct Size::0x0010
struct FCombatReportTrackingConfig
{
    FCombatReportDamagedDisplayConfig*            DamagedDisplayConfig;                                         // 0x0000(0x0008)
    char                                          bTrackParticipantkHits;                                       // 0x0008(0x0001)
    char                                          bTrackParticipantDamage;                                      // 0x0008(0x0001)
    char                                          bTrackInteractionHits;                                        // 0x0008(0x0001)
    char                                          bTrackInteractionDamage;                                      // 0x0008(0x0001)
    char                                          bTrackDamagedRegionally;                                      // 0x0008(0x0001)
    char                                          bTrackArmorBreaks;                                            // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ShooterGame.ScoreKillData
// Struct Size::0x0048
struct FScoreKillData
{
    FOwnerExclusivePlayerInfo*                    VictimPlayerInfo;                                             // 0x0000(0x0008)
    FDamageResponse*                              Response;                                                     // 0x0008(0x0008)
    int32_t                                       KillPoints;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0024]                                               // 0x0014(0x0024)
    FOwnerExclusivePlayerInfo*                    KillerPlayerInfo;                                             // 0x0038(0x0008)
    bool                                          bWasHeadShot;                                                 // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  ShooterGame.CompetitiveSeasonArchives
// Struct Size::0x0040
struct FCompetitiveSeasonArchives
{
    TArray<TSoftClassPtr<UObject>>                Archives;                                                     // 0x0000(0x0010)
    TSoftClassPtr<UObject>                        CompleteMasteryArchive;                                       // 0x0010(0x0030)
};


// ScriptStruct  ShooterGame.CompetitiveSeasonConfig
// Struct Size::0x0078
struct FCompetitiveSeasonConfig
{
    int32_t                                       SeasonRankIndex;                                              // 0x0000(0x0004)
    int32_t                                       SeasonTopWinsMaximum;                                         // 0x0004(0x0004)
    int32_t                                       WinsNeededForSeasonRank;                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TMap<int32_t,int32_t>                         PlacementTierAdjustments;                                     // 0x0010(0x0050)
    int32_t                                       PlacementMaxTier;                                             // 0x0060(0x0004)
    int32_t                                       PlacementProgress;                                            // 0x0064(0x0004)
    float                                         LeaderboardRankRatingResetValue;                              // 0x0068(0x0004)
    float                                         NewSeasonMinVariance;                                         // 0x006C(0x0004)
    int32_t                                       SeasonGamesToShowSkill;                                       // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  ShooterGame.CompetitiveTierData
// Struct Size::0x0088
struct FCompetitiveTierData : public FTableRowBase
{
    int32_t                                       Tier;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         TierName;                                                     // 0x0010(0x0018)
    enum class ECompetitiveDivision               Division;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    FText                                         DivisionName;                                                 // 0x0030(0x0018)
    FLinearColor                                  Color;                                                        // 0x0048(0x0010)
    FLinearColor                                  BackgroundColor;                                              // 0x0058(0x0010)
    FTexture*                                     IconTextureSmall;                                             // 0x0068(0x0008)
    FTexture*                                     IconTextureLarge;                                             // 0x0070(0x0008)
    FTexture*                                     IconRankTriangleUp;                                           // 0x0078(0x0008)
    FTexture*                                     IconRankTriangleDown;                                         // 0x0080(0x0008)
};


// ScriptStruct  ShooterGame.ComponentDataStream
// Struct Size::0x0018
struct FComponentDataStream
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  ShooterGame.ConcatenatedListModel
// Struct Size::0x0018
struct FConcatenatedListModel
{
    TScriptInterface<IOrderedListModel>           ListModel;                                                    // 0x0000(0x0010)
    int32_t                                       ListModelIndex;                                               // 0x0010(0x0004)
    int32_t                                       ListItemIndex;                                                // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.ConcatenatedListModel
// Struct Size::0x0018
struct FConcatenatedListModel
{
    TScriptInterface<IOrderedListModel>           ListModel;                                                    // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.ConfigDTO
// Struct Size::0x0058
struct FConfigDTO
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
    FDateTime                                     LastApplication;                                              // 0x0050(0x0008)
};


// ScriptStruct  ShooterGame.FoWDatabaseEntry
// Struct Size::0x0018
struct FFoWDatabaseEntry
{
    AActor*                                       Subject;                                                      // 0x0000(0x0008)
    enum class EFoWRelevancyResult                FoWStatus;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FVector                                       ActorLocation;                                                // 0x000C(0x000C)
};


// ScriptStruct  ShooterGame.CheatEntry
// Struct Size::0x0018
struct FCheatEntry
{
    FString                                       CheatCommand;                                                 // 0x0000(0x0010)
    enum class ECheatEntryType                    CheatEntryType;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.FiltersActionEvent
// Struct Size::0x0060
struct FFiltersActionEvent
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       Screen;                                                       // 0x0010(0x0010)
    FString                                       ActionType;                                                   // 0x0020(0x0010)
    TArray<FCriterion>                            ActiveCriteria;                                               // 0x0030(0x0010)
    FPlatformInfo                                 PlatformInfo;                                                 // 0x0040(0x0020)
};


// ScriptStruct  ShooterGame.PlatformInfo
// Struct Size::0x0020
struct FPlatformInfo
{
    FString                                       platformType;                                                 // 0x0000(0x0010)
    FString                                       platformOS;                                                   // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.Criterion
// Struct Size::0x0020
struct FCriterion
{
    FString                                       FilterGroup;                                                  // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.AchievementData
// Struct Size::0x0008
struct FAchievementData
{
    FPowderedToastDataAsset*                      DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.BTEData
// Struct Size::0x0008
struct FBTEData
{
    FBTEDataAsset*                                DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.TipData
// Struct Size::0x0008
struct FTipData
{
    FTipDataAsset*                                DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.AccoladeData
// Struct Size::0x0008
struct FAccoladeData
{
    FAccoladeDataAsset*                           DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.ArchiveData
// Struct Size::0x0008
struct FArchiveData
{
    FArchiveDataAsset*                            DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.MassRewardsCeremonyData
// Struct Size::0x0008
struct FMassRewardsCeremonyData
{
    FMassRewardsCeremonyDataAsset*                DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.AresEventData
// Struct Size::0x0018
struct FAresEventData
{
    FEventDataAsset*                              DataAsset;                                                    // 0x0000(0x0008)
    FGuid                                         ServiceId;                                                    // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.ExpressionEquipSlotData
// Struct Size::0x0008
struct FExpressionEquipSlotData
{
    FExpressionEquipSlotDataAsset*                DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.TotemData
// Struct Size::0x0008
struct FTotemData
{
    FTotemDataAsset*                              DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.TournamentsTeamIconData
// Struct Size::0x0008
struct FTournamentsTeamIconData
{
    FTournamentsTeamIconDataAsset*                DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.LevelBorderData
// Struct Size::0x0018
struct FLevelBorderData
{
    FLevelBorderDataAsset*                        DataAsset;                                                    // 0x0000(0x0008)
    FGuid                                         ServiceId;                                                    // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.MatchmakingQueueData
// Struct Size::0x0018
struct FMatchmakingQueueData
{
    FMatchmakingQueueDataAsset*                   DataAsset;                                                    // 0x0000(0x0008)
    FGuid                                         ServiceId;                                                    // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.StreamedVideoData
// Struct Size::0x0018
struct FStreamedVideoData
{
    FStreamedVideoDataAsset*                      DataAsset;                                                    // 0x0000(0x0008)
    FGuid                                         ServiceId;                                                    // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.ActRankBorderData
// Struct Size::0x0018
struct FActRankBorderData
{
    FActRankBorderDataAsset*                      DataAsset;                                                    // 0x0000(0x0008)
    FGuid                                         ServiceId;                                                    // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.PremierConferenceData
// Struct Size::0x0008
struct FPremierConferenceData
{
    FPremierConferenceDataAsset*                  DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.PremierSeasonData
// Struct Size::0x0008
struct FPremierSeasonData
{
    FPremierSeasonDataAsset*                      DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.CompetitiveSeasonData
// Struct Size::0x0008
struct FCompetitiveSeasonData
{
    FCompetitiveSeasonDataAsset*                  DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.SubscriptionData
// Struct Size::0x0008
struct FSubscriptionData
{
    FSubscriptionDataAsset*                       DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.SeasonData
// Struct Size::0x0008
struct FSeasonData
{
    FSeasonDataAsset*                             DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.ContentTierData
// Struct Size::0x0018
struct FContentTierData
{
    FContentTierDataAsset*                        DataAsset;                                                    // 0x0000(0x0008)
    FGuid                                         ServiceId;                                                    // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.ContractV2Data
// Struct Size::0x0018
struct FContractV2Data
{
    FContractDataAssetV2*                         DataAsset;                                                    // 0x0000(0x0008)
    FGuid                                         ServiceId;                                                    // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.PlayerTitleData
// Struct Size::0x0030
struct FPlayerTitleData
{
    FPlayerTitleDataAsset*                        DataAsset;                                                    // 0x0000(0x0008)
    FPrimaryAssetId                               PlayerTitleId;                                                // 0x0008(0x0018)
    FGuid                                         ServiceId;                                                    // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.ArmorData
// Struct Size::0x0008
struct FArmorData
{
    FArmorDataAsset*                              DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.StorefrontItemData
// Struct Size::0x0030
struct FStorefrontItemData
{
    FStorefrontItemDataAsset*                     DataAsset;                                                    // 0x0000(0x0008)
    FPrimaryAssetId                               StorefrontItemId;                                             // 0x0008(0x0018)
    FGuid                                         ServiceId;                                                    // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.ObjectiveData
// Struct Size::0x0008
struct FObjectiveData
{
    FObjectiveDataAsset*                          DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.MissionData
// Struct Size::0x0008
struct FMissionData
{
    FMissionDataAsset*                            DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.PlayerCardData
// Struct Size::0x0008
struct FPlayerCardData
{
    FPlayerCardDataAsset*                         DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.EquippableCharmLevelData
// Struct Size::0x0038
struct FEquippableCharmLevelData
{
    FEquippableCharmLevelDataAsset*               DataAsset;                                                    // 0x0000(0x0008)
    FPrimaryAssetId                               EquippableCharmLevelId;                                       // 0x0008(0x0018)
    FGuid                                         ServiceId;                                                    // 0x0020(0x0010)
    int32_t                                       Level;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.EquippableCharmData
// Struct Size::0x0058
struct FEquippableCharmData
{
    FEquippableCharmDataAsset*                    DataAsset;                                                    // 0x0000(0x0008)
    TSet<FGuid>                                   EquippableCharmLevels;                                        // 0x0008(0x0050)
};


// ScriptStruct  ShooterGame.JuiceBoxData
// Struct Size::0x0008
struct FJuiceBoxData
{
    FJuiceBoxDataAsset*                           DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.CurrencyData
// Struct Size::0x0008
struct FCurrencyData
{
    FCurrencyDataAsset*                           DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.GameModeData
// Struct Size::0x0008
struct FGameModeData
{
    FGameModeDataAsset*                           DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.MapData
// Struct Size::0x0008
struct FMapData
{
    FMapDataAsset*                                DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.CharacterData
// Struct Size::0x0078
struct FCharacterData
{
    FCharacterDataAsset*                          DataAsset;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0070]                                               // 0x0008(0x0070)
};


// ScriptStruct  ShooterGame.CharacterRoleData
// Struct Size::0x0008
struct FCharacterRoleData
{
    FCharacterRoleDataAsset*                      DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.SprayEquipSlotData
// Struct Size::0x0008
struct FSprayEquipSlotData
{
    FSprayEquipSlotDataAsset*                     DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.SprayLevelData
// Struct Size::0x0038
struct FSprayLevelData
{
    FSprayLevelDataAsset*                         DataAsset;                                                    // 0x0000(0x0008)
    FPrimaryAssetId                               SprayLevelId;                                                 // 0x0008(0x0018)
    FGuid                                         ServiceId;                                                    // 0x0020(0x0010)
    int32_t                                       Level;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.SprayData
// Struct Size::0x0058
struct FSprayData
{
    FSprayDataAsset*                              DataAsset;                                                    // 0x0000(0x0008)
    TSet<FGuid>                                   SprayLevels;                                                  // 0x0008(0x0050)
};


// ScriptStruct  ShooterGame.SocketData
// Struct Size::0x0008
struct FSocketData
{
    FSocketDataAsset*                             DataAsset;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.EquippableData
// Struct Size::0x00A8
struct FEquippableData
{
    TSet<FGuid>                                   EquippableAttachments;                                        // 0x0000(0x0050)
    TSet<FGuid>                                   EquippableSkins;                                              // 0x0050(0x0050)
    FEquippableDataAsset*                         DataAsset;                                                    // 0x00A0(0x0008)
};


// ScriptStruct  ShooterGame.EquippableSkinData
// Struct Size::0x00D0
struct FEquippableSkinData
{
    FPrimaryAssetId                               EquippableSkinId;                                             // 0x0000(0x0018)
    TSet<FGuid>                                   EquippableSkinChromas;                                        // 0x0018(0x0050)
    TSet<FGuid>                                   EquippableSkinLevels;                                         // 0x0068(0x0050)
    FGuid                                         EquippableServiceId;                                          // 0x00B8(0x0010)
    FEquippableSkinDataAsset*                     DataAsset;                                                    // 0x00C8(0x0008)
};


// ScriptStruct  ShooterGame.EquippableSkinLevelData
// Struct Size::0x0048
struct FEquippableSkinLevelData
{
    FPrimaryAssetId                               EquippableSkinLevelId;                                        // 0x0000(0x0018)
    FGuid                                         ParentSkinId;                                                 // 0x0018(0x0010)
    FGuid                                         ServiceId;                                                    // 0x0028(0x0010)
    int32_t                                       Level;                                                        // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FEquippableSkinLevelDataAsset*                DataAsset;                                                    // 0x0040(0x0008)
};


// ScriptStruct  ShooterGame.ThemeData
// Struct Size::0x0070
struct FThemeData
{
    FPrimaryAssetId                               ThemeId;                                                      // 0x0000(0x0018)
    FThemeDataAsset*                              DataAsset;                                                    // 0x0018(0x0008)
    TSet<FGuid>                                   EquippableSkins;                                              // 0x0020(0x0050)
};


// ScriptStruct  ShooterGame.EquippableSkinChromaData
// Struct Size::0x0030
struct FEquippableSkinChromaData
{
    FPrimaryAssetId                               EquippableSkinChromaId;                                       // 0x0000(0x0018)
    FGuid                                         ParentSkinId;                                                 // 0x0018(0x0010)
    FEquippableSkinChromaDataAsset*               DataAsset;                                                    // 0x0028(0x0008)
};


// ScriptStruct  ShooterGame.EquippableAttachmentData
// Struct Size::0x0030
struct FEquippableAttachmentData
{
    FPrimaryAssetId                               AttachmentId;                                                 // 0x0000(0x0018)
    FGuid                                         SocketUuid;                                                   // 0x0018(0x0010)
    FEquippableAttachmentDataAsset*               DataAsset;                                                    // 0x0028(0x0008)
};


// ScriptStruct  ShooterGame.BaseHandleLoadOptions
// Struct Size::0x0001
struct FBaseHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.MassRewardsCeremonyHandleLoadOptions
// Struct Size::0x0001
struct FMassRewardsCeremonyHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.BTEHandleLoadOptions
// Struct Size::0x0001
struct FBTEHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.TournamentsTeamIconHandleLoadOptions
// Struct Size::0x0001
struct FTournamentsTeamIconHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.LevelBorderHandleLoadOptions
// Struct Size::0x0001
struct FLevelBorderHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.PremierConferenceHandleLoadOptions
// Struct Size::0x0001
struct FPremierConferenceHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.PremierSeasonHandleLoadOptions
// Struct Size::0x0001
struct FPremierSeasonHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.CompetitiveSeasonHandleLoadOptions
// Struct Size::0x0002
struct FCompetitiveSeasonHandleLoadOptions
{
    bool                                          bLoadBorders;                                                 // 0x0000(0x0001)
    FActRankBorderHandleLoadOptions               ActRankBorderHandleLoadOptions;                               // 0x0001(0x0001)
};


// ScriptStruct  ShooterGame.ActRankBorderHandleLoadOptions
// Struct Size::0x0001
struct FActRankBorderHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.SeasonHandleLoadOptions
// Struct Size::0x0001
struct FSeasonHandleLoadOptions
{
    bool                                          bLoadParentSeason;                                            // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.SubscriptionHandleLoadOptions
// Struct Size::0x0001
struct FSubscriptionHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.ContentTierHandleLoadOptions
// Struct Size::0x0001
struct FContentTierHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.PlayerTitleHandleLoadOptions
// Struct Size::0x0001
struct FPlayerTitleHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.ArmorHandleLoadOptions
// Struct Size::0x0001
struct FArmorHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.MissionHandleLoadOptions
// Struct Size::0x0002
struct FMissionHandleLoadOptions
{
    bool                                          bLoadObjectives;                                              // 0x0000(0x0001)
    FObjectiveHandleLoadOptions                   ObjectiveLoadOptions;                                         // 0x0001(0x0001)
};


// ScriptStruct  ShooterGame.ObjectiveHandleLoadOptions
// Struct Size::0x0001
struct FObjectiveHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.StorefrontItemHandleLoadOptions
// Struct Size::0x0001
struct FStorefrontItemHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.PlayerCardHandleLoadOptions
// Struct Size::0x0007
struct FPlayerCardHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
    bool                                          bLoadLargeArt;                                                // 0x0001(0x0001)
    bool                                          bLoadWideArt;                                                 // 0x0002(0x0001)
    bool                                          bLoadSmallArt;                                                // 0x0003(0x0001)
    bool                                          bLoadLargeMaterialInterface;                                  // 0x0004(0x0001)
    bool                                          bLoadWideMaterialInterface;                                   // 0x0005(0x0001)
    bool                                          bLoadSmallMaterialInterface;                                  // 0x0006(0x0001)
};


// ScriptStruct  ShooterGame.MatchmakingQueueHandleLoadOptions
// Struct Size::0x0001
struct FMatchmakingQueueHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.GameModeHandleLoadOptions
// Struct Size::0x0001
struct FGameModeHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.MapHandleLoadOptions
// Struct Size::0x0001
struct FMapHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.JuiceBoxHandleLoadOptions
// Struct Size::0x0001
struct FJuiceBoxHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.CurrencyHandleLoadOptions
// Struct Size::0x0001
struct FCurrencyHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.CharacterHandleLoadOptions
// Struct Size::0x0007
struct FCharacterHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
    bool                                          bLoadCharacterRole;                                           // 0x0001(0x0001)
    bool                                          bLoadContract;                                                // 0x0002(0x0001)
    bool                                          bLoadFullPortrait;                                            // 0x0003(0x0001)
    bool                                          bLoadCharacterBackground;                                     // 0x0004(0x0001)
    FCharacterRoleHandleLoadOptions               CharacterRoleLoadOption;                                      // 0x0005(0x0001)
    FContractV2HandleLoadOptions                  ContractLoadOptions;                                          // 0x0006(0x0001)
};


// ScriptStruct  ShooterGame.ContractV2HandleLoadOptions
// Struct Size::0x0001
struct FContractV2HandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.CharacterRoleHandleLoadOptions
// Struct Size::0x0001
struct FCharacterRoleHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.AresEventHandleLoadOptions
// Struct Size::0x0001
struct FAresEventHandleLoadOptions
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.ExpressionEquipSlotHandleLoadOptions
// Struct Size::0x0007
struct FExpressionEquipSlotHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
    bool                                          bLoadEquippedExpressionItem;                                  // 0x0001(0x0001)
    FSprayHandleLoadOptions                       SprayLoadOptions;                                             // 0x0002(0x0004)
    FTotemHandleLoadOptions                       TotemLoadOptions;                                             // 0x0006(0x0001)
};


// ScriptStruct  ShooterGame.TotemHandleLoadOptions
// Struct Size::0x0001
struct FTotemHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.SprayHandleLoadOptions
// Struct Size::0x0004
struct FSprayHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
    bool                                          bLoadLevels;                                                  // 0x0001(0x0001)
    FSprayLevelHandleLoadOptions                  LevelLoadOptions;                                             // 0x0002(0x0002)
};


// ScriptStruct  ShooterGame.SprayLevelHandleLoadOptions
// Struct Size::0x0002
struct FSprayLevelHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
    bool                                          bLoadSprayActor;                                              // 0x0001(0x0001)
};


// ScriptStruct  ShooterGame.SprayEquipSlotHandleLoadOptions
// Struct Size::0x0006
struct FSprayEquipSlotHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
    bool                                          bLoadEquippedSpray;                                           // 0x0001(0x0001)
    FSprayHandleLoadOptions                       SprayLoadOptions;                                             // 0x0002(0x0004)
};


// ScriptStruct  ShooterGame.EquippableHandleLoadOptions
// Struct Size::0x001A
struct FEquippableHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
    bool                                          bLoadSkins;                                                   // 0x0001(0x0001)
    bool                                          bLoadEquippedSkin;                                            // 0x0002(0x0001)
    FEquippableSkinHandleLoadOptions              SkinLoadOptions;                                              // 0x0003(0x000F)
    bool                                          bLoadAttachments;                                             // 0x0012(0x0001)
    FEquippableAttachmentHandleLoadOptions        AttachmentLoadOptions;                                        // 0x0013(0x0001)
    bool                                          bLoadEquippedCharmInstance;                                   // 0x0014(0x0001)
    FEquippableCharmInstanceHandleLoadOptions     CharmInstanceLoadOptions;                                     // 0x0015(0x0005)
};


// ScriptStruct  ShooterGame.EquippableCharmInstanceHandleLoadOptions
// Struct Size::0x0005
struct FEquippableCharmInstanceHandleLoadOptions
{
    bool                                          bLoadCurrentLevel;                                            // 0x0000(0x0001)
    FEquippableCharmHandleLoadOptions             CharmLoadOptions;                                             // 0x0001(0x0003)
    FEquippableCharmLevelHandleLoadOptions        LevelLoadOptions;                                             // 0x0004(0x0001)
};


// ScriptStruct  ShooterGame.EquippableCharmLevelHandleLoadOptions
// Struct Size::0x0001
struct FEquippableCharmLevelHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.EquippableCharmHandleLoadOptions
// Struct Size::0x0003
struct FEquippableCharmHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
    bool                                          bLoadLevels;                                                  // 0x0001(0x0001)
    FEquippableCharmLevelHandleLoadOptions        LevelLoadOptions;                                             // 0x0002(0x0001)
};


// ScriptStruct  ShooterGame.EquippableAttachmentHandleLoadOptions
// Struct Size::0x0001
struct FEquippableAttachmentHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.EquippableSkinHandleLoadOptions
// Struct Size::0x000F
struct FEquippableSkinHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
    bool                                          bLoadLevels;                                                  // 0x0001(0x0001)
    bool                                          bLoadEquippedLevel;                                           // 0x0002(0x0001)
    FEquippableSkinLevelHandleLoadOptions         LevelLoadOptions;                                             // 0x0003(0x0003)
    bool                                          bLoadChromas;                                                 // 0x0006(0x0001)
    bool                                          bLoadEquippedChroma;                                          // 0x0007(0x0001)
    bool                                          bLoadDefaultChroma;                                           // 0x0008(0x0001)
    FEquippableSkinChromaHandleLoadOptions        ChromaLoadOptions;                                            // 0x0009(0x0003)
    bool                                          bLoadTheme;                                                   // 0x000C(0x0001)
    bool                                          bLoadContentTier;                                             // 0x000D(0x0001)
    bool                                          bLoadWallpaper;                                               // 0x000E(0x0001)
};


// ScriptStruct  ShooterGame.EquippableSkinChromaHandleLoadOptions
// Struct Size::0x0003
struct FEquippableSkinChromaHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
    bool                                          bLoadSidegradeModel;                                          // 0x0001(0x0001)
    bool                                          bLoadStreamedVideo;                                           // 0x0002(0x0001)
};


// ScriptStruct  ShooterGame.EquippableSkinLevelHandleLoadOptions
// Struct Size::0x0003
struct FEquippableSkinLevelHandleLoadOptions
{
    bool                                          bLoadInventoryModel;                                          // 0x0000(0x0001)
    bool                                          bLoadMenuFXC;                                                 // 0x0001(0x0001)
    bool                                          bLoadStreamedVideo;                                           // 0x0002(0x0001)
};


// ScriptStruct  ShooterGame.ThemeHandleLoadOptions
// Struct Size::0x0010
struct FThemeHandleLoadOptions
{
    bool                                          bLoadEquippableSkins;                                         // 0x0000(0x0001)
    FEquippableSkinHandleLoadOptions              EquippableSkinLoadOptions;                                    // 0x0001(0x000F)
};


// ScriptStruct  ShooterGame.SeasonServiceTimes
// Struct Size::0x0010
struct FSeasonServiceTimes
{
    FDateTime                                     StartTime;                                                    // 0x0000(0x0008)
    FDateTime                                     EndTime;                                                      // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.FullContentListingDTO
// Struct Size::0x0030
struct FFullContentListingDTO
{
    TArray<FSeasonDTO>                            Seasons;                                                      // 0x0000(0x0010)
    TArray<FEventDTO>                             Events;                                                       // 0x0010(0x0010)
    TArray<FString>                               DisabledIDs;                                                  // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.EventDTO
// Struct Size::0x0048
struct FEventDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       Type;                                                         // 0x0020(0x0010)
    FDateTime                                     StartTime;                                                    // 0x0030(0x0008)
    FDateTime                                     EndTime;                                                      // 0x0038(0x0008)
    bool                                          IsEnabled;                                                    // 0x0040(0x0001)
    bool                                          IsActive;                                                     // 0x0041(0x0001)
    bool                                          DevelopmentOnly;                                              // 0x0042(0x0001)
    char                                          pa_0043[0x0005]                                               // 0x0043(0x0005)
};


// ScriptStruct  ShooterGame.SeasonDTO
// Struct Size::0x0048
struct FSeasonDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       Type;                                                         // 0x0020(0x0010)
    FDateTime                                     StartTime;                                                    // 0x0030(0x0008)
    FDateTime                                     EndTime;                                                      // 0x0038(0x0008)
    bool                                          IsEnabled;                                                    // 0x0040(0x0001)
    bool                                          IsActive;                                                     // 0x0041(0x0001)
    bool                                          DevelopmentOnly;                                              // 0x0042(0x0001)
    char                                          pa_0043[0x0005]                                               // 0x0043(0x0005)
};


// ScriptStruct  ShooterGame.ContentListingDTO
// Struct Size::0x0010
struct FContentListingDTO
{
    TArray<FContentDTO>                           Content;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ContentDTO
// Struct Size::0x0038
struct FContentDTO
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       AssetName;                                                    // 0x0010(0x0010)
    FString                                       ID;                                                           // 0x0020(0x0010)
    bool                                          IsEnabled;                                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  ShooterGame.BaseUIData
// Struct Size::0x0038
struct FBaseUIData
{
    FText                                         DisplayName;                                                  // 0x0000(0x0018)
    FTexture*                                     DisplayIcon;                                                  // 0x0018(0x0008)
    FText                                         DisplayTooltipTextLocalized;                                  // 0x0020(0x0018)
};


// ScriptStruct  ShooterGame.TipClassesSet
// Struct Size::0x0050
struct FTipClassesSet
{
    TSet<FTip*>                                   TipClasses;                                                   // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.ContractDataAssetV2Chapter
// Struct Size::0x0018
struct FContractDataAssetV2Chapter
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<FContractDataAssetV2Level>             Levels;                                                       // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.ContractDataAssetV2Level
// Struct Size::0x0020
struct FContractDataAssetV2Level
{
    FEditableReward*                              Reward;                                                       // 0x0000(0x0008)
    uint32_t                                      XP;                                                           // 0x0008(0x0004)
    uint32_t                                      VPCost;                                                       // 0x000C(0x0004)
    bool                                          bPurchasableWithVP;                                           // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    uint32_t                                      DoughCost;                                                    // 0x0014(0x0004)
    bool                                          bPurchasableWithDough;                                        // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ShooterGame.ContractDataAssetV2EventChapter
// Struct Size::0x0018
struct FContractDataAssetV2EventChapter : public FContractDataAssetV2Chapter
{
};


// ScriptStruct  ShooterGame.ContractDataAssetV2StoryChapter
// Struct Size::0x0030
struct FContractDataAssetV2StoryChapter : public FContractDataAssetV2Chapter
{
    TArray<FEditableReward*>                      FreeChapterRewards;                                           // 0x0018(0x0010)
    bool                                          bIsEpilogue;                                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  ShooterGame.ContractDataAssetV2SpecialChapter
// Struct Size::0x0018
struct FContractDataAssetV2SpecialChapter : public FContractDataAssetV2Chapter
{
};


// ScriptStruct  ShooterGame.ItemProgressionDefinitionsV2
// Struct Size::0x0010
struct FItemProgressionDefinitionsV2
{
    TArray<FItemProgressionDefinitionV2>          Definitions;                                                  // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ItemProgressionDefinitionV2
// Struct Size::0x00B0
struct FItemProgressionDefinitionV2
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FEntitlementIdentifier                        Item;                                                         // 0x0010(0x0020)
    FEntitlementIdentifier                        RequiredEntitlement;                                          // 0x0030(0x0020)
    FProgressionSchedule                          ProgressionSchedule;                                          // 0x0050(0x0020)
    FRewardSchedule                               RewardSchedule;                                               // 0x0070(0x0030)
    TArray<FSidegrade>                            Sidegrades;                                                   // 0x00A0(0x0010)
};


// ScriptStruct  ShooterGame.Sidegrade
// Struct Size::0x0030
struct FSidegrade
{
    FGuid                                         SidegradeID;                                                  // 0x0000(0x0010)
    TArray<FSidegradeOption>                      Options;                                                      // 0x0010(0x0010)
    FRewardSchedulePrerequisites                  Prerequisites;                                                // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.SidegradeOption
// Struct Size::0x0030
struct FSidegradeOption
{
    FGuid                                         OptionID;                                                     // 0x0000(0x0010)
    FCost                                         Cost;                                                         // 0x0010(0x0010)
    TArray<FEntitlementReward>                    Rewards;                                                      // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.Cost
// Struct Size::0x0010
struct FCost
{
    TArray<FWalletCost>                           WalletCosts;                                                  // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.WalletCost
// Struct Size::0x0018
struct FWalletCost
{
    FGuid                                         CurrencyID;                                                   // 0x0000(0x0010)
    int64_t                                       AmountToDeduct;                                               // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.ContractDefinitions
// Struct Size::0x0020
struct FContractDefinitions
{
    TArray<FContractDefinition>                   ContractDefinitions;                                          // 0x0000(0x0010)
    FGuid                                         NPEContractID;                                                // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.UpgradeContractRequest
// Struct Size::0x00A8
struct FUpgradeContractRequest
{
    FGuid                                         XID;                                                          // 0x0000(0x0010)
    FGuid                                         CurrencyID;                                                   // 0x0010(0x0010)
    int32_t                                       ExpectedCost;                                                 // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FOrderMetadata                                Metadata;                                                     // 0x0028(0x0080)
};


// ScriptStruct  ShooterGame.OrderMetadata
// Struct Size::0x0080
struct FOrderMetadata
{
    FString                                       ClientVersion;                                                // 0x0000(0x0010)
    FString                                       ClientSessionID;                                              // 0x0010(0x0010)
    TMap<FGuid,int32_t>                           Balances;                                                     // 0x0020(0x0050)
    FString                                       PurchaseSource;                                               // 0x0070(0x0010)
};


// ScriptStruct  ShooterGame.UnlockSidegradeRequest
// Struct Size::0x00B0
struct FUnlockSidegradeRequest
{
    FGuid                                         XID;                                                          // 0x0000(0x0010)
    TArray<FEntitlementReward>                    ExpectedRewards;                                              // 0x0010(0x0010)
    TArray<FWalletCost>                           ExpectedCosts;                                                // 0x0020(0x0010)
    FOrderMetadata                                Metadata;                                                     // 0x0030(0x0080)
};


// ScriptStruct  ShooterGame.UnlockProgressRequest
// Struct Size::0x00B0
struct FUnlockProgressRequest
{
    FGuid                                         XID;                                                          // 0x0000(0x0010)
    FGuid                                         CurrencyID;                                                   // 0x0010(0x0010)
    int32_t                                       ExpectedCost;                                                 // 0x0020(0x0004)
    int32_t                                       CurrentTier;                                                  // 0x0024(0x0004)
    int32_t                                       NewTier;                                                      // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FOrderMetadata                                Metadata;                                                     // 0x0030(0x0080)
};


// ScriptStruct  ShooterGame.Contracts
// Struct Size::0x0078
struct FContracts
{
    int64_t                                       Version;                                                      // 0x0000(0x0008)
    FGuid                                         Subject;                                                      // 0x0008(0x0010)
    TArray<FContract>                             Contracts;                                                    // 0x0018(0x0010)
    FGuid                                         ActiveSpecialContract;                                        // 0x0028(0x0010)
    TArray<FMissionDTO>                           Missions;                                                     // 0x0038(0x0010)
    FMissionMetadata                              MissionMetadata;                                              // 0x0048(0x0018)
    TArray<FContractMatchResults>                 ProcessedMatches;                                             // 0x0060(0x0010)
    int32_t                                       BTEMilestone;                                                 // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  ShooterGame.ContractMatchResults
// Struct Size::0x01E8
struct FContractMatchResults
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FXPGrants                                     XPGrants;                                                     // 0x0010(0x0078)
    FDoughGrants                                  DoughGrants;                                                  // 0x0088(0x000C)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    FRecruitmentProgressUpdate                    RecruitmentProgressUpdate;                                    // 0x0098(0x0048)
    FBTEProgressUpdate                            BTEProgressUpdate;                                            // 0x00E0(0x0008)
    TMap<FGuid,FRewardGrant>                      RewardGrants;                                                 // 0x00E8(0x0050)
    TMap<FGuid,FMissionDelta>                     MissionDeltas;                                                // 0x0138(0x0050)
    TMap<FGuid,FContractDelta>                    ContractDeltas;                                               // 0x0188(0x0050)
    FMatchSummary                                 MatchSummary;                                                 // 0x01D8(0x0008)
    bool                                          CouldProgressMissions;                                        // 0x01E0(0x0001)
    char                                          pa_01E1[0x0007]                                               // 0x01E1(0x0007)
};


// ScriptStruct  ShooterGame.MatchSummary
// Struct Size::0x0008
struct FMatchSummary
{
    int32_t                                       RoundsTotal;                                                  // 0x0000(0x0004)
    int32_t                                       RoundsWon;                                                    // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.ContractDelta
// Struct Size::0x0018
struct FContractDelta
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    int32_t                                       TotalXPBefore;                                                // 0x0010(0x0004)
    int32_t                                       TotalXPAfter;                                                 // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.MissionDelta
// Struct Size::0x00B0
struct FMissionDelta
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    TMap<FGuid,int32_t>                           Objectives;                                                   // 0x0010(0x0050)
    TMap<FGuid,FObjectiveDelta>                   ObjectiveDeltas;                                              // 0x0060(0x0050)
};


// ScriptStruct  ShooterGame.ObjectiveDelta
// Struct Size::0x0018
struct FObjectiveDelta
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    int32_t                                       ProgressBefore;                                               // 0x0010(0x0004)
    int32_t                                       ProgressAfter;                                                // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.BTEProgressUpdate
// Struct Size::0x0008
struct FBTEProgressUpdate
{
    int32_t                                       ActiveMilestoneBefore;                                        // 0x0000(0x0004)
    int32_t                                       ActiveMilestoneAfter;                                         // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.RecruitmentProgressUpdate
// Struct Size::0x0048
struct FRecruitmentProgressUpdate
{
    FGuid                                         GroupID;                                                      // 0x0000(0x0010)
    int64_t                                       ProgressBefore;                                               // 0x0010(0x0008)
    int64_t                                       ProgressAfter;                                                // 0x0018(0x0008)
    int32_t                                       MilestoneThreshold;                                           // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FRewardGrant                                  RecruitmentRewardGrant;                                       // 0x0028(0x0020)
};


// ScriptStruct  ShooterGame.DoughGrants
// Struct Size::0x000C
struct FDoughGrants
{
    int32_t                                       GamePlayed;                                                   // 0x0000(0x0004)
    int32_t                                       RoundPlayed;                                                  // 0x0004(0x0004)
    int32_t                                       RoundWon;                                                     // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.XPGrants
// Struct Size::0x0078
struct FXPGrants
{
    int32_t                                       GamePlayed;                                                   // 0x0000(0x0004)
    int32_t                                       GameWon;                                                      // 0x0004(0x0004)
    int32_t                                       RoundPlayed;                                                  // 0x0008(0x0004)
    int32_t                                       RoundWon;                                                     // 0x000C(0x0004)
    TMap<FGuid,int32_t>                           Missions;                                                     // 0x0010(0x0050)
    FAggregateXPModifier                          Modifier;                                                     // 0x0060(0x0018)
};


// ScriptStruct  ShooterGame.AggregateXPModifier
// Struct Size::0x0018
struct FAggregateXPModifier
{
    float                                         Value;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FXPModifier>                           Modifiers;                                                    // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.XPModifier
// Struct Size::0x0020
struct FXPModifier
{
    float                                         Value;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Name;                                                         // 0x0008(0x0010)
    bool                                          BaseOnly;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ShooterGame.MissionMetadata
// Struct Size::0x0018
struct FMissionMetadata
{
    bool                                          NPECompleted;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FDateTime                                     WeeklyCheckpoint;                                             // 0x0008(0x0008)
    FDateTime                                     WeeklyRefillTime;                                             // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.MissionDTO
// Struct Size::0x0070
struct FMissionDTO
{
    FDateTime                                     ExpirationTime;                                               // 0x0000(0x0008)
    FGuid                                         ID;                                                           // 0x0008(0x0010)
    TMap<FGuid,int32_t>                           Objectives;                                                   // 0x0018(0x0050)
    bool                                          Complete;                                                     // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
};


// ScriptStruct  ShooterGame.Contract
// Struct Size::0x0070
struct FContract
{
    FGuid                                         ContractDefinitionID;                                         // 0x0000(0x0010)
    FPlayerRewardState                            ContractProgression;                                          // 0x0010(0x0058)
    uint32_t                                      ProgressionLevelReached;                                      // 0x0068(0x0004)
    uint32_t                                      ProgressionTowardsNextLevel;                                  // 0x006C(0x0004)
};


// ScriptStruct  ShooterGame.PlayerRewardState
// Struct Size::0x0058
struct FPlayerRewardState
{
    uint32_t                                      TotalProgressionEarned;                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TMap<FGuid,FCAPCounter>                       HighestRewardedLevel;                                         // 0x0008(0x0050)
};


// ScriptStruct  ShooterGame.CAPCounter
// Struct Size::0x0010
struct FCAPCounter
{
    int64_t                                       Amount;                                                       // 0x0000(0x0008)
    int64_t                                       Version;                                                      // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.RecruitmentEvent
// Struct Size::0x0090
struct FRecruitmentEvent
{
    FGuid                                         AgentID;                                                      // 0x0000(0x0010)
    FGuid                                         CounterID;                                                    // 0x0010(0x0010)
    int32_t                                       MilestoneThreshold;                                           // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FDateTime                                     StartDate;                                                    // 0x0028(0x0008)
    FDateTime                                     EndDate;                                                      // 0x0030(0x0008)
    bool                                          IsActive;                                                     // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    TMap<FString,FPlatformInclusionFlags>         IncludedPlatforms;                                            // 0x0040(0x0050)
};


// ScriptStruct  ShooterGame.RecruitmentProgress
// Struct Size::0x0030
struct FRecruitmentProgress
{
    FGuid                                         Subject;                                                      // 0x0000(0x0010)
    FGuid                                         AgentID;                                                      // 0x0010(0x0010)
    TArray<FProgressionCounter>                   Counters;                                                     // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.ProgressionCounter
// Struct Size::0x0018
struct FProgressionCounter
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    int64_t                                       Value;                                                        // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.CAPProgressionRMSPayload
// Struct Size::0x0010
struct FCAPProgressionRMSPayload
{
    TArray<FGuid>                                 updatedGroups;                                                // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ContractsXpModifier
// Struct Size::0x0008
struct FContractsXpModifier
{
    float                                         Value;                                                        // 0x0000(0x0004)
    enum class EXPModifier                        Name;                                                         // 0x0004(0x0001)
    bool                                          BaseOnly;                                                     // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
};


// ScriptStruct  ShooterGame.InstallStats
// Struct Size::0x0020
struct FInstallStats
{
    FString                                       Version;                                                      // 0x0000(0x0010)
    int64_t                                       NotInstalledProvisioners;                                     // 0x0010(0x0008)
    int64_t                                       InstalledProvisioners;                                        // 0x0018(0x0008)
};


// ScriptStruct  ShooterGame.MatchMUCInfo
// Struct Size::0x0020
struct FMatchMUCInfo
{
    FString                                       Token;                                                        // 0x0000(0x0010)
    FString                                       Room;                                                         // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.CoreGamePlayerDTO
// Struct Size::0x0028
struct FCoreGamePlayerDTO
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       MatchID;                                                      // 0x0010(0x0010)
    int64_t                                       Version;                                                      // 0x0020(0x0008)
};


// ScriptStruct  ShooterGame.CoreGameMatchDTO
// Struct Size::0x0128
struct FCoreGameMatchDTO
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    int64_t                                       Version;                                                      // 0x0010(0x0008)
    FString                                       State;                                                        // 0x0018(0x0010)
    FString                                       MapID;                                                        // 0x0028(0x0010)
    FString                                       ModeID;                                                       // 0x0038(0x0010)
    FConnectionDetailsDTO                         ConnectionDetails;                                            // 0x0048(0x0030)
    FPostGameDetailsDTO                           PostGameDetails;                                              // 0x0078(0x0018)
    FString                                       ProvisioningFlow;                                             // 0x0090(0x0010)
    enum class EProvisioningFlowID                ProvisioningFlowID;                                           // 0x00A0(0x0001)
    char                                          pa_00A1[0x0007]                                               // 0x00A1(0x0007)
    FString                                       GamePodID;                                                    // 0x00A8(0x0010)
    FString                                       AllMUCName;                                                   // 0x00B8(0x0010)
    FString                                       TeamMUCName;                                                  // 0x00C8(0x0010)
    FString                                       TeamVoiceID;                                                  // 0x00D8(0x0010)
    FString                                       TeamMatchToken;                                               // 0x00E8(0x0010)
    bool                                          IsReconnectable;                                              // 0x00F8(0x0001)
    char                                          pa_00F9[0x0007]                                               // 0x00F9(0x0007)
    TArray<FCoreGameMatchPlayerDTO>               Players;                                                      // 0x0100(0x0010)
    FCoreGameMatchmakingData                      MatchmakingData;                                              // 0x0110(0x0018)
};


// ScriptStruct  ShooterGame.CoreGameMatchmakingData
// Struct Size::0x0018
struct FCoreGameMatchmakingData
{
    FString                                       QueueID;                                                      // 0x0000(0x0010)
    bool                                          IsRanked;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.CoreGameMatchPlayerDTO
// Struct Size::0x00F8
struct FCoreGameMatchPlayerDTO
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FName                                         TeamID;                                                       // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       CharacterID;                                                  // 0x0020(0x0010)
    FPlayerIdentity                               PlayerIdentity;                                               // 0x0030(0x0048)
    FMMRSeasonBadgeInfo                           SeasonalBadgeInfo;                                            // 0x0078(0x0078)
    bool                                          IsCoach;                                                      // 0x00F0(0x0001)
    char                                          pa_00F1[0x0007]                                               // 0x00F1(0x0007)
};


// ScriptStruct  ShooterGame.MMRSeasonBadgeInfo
// Struct Size::0x0078
struct FMMRSeasonBadgeInfo
{
    FGuid                                         SeasonID;                                                     // 0x0000(0x0010)
    int32_t                                       NumberOfWins;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TMap<int32_t,int32_t>                         WinsByTier;                                                   // 0x0018(0x0050)
    int32_t                                       Rank;                                                         // 0x0068(0x0004)
    int32_t                                       LeaderboardRank;                                              // 0x006C(0x0004)
    FSeasonDataAsset*                             SeasonAsset;                                                  // 0x0070(0x0008)
};


// ScriptStruct  ShooterGame.PlayerIdentity
// Struct Size::0x0048
struct FPlayerIdentity
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FGuid                                         PlayerCardID;                                                 // 0x0010(0x0010)
    FGuid                                         PlayerTitleID;                                                // 0x0020(0x0010)
    int32_t                                       AccountLevel;                                                 // 0x0030(0x0004)
    FGuid                                         PreferredLevelBorderID;                                       // 0x0034(0x0010)
    bool                                          Incognito;                                                    // 0x0044(0x0001)
    bool                                          HideAccountLevel;                                             // 0x0045(0x0001)
    char                                          pa_0046[0x0002]                                               // 0x0046(0x0002)
};


// ScriptStruct  ShooterGame.PostGameDetailsDTO
// Struct Size::0x0018
struct FPostGameDetailsDTO
{
    FDateTime                                     Start;                                                        // 0x0000(0x0008)
    TArray<FPostGamePlayerDTO>                    Players;                                                      // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.PostGamePlayerDTO
// Struct Size::0x0010
struct FPostGamePlayerDTO
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ConnectionDetailsDTO
// Struct Size::0x0030
struct FConnectionDetailsDTO
{
    TArray<FString>                               GameServerHosts;                                              // 0x0000(0x0010)
    int64_t                                       GameServerPort;                                               // 0x0010(0x0008)
    uint32_t                                      GameServerObfuscatedIP;                                       // 0x0018(0x0004)
    uint32_t                                      GameClientHash;                                               // 0x001C(0x0004)
    FString                                       PlayerKey;                                                    // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.CoreGameMatchLoadoutsDTO
// Struct Size::0x0010
struct FCoreGameMatchLoadoutsDTO
{
    TArray<FCoreGamePlayerLoadoutDTO>             Loadouts;                                                     // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.CoreGamePlayerLoadoutDTO
// Struct Size::0x0080
struct FCoreGamePlayerLoadoutDTO
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FMegapacketLoadout                            Loadout;                                                      // 0x0010(0x0060)
    FString                                       CharacterID;                                                  // 0x0070(0x0010)
};


// ScriptStruct  ShooterGame.MegapacketLoadout
// Struct Size::0x0060
struct FMegapacketLoadout
{
    FMegapacketSprayLoadout                       Sprays;                                                       // 0x0000(0x0010)
    TMap<FGuid,FMegapacketLoadoutItem>            Items;                                                        // 0x0010(0x0050)
};


// ScriptStruct  ShooterGame.MegapacketLoadoutItem
// Struct Size::0x0070
struct FMegapacketLoadoutItem
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FGuid                                         TypeID;                                                       // 0x0010(0x0010)
    TMap<FGuid,FMegapacketSocket>                 Sockets;                                                      // 0x0020(0x0050)
};


// ScriptStruct  ShooterGame.MegapacketSocket
// Struct Size::0x0030
struct FMegapacketSocket
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FMegapacketSocketItem                         Item;                                                         // 0x0010(0x0020)
};


// ScriptStruct  ShooterGame.MegapacketSocketItem
// Struct Size::0x0020
struct FMegapacketSocketItem
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FGuid                                         TypeID;                                                       // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.MegapacketSprayLoadout
// Struct Size::0x0010
struct FMegapacketSprayLoadout
{
    TArray<FMegapacketSpray>                      SpraySelections;                                              // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.MegapacketSpray
// Struct Size::0x0030
struct FMegapacketSpray
{
    FGuid                                         SocketID;                                                     // 0x0000(0x0010)
    FGuid                                         SprayID;                                                      // 0x0010(0x0010)
    FGuid                                         LevelID;                                                      // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.TimerState
// Struct Size::0x0001
struct FTimerState
{
    bool                                          bPaused;                                                      // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.CrosshairProfileData
// Struct Size::0x0018
struct FCrosshairProfileData
{
    int32_t                                       CurrentProfile;                                               // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FCrosshairSettings>                    Profiles;                                                     // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.CueHandlerAnimationConductorNode
// Struct Size::0x0018
struct FCueHandlerAnimationConductorNode
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TScriptInterface<IAnimationConductorNode>     Node;                                                         // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.CueHandlerAnimationConductorNode
// Struct Size::0x0018
struct FCueHandlerAnimationConductorNode
{
    TScriptInterface<IAnimationConductorNode>     Node;                                                         // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.CueHandlerAnimationConductorNode
// Struct Size::0x0018
struct FCueHandlerAnimationConductorNode
{
    TScriptInterface<IAnimationConductorNode>     Node;                                                         // 0x0000(0x0010)
    FCueHandlerAnimationConductorNode             Settings;                                                     // 0x0010(0x0002)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  ShooterGame.CueHandlerAnimationConductorNode
// Struct Size::0x0002
struct FCueHandlerAnimationConductorNode
{
    bool                                          bCueMustTrigger;                                              // 0x0000(0x0001)
    bool                                          bConsumeCue;                                                  // 0x0001(0x0001)
};


// ScriptStruct  ShooterGame.CustomGameModel
// Struct Size::0x0050
struct FCustomGameModel
{
    TMap<FString,FPartyPlayerModel*>              Backing;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.QueuedStateTransition
// Struct Size::0x0038
struct FQueuedStateTransition
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
    bool                                          bIsSet;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FStateComponent*                              QueuedNextState;                                              // 0x0020(0x0008)
    FStateTransitionContext*                      QueuedContext;                                                // 0x0028(0x0008)
    float                                         TimeRemaining;                                                // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.ZoomQueuedStateTransition
// Struct Size::0x0040
struct FZoomQueuedStateTransition : public FQueuedStateTransition
{
    bool                                          bUnZoom;                                                      // 0x0038(0x0001)
    bool                                          bRememberZoomLevel;                                           // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
};


// ScriptStruct  ShooterGame.DailyRewardsPlayer
// Struct Size::0x0030
struct FDailyRewardsPlayer
{
    int32_t                                       Version;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FDailyRewards                                 DailyRewards;                                                 // 0x0008(0x0018)
    TArray<FDailyRewardsMatch>                    ProcessedMatches;                                             // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.DailyRewardsMatch
// Struct Size::0x0080
struct FDailyRewardsMatch
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    int32_t                                       ProgressBefore;                                               // 0x0010(0x0004)
    int32_t                                       ProgressAfter;                                                // 0x0014(0x0004)
    int32_t                                       XP;                                                           // 0x0018(0x0004)
    int32_t                                       SoftCurrency;                                                 // 0x001C(0x0004)
    TMap<FGuid,FRewardGrant>                      RewardGrants;                                                 // 0x0020(0x0050)
    TArray<bool>                                  DailyBonusState;                                              // 0x0070(0x0010)
};


// ScriptStruct  ShooterGame.DailyRewards
// Struct Size::0x0018
struct FDailyRewards
{
    int32_t                                       RemainingLifetimeSeconds;                                     // 0x0000(0x0004)
    int32_t                                       BonusMilestonesPending;                                       // 0x0004(0x0004)
    TArray<FMilestone>                            Milestones;                                                   // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.Milestone
// Struct Size::0x0008
struct FMilestone
{
    int32_t                                       Progress;                                                     // 0x0000(0x0004)
    bool                                          BonusApplied;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  ShooterGame.IgnoreActorDamageEntry
// Struct Size::0x000C
struct FIgnoreActorDamageEntry
{
    TWeakObjectPtr<AActor>                        IgnoredActor;                                                 // 0x0000(0x0008)
    char                                          pa_0008[0x0004]                                               // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.PendingDamageEvent
// Struct Size::0x0040
struct FPendingDamageEvent
{
    FDamageResponse*                              DamageResponse;                                               // 0x0000(0x0008)
    FDeathResponse                                DeathResponse;                                                // 0x0008(0x0038)
};


// ScriptStruct  ShooterGame.DeathResponse
// Struct Size::0x0038
struct FDeathResponse
{
    TArray<FAresAssist>                           AssistsList;                                                  // 0x0000(0x0010)
    int32_t                                       KillsForKiller;                                               // 0x0010(0x0004)
    int32_t                                       KillsForVictim;                                               // 0x0014(0x0004)
    FAnimMontage*                                 DeathAnimMontage;                                             // 0x0018(0x0008)
    FEffectContainer*                             DeathMontageEffectOverride;                                   // 0x0020(0x0008)
    UObject*                                      DeathMontageEffectOverrideContext;                            // 0x0028(0x0008)
    bool                                          DeathMontageEffectOverrideIsQueued;                           // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  ShooterGame.HealthValue
// Struct Size::0x0008
struct FHealthValue
{
    float                                         Life;                                                         // 0x0000(0x0004)
    float                                         MaximumLife;                                                  // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.DamageTuning
// Struct Size::0x0228
struct FDamageTuning
{
    FRuntimeFloatCurve                            DistanceToDamageCurve;                                        // 0x0000(0x0088)
    FRuntimeFloatCurve                            DistanceToRegionalDamageMultiplierCurve;                      // 0x0088(0x0088)
    char                                          pa_0110[0x0110]                                               // 0x0110(0x0110)
    FShooterDamageType*                           DamageType;                                                   // 0x0220(0x0008)
};


// ScriptStruct  ShooterGame.NetworkedDamageResponseData
// Struct Size::0x0080
struct FNetworkedDamageResponseData
{
    float                                         DamageTaken;                                                  // 0x0000(0x0004)
    float                                         DamageDealt;                                                  // 0x0004(0x0004)
    bool                                          bDamageKilledTarget;                                          // 0x0008(0x0001)
    bool                                          bAliveAfterDamage;                                            // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FController*                                  EventInstigator;                                              // 0x0010(0x0008)
    AActor*                                       DamageCauser;                                                 // 0x0018(0x0008)
    FVector                                       DamageOrigin;                                                 // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FAresEquippable*                              EquippableUsed;                                               // 0x0030(0x0008)
    FDamageType*                                  DamageType;                                                   // 0x0038(0x0008)
    TArray<FLifeChangeEvent>                      LifeChangeEvents;                                             // 0x0040(0x0010)
    FPawn*                                        EventInstigatorPawn;                                          // 0x0050(0x0008)
    FShooterPlayerState*                          DamagerPlayerState;                                           // 0x0058(0x0008)
    enum class EAresRegionalDamage                RegionalDamage;                                               // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    FLifeChangeTimestamp                          LifeChangeTimestamp;                                          // 0x0064(0x0014)
    int32_t                                       VictimRespawnNumber;                                          // 0x0078(0x0004)
    bool                                          bEquippableUsedZoomed;                                        // 0x007C(0x0001)
    bool                                          bEquippableUsedInFocusMode;                                   // 0x007D(0x0001)
    char                                          pa_007E[0x0002]                                               // 0x007E(0x0002)
};


// ScriptStruct  ShooterGame.LifeChangeTimestamp
// Struct Size::0x0014
struct FLifeChangeTimestamp
{
    FNetworkedMovementTimestamp                   MovementTimestamp;                                            // 0x0000(0x0010)
    int32_t                                       LifeChangeEventIndex;                                         // 0x0010(0x0004)
};


// ScriptStruct  ShooterGame.LifeChangeEvent
// Struct Size::0x0018
struct FLifeChangeEvent
{
    FDamageSectionComponent*                      ChangedComponent;                                             // 0x0000(0x0008)
    float                                         LifeResult;                                                   // 0x0008(0x0004)
    float                                         DeltaLife;                                                    // 0x000C(0x0004)
    bool                                          bAliveAfterChange;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.NetworkedPointDamageResponseData
// Struct Size::0x00D0
struct FNetworkedPointDamageResponseData : public FNetworkedDamageResponseData
{
    UPrimitiveComponent*                          DamagedComponent;                                             // 0x0080(0x0008)
    FName                                         DamagedBone;                                                  // 0x0088(0x000C)
    bool                                          bIsWallPenetration;                                           // 0x0094(0x0001)
    char                                          pa_0095[0x0003]                                               // 0x0095(0x0003)
    float                                         FalloffMultiplier;                                            // 0x0098(0x0004)
    FVector                                       DamageDirection;                                              // 0x009C(0x000C)
    FVector                                       DamageImpactLocation;                                         // 0x00A8(0x000C)
    FVector                                       DamageImpactNormal;                                           // 0x00B4(0x000C)
    FVector                                       DamageImpactBoneRelativeLocation;                             // 0x00C0(0x000C)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  ShooterGame.NetworkedRadialDamageResponseData
// Struct Size::0x00F8
struct FNetworkedRadialDamageResponseData : public FNetworkedDamageResponseData
{
    FRadialDamageEvent                            RadialDamageEvent;                                            // 0x0080(0x0040)
    UPrimitiveComponent*                          DamagedComponent;                                             // 0x00C0(0x0008)
    FName                                         DamagedBone;                                                  // 0x00C8(0x000C)
    FVector                                       DamageDirection;                                              // 0x00D4(0x000C)
    FVector                                       DamageImpactLocation;                                         // 0x00E0(0x000C)
    FVector                                       DamageImpactNormal;                                           // 0x00EC(0x000C)
};


// ScriptStruct  Engine.RadialDamageEvent
// Struct Size::0x0040
struct FRadialDamageEvent : public FDamageEvent
{
    FRadialDamageParams                           Params;                                                       // 0x0010(0x0014)
    FVector                                       Origin;                                                       // 0x0024(0x000C)
    TArray<FHitResult>                            ComponentHits;                                                // 0x0030(0x0010)
};


// ScriptStruct  Engine.RadialDamageParams
// Struct Size::0x0014
struct FRadialDamageParams
{
    float                                         BaseDamage;                                                   // 0x0000(0x0004)
    float                                         MinimumDamage;                                                // 0x0004(0x0004)
    float                                         InnerRadius;                                                  // 0x0008(0x0004)
    float                                         OuterRadius;                                                  // 0x000C(0x0004)
    float                                         DamageFalloff;                                                // 0x0010(0x0004)
};


// ScriptStruct  ShooterGame.GraphStyleParams
// Struct Size::0x01A8
struct FGraphStyleParams
{
    float                                         XAxisLineLength;                                              // 0x0000(0x0004)
    float                                         YAxisLineLength;                                              // 0x0004(0x0004)
    float                                         AxisLineThickness;                                            // 0x0008(0x0004)
    FLinearColor                                  AxisColor;                                                    // 0x000C(0x0010)
    float                                         CurveLineThickness;                                           // 0x001C(0x0004)
    float                                         CurvePointsRadius;                                            // 0x0020(0x0004)
    float                                         InnerCurvePointsLineLength;                                   // 0x0024(0x0004)
    float                                         CurvePointsLineThickness;                                     // 0x0028(0x0004)
    float                                         InnerCurvePointsLineThickness;                                // 0x002C(0x0004)
    FVector2D                                     CurveCircleDrawOffset;                                        // 0x0030(0x0008)
    FAresHudFontParams                            GraphTitleFontParams;                                         // 0x0038(0x0070)
    FVector2D                                     GraphTitleDrawOffset;                                         // 0x00A8(0x0008)
    FAresHudFontParams                            ValueLabelFontParams;                                         // 0x00B0(0x0070)
    float                                         ValueLabelSeparation;                                         // 0x0120(0x0004)
    bool                                          bShowGraphCurrentValue;                                       // 0x0124(0x0001)
    bool                                          bShowGraphMinMaxValues;                                       // 0x0125(0x0001)
    char                                          pa_0126[0x0002]                                               // 0x0126(0x0002)
    FAresHudFontParams                            GraphCurrentValueFontParams;                                  // 0x0128(0x0070)
    FVector2D                                     GraphCurrentValueDrawOffset;                                  // 0x0198(0x0008)
    FVector2D                                     GraphCurrentValueSeparationOffset;                            // 0x01A0(0x0008)
};


// ScriptStruct  ShooterGame.FiringTimeDebugTuning
// Struct Size::0x0058
struct FFiringTimeDebugTuning
{
    FFiringLineTuning                             FiringLine;                                                   // 0x0000(0x000C)
    FFiringLineTuning                             InputQueueLine;                                               // 0x000C(0x000C)
    FLinearColor                                  EntryTypeColor;                                               // 0x0018(0x0010)
    char                                          pa_0028[0x0030]                                               // 0x0028(0x0030)
};


// ScriptStruct  ShooterGame.FiringLineTuning
// Struct Size::0x000C
struct FFiringLineTuning
{
    float                                         LineStartHeight;                                              // 0x0000(0x0004)
    float                                         LineEndHeight;                                                // 0x0004(0x0004)
    float                                         LineThickness;                                                // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.FiringTimeEntry
// Struct Size::0x0010
struct FFiringTimeEntry
{
    float                                         TimeStamp;                                                    // 0x0000(0x0004)
    enum class EFiringTimeEntryType               EntryType;                                                    // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FFiringStateComponent*                        SourceFiringState;                                            // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.DebugShooterCharacterAnimInstanceGraphPage
// Struct Size::0x0010
struct FDebugShooterCharacterAnimInstanceGraphPage
{
    TArray<FDebugShooterCharacterAnimInstanceGraph>Graphs;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.DebugShooterCharacterAnimInstanceGraph
// Struct Size::0x01F8
struct FDebugShooterCharacterAnimInstanceGraph
{
    FGraphStyleParams                             GraphStyle;                                                   // 0x0000(0x01A8)
    FText                                         Title;                                                        // 0x01A8(0x0018)
    TArray<FName>                                 VariableNames;                                                // 0x01C0(0x0010)
    TArray<FDebugShooterCharacterAnimInstanceGraphPlot>Plots;                                                   // 0x01D0(0x0010)
    FVector2D                                     GraphDrawOffset;                                              // 0x01E0(0x0008)
    float                                         GraphScale;                                                   // 0x01E8(0x0004)
    char                                          pa_01EC[0x0004]                                               // 0x01EC(0x0004)
    FShooterCharacterAnimInstance*                AnimInstance;                                                 // 0x01F0(0x0008)
};


// ScriptStruct  ShooterGame.DebugShooterCharacterAnimInstanceGraphPlot
// Struct Size::0x0010
struct FDebugShooterCharacterAnimInstanceGraphPlot
{
    FName                                         VariableName;                                                 // 0x0000(0x000C)
    float                                         MaxValue;                                                     // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.ClassCount
// Struct Size::0x0010
struct FClassCount
{
    UObject*                                      Class;                                                        // 0x0000(0x0008)
    int32_t                                       Count;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.TickTimingData
// Struct Size::0x00A0
struct FTickTimingData
{
    TMap<AActor*,FTickTiming>                     ActorTiming;                                                  // 0x0000(0x0050)
    TMap<UActorComponent*,FTickTiming>            ComponentTiming;                                              // 0x0050(0x0050)
};


// ScriptStruct  ShooterGame.TickTiming
// Struct Size::0x0008
struct FTickTiming
{
    float                                         TotalMS;                                                      // 0x0000(0x0004)
    float                                         BlueprintMS;                                                  // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.DecalList
// Struct Size::0x0010
struct FDecalList
{
    TArray<FDecalComponent*>                      List;                                                         // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.DecalProxyEntry
// Struct Size::0x0060
struct FDecalProxyEntry
{
    FDecalData                                    DecalData;                                                    // 0x0000(0x0040)
    FDecalComponent*                              DecalComponent;                                               // 0x0040(0x0008)
    char                                          pa_0048[0x0018]                                               // 0x0048(0x0018)
};


// ScriptStruct  ShooterGame.DecalEntry
// Struct Size::0x0058
struct FDecalEntry
{
    FDecalData                                    DecalData;                                                    // 0x0000(0x0040)
    FDecalComponent*                              DecalComponent;                                               // 0x0040(0x0008)
    char                                          pa_0048[0x0010]                                               // 0x0048(0x0010)
};


// ScriptStruct  ShooterGame.BindingDependencyData
// Struct Size::0x00F0
struct FBindingDependencyData
{
    TSet<FActionBindSet*>                         ChildrenBindSets;                                             // 0x0000(0x0050)
    TSet<FActionBindSet*>                         ParentBindSets;                                               // 0x0050(0x0050)
    TSet<FActionBindSet*>                         RelativeBindSets;                                             // 0x00A0(0x0050)
};


// ScriptStruct  ShooterGame.DestructionSettings
// Struct Size::0x0020
struct FDestructionSettings
{
    enum class EDestructionResponse               Response;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FDestructionEffect>                    Effects;                                                      // 0x0008(0x0010)
    bool                                          bNoExtraEffects;                                              // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ShooterGame.NameUpdateDTO
// Struct Size::0x0010
struct FNameUpdateDTO
{
    FString                                       IDToken;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.SubjectsDTO
// Struct Size::0x0010
struct FSubjectsDTO
{
    TArray<FString>                               Subjects;                                                     // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.NamesDTO
// Struct Size::0x0010
struct FNamesDTO
{
    TArray<FNameDTO>                              Names;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.NameDTO
// Struct Size::0x0030
struct FNameDTO
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       GameName;                                                     // 0x0010(0x0010)
    FString                                       TagLine;                                                      // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.DropInPlayerLoadingState
// Struct Size::0x0020
struct FDropInPlayerLoadingState
{
    FAresPlayerStateBase*                         DropInPlayerState;                                            // 0x0000(0x0008)
    bool                                          bOwningClientFinishedLoading;                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<FAresPlayerStateBase*>                 ClientsStillLoading;                                          // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.DropInPlayerAssets
// Struct Size::0x0060
struct FDropInPlayerAssets
{
    FString                                       CharacterID;                                                  // 0x0000(0x0010)
    TArray<FMegapacketSpray>                      SpraySelections;                                              // 0x0010(0x0010)
    TArray<FGuid>                                 EquippableSkinItemIDs;                                        // 0x0020(0x0010)
    TArray<FGuid>                                 EquippableSkinLevelItemIDs;                                   // 0x0030(0x0010)
    TArray<FGuid>                                 EquippableSkinChromaItemIDs;                                  // 0x0040(0x0010)
    TArray<FGuid>                                 EquippableCharmLevelItemIDs;                                  // 0x0050(0x0010)
};


// ScriptStruct  ShooterGame.DropInRequest
// Struct Size::0x0020
struct FDropInRequest
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    TArray<FMegapacketPlayer>                     Players;                                                      // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.MegapacketPlayer
// Struct Size::0x0100
struct FMegapacketPlayer
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       GameName;                                                     // 0x0010(0x0010)
    FString                                       TagLine;                                                      // 0x0020(0x0010)
    FName                                         TeamID;                                                       // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       PartyID;                                                      // 0x0040(0x0010)
    FString                                       CharacterID;                                                  // 0x0050(0x0010)
    FString                                       Key;                                                          // 0x0060(0x0010)
    FMegapacketLoadout                            Loadout;                                                      // 0x0070(0x0060)
    FMegapacketContracts                          Contracts;                                                    // 0x00D0(0x0010)
    FMegapacketPlayerIdentity                     PlayerIdentity;                                               // 0x00E0(0x0004)
    char                                          pa_00E4[0x0004]                                               // 0x00E4(0x0004)
    TArray<FString>                               AccessibleCharacters;                                         // 0x00E8(0x0010)
    int32_t                                       CompetitiveTier;                                              // 0x00F8(0x0004)
    bool                                          IsModerator;                                                  // 0x00FC(0x0001)
    bool                                          UseBroadcastHUD;                                              // 0x00FD(0x0001)
    bool                                          IsCoach;                                                      // 0x00FE(0x0001)
    char                                          pa_00FF[0x0001]                                               // 0x00FF(0x0001)
};


// ScriptStruct  ShooterGame.MegapacketPlayerIdentity
// Struct Size::0x0004
struct FMegapacketPlayerIdentity
{
    int32_t                                       AccountLevel;                                                 // 0x0000(0x0004)
};


// ScriptStruct  ShooterGame.MegapacketContracts
// Struct Size::0x0010
struct FMegapacketContracts
{
    TArray<FMegapacketMission>                    Missions;                                                     // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.MegapacketMission
// Struct Size::0x0060
struct FMegapacketMission
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    TMap<FGuid,int32_t>                           Objectives;                                                   // 0x0010(0x0050)
};


// ScriptStruct  ShooterGame.FreePooledEffect
// Struct Size::0x0030
struct FFreePooledEffect
{
    bool                                          bShouldActorTick;                                             // 0x0000(0x0001)
    bool                                          bActorHidden;                                                 // 0x0001(0x0001)
    bool                                          bActorCollisionEnabled;                                       // 0x0002(0x0001)
    char                                          pa_0003[0x0005]                                               // 0x0003(0x0005)
    FEffectContainer*                             FXC;                                                          // 0x0008(0x0008)
    TArray<UActorComponent*>                      TickingComponents;                                            // 0x0010(0x0010)
    TArray<FAresAudioComponent*>                  AudioComponents;                                              // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.PendingReplicationEffect
// Struct Size::0x0030
struct FPendingReplicationEffect
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FEffectID                                     EffectID;                                                     // 0x0008(0x0020)
    FEffectContainer*                             EffectType;                                                   // 0x0028(0x0008)
};


// ScriptStruct  ShooterGame.PendingStopEffect
// Struct Size::0x0030
struct FPendingStopEffect
{
    float                                         MovementTime;                                                 // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FEffectID                                     EffectID;                                                     // 0x0008(0x0020)
    bool                                          bHasStarted;                                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  ShooterGame.PendingStartEffect
// Struct Size::0x00F0
struct FPendingStartEffect
{
    float                                         MovementTime;                                                 // 0x0000(0x0004)
    bool                                          bContinuous;                                                  // 0x0004(0x0001)
    char                                          pa_0005[0x000B]                                               // 0x0005(0x000B)
    FActiveEffectInfo                             EffectInfo;                                                   // 0x0010(0x00E0)
};


// ScriptStruct  ShooterGame.ActiveEffectInfo
// Struct Size::0x00E0
struct FActiveEffectInfo
{
    FEffectID                                     EffectID;                                                     // 0x0000(0x0020)
    FEffectContainer*                             EffectType;                                                   // 0x0020(0x0008)
    FEffectData                                   EffectData;                                                   // 0x0028(0x0058)
    FTransform                                    Transform;                                                    // 0x0080(0x0030)
    FName                                         Socket;                                                       // 0x00B0(0x000C)
    float                                         StartTimeStamp;                                               // 0x00BC(0x0004)
    FEffectContainer*                             EffectContainer;                                              // 0x00C0(0x0008)
    FTimerHandle                                  ProxyTimerHandle;                                             // 0x00C8(0x0008)
    enum class EAresAlliance                      AllianceFilter;                                               // 0x00D0(0x0001)
    char                                          pa_00D1[0x000F]                                               // 0x00D1(0x000F)
};


// ScriptStruct  ShooterGame.EffectData
// Struct Size::0x0058
struct FEffectData
{
    TWeakObjectPtr<AActor>                        WaitOnReplicationActor;                                       // 0x0000(0x0008)
    TArray<FEffectDataFloat>                      FloatValues;                                                  // 0x0008(0x0010)
    TArray<FEffectDataVector>                     VectorValues;                                                 // 0x0018(0x0010)
    TArray<FEffectDataObject>                     ObjectValues;                                                 // 0x0028(0x0010)
    TArray<FEffectDataClass>                      ClassValues;                                                  // 0x0038(0x0010)
    TArray<FEffectDataText>                       TextValues;                                                   // 0x0048(0x0010)
};


// ScriptStruct  ShooterGame.EffectDataText
// Struct Size::0x0028
struct FEffectDataText
{
    FGameplayTag                                  Name;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Text;                                                         // 0x0010(0x0018)
};


// ScriptStruct  ShooterGame.EffectDataClass
// Struct Size::0x0040
struct FEffectDataClass
{
    FGameplayTag                                  Name;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TSoftClassPtr<UObject>                        Class;                                                        // 0x0010(0x0030)
};


// ScriptStruct  ShooterGame.EffectDataObject
// Struct Size::0x0014
struct FEffectDataObject
{
    FGameplayTag                                  Name;                                                         // 0x0000(0x000C)
    TWeakObjectPtr<UObject>                       Object;                                                       // 0x000C(0x0008)
};


// ScriptStruct  ShooterGame.EffectDataVector
// Struct Size::0x0018
struct FEffectDataVector
{
    FGameplayTag                                  Name;                                                         // 0x0000(0x000C)
    FVector                                       Vector;                                                       // 0x000C(0x000C)
};


// ScriptStruct  ShooterGame.EffectDataFloat
// Struct Size::0x0010
struct FEffectDataFloat
{
    FGameplayTag                                  Name;                                                         // 0x0000(0x000C)
    float                                         Float;                                                        // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.EmbeddedEffectInfo
// Struct Size::0x0030
struct FEmbeddedEffectInfo
{
    FEffectContainer*                             EffectType;                                                   // 0x0000(0x0008)
    FVector                                       AttachOffset;                                                 // 0x0008(0x000C)
    FRotator                                      AttachRotation;                                               // 0x0014(0x000C)
    FName                                         AttachSocket;                                                 // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.WeaponEjectable
// Struct Size::0x00C0
struct FWeaponEjectable
{
    FName                                         EjectableName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FAresEjectable*                               EjectableClass;                                               // 0x0010(0x0008)
    FName                                         AttachPoint;                                                  // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FMaterialInterface*                           OverrideMaterial1P;                                           // 0x0028(0x0008)
    TArray<FMaterialInterface*>                   AdditionalOverrideMaterials1P;                                // 0x0030(0x0010)
    FMaterialInterface*                           OverrideMaterial3P;                                           // 0x0040(0x0008)
    TArray<FMaterialInterface*>                   AdditionalOverrideMaterials3P;                                // 0x0048(0x0010)
    FStaticMesh*                                  OverrideMesh1P;                                               // 0x0058(0x0008)
    FStaticMesh*                                  OverrideMesh3P;                                               // 0x0060(0x0008)
    FAresEjectablePool*                           Pool;                                                         // 0x0068(0x0008)
    bool                                          bUse1PSocketVelocity;                                         // 0x0070(0x0001)
    char                                          pa_0071[0x000F]                                               // 0x0071(0x000F)
    FEjectableVelocitySample                      VelocitySamplePrev;                                           // 0x0080(0x0020)
    FEjectableVelocitySample                      VelocitySampleCurr;                                           // 0x00A0(0x0020)
};


// ScriptStruct  ShooterGame.EjectableVelocitySample
// Struct Size::0x0020
struct FEjectableVelocitySample
{
    float                                         Time;                                                         // 0x0000(0x0004)
    FVector                                       Position;                                                     // 0x0004(0x000C)
    FQuat                                         Rotation;                                                     // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.EmojiEntry
// Struct Size::0x0090
struct FEmojiEntry
{
    FSlateBrush                                   Brush;                                                        // 0x0000(0x0090)
};


// ScriptStruct  ShooterGame.CachedEngageDistanceMapping
// Struct Size::0x0030
struct FCachedEngageDistanceMapping
{
    FIntVector                                    QueryLocation;                                                // 0x0000(0x000C)
    FIntVector                                    TargetLocation;                                               // 0x000C(0x000C)
    FEngageDistanceInfo                           EngageDistanceInfo;                                           // 0x0018(0x0018)
};


// ScriptStruct  ShooterGame.EngageDistanceInfo
// Struct Size::0x0018
struct FEngageDistanceInfo
{
    TArray<FVector>                               PathPoints;                                                   // 0x0000(0x0010)
    float                                         EngageDistance;                                               // 0x0010(0x0004)
    int32_t                                       FirstVisibleLocationIndex;                                    // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.WeaponStatUIData
// Struct Size::0x0068
struct FWeaponStatUIData
{
    enum class EWeaponFireModeDisplayType         FireMode;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FireRate;                                                     // 0x0004(0x0004)
    int32_t                                       MagazineSize;                                                 // 0x0008(0x0004)
    float                                         RunSpeedMultiplier;                                           // 0x000C(0x0004)
    float                                         EquipTimeSeconds;                                             // 0x0010(0x0004)
    float                                         ReloadTimeSeconds;                                            // 0x0014(0x0004)
    float                                         FirstBulletAccuracy;                                          // 0x0018(0x0004)
    int32_t                                       ShotgunPelletCount;                                           // 0x001C(0x0004)
    enum class EWallPenetrationDisplayType        WallPenetration;                                              // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FWeaponStatDamageUIData>               DamageRanges;                                                 // 0x0028(0x0010)
    enum class EWeaponAltFireDisplayType          AltFireType;                                                  // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    FAltFireStats                                 ADSStats;                                                     // 0x003C(0x0014)
    FAltFireStats                                 AirBurstStats;                                                // 0x0050(0x0008)
    FAltFireStats                                 AltShotgunStats;                                              // 0x0058(0x0008)
    enum class EWeaponStatsFeature                Feature;                                                      // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  ShooterGame.AltFireStats
// Struct Size::0x0008
struct FAltFireStats
{
    int32_t                                       ShotgunPelletCount;                                           // 0x0000(0x0004)
    float                                         BurstRate;                                                    // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.AltFireStats
// Struct Size::0x0008
struct FAltFireStats
{
    float                                         BurstDistance;                                                // 0x0000(0x0004)
    int32_t                                       ShotgunPelletCount;                                           // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.AltFireStats
// Struct Size::0x0014
struct FAltFireStats
{
    float                                         ZoomMultiplier;                                               // 0x0000(0x0004)
    float                                         FireRate;                                                     // 0x0004(0x0004)
    float                                         RunSpeedMultiplier;                                           // 0x0008(0x0004)
    int32_t                                       BurstCount;                                                   // 0x000C(0x0004)
    float                                         FirstBulletAccuracy;                                          // 0x0010(0x0004)
};


// ScriptStruct  ShooterGame.WeaponStatDamageUIData
// Struct Size::0x0014
struct FWeaponStatDamageUIData
{
    float                                         RangeStartMeters;                                             // 0x0000(0x0004)
    float                                         RangeEndMeters;                                               // 0x0004(0x0004)
    float                                         HeadDamage;                                                   // 0x0008(0x0004)
    float                                         BodyDamage;                                                   // 0x000C(0x0004)
    float                                         LegDamage;                                                    // 0x0010(0x0004)
};


// ScriptStruct  ShooterGame.WeaponStatsFeature
// Struct Size::0x0008
struct FWeaponStatsFeature
{
    float                                         MaxFireRate;                                                  // 0x0000(0x0004)
    float                                         RampUpTime;                                                   // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.StabilityAnimTuning
// Struct Size::0x0088
struct FStabilityAnimTuning
{
    FRuntimeFloatCurve                            KickBlendCurve;                                               // 0x0000(0x0088)
};


// ScriptStruct  ShooterGame.IdlePoseTuning
// Struct Size::0x0018
struct FIdlePoseTuning
{
    FVector                                       FirstPersonMeshOffset;                                        // 0x0000(0x000C)
    FRotator                                      FirstPersonMeshRotation;                                      // 0x000C(0x000C)
};


// ScriptStruct  ShooterGame.AnimLeanTuning
// Struct Size::0x000C
struct FAnimLeanTuning
{
    float                                         PitchAndRollStrength;                                         // 0x0000(0x0004)
    float                                         YawStrength;                                                  // 0x0004(0x0004)
    float                                         TranslationStrength;                                          // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.EquippableEventDebugHistoryEntry
// Struct Size::0x0040
struct FEquippableEventDebugHistoryEntry
{
    FEquippableEventBase*                         Type;                                                         // 0x0000(0x0008)
    enum class EEquippableEventHistoryEntryMode   NetworkMode;                                                  // 0x0008(0x0004)
    float                                         Timestamp;                                                    // 0x000C(0x0004)
    int32_t                                       CastID;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       EquippableName;                                               // 0x0018(0x0010)
    TWeakObjectPtr<FAresEquippable>               Equippable;                                                   // 0x0028(0x0008)
    FString                                       CharacterName;                                                // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.EquippableEventPool
// Struct Size::0x0010
struct FEquippableEventPool
{
    TArray<FEquippableEventBase*>                 FreeObjects;                                                  // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.EquippableEventItemSlotContainer
// Struct Size::0x0050
struct FEquippableEventItemSlotContainer
{
    TMap<FEquippableEventBase*,FMulticastInlineDelegate>EventDelegates;                                         // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.ItemSlotBlocking
// Struct Size::0x0018
struct FItemSlotBlocking
{
    bool                                          bBlockAll;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<enum class EAresItemSlot>              BlockedItemSlots;                                             // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.EquippableStateBuffInfo
// Struct Size::0x0020
struct FEquippableStateBuffInfo
{
    FAresGameplayBuff*                            BuffClass;                                                    // 0x0000(0x0008)
    float                                         BuffLevel;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FAresAbilitySystemComponent*                  BuffTarget;                                                   // 0x0010(0x0008)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
};


// ScriptStruct  ShooterGame.BracketCalculationData
// Struct Size::0x0028
struct FBracketCalculationData
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  ShooterGame.BracketCalculationDataByeInfo
// Struct Size::0x0010
struct FBracketCalculationDataByeInfo
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.MatchupTeamViewModelPair
// Struct Size::0x0020
struct FMatchupTeamViewModelPair
{
    FEsportsMatchupTeamViewModel*                 TeamOne;                                                      // 0x0000(0x0008)
    FEsportsMatchupTeamViewModel*                 TeamTwo;                                                      // 0x0008(0x0008)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PickemBracketSectionAutosaveDetails
// Struct Size::0x0040
struct FPickemBracketSectionAutosaveDetails
{
    FString                                       TournamentSlug;                                               // 0x0000(0x0010)
    FString                                       SectionID;                                                    // 0x0010(0x0010)
    FString                                       PickBlockID;                                                  // 0x0020(0x0010)
    FString                                       SubmittedInBatch;                                             // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.PickemGroupSectionAutosaveDetails
// Struct Size::0x0030
struct FPickemGroupSectionAutosaveDetails
{
    FString                                       TournamentSlug;                                               // 0x0000(0x0010)
    FString                                       SectionID;                                                    // 0x0010(0x0010)
    FString                                       SubmittedInBatch;                                             // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.RoundRobinMatchupViewModels
// Struct Size::0x0018
struct FRoundRobinMatchupViewModels
{
    FEsportsMatchupViewModel*                     MatchOne;                                                     // 0x0000(0x0008)
    FEsportsMatchupViewModel*                     MatchTwo;                                                     // 0x0008(0x0008)
    FEsportsMatchupViewModel*                     MatchThree;                                                   // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.RoundRobinMatchupTeamViewModels
// Struct Size::0x0018
struct FRoundRobinMatchupTeamViewModels
{
    FEsportsMatchupTeamViewModel*                 TeamOne;                                                      // 0x0000(0x0008)
    FEsportsMatchupTeamViewModel*                 TeamTwo;                                                      // 0x0008(0x0008)
    FEsportsMatchupTeamViewModel*                 TeamThree;                                                    // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.PickemRewardsDTO
// Struct Size::0x0010
struct FPickemRewardsDTO
{
    TArray<FPickemRewardDTO>                      Rewards;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PickemRewardDTO
// Struct Size::0x0020
struct FPickemRewardDTO
{
    FString                                       ItemID;                                                       // 0x0000(0x0010)
    FString                                       ItemTypeID;                                                   // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PickemSectionPicksDTO
// Struct Size::0x0010
struct FPickemSectionPicksDTO
{
    TArray<FPickemSectionPicksForSectionIDDTO>    SectionPicks;                                                 // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PickemSectionPicksForSectionIDDTO
// Struct Size::0x0060
struct FPickemSectionPicksForSectionIDDTO
{
    FString                                       EldsSectionID;                                                // 0x0000(0x0010)
    FPickemLineupDTO                              Lineup;                                                       // 0x0010(0x0010)
    FString                                       PickType;                                                     // 0x0020(0x0010)
    FPickemResultDTO                              Result;                                                       // 0x0030(0x0030)
};


// ScriptStruct  ShooterGame.PickemResultDTO
// Struct Size::0x0030
struct FPickemResultDTO
{
    FString                                       Correctness;                                                  // 0x0000(0x0010)
    int32_t                                       TotalAwardedPoints;                                           // 0x0010(0x0004)
    int32_t                                       TotalPossiblePoints;                                          // 0x0014(0x0004)
    int32_t                                       PerfectPickPoints;                                            // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FPickemEntryDTO>                       Entries;                                                      // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.PickemEntryDTO
// Struct Size::0x0030
struct FPickemEntryDTO
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Correctness;                                                  // 0x0008(0x0010)
    FString                                       ParticipantID;                                                // 0x0018(0x0010)
    int32_t                                       Points;                                                       // 0x0028(0x0004)
    int32_t                                       Rank;                                                         // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.PickemLineupDTO
// Struct Size::0x0010
struct FPickemLineupDTO
{
    TArray<FPickemEntryDTO>                       Entries;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PickemBracketPicksDTO
// Struct Size::0x0048
struct FPickemBracketPicksDTO
{
    FString                                       PickBlockID;                                                  // 0x0000(0x0010)
    FString                                       PlayerName;                                                   // 0x0010(0x0010)
    TArray<FPickemBracketPickDTO>                 Picks;                                                        // 0x0020(0x0010)
    TArray<FPickemBracketPickDTO>                 MatchPicks;                                                   // 0x0030(0x0010)
    int32_t                                       Score;                                                        // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  ShooterGame.PickemBracketPickDTO
// Struct Size::0x0050
struct FPickemBracketPickDTO
{
    FString                                       EldsMatchID;                                                  // 0x0000(0x0010)
    FString                                       ParticipantID;                                                // 0x0010(0x0010)
    FString                                       PickType;                                                     // 0x0020(0x0010)
    int32_t                                       WageredAmount;                                                // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       Result;                                                       // 0x0038(0x0010)
    int32_t                                       PointsAwarded;                                                // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ShooterGame.CelebLeaderboardDTO
// Struct Size::0x0010
struct FCelebLeaderboardDTO
{
    TArray<FCelebStandingDTO>                     Standings;                                                    // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.CelebStandingDTO
// Struct Size::0x0030
struct FCelebStandingDTO
{
    int32_t                                       Rank;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Name;                                                         // 0x0008(0x0010)
    FString                                       ID;                                                           // 0x0018(0x0010)
    int32_t                                       Points;                                                       // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.PickemPlayerStatisticsDTO
// Struct Size::0x0028
struct FPickemPlayerStatisticsDTO
{
    int32_t                                       Rank;                                                         // 0x0000(0x0004)
    int32_t                                       Points;                                                       // 0x0004(0x0004)
    int32_t                                       PercentRank;                                                  // 0x0008(0x0004)
    int32_t                                       CorrectPicks;                                                 // 0x000C(0x0004)
    int32_t                                       PerfectBlocks;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       PlayerName;                                                   // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.PickemRegistrationDTO
// Struct Size::0x0020
struct FPickemRegistrationDTO
{
    FString                                       PlayerID;                                                     // 0x0000(0x0010)
    TArray<FPickemLeagueDTO>                      Leagues;                                                      // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PickemLeagueDTO
// Struct Size::0x0078
struct FPickemLeagueDTO
{
    FString                                       LeagueID;                                                     // 0x0000(0x0010)
    FString                                       EldsLeagueID;                                                 // 0x0010(0x0010)
    FPickemTournamentDTO                          Tournament;                                                   // 0x0020(0x0050)
    bool                                          Published;                                                    // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
};


// ScriptStruct  ShooterGame.PickemTournamentDTO
// Struct Size::0x0050
struct FPickemTournamentDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       EldsTournamentID;                                             // 0x0010(0x0010)
    FString                                       LeagueID;                                                     // 0x0020(0x0010)
    TArray<FPickBlockDTO>                         PickBlocks;                                                   // 0x0030(0x0010)
    TArray<FParticipantDTO>                       Participants;                                                 // 0x0040(0x0010)
};


// ScriptStruct  ShooterGame.ParticipantDTO
// Struct Size::0x0020
struct FParticipantDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       EldsTeamID;                                                   // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PickBlockDTO
// Struct Size::0x0090
struct FPickBlockDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       EldsTournamentID;                                             // 0x0010(0x0010)
    FSlugDTO                                      Slug;                                                         // 0x0020(0x0010)
    FDateTime                                     PickOpenTime;                                                 // 0x0030(0x0008)
    FDateTime                                     PickCloseTime;                                                // 0x0038(0x0008)
    FString                                       State;                                                        // 0x0040(0x0010)
    FString                                       OpenLevel;                                                    // 0x0050(0x0010)
    FString                                       BlockType;                                                    // 0x0060(0x0010)
    TArray<FPickBlockElementDTO>                  PickBlockElements;                                            // 0x0070(0x0010)
    FString                                       CompletionStatus;                                             // 0x0080(0x0010)
};


// ScriptStruct  ShooterGame.PickBlockElementDTO
// Struct Size::0x00C0
struct FPickBlockElementDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       PickBlockID;                                                  // 0x0010(0x0010)
    FPickemSectionDTO                             Section;                                                      // 0x0020(0x0030)
    FPickemMatchDTO                               Match;                                                        // 0x0050(0x0048)
    FDateTime                                     PickOpenTime;                                                 // 0x0098(0x0008)
    FDateTime                                     PickCloseTime;                                                // 0x00A0(0x0008)
    FString                                       State;                                                        // 0x00A8(0x0010)
    int32_t                                       DisplayOrder;                                                 // 0x00B8(0x0004)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
};


// ScriptStruct  ShooterGame.PickemMatchDTO
// Struct Size::0x0048
struct FPickemMatchDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       EldsMatchID;                                                  // 0x0010(0x0010)
    int32_t                                       BaselinePoints;                                               // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       CorrectPick;                                                  // 0x0028(0x0010)
    FString                                       ResultState;                                                  // 0x0038(0x0010)
};


// ScriptStruct  ShooterGame.PickemSectionDTO
// Struct Size::0x0030
struct FPickemSectionDTO
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       EldsSectionID;                                                // 0x0010(0x0010)
    FPickemEntriesDTO                             CorrectPick;                                                  // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.PickemEntriesDTO
// Struct Size::0x0010
struct FPickemEntriesDTO
{
    TArray<FPickemEntryDTO>                       Entries;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.SlugDTO
// Struct Size::0x0010
struct FSlugDTO
{
    FString                                       Slug;                                                         // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PickemLeaguesDTO
// Struct Size::0x0010
struct FPickemLeaguesDTO
{
    TArray<FPickemLeagueDTO>                      PickemLeagues;                                                // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.CombinedDataListDTO
// Struct Size::0x0010
struct FCombinedDataListDTO
{
    TArray<FCombinedDataDTO>                      Data;                                                         // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.CombinedDataDTO
// Struct Size::0x0170
struct FCombinedDataDTO
{
    FEventScheduleDTO                             Events;                                                       // 0x0000(0x0090)
    FTournamentStandingDTO                        Standings;                                                    // 0x0090(0x00D0)
    FTeamsDTO                                     Teams;                                                        // 0x0160(0x0010)
};


// ScriptStruct  ShooterGame.UrlClickEvent
// Struct Size::0x0070
struct FUrlClickEvent
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       InstanceId;                                                   // 0x0010(0x0010)
    FString                                       ClientSessionId;                                              // 0x0020(0x0010)
    FString                                       Url;                                                          // 0x0030(0x0010)
    FString                                       TeamOneName;                                                  // 0x0040(0x0010)
    FString                                       TeamTwoName;                                                  // 0x0050(0x0010)
    FString                                       TournamentStage;                                              // 0x0060(0x0010)
};


// ScriptStruct  ShooterGame.EULAContent
// Struct Size::0x0010
struct FEULAContent
{
    FString                                       Content;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.EULAAcceptanceState
// Struct Size::0x0018
struct FEULAAcceptanceState
{
    enum class EEULAAcceptanceState               ParsedState;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       State;                                                        // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.ModifyFavoritesRequest
// Struct Size::0x0020
struct FModifyFavoritesRequest
{
    TArray<FGuid>                                 AddItemIDs;                                                   // 0x0000(0x0010)
    TArray<FGuid>                                 RemoveItemIDs;                                                // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.CreateFavoriteRequest
// Struct Size::0x0010
struct FCreateFavoriteRequest
{
    FGuid                                         ItemID;                                                       // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PlayerFavorites
// Struct Size::0x0060
struct FPlayerFavorites
{
    FGuid                                         Subject;                                                      // 0x0000(0x0010)
    TMap<FGuid,FFavorite>                         FavoritedContent;                                             // 0x0010(0x0050)
};


// ScriptStruct  ShooterGame.Favorite
// Struct Size::0x0020
struct FFavorite
{
    FGuid                                         FavoriteID;                                                   // 0x0000(0x0010)
    FGuid                                         ItemID;                                                       // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.CharacterCombatReportAggregate
// Struct Size::0x0018
struct FCharacterCombatReportAggregate
{
    int32_t                                       RoundNumber;                                                  // 0x0000(0x0004)
    float                                         TotalDamage;                                                  // 0x0004(0x0004)
    TArray<FShotsByEquippable>                    TotalShots;                                                   // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.ShotsByEquippable
// Struct Size::0x0018
struct FShotsByEquippable
{
    FAresEquippable*                              EquippableClass;                                              // 0x0000(0x0008)
    int32_t                                       TotalShots;                                                   // 0x0008(0x0004)
    int32_t                                       TotalDamage;                                                  // 0x000C(0x0004)
    int32_t                                       Hits;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.FindSpawnSpotTrace
// Struct Size::0x0018
struct FFindSpawnSpotTrace
{
    FVector                                       SourceOffset;                                                 // 0x0000(0x000C)
    FVector                                       TargetOffset;                                                 // 0x000C(0x000C)
};


// ScriptStruct  ShooterGame.ProjectileFireData
// Struct Size::0x0038
struct FProjectileFireData
{
    FFiringStateComponent*                        FiringState;                                                  // 0x0000(0x0008)
    TArray<FFiringResults>                        FiringResults;                                                // 0x0008(0x0010)
    int32_t                                       BurstShotNumber;                                              // 0x0018(0x0004)
    int32_t                                       AmmoRemaining;                                                // 0x001C(0x0004)
    bool                                          bTracerEnabled;                                               // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    int32_t                                       RandomSeed;                                                   // 0x0024(0x0004)
    int32_t                                       YawSwitchBits;                                                // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FShooterPlayerState*                          FiringPlayerState;                                            // 0x0030(0x0008)
};


// ScriptStruct  ShooterGame.FiringStateVariables
// Struct Size::0x0010
struct FFiringStateVariables
{
    int32_t                                       ShotsFiredThisEntry;                                          // 0x0000(0x0004)
    int32_t                                       RoundsUntilNextTracer;                                        // 0x0004(0x0004)
    FStateComponent*                              ScriptNextState;                                              // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.BurstTuning
// Struct Size::0x0008
struct FBurstTuning
{
    int32_t                                       BurstShotsPerEntry;                                           // 0x0000(0x0004)
    float                                         BurstRecoveryTime;                                            // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.ScheduledTimeStepChange
// Struct Size::0x0008
struct FScheduledTimeStepChange
{
    FTimeStampIndex                               TimeStampIndex;                                               // 0x0000(0x0004)
    char                                          MoveStepsPerSecond;                                           // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.TimeStampIndex
// Struct Size::0x0004
struct FTimeStampIndex
{
    uint32_t                                      Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  ShooterGame.FlyoutDelegateHandles
// Struct Size::0x0010
struct FFlyoutDelegateHandles
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.AresFontStyle
// Struct Size::0x0068
struct FAresFontStyle
{
    UObject*                                      FontObject;                                                   // 0x0000(0x0008)
    FName                                         TypefaceFontName;                                             // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UObject*                                      FontMaterial;                                                 // 0x0018(0x0008)
    FLinearColor                                  Color;                                                        // 0x0020(0x0010)
    FLinearColor                                  ShadowColorAndOpacity;                                        // 0x0030(0x0010)
    int32_t                                       Size;                                                         // 0x0040(0x0004)
    int32_t                                       Size;                                                         // 0x0044(0x0004)
    int32_t                                       Size;                                                         // 0x0048(0x0004)
    int32_t                                       Tracking;                                                     // 0x004C(0x0004)
    int32_t                                       Tracking;                                                     // 0x0050(0x0004)
    int32_t                                       Tracking;                                                     // 0x0054(0x0004)
    bool                                          bOverride;                                                    // 0x0058(0x0001)
    bool                                          bOverride;                                                    // 0x0059(0x0001)
    bool                                          bOverride;                                                    // 0x005A(0x0001)
    bool                                          bOverride;                                                    // 0x005B(0x0001)
    bool                                          bOverride;                                                    // 0x005C(0x0001)
    bool                                          bOverride;                                                    // 0x005D(0x0001)
    bool                                          bOverride;                                                    // 0x005E(0x0001)
    bool                                          bOverride;                                                    // 0x005F(0x0001)
    bool                                          bOverride;                                                    // 0x0060(0x0001)
    bool                                          bOverride;                                                    // 0x0061(0x0001)
    bool                                          bOverride;                                                    // 0x0062(0x0001)
    char                                          pa_0063[0x0005]                                               // 0x0063(0x0005)
};


// ScriptStruct  ShooterGame.FootstepABTestEvent
// Struct Size::0x00A8
struct FFootstepABTestEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FString                                       TestName;                                                     // 0x0068(0x0010)
    FString                                       CohortName;                                                   // 0x0078(0x0010)
    FTelemetryPlatformInfo                        PlatformInfo;                                                 // 0x0088(0x0020)
};


// ScriptStruct  ShooterGame.FootstepOverrideType
// Struct Size::0x0010
struct FFootstepOverrideType
{
    FPhysicalMaterial*                            OverrideMaterial;                                             // 0x0000(0x0008)
    float                                         EndTimeStamp;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.NetworkedForceModuleInfo
// Struct Size::0x0048
struct FNetworkedForceModuleInfo
{
    FForceModuleHandle                            Handle;                                                       // 0x0000(0x0008)
    AActor*                                       Source;                                                       // 0x0008(0x0008)
    FVector                                       SourceLocation;                                               // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FForceModule*                                 ModuleClass;                                                  // 0x0020(0x0008)
    float                                         Duration;                                                     // 0x0028(0x0004)
    FNetworkedMovementTimestamp                   TimeStamp;                                                    // 0x002C(0x0010)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    AActor*                                       ContextActor;                                                 // 0x0040(0x0008)
};


// ScriptStruct  ShooterGame.PhysicsDerivative
// Struct Size::0x0018
struct FPhysicsDerivative
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  ShooterGame.PhysicsState
// Struct Size::0x0018
struct FPhysicsState
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
};


// ScriptStruct  ShooterGame.ForceModuleRecord
// Struct Size::0x0030
struct FForceModuleRecord
{
    AActor*                                       Source;                                                       // 0x0000(0x0008)
    FForceModule*                                 ModuleType;                                                   // 0x0008(0x0008)
    float                                         ModuleDuration;                                               // 0x0010(0x0004)
    FNetworkedMovementTimestamp                   TimeStamp;                                                    // 0x0014(0x0010)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    AActor*                                       ContextActor;                                                 // 0x0028(0x0008)
};


// ScriptStruct  ShooterGame.FresnelSettings
// Struct Size::0x0010
struct FFresnelSettings
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.FXCPoolWarmingListEntry
// Struct Size::0x0018
struct FFXCPoolWarmingListEntry
{
    FString                                       ClassPath;                                                    // 0x0000(0x0010)
    int32_t                                       Count;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.GameDataEventBase
// Struct Size::0x0008
struct FGameDataEventBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.ShooterAssisterDataModel
// Struct Size::0x0010
struct FShooterAssisterDataModel
{
    enum class EAresAssistType                    AssistType;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FShooterPlayerStateDataModel*                 Assister;                                                     // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.RoundDataModel
// Struct Size::0x0028
struct FRoundDataModel
{
    int32_t                                       RoundNumber;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FShooterTeamStateDataModel*                   WinningTeam;                                                  // 0x0008(0x0008)
    FShooterTeamStateDataModel*                   AttackingTeam;                                                // 0x0010(0x0008)
    FShooterTeamStateDataModel*                   DefendingTeam;                                                // 0x0018(0x0008)
    enum class EAresRoundOutcome                  RoundResult;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ShooterGame.GameFeatureSubclass
// Struct Size::0x0018
struct FGameFeatureSubclass
{
    AActor*                                       Class;                                                        // 0x0000(0x0008)
    TArray<FGameFeatureAlternateClass>            AlternateClasses;                                             // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.GameFeatureAlternateClass
// Struct Size::0x0010
struct FGameFeatureAlternateClass
{
    enum class EGameFeatureToggleName             ToggleName;                                                   // 0x0000(0x0001)
    bool                                          bToggleValue;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    AActor*                                       Class;                                                        // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.SessionLoopStatePrediction
// Struct Size::0x0010
struct FSessionLoopStatePrediction
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ReconcileResult
// Struct Size::0x000C
struct FReconcileResult
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  ShooterGame.PlatformInputIconData
// Struct Size::0x0030
struct FPlatformInputIconData : public FTableRowBase
{
    FKey                                          Key;                                                          // 0x0008(0x0020)
    FTexture2D*                                   Icon;                                                         // 0x0028(0x0008)
};


// ScriptStruct  ShooterGame.GameplayNotificationSlot
// Struct Size::0x0028
struct FGameplayNotificationSlot
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FWidgetSwitcher*                              WidgetSwitcher;                                               // 0x0008(0x0008)
    FGameplayNotificationWidget*                  ActiveWidget;                                                 // 0x0010(0x0008)
    TArray<FGameplayNotificationWidget*>          PrioritizedWidgets;                                           // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.HUDPhaseContext
// Struct Size::0x0018
struct FHUDPhaseContext
{
    FText                                         GamePhaseDisplayText;                                         // 0x0000(0x0018)
};


// ScriptStruct  ShooterGame.HUDVisibilityConfig
// Struct Size::0x000D
struct FHUDVisibilityConfig
{
    bool                                          bHideFirstPersonHUD;                                          // 0x0000(0x0001)
    bool                                          bHideTeamInfo;                                                // 0x0001(0x0001)
    bool                                          bNeverShowTeamInfo;                                           // 0x0002(0x0001)
    bool                                          bHideCurrentRound;                                            // 0x0003(0x0001)
    bool                                          bNeverShowCurrentRound;                                       // 0x0004(0x0001)
    bool                                          bShowRoundTransition;                                         // 0x0005(0x0001)
    bool                                          bShowSideSwitchTransition;                                    // 0x0006(0x0001)
    bool                                          bAlwaysShowScoreboard;                                        // 0x0007(0x0001)
    bool                                          bDebugDrawCharacters;                                         // 0x0008(0x0001)
    bool                                          bHideInWorldGameplayHud;                                      // 0x0009(0x0001)
    bool                                          bShowTeammateLoadout;                                         // 0x000A(0x0001)
    bool                                          bShowPlayerIntention;                                         // 0x000B(0x0001)
    bool                                          bShowRoundPhaseText;                                          // 0x000C(0x0001)
};


// ScriptStruct  ShooterGame.HUDTimerConfig
// Struct Size::0x0068
struct FHUDTimerConfig
{
    bool                                          bOverrideLine1;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FText                                         Line1Override;                                                // 0x0008(0x0018)
    bool                                          bOverrideLine2;                                               // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    FText                                         Line2Override;                                                // 0x0028(0x0018)
    FTextureWrapper                               TimerImage;                                                   // 0x0040(0x0008)
    int32_t                                       SecondsRemainingToShowCentiseconds;                           // 0x0048(0x0004)
    int32_t                                       LowTimerThreshhold;                                           // 0x004C(0x0004)
    FLinearColor                                  LowTimerColor;                                                // 0x0050(0x0010)
    bool                                          bHideTimerBoundingBox;                                        // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  ShooterGame.TextureWrapper
// Struct Size::0x0008
struct FTextureWrapper
{
    FTexture*                                     Texture;                                                      // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.StageLoadoutList
// Struct Size::0x0018
struct FStageLoadoutList
{
    TArray<FStageLoadout>                         Loadouts;                                                     // 0x0000(0x0010)
    bool                                          AvailableOnSubsequentStages;                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.StageLoadout
// Struct Size::0x0050
struct FStageLoadout
{
    TMap<enum class EAresItemSlot,FAresItem*>     Loadout;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.StageInfo
// Struct Size::0x0010
struct FStageInfo
{
    int32_t                                       Stage;                                                        // 0x0000(0x0004)
    float                                         TotalTime;                                                    // 0x0004(0x0004)
    float                                         ElapsedTime;                                                  // 0x0008(0x0004)
    bool                                          IsActive;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  ShooterGame.IndividualGameStatistic
// Struct Size::0x0050
struct FIndividualGameStatistic
{
    FName                                         KeyName;                                                      // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         DisplayName;                                                  // 0x0010(0x0018)
    TArray<FGameStatisticValueBucket>             RoundValues;                                                  // 0x0028(0x0010)
    FGameStatisticValueBucket                     LatestDataBucket;                                             // 0x0038(0x000C)
    float                                         GameAlliedValueSum;                                           // 0x0044(0x0004)
    float                                         GameEnemyValueSum;                                            // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ShooterGame.GameStatisticValueBucket
// Struct Size::0x000C
struct FGameStatisticValueBucket
{
    int32_t                                       RoundNum;                                                     // 0x0000(0x0004)
    float                                         AlliedValue;                                                  // 0x0004(0x0004)
    float                                         EnemyValue;                                                   // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.GroupExperimentAssignmentEvent
// Struct Size::0x0058
struct FGroupExperimentAssignmentEvent
{
    FString                                       ExperimentName;                                               // 0x0000(0x0010)
    FString                                       ExperimentGroupName;                                          // 0x0010(0x0010)
    int32_t                                       ExperimentGroupIndex;                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FGroupExperimentSubjectIDInfo>         GroupAssignmentIds;                                           // 0x0028(0x0010)
    FTelemetryPlatformDetails                     platformDetails;                                              // 0x0038(0x0020)
};


// ScriptStruct  ShooterGame.TelemetryPlatformDetails
// Struct Size::0x0020
struct FTelemetryPlatformDetails
{
    FString                                       platformType;                                                 // 0x0000(0x0010)
    FString                                       platformMetadata;                                             // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.GroupExperimentSubjectIDInfo
// Struct Size::0x0028
struct FGroupExperimentSubjectIDInfo
{
    FString                                       IDType;                                                       // 0x0000(0x0010)
    FString                                       IDValue;                                                      // 0x0010(0x0010)
    bool                                          IsHashInput;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ShooterGame.GroupExperimentDetails
// Struct Size::0x0020
struct FGroupExperimentDetails
{
    FString                                       ExperimentName;                                               // 0x0000(0x0010)
    TArray<FString>                               GroupNames;                                                   // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.HovercardCacheEntry
// Struct Size::0x0008
struct FHovercardCacheEntry
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.AresListConfiguration
// Struct Size::0x0028
struct FAresListConfiguration
{
    FUserWidget*                                  EntryWidgetClass;                                             // 0x0000(0x0008)
    float                                         EntrySpacing;                                                 // 0x0008(0x0004)
    bool                                          bShouldRegenerationRefreshSelection;                          // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FAresListConstructArgs                        ListConstructArgs;                                            // 0x0010(0x0018)
};


// ScriptStruct  ShooterGame.AresListConstructArgs
// Struct Size::0x0018
struct FAresListConstructArgs
{
    enum class EAresListType                      ListType;                                                     // 0x0000(0x0001)
    bool                                          bEnableManualListTypeEdit;                                    // 0x0001(0x0001)
    bool                                          bAllowFocus;                                                  // 0x0002(0x0001)
    enum class ESelectionMode                     SelectionMode;                                                // 0x0003(0x0001)
    bool                                          bNavigationIsSelection;                                       // 0x0004(0x0001)
    bool                                          bClearSelectionOnClick;                                       // 0x0005(0x0001)
    enum class EConsumeMouseWheel                 ConsumeMouseWheel;                                            // 0x0006(0x0001)
    bool                                          bReturnFocusToSelection;                                      // 0x0007(0x0001)
    bool                                          bReturnFocusWithDirectionalNavigation;                        // 0x0008(0x0001)
    enum class EOrientation                       Orientation;                                                  // 0x0009(0x0001)
    enum class EListItemAlignment                 TileAlignment;                                                // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
    float                                         EntryHeight;                                                  // 0x000C(0x0004)
    float                                         EntryWidth;                                                   // 0x0010(0x0004)
    bool                                          bWrapDirectionalNavigation;                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  ShooterGame.AresPaginatedListConfiguration
// Struct Size::0x000C
struct FAresPaginatedListConfiguration
{
    enum class EAresListScrollMode                ListScrollMode;                                               // 0x0000(0x0001)
    bool                                          bShowScrollbar;                                               // 0x0001(0x0001)
    bool                                          bEnableScrollAnimation;                                       // 0x0002(0x0001)
    bool                                          bShouldPaginationLoop;                                        // 0x0003(0x0001)
    int32_t                                       ItemsDisplayedPerPageOverride;                                // 0x0004(0x0004)
    bool                                          bShouldSelectionTriggerPagination;                            // 0x0008(0x0001)
    bool                                          bShouldPaginationFocusFirstElement;                           // 0x0009(0x0001)
    bool                                          bFirstElementFocusIsDirectionallyDependant;                   // 0x000A(0x0001)
    bool                                          bShouldPaginationFocusFallbackToFirstElement;                 // 0x000B(0x0001)
};


// ScriptStruct  ShooterGame.CurrentUsableInfo
// Struct Size::0x0028
struct FCurrentUsableInfo
{
    FUsableComponent*                             CurrentUsingComponent;                                        // 0x0000(0x0008)
    enum class EUseFinishType                     UseFinishType;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       ChangeId;                                                     // 0x000C(0x0004)
    float                                         CurrentUsingStartTime;                                        // 0x0010(0x0004)
    FNetworkedMovementTimestamp                   CurrentUsingStartMovementTime;                                // 0x0014(0x0010)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ShooterGame.NetworkedPredictedUse
// Struct Size::0x0020
struct FNetworkedPredictedUse
{
    FUsableComponent*                             UsableComponent;                                              // 0x0000(0x0008)
    FNetworkedMovementTimestamp                   Timestamp;                                                    // 0x0008(0x0010)
    enum class EUseFinishType                     UseType;                                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ShooterGame.RiotLoginStatus
// Struct Size::0x0018
struct FRiotLoginStatus
{
    bool                                          IsReady;                                                      // 0x0000(0x0001)
    enum class ERiotLoginStatusState              State;                                                        // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FString                                       ErrorDescription;                                             // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.LatencyMultiDataPayload
// Struct Size::0x0010
struct FLatencyMultiDataPayload
{
    TArray<FLatencyDataPayload>                   Packets;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.LatencyDataPayload
// Struct Size::0x0048
struct FLatencyDataPayload
{
    FString                                       Timestamp;                                                    // 0x0000(0x0010)
    uint32_t                                      PeriodInSeconds;                                              // 0x0010(0x0004)
    uint32_t                                      Sent;                                                         // 0x0014(0x0004)
    uint32_t                                      Lost;                                                         // 0x0018(0x0004)
    uint32_t                                      AverageRTT;                                                   // 0x001C(0x0004)
    uint32_t                                      Jitter;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       Destination;                                                  // 0x0028(0x0010)
    FString                                       ProxyAddress;                                                 // 0x0038(0x0010)
};


// ScriptStruct  ShooterGame.LeaderboardEntityRankFetch
// Struct Size::0x0020
struct FLeaderboardEntityRankFetch
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  ShooterGame.PremierLeaderboardContext
// Struct Size::0x0030
struct FPremierLeaderboardContext
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  ShooterGame.LeaderboardEntryRankResponseDTO
// Struct Size::0x0018
struct FLeaderboardEntryRankResponseDTO
{
    FString                                       entityId;                                                     // 0x0000(0x0010)
    int64_t                                       ranking;                                                      // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.LeaderboardEntriesResponseDTO
// Struct Size::0x0070
struct FLeaderboardEntriesResponseDTO
{
    FString                                       type;                                                         // 0x0000(0x0010)
    FString                                       region;                                                       // 0x0010(0x0010)
    FString                                       grouping;                                                     // 0x0020(0x0010)
    FString                                       season;                                                       // 0x0030(0x0010)
    FString                                       name;                                                         // 0x0040(0x0010)
    int32_t                                       startRank;                                                    // 0x0050(0x0004)
    int32_t                                       endRank;                                                      // 0x0054(0x0004)
    int32_t                                       size;                                                         // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    TArray<FLeaderboardRankingDTO>                rankings;                                                     // 0x0060(0x0010)
};


// ScriptStruct  ShooterGame.LeaderboardRankingDTO
// Struct Size::0x0098
struct FLeaderboardRankingDTO
{
    FString                                       entityId;                                                     // 0x0000(0x0010)
    int32_t                                       ranking;                                                      // 0x0010(0x0004)
    float                                         score;                                                        // 0x0014(0x0004)
    bool                                          anonymous;                                                    // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FAdditionalData                               additionalInfo;                                               // 0x0020(0x0078)
};


// ScriptStruct  ShooterGame.AdditionalData
// Struct Size::0x0078
struct FAdditionalData
{
    FString                                       rosterName;                                                   // 0x0000(0x0010)
    FString                                       tag;                                                          // 0x0010(0x0010)
    int32_t                                       wins;                                                         // 0x0020(0x0004)
    int32_t                                       losses;                                                       // 0x0024(0x0004)
    int32_t                                       roundWins;                                                    // 0x0028(0x0004)
    int32_t                                       roundLosses;                                                  // 0x002C(0x0004)
    int32_t                                       tournamentPlacement;                                          // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FPremierRosterCustomization                   Customization;                                                // 0x0038(0x0040)
};


// ScriptStruct  ShooterGame.LegalInfoDTO
// Struct Size::0x0010
struct FLegalInfoDTO
{
    FString                                       Content;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.AresCrosshairImage
// Struct Size::0x0020
struct FAresCrosshairImage
{
    FTexture*                                     Image;                                                        // 0x0000(0x0008)
    FAresHudImageParams                           ImageParams;                                                  // 0x0008(0x0010)
    enum class EAresDrawOrigin                    DrawOrigin;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ShooterGame.ChordedBindingsDataEntry
// Struct Size::0x0028
struct FChordedBindingsDataEntry
{
    TArray<FActionTraits*>                        AlternatePair;                                                // 0x0000(0x0010)
    TArray<FActionTraits*>                        ComboPair;                                                    // 0x0010(0x0010)
    enum class EChordedBindingContext             ChordedActionsContext;                                        // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ShooterGame.BindingsCategoryDataEntry
// Struct Size::0x0028
struct FBindingsCategoryDataEntry
{
    FText                                         LocalizedCategoryName;                                        // 0x0000(0x0018)
    TArray<FActionTraits*>                        ActionTraits;                                                 // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.ServerGracePeriodDelay
// Struct Size::0x0020
struct FServerGracePeriodDelay
{
    double                                        GracePeriodDelay;                                             // 0x0000(0x0008)
    int32_t                                       PlayerCount;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       MatchId;                                                      // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.ConsoleClientLaunchTimes
// Struct Size::0x0068
struct FConsoleClientLaunchTimes
{
    FString                                       InstanceId;                                                   // 0x0000(0x0010)
    double                                        BootToEngagementReadyTimeSecs;                                // 0x0010(0x0008)
    double                                        EngagementToLoggedInTimeSecs;                                 // 0x0018(0x0008)
    double                                        LoggedInToMainMenuTimeSecs;                                   // 0x0020(0x0008)
    double                                        HotfixTimeSecs;                                               // 0x0028(0x0008)
    bool                                          DidApplyHotfix;                                               // 0x0030(0x0001)
    bool                                          IsSoftReset;                                                  // 0x0031(0x0001)
    char                                          pa_0032[0x0006]                                               // 0x0032(0x0006)
    FString                                       DeviceModel;                                                  // 0x0038(0x0010)
    FTelemetryPlatformInfo                        PlatformInfo;                                                 // 0x0048(0x0020)
};


// ScriptStruct  ShooterGame.ClientLoadTimes
// Struct Size::0x0078
struct FClientLoadTimes
{
    FString                                       InstanceId;                                                   // 0x0000(0x0010)
    FString                                       MatchId;                                                      // 0x0010(0x0010)
    FClientTransitionLoadTimeStats                ClientTransitionLoadTimeStats;                                // 0x0020(0x0020)
    double                                        BlockedOnRemoteLoadingTimeSecs;                               // 0x0040(0x0008)
    double                                        MatchSetupTimeSecs;                                           // 0x0048(0x0008)
    FPreloadMetrics                               PreloadMetrics;                                               // 0x0050(0x0028)
};


// ScriptStruct  ShooterGame.PreloadMetrics
// Struct Size::0x0028
struct FPreloadMetrics
{
    FPreloadSystemMetric                          UI;                                                           // 0x0000(0x0008)
    FPreloadSystemMetric                          BaseEquippables;                                              // 0x0008(0x0008)
    FPreloadSystemMetric                          Personalization;                                              // 0x0010(0x0008)
    FPreloadSystemMetric                          Characters;                                                   // 0x0018(0x0008)
    FPreloadSystemMetric                          Map;                                                          // 0x0020(0x0008)
};


// ScriptStruct  ShooterGame.PreloadSystemMetric
// Struct Size::0x0008
struct FPreloadSystemMetric
{
    int32_t                                       LoadedCount;                                                  // 0x0000(0x0004)
    int32_t                                       RequestedCount;                                               // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.ClientTransitionLoadTimeStats
// Struct Size::0x0020
struct FClientTransitionLoadTimeStats
{
    double                                        TotalLoadTimeSecs;                                            // 0x0000(0x0008)
    double                                        MapReadyTimeSecs;                                             // 0x0008(0x0008)
    double                                        PlatformReadyTimeSecs;                                        // 0x0010(0x0008)
    double                                        BlockedOnPreloadingTimeSecs;                                  // 0x0018(0x0008)
};


// ScriptStruct  ShooterGame.ClientPregameLoadTimes
// Struct Size::0x0040
struct FClientPregameLoadTimes
{
    FString                                       InstanceId;                                                   // 0x0000(0x0010)
    FString                                       MatchId;                                                      // 0x0010(0x0010)
    FClientTransitionLoadTimeStats                ClientTransitionLoadTimeStats;                                // 0x0020(0x0020)
};


// ScriptStruct  ShooterGame.ClientLaunchTimes
// Struct Size::0x0060
struct FClientLaunchTimes
{
    FString                                       InstanceId;                                                   // 0x0000(0x0010)
    double                                        InitialMainMenuLoadSecs;                                      // 0x0010(0x0008)
    FClientLaunchTimeStats                        ClientLaunchTimeStats;                                        // 0x0018(0x0038)
    FInitSystemTimings                            InitSystemTimings;                                            // 0x0050(0x0010)
};


// ScriptStruct  ShooterGame.InitSystemTimings
// Struct Size::0x0010
struct FInitSystemTimings
{
    double                                        ContentIndexInitializationTimeSecs;                           // 0x0000(0x0008)
    double                                        PreloadManagerInitializationTimeSecs;                         // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.ClientLaunchTimeStats
// Struct Size::0x0038
struct FClientLaunchTimeStats
{
    double                                        TotalLoadTimeSecs;                                            // 0x0000(0x0008)
    double                                        InitializationTimeSecs;                                       // 0x0008(0x0008)
    double                                        TransitionTimeSecs;                                           // 0x0010(0x0008)
    double                                        MapReadyTimeSecs;                                             // 0x0018(0x0008)
    double                                        PlatformReadyTimeSecs;                                        // 0x0020(0x0008)
    double                                        EngineInitializationTimeSecs;                                 // 0x0028(0x0008)
    double                                        PlatformInitializationTimeSecs;                               // 0x0030(0x0008)
};


// ScriptStruct  ShooterGame.ClientReconnectToInGameLaunchTimes
// Struct Size::0x0068
struct FClientReconnectToInGameLaunchTimes
{
    FString                                       InstanceId;                                                   // 0x0000(0x0010)
    FString                                       MatchId;                                                      // 0x0010(0x0010)
    FClientLaunchTimeStats                        ClientLaunchTimeStats;                                        // 0x0020(0x0038)
    FInitSystemTimings                            InitSystemTimings;                                            // 0x0058(0x0010)
};


// ScriptStruct  ShooterGame.LocalePreferenceInfo
// Struct Size::0x0010
struct FLocalePreferenceInfo
{
    FString                                       Locale;                                                       // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.LoginQueueQueueToken
// Struct Size::0x0018
struct FLoginQueueQueueToken
{
    uint64_t                                      QueuePos;                                                     // 0x0000(0x0008)
    float                                         RetryAfter;                                                   // 0x0008(0x0004)
    int32_t                                       WaitTime;                                                     // 0x000C(0x0004)
    int32_t                                       TicketId;                                                     // 0x0010(0x0004)
    bool                                          Full;                                                         // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  ShooterGame.LoginQueueQueuedTokenRequest
// Struct Size::0x0040
struct FLoginQueueQueuedTokenRequest
{
    FString                                       Userinfo;                                                     // 0x0000(0x0010)
    FString                                       Entitlements;                                                 // 0x0010(0x0010)
    FString                                       ClientName;                                                   // 0x0020(0x0010)
    FString                                       QueueToken;                                                   // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.LoginQueueTokenRequest
// Struct Size::0x0030
struct FLoginQueueTokenRequest
{
    FString                                       Userinfo;                                                     // 0x0000(0x0010)
    FString                                       Entitlements;                                                 // 0x0010(0x0010)
    FString                                       ClientName;                                                   // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.LoginQueueTokenResponse
// Struct Size::0x0028
struct FLoginQueueTokenResponse
{
    FString                                       Token;                                                        // 0x0000(0x0010)
    FString                                       Type;                                                         // 0x0010(0x0010)
    enum class ELoginQueueTokenType               TypeEnum;                                                     // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ShooterGame.AresMainMenuNavBarData
// Struct Size::0x0028
struct FAresMainMenuNavBarData
{
    enum class EAresMainMenuTopNavigationState    BackButtonTarget;                                             // 0x0000(0x0001)
    bool                                          bInheritBannerText;                                           // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FText                                         BannerText;                                                   // 0x0008(0x0018)
    bool                                          bInheritShownElements;                                        // 0x0020(0x0001)
    bool                                          bShowSettingsButton;                                          // 0x0021(0x0001)
    bool                                          bShowHomeButton;                                              // 0x0022(0x0001)
    bool                                          bShowSocialButton;                                            // 0x0023(0x0001)
    bool                                          bShowCurrency;                                                // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  ShooterGame.ActivePingData
// Struct Size::0x0048
struct FActivePingData
{
    FEffectID                                     EffectID;                                                     // 0x0000(0x0020)
    FVector                                       PingLocation;                                                 // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FMapPingData                                  PingData;                                                     // 0x0030(0x0010)
    float                                         PingEndTimestamp;                                             // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  ShooterGame.MapPingData
// Struct Size::0x0010
struct FMapPingData
{
    FEffectContainer*                             PingEffect;                                                   // 0x0000(0x0008)
    FTexture*                                     IconImage;                                                    // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.MassRewardsPlayer
// Struct Size::0x0028
struct FMassRewardsPlayer
{
    int64_t                                       Version;                                                      // 0x0000(0x0008)
    FGuid                                         Subject;                                                      // 0x0008(0x0010)
    TArray<FMassRewardCeremony>                   Ceremonies;                                                   // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.MassRewardCeremony
// Struct Size::0x0030
struct FMassRewardCeremony
{
    FString                                       Type;                                                         // 0x0000(0x0010)
    FGuid                                         SourceID;                                                     // 0x0010(0x0010)
    TArray<FMassReward>                           Rewards;                                                      // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.MassReward
// Struct Size::0x0060
struct FMassReward
{
    FString                                       Type;                                                         // 0x0000(0x0010)
    FGuid                                         ItemID;                                                       // 0x0010(0x0010)
    FGuid                                         ItemTypeID;                                                   // 0x0020(0x0010)
    int32_t                                       Count;                                                        // 0x0030(0x0004)
    FGuid                                         CurrencyID;                                                   // 0x0034(0x0010)
    int32_t                                       CurrencyCount;                                                // 0x0044(0x0004)
    FGuid                                         ContractID;                                                   // 0x0048(0x0010)
    int32_t                                       XPAmount;                                                     // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  ShooterGame.MatchDetailsDebugOverrides
// Struct Size::0x0020
struct FMatchDetailsDebugOverrides
{
    int32_t                                       SelfInitialRank;                                              // 0x0000(0x0004)
    FName                                         AgentAllyOverride;                                            // 0x0004(0x000C)
    FName                                         AgentOpponentOverride;                                        // 0x0010(0x000C)
    bool                                          IsRanked;                                                     // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  ShooterGame.MatchDetailsEnemyInteractionList
// Struct Size::0x0038
struct FMatchDetailsEnemyInteractionList
{
    TArray<FMatchDetailsEnemyInteraction>         Interactions;                                                 // 0x0000(0x0010)
    int32_t                                       Kills;                                                        // 0x0010(0x0004)
    int32_t                                       Deaths;                                                       // 0x0014(0x0004)
    int32_t                                       Assists;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FCharacterUIData*                             Character;                                                    // 0x0020(0x0008)
    FString                                       Subject;                                                      // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.MatchDetailsEnemyInteraction
// Struct Size::0x0078
struct FMatchDetailsEnemyInteraction
{
    enum class EMatchDetailsInteractionType       InteractionType;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FEquippableUIData*                            SelfWeapon;                                                   // 0x0008(0x0008)
    FEquippableUIData*                            EnemyWeapon;                                                  // 0x0010(0x0008)
    FPlayerRoundDamageDTOV2                       DamageReceived;                                               // 0x0018(0x0020)
    FPlayerRoundDamageDTOV2                       DamageDealt;                                                  // 0x0038(0x0020)
    int32_t                                       Distance;                                                     // 0x0058(0x0004)
    int32_t                                       RoundNum;                                                     // 0x005C(0x0004)
    bool                                          RoundWin;                                                     // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
    FArmorUIData*                                 SelfArmor;                                                    // 0x0068(0x0008)
    FArmorUIData*                                 EnemyArmor;                                                   // 0x0070(0x0008)
};


// ScriptStruct  ShooterGame.ProcessedMatchDetails
// Struct Size::0x0278
struct FProcessedMatchDetails
{
    FMatchInfoDTO                                 MatchInfo;                                                    // 0x0000(0x00F8)
    FMapUIData*                                   MapUIData;                                                    // 0x00F8(0x0008)
    FGameModeDataAsset*                           GameModeDataAsset;                                            // 0x0100(0x0008)
    FSeasonDataAsset*                             SeasonDataAsset;                                              // 0x0108(0x0008)
    FCompetitiveSeasonDataAsset*                  CompetitiveSeasonDataAsset;                                   // 0x0110(0x0008)
    FDateTime                                     GameStartTime;                                                // 0x0118(0x0008)
    FTimespan                                     GameLength;                                                   // 0x0120(0x0008)
    TMap<FName,FTeamDetailsDTO>                   Teams;                                                        // 0x0128(0x0050)
    TMap<FString,FProcessedPlayerDetails>         Players;                                                      // 0x0178(0x0050)
    TMap<int32_t,FProcessedRoundResult>           RoundResults;                                                 // 0x01C8(0x0050)
    TArray<FProcessedKillEvent>                   KillEvents;                                                   // 0x0218(0x0010)
    char                                          pa_0228[0x0050]                                               // 0x0228(0x0050)
};


// ScriptStruct  ShooterGame.ProcessedKillEvent
// Struct Size::0x00A8
struct FProcessedKillEvent
{
    FKillDetailsDTO                               KillEvent;                                                    // 0x0000(0x0080)
    float                                         Distance;                                                     // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    FEquippableUIData*                            EquippableUIData;                                             // 0x0088(0x0008)
    FCharacterAbilityUIData*                      CharacterAbilityUIData;                                       // 0x0090(0x0008)
    FCharacterUIData*                             KillerCharacterUIData;                                        // 0x0098(0x0008)
    FCharacterUIData*                             VictimCharacterUIData;                                        // 0x00A0(0x0008)
};


// ScriptStruct  ShooterGame.ProcessedRoundResult
// Struct Size::0x0120
struct FProcessedRoundResult
{
    FRoundResultDTO                               RoundResultRaw;                                               // 0x0000(0x00A0)
    TMap<FString,FProcessedPlayerRoundResult>     PlayerRoundResultMap;                                         // 0x00A0(0x0050)
    TArray<FProcessedKillEvent>                   Kills;                                                        // 0x00F0(0x0010)
    FName                                         FirstBloodTeam;                                               // 0x0100(0x000C)
    char                                          pa_010C[0x0004]                                               // 0x010C(0x0004)
    TArray<FProcessedPlayerRoundEconomyInfo>      PlayerEconomies;                                              // 0x0110(0x0010)
};


// ScriptStruct  ShooterGame.ProcessedPlayerRoundEconomyInfo
// Struct Size::0x0050
struct FProcessedPlayerRoundEconomyInfo
{
    FPlayerRoundEconomyInfoDTO                    Data;                                                         // 0x0000(0x0040)
    FEquippableUIData*                            WeaponUIData;                                                 // 0x0040(0x0008)
    FArmorUIData*                                 ArmorUIData;                                                  // 0x0048(0x0008)
};


// ScriptStruct  ShooterGame.ProcessedPlayerRoundResult
// Struct Size::0x0220
struct FProcessedPlayerRoundResult
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    int32_t                                       RoundNum;                                                     // 0x0010(0x0004)
    int32_t                                       RoundKills;                                                   // 0x0014(0x0004)
    int32_t                                       RoundDeaths;                                                  // 0x0018(0x0004)
    int32_t                                       RoundAssists;                                                 // 0x001C(0x0004)
    int32_t                                       RoundDamageDealt;                                             // 0x0020(0x0004)
    bool                                          IsBombPlanter;                                                // 0x0024(0x0001)
    bool                                          IsBombDefuser;                                                // 0x0025(0x0001)
    bool                                          IsRoundWinner;                                                // 0x0026(0x0001)
    bool                                          GotFirstBlood;                                                // 0x0027(0x0001)
    int32_t                                       RoundScore;                                                   // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<FProcessedKillEvent>                   Kills;                                                        // 0x0030(0x0010)
    FProcessedPlayerRoundEconomyInfo              EconomyInfo;                                                  // 0x0040(0x0050)
    TMap<FString,FPlayerRoundDamageDTOV2>         Damage;                                                       // 0x0090(0x0050)
    char                                          pa_00E0[0x0140]                                               // 0x00E0(0x0140)
};


// ScriptStruct  ShooterGame.ProcessedPlayerDetails
// Struct Size::0x0270
struct FProcessedPlayerDetails
{
    FPlayerDetailsDTO                             PlayerDetailsRaw;                                             // 0x0000(0x00D8)
    int32_t                                       BestRound;                                                    // 0x00D8(0x0004)
    int32_t                                       BestRoundBeforeOT;                                            // 0x00DC(0x0004)
    int32_t                                       TotalDamageDealt;                                             // 0x00E0(0x0004)
    int32_t                                       TotalLoadoutValue;                                            // 0x00E4(0x0004)
    int32_t                                       TotalMoneySpent;                                              // 0x00E8(0x0004)
    int32_t                                       BombPlants;                                                   // 0x00EC(0x0004)
    int32_t                                       BombDefuses;                                                  // 0x00F0(0x0004)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
    FCharacterUIData*                             CharacterUIData;                                              // 0x00F8(0x0008)
    FTexture2D*                                   FullPortrait;                                                 // 0x0100(0x0008)
    FAbilityEffectDTO                             AbilityEffects;                                               // 0x0108(0x0140)
    FCharacterDataAsset*                          CharacterDataAsset;                                           // 0x0248(0x0008)
    bool                                          bIsABot;                                                      // 0x0250(0x0001)
    char                                          pa_0251[0x0007]                                               // 0x0251(0x0007)
    FPlayerCardDataAsset*                         PlayerCardAsset;                                              // 0x0258(0x0008)
    FPlayerTitleDataAsset*                        PlayerTitleDataAsset;                                         // 0x0260(0x0008)
    FLevelBorderDataAsset*                        LevelBorderDataAsset;                                         // 0x0268(0x0008)
};


// ScriptStruct  ShooterGame.PlayerRoundDamageDTO
// Struct Size::0x0020
struct FPlayerRoundDamageDTO
{
    int32_t                                       Round;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Receiver;                                                     // 0x0008(0x0010)
    int32_t                                       Damage;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.PlayerScoreDTO
// Struct Size::0x0018
struct FPlayerScoreDTO
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    int32_t                                       Score;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.MatchHistoryRequestContext
// Struct Size::0x0028
struct FMatchHistoryRequestContext
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  ShooterGame.PlayerHistory
// Struct Size::0x0030
struct FPlayerHistory
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    int32_t                                       BeginIndex;                                                   // 0x0010(0x0004)
    int32_t                                       EndIndex;                                                     // 0x0014(0x0004)
    int32_t                                       Total;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FPlayerHistoryEntry>                   History;                                                      // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.PlayerHistoryEntry
// Struct Size::0x0020
struct FPlayerHistoryEntry
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    FString                                       TeamID;                                                       // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.LeaderboardMapKey
// Struct Size::0x0020
struct FLeaderboardMapKey
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  ShooterGame.MatchScoreBreakdown
// Struct Size::0x0038
struct FMatchScoreBreakdown
{
    int32_t                                       HighestPlayerScore;                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMatchTeamScoreBreakdown                      Friendly;                                                     // 0x0008(0x0018)
    FMatchTeamScoreBreakdown                      Enemy;                                                        // 0x0020(0x0018)
};


// ScriptStruct  ShooterGame.MatchTeamScoreBreakdown
// Struct Size::0x0018
struct FMatchTeamScoreBreakdown
{
    int32_t                                       TotalScore;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FMatchPlayerScoreBreakdown*>           PerPlayerScores;                                              // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.GamePausedText
// Struct Size::0x0120
struct FGamePausedText
{
    FText                                         PausedText;                                                   // 0x0000(0x0018)
    FVector2D                                     DrawOffset;                                                   // 0x0018(0x0008)
    FAresHudFontParams                            FontParams;                                                   // 0x0020(0x0070)
    FText                                         PausedByText;                                                 // 0x0090(0x0018)
    FVector2D                                     PausedByDrawOffset;                                           // 0x00A8(0x0008)
    FAresHudFontParams                            PausedByFontParams;                                           // 0x00B0(0x0070)
};


// ScriptStruct  ShooterGame.RoundNumber
// Struct Size::0x00A0
struct FRoundNumber
{
    FVector2D                                     RoundNumberDrawOffset;                                        // 0x0000(0x0008)
    FAresHudFontParams                            RoundNumberFontParams;                                        // 0x0008(0x0070)
    FAresHudBackgroundImage                       BackgroundImage;                                              // 0x0078(0x0028)
};


// ScriptStruct  ShooterGame.MatchTimer
// Struct Size::0x00B8
struct FMatchTimer
{
    FVector2D                                     MatchTimerDrawOffset;                                         // 0x0000(0x0008)
    FAresHudFontParams                            MatchTimerFontParams;                                         // 0x0008(0x0070)
    FText                                         NotInRoundText;                                               // 0x0078(0x0018)
    FAresHudBackgroundImage                       BackgroundImage;                                              // 0x0090(0x0028)
};


// ScriptStruct  ShooterGame.TeamMoney
// Struct Size::0x0148
struct FTeamMoney
{
    FTeamMoneyText                                MoneyText;                                                    // 0x0000(0x0088)
    FAresHudTextLabel                             MoneyTextLabel;                                               // 0x0088(0x0098)
    FAresHudBackgroundImage                       BackgroundImage;                                              // 0x0120(0x0028)
};


// ScriptStruct  ShooterGame.TeamMoneyText
// Struct Size::0x0088
struct FTeamMoneyText
{
    FVector2D                                     DrawOffset;                                                   // 0x0000(0x0008)
    FAresHudFontParams                            FontParams;                                                   // 0x0008(0x0070)
    FLinearColor                                  TextTint;                                                     // 0x0078(0x0010)
};


// ScriptStruct  ShooterGame.TeamIcons
// Struct Size::0x0050
struct FTeamIcons
{
    FVector2D                                     IconOffsets;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FLinearColor                                  IconTints;                                                    // 0x0010(0x0010)
    char                                          pa_0020[0x0010]                                               // 0x0020(0x0010)
    FTexture*                                     BlueTeamIcon;                                                 // 0x0030(0x0008)
    FTexture*                                     RedTeamIcon;                                                  // 0x0038(0x0008)
    FAresHudImageParams                           TeamIconImageParams;                                          // 0x0040(0x0010)
};


// ScriptStruct  ShooterGame.TeamScore
// Struct Size::0x0178
struct FTeamScore
{
    FTeamScoreText                                ScoreText;                                                    // 0x0000(0x0078)
    FAresHudTextLabel                             ScoreTextLabel;                                               // 0x0078(0x0098)
    FLinearColor                                  ScoreTextTint;                                                // 0x0110(0x0010)
    FLinearColor                                  ScoreIncrementTint;                                           // 0x0120(0x0010)
    FAresTimedInterpolant                         ScoreIncrementInterpolant;                                    // 0x0130(0x001C)
    char                                          pa_014C[0x0004]                                               // 0x014C(0x0004)
    FAresHudBackgroundImage                       ScoreBackground;                                              // 0x0150(0x0028)
};


// ScriptStruct  ShooterGame.TeamScoreText
// Struct Size::0x0078
struct FTeamScoreText
{
    FVector2D                                     DrawOffset;                                                   // 0x0000(0x0008)
    FAresHudFontParams                            FontParams;                                                   // 0x0008(0x0070)
};


// ScriptStruct  ShooterGame.AresQueueStatus
// Struct Size::0x0020
struct FAresQueueStatus
{
    FString                                       QueueID;                                                      // 0x0000(0x0010)
    int32_t                                       NumPartiesInQueue;                                            // 0x0010(0x0004)
    int32_t                                       NumPlayersInQueue;                                            // 0x0014(0x0004)
    bool                                          IsSweepingOn;                                                 // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ShooterGame.MatchRecoveryPipelineDataEvent
// Struct Size::0x0020
struct FMatchRecoveryPipelineDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0018]                                               // 0x0008(0x0018)
};


// ScriptStruct  ShooterGame.MatchRecoveryContext
// Struct Size::0x0020
struct FMatchRecoveryContext
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  ShooterGame.RoundRestoreRoundDataPipelineDataModel
// Struct Size::0x0048
struct FRoundRestoreRoundDataPipelineDataModel
{
    char                                          pa_0000[0x0048]                                               // 0x0000(0x0048)
};


// ScriptStruct  ShooterGame.RoundRestoreGameModeInfoPipelineDataModel
// Struct Size::0x0030
struct FRoundRestoreGameModeInfoPipelineDataModel
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  ShooterGame.RoundRestoreTeamPipelineDataModel
// Struct Size::0x0020
struct FRoundRestoreTeamPipelineDataModel
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  ShooterGame.AresRoundResultPipelineDataModel
// Struct Size::0x0030
struct FAresRoundResultPipelineDataModel
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  ShooterGame.RoundRestorePlayerPipelineDataModel
// Struct Size::0x0060
struct FRoundRestorePlayerPipelineDataModel
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  ShooterGame.RoundRestoreInventoryPipelineDataModel
// Struct Size::0x0020
struct FRoundRestoreInventoryPipelineDataModel
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  ShooterGame.RoundRestoreInventorySlotPipelineDataModel
// Struct Size::0x0020
struct FRoundRestoreInventorySlotPipelineDataModel
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  ShooterGame.RoundRestoreInventoryItemPipelineDataModel
// Struct Size::0x0018
struct FRoundRestoreInventoryItemPipelineDataModel
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  ShooterGame.RoundRestorePlayerStatsPipelineDataModel
// Struct Size::0x0010
struct FRoundRestorePlayerStatsPipelineDataModel
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.MatchResultBaseEvent
// Struct Size::0x0010
struct FMatchResultBaseEvent
{
    FString                                       EventType;                                                    // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.AccoladeResults
// Struct Size::0x0010
struct FAccoladeResults
{
    TArray<FParticipantAccoladeResults>           Participants;                                                 // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ParticipantAccoladeResults
// Struct Size::0x0060
struct FParticipantAccoladeResults
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    TMap<FGuid,int32_t>                           AccoladeProgress;                                             // 0x0010(0x0050)
};


// ScriptStruct  ShooterGame.MissionResults
// Struct Size::0x0010
struct FMissionResults
{
    TArray<FParticipantMissionResults>            Participants;                                                 // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ParticipantMissionResults
// Struct Size::0x0020
struct FParticipantMissionResults
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    TArray<FMegapacketMission>                    Missions;                                                     // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.MatchResults
// Struct Size::0x0070
struct FMatchResults
{
    FMatchInfo                                    MatchInfo;                                                    // 0x0000(0x0040)
    TArray<FParticipantMatchResults>              ParticipantResults;                                           // 0x0040(0x0010)
    TArray<FRoundResult>                          RoundResults;                                                 // 0x0050(0x0010)
    TArray<FTeamResults>                          TeamResults;                                                  // 0x0060(0x0010)
};


// ScriptStruct  ShooterGame.TeamResults
// Struct Size::0x001C
struct FTeamResults
{
    FName                                         TeamID;                                                       // 0x0000(0x000C)
    bool                                          WonMatch;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       RoundsWon;                                                    // 0x0010(0x0004)
    int32_t                                       RoundsPlayed;                                                 // 0x0014(0x0004)
    int32_t                                       NumPoints;                                                    // 0x0018(0x0004)
};


// ScriptStruct  ShooterGame.RoundResult
// Struct Size::0x0040
struct FRoundResult
{
    int32_t                                       RoundNum;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       RoundResult;                                                  // 0x0008(0x0010)
    FName                                         WinningTeam;                                                  // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       WinningTeamRole;                                              // 0x0028(0x0010)
    enum class EAresRoundOutcome                  RoundResultCode;                                              // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  ShooterGame.ParticipantMatchResults
// Struct Size::0x0188
struct FParticipantMatchResults
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       DisplayName;                                                  // 0x0010(0x0010)
    FName                                         TeamID;                                                       // 0x0020(0x000C)
    int32_t                                       Score;                                                        // 0x002C(0x0004)
    int32_t                                       RoundsPlayed;                                                 // 0x0030(0x0004)
    int32_t                                       Kills;                                                        // 0x0034(0x0004)
    int32_t                                       Deaths;                                                       // 0x0038(0x0004)
    int32_t                                       Assists;                                                      // 0x003C(0x0004)
    int64_t                                       PlaytimeMilliseconds;                                         // 0x0040(0x0008)
    bool                                          IsABot;                                                       // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    FGuid                                         CharacterID;                                                  // 0x004C(0x0010)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FNewPlayerExperienceDetails                   NewPlayerExperienceDetails;                                   // 0x0060(0x00B8)
    FNewPlayerExperienceV2Details                 NewPlayerExperienceV2Details;                                 // 0x0118(0x0020)
    TMap<FString,float>                           BehaviorFactors;                                              // 0x0138(0x0050)
};


// ScriptStruct  ShooterGame.NewPlayerExperienceV2Details
// Struct Size::0x0020
struct FNewPlayerExperienceV2Details
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FNewPlayerExperienceV2Mission>         Missions;                                                     // 0x0008(0x0010)
    FSettingStatusV2                              SettingStatus;                                                // 0x0018(0x0002)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
};


// ScriptStruct  ShooterGame.SettingStatusV2
// Struct Size::0x0002
struct FSettingStatusV2
{
    bool                                          IsSensitivityDefault;                                         // 0x0000(0x0001)
    bool                                          IsCrosshairDefault;                                           // 0x0001(0x0001)
};


// ScriptStruct  ShooterGame.NewPlayerExperienceV2Mission
// Struct Size::0x0030
struct FNewPlayerExperienceV2Mission
{
    FString                                       MissionName;                                                  // 0x0000(0x0010)
    float                                         TotalTimeTakenSeconds;                                        // 0x0010(0x0004)
    float                                         TimeAFKSeconds;                                               // 0x0014(0x0004)
    int32_t                                       Retries;                                                      // 0x0018(0x0004)
    int32_t                                       ShotsFired;                                                   // 0x001C(0x0004)
    int32_t                                       ShotsLanded;                                                  // 0x0020(0x0004)
    int32_t                                       Headshots;                                                    // 0x0024(0x0004)
    int32_t                                       Deaths;                                                       // 0x0028(0x0004)
    float                                         DamageTaken;                                                  // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.NewPlayerExperienceDetails
// Struct Size::0x00B8
struct FNewPlayerExperienceDetails
{
    FBasicMovement                                BasicMovement;                                                // 0x0000(0x000C)
    FBasicGunSkill                                BasicGunSkill;                                                // 0x000C(0x0010)
    FSneakMission                                 SneakMission;                                                 // 0x001C(0x0010)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FDroneKill                                    DroneKill;                                                    // 0x0030(0x0020)
    FAdvancedShootingAdaptive                     AdvancedShootingAdaptive;                                     // 0x0050(0x0020)
    FAbility                                      Ability;                                                      // 0x0070(0x0014)
    FBombPlant                                    BombPlant;                                                    // 0x0084(0x0010)
    FDefendBombSite                               DefendBombSite;                                               // 0x0094(0x0010)
    FSettingStatus                                SettingStatus;                                                // 0x00A4(0x0002)
    char                                          pa_00A6[0x0002]                                               // 0x00A6(0x0002)
    FString                                       VersionString;                                                // 0x00A8(0x0010)
};


// ScriptStruct  ShooterGame.SettingStatus
// Struct Size::0x0002
struct FSettingStatus
{
    bool                                          IsMouseSensitivityDefault;                                    // 0x0000(0x0001)
    bool                                          IsCrosshairDefault;                                           // 0x0001(0x0001)
};


// ScriptStruct  ShooterGame.BaseNewPlayerExperienceStruct
// Struct Size::0x0004
struct FBaseNewPlayerExperienceStruct
{
    int32_t                                       IdleTimeMillis;                                               // 0x0000(0x0004)
};


// ScriptStruct  ShooterGame.BaseBasicNewPlayerExperienceStruct
// Struct Size::0x0008
struct FBaseBasicNewPlayerExperienceStruct : public FBaseNewPlayerExperienceStruct
{
    int32_t                                       ObjectiveCompleteTimeMillis;                                  // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.DefendBombSite
// Struct Size::0x0010
struct FDefendBombSite : public FBaseBasicNewPlayerExperienceStruct
{
    bool                                          Success;                                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       DamageTaken;                                                  // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.BombPlant
// Struct Size::0x0010
struct FBombPlant : public FBaseBasicNewPlayerExperienceStruct
{
    bool                                          DidPlayerTriggerInstruction;                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       DamageTaken;                                                  // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.Ability
// Struct Size::0x0014
struct FAbility : public FBaseBasicNewPlayerExperienceStruct
{
    bool                                          DidPlayerTriggerInstruction;                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       Attempts;                                                     // 0x000C(0x0004)
    int32_t                                       DamageTaken;                                                  // 0x0010(0x0004)
};


// ScriptStruct  ShooterGame.AdvancedShootingAdaptive
// Struct Size::0x0020
struct FAdvancedShootingAdaptive : public FBaseNewPlayerExperienceStruct
{
    int32_t                                       Attempts;                                                     // 0x0004(0x0004)
    int32_t                                       AdaptiveBotAverageDurationMillisAllAttempts;                  // 0x0008(0x0004)
    int32_t                                       AdaptiveBotAverageDurationMillisFirstAttempt;                 // 0x000C(0x0004)
    TArray<FAdvancedBotKillDetails>               KillDetailsFirstAttempt;                                      // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.AdvancedBotKillDetails
// Struct Size::0x000C
struct FAdvancedBotKillDetails
{
    int32_t                                       BotSurvivedDurationMillis;                                    // 0x0000(0x0004)
    int32_t                                       BotLevelDurationMillis;                                       // 0x0004(0x0004)
    bool                                          IsKill;                                                       // 0x0008(0x0001)
    bool                                          IsHeadshot;                                                   // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  ShooterGame.DroneKill
// Struct Size::0x0020
struct FDroneKill : public FBaseBasicNewPlayerExperienceStruct
{
    int32_t                                       TotalShots;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       WeaponName;                                                   // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.SneakMission
// Struct Size::0x0010
struct FSneakMission : public FBaseBasicNewPlayerExperienceStruct
{
    int32_t                                       Attempts;                                                     // 0x0008(0x0004)
    int32_t                                       DamageTaken;                                                  // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.BasicGunSkill
// Struct Size::0x0010
struct FBasicGunSkill : public FBaseBasicNewPlayerExperienceStruct
{
    int32_t                                       Attempts;                                                     // 0x0008(0x0004)
    int32_t                                       DamageTaken;                                                  // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.BasicMovement
// Struct Size::0x000C
struct FBasicMovement : public FBaseBasicNewPlayerExperienceStruct
{
    bool                                          DidPlayerTriggerInstruction;                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  ShooterGame.MatchInfo
// Struct Size::0x0040
struct FMatchInfo
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    FString                                       Version;                                                      // 0x0010(0x0010)
    FString                                       Map;                                                          // 0x0020(0x0010)
    int64_t                                       PlaytimeMilliseconds;                                         // 0x0030(0x0008)
    bool                                          IsValid;                                                      // 0x0038(0x0001)
    enum class EMatchCompletionState              CompletionState;                                              // 0x0039(0x0001)
    bool                                          ShouldMatchDisablePenalties;                                  // 0x003A(0x0001)
    char                                          pa_003B[0x0005]                                               // 0x003B(0x0005)
};


// ScriptStruct  ShooterGame.KillDetails
// Struct Size::0x0028
struct FKillDetails
{
    FName                                         PlayerMovementType;                                           // 0x0000(0x000C)
    int32_t                                       HeadShots;                                                    // 0x000C(0x0004)
    int32_t                                       TotalShots;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       WeaponName;                                                   // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.NPEComponentCompletedEvent
// Struct Size::0x0078
struct FNPEComponentCompletedEvent : public FMatchResultBaseEvent
{
    FNPEObjectiveEvent                            Data;                                                         // 0x0010(0x0068)
};


// ScriptStruct  ShooterGame.Megapacket
// Struct Size::0x0310
struct FMegapacket
{
    TArray<FMegapacketPlayer>                     Players;                                                      // 0x0000(0x0010)
    FMegapacketMatchInfo                          MatchInfo;                                                    // 0x0010(0x0080)
    FMegapacketMetadata                           Metadata;                                                     // 0x0090(0x0280)
};


// ScriptStruct  ShooterGame.MegapacketMetadata
// Struct Size::0x0280
struct FMegapacketMetadata
{
    FCustomGameMetadata                           CustomGameMetadata;                                           // 0x0000(0x00A8)
    FLoadTestMetadata                             LoadTestMetadata;                                             // 0x00A8(0x0020)
    FPregameMetadata                              PreGameMetadata;                                              // 0x00C8(0x0001)
    char                                          pa_00C9[0x0007]                                               // 0x00C9(0x0007)
    FMatchmakingMetadata                          MatchmakingMetadata;                                          // 0x00D0(0x0018)
    FGameMetadata                                 GameMetadata;                                                 // 0x00E8(0x00A0)
    FTournamentMetadata                           TournamentMetadata;                                           // 0x0188(0x0088)
    FTournamentRosterMetadata                     RosterMetadata;                                               // 0x0210(0x0070)
};


// ScriptStruct  ShooterGame.GameMetadata
// Struct Size::0x00A0
struct FGameMetadata
{
    TMap<FName,FString>                           Config;                                                       // 0x0000(0x0050)
    TMap<FString,FString>                         Rules;                                                        // 0x0050(0x0050)
};


// ScriptStruct  ShooterGame.MatchmakingMetadata
// Struct Size::0x0018
struct FMatchmakingMetadata
{
    FString                                       QueueID;                                                      // 0x0000(0x0010)
    bool                                          IsRanked;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.PregameMetadata
// Struct Size::0x0001
struct FPregameMetadata
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.LoadTestMetadata
// Struct Size::0x0020
struct FLoadTestMetadata
{
    FString                                       LoadTestID;                                                   // 0x0000(0x0010)
    int32_t                                       InstanceID;                                                   // 0x0010(0x0004)
    int32_t                                       NumPointsToWinGame;                                           // 0x0014(0x0004)
    int32_t                                       BotsToAdd;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.CustomGameMetadata
// Struct Size::0x00A8
struct FCustomGameMetadata
{
    FString                                       OwnerSubject;                                                 // 0x0000(0x0010)
    FString                                       PartyID;                                                      // 0x0010(0x0010)
    FString                                       GameName;                                                     // 0x0020(0x0010)
    FString                                       GameDescription;                                              // 0x0030(0x0010)
    FString                                       Module;                                                       // 0x0040(0x0010)
    bool                                          ForcePostProcessing;                                          // 0x0050(0x0001)
    bool                                          AllowGameModifiers;                                           // 0x0051(0x0001)
    bool                                          TournamentModeEnabled;                                        // 0x0052(0x0001)
    bool                                          UseCustomTeamColors;                                          // 0x0053(0x0001)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       FirstTeamName;                                                // 0x0058(0x0010)
    FString                                       FirstTeamColor;                                               // 0x0068(0x0010)
    FString                                       SecondTeamName;                                               // 0x0078(0x0010)
    FString                                       SecondTeamColor;                                              // 0x0088(0x0010)
    FMatchRecoveryMetadata                        MatchRecoveryData;                                            // 0x0098(0x0010)
};


// ScriptStruct  ShooterGame.MatchRecoveryMetadata
// Struct Size::0x0010
struct FMatchRecoveryMetadata
{
    TArray<FRoundRestoreRoundData>                Rounds;                                                       // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.RoundRestoreRoundData
// Struct Size::0x0048
struct FRoundRestoreRoundData
{
    int32_t                                       RoundNumber;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FRoundRestoreGameModeInfo                     GameModeInfo;                                                 // 0x0008(0x0030)
    TArray<FRoundRestorePlayer>                   Players;                                                      // 0x0038(0x0010)
};


// ScriptStruct  ShooterGame.RoundRestorePlayer
// Struct Size::0x0080
struct FRoundRestorePlayer
{
    FString                                       PlayerID;                                                     // 0x0000(0x0010)
    TSoftClassPtr<UObject>                        CharacterClass;                                               // 0x0010(0x0030)
    FString                                       CharacterClassGUID;                                           // 0x0040(0x0010)
    FRoundRestoreInventory                        Inventory;                                                    // 0x0050(0x0020)
    FRoundRestorePlayerStats                      Stats;                                                        // 0x0070(0x0010)
};


// ScriptStruct  ShooterGame.RoundRestorePlayerStats
// Struct Size::0x0010
struct FRoundRestorePlayerStats
{
    int32_t                                       Kills;                                                        // 0x0000(0x0004)
    int32_t                                       Deaths;                                                       // 0x0004(0x0004)
    int32_t                                       Assists;                                                      // 0x0008(0x0004)
    int32_t                                       Score;                                                        // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.RoundRestoreInventory
// Struct Size::0x0020
struct FRoundRestoreInventory
{
    TArray<FRoundRestoreInventorySlot>            ItemSlots;                                                    // 0x0000(0x0010)
    float                                         ShieldAmount;                                                 // 0x0010(0x0004)
    int32_t                                       UltimatePoints;                                               // 0x0014(0x0004)
    int32_t                                       Money;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.RoundRestoreInventorySlot
// Struct Size::0x0018
struct FRoundRestoreInventorySlot
{
    enum class EAresItemSlot                      Slot;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FRoundRestoreInventoryItem>            Items;                                                        // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.RoundRestoreInventoryItem
// Struct Size::0x0038
struct FRoundRestoreInventoryItem
{
    TSoftClassPtr<UObject>                        Class;                                                        // 0x0000(0x0030)
    int32_t                                       ResourceUnits;                                                // 0x0030(0x0004)
    bool                                          bUsesAbilityResources;                                        // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
};


// ScriptStruct  ShooterGame.RoundRestoreGameModeInfo
// Struct Size::0x0030
struct FRoundRestoreGameModeInfo
{
    FString                                       GameModeName;                                                 // 0x0000(0x0010)
    TArray<FRoundRestoreTeam>                     Teams;                                                        // 0x0010(0x0010)
    TArray<FRoundRestoreRoundResult>              RoundResultHistory;                                           // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.RoundRestoreRoundResult
// Struct Size::0x0020
struct FRoundRestoreRoundResult
{
    FName                                         WinningTeam;                                                  // 0x0000(0x000C)
    enum class EAresTeamRole                      WinningTeamRole;                                              // 0x000C(0x0001)
    enum class EAresRoundOutcome                  RoundResult;                                                  // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    TArray<FName>                                 EliminatedTeams;                                              // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.RoundRestoreTeam
// Struct Size::0x0010
struct FRoundRestoreTeam
{
    FName                                         TeamName;                                                     // 0x0000(0x000C)
    enum class EAresTeamRole                      TeamRole;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  ShooterGame.MegapacketMatchInfo
// Struct Size::0x0080
struct FMegapacketMatchInfo
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    FString                                       MapID;                                                        // 0x0010(0x0010)
    FString                                       GamePodID;                                                    // 0x0020(0x0010)
    FString                                       Mode;                                                         // 0x0030(0x0010)
    FString                                       ProvisioningFlowID;                                           // 0x0040(0x0010)
    bool                                          IsMatchSampled;                                               // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
    FString                                       SeasonID;                                                     // 0x0058(0x0010)
    FString                                       ClientPlatformType;                                           // 0x0068(0x0010)
    enum class EAresPlatformType                  ClientPlatformEnum;                                           // 0x0078(0x0001)
    bool                                          AllowDefaultEncryptionKey;                                    // 0x0079(0x0001)
    char                                          pa_007A[0x0002]                                               // 0x007A(0x0002)
    int32_t                                       TeamSize;                                                     // 0x007C(0x0004)
};


// ScriptStruct  ShooterGame.RFC190Scope
// Struct Size::0x0050
struct FRFC190Scope
{
    FString                                       Environment;                                                  // 0x0000(0x0010)
    FString                                       Datacenter;                                                   // 0x0010(0x0010)
    FString                                       Deployment;                                                   // 0x0020(0x0010)
    FString                                       Product;                                                      // 0x0030(0x0010)
    FString                                       Component;                                                    // 0x0040(0x0010)
};


// ScriptStruct  ShooterGame.AresMeleeTuning
// Struct Size::0x0018
struct FAresMeleeTuning
{
    float                                         AttackDamage;                                                 // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FDamageType*                                  DamageType;                                                   // 0x0008(0x0008)
    FEffectContainer*                             ImpactFXC;                                                    // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.MemoryPerfStatsComponent
// Struct Size::0x0100
struct FMemoryPerfStatsComponent
{
    FString                                       InstanceId;                                                   // 0x0000(0x0010)
    FString                                       MatchId;                                                      // 0x0010(0x0010)
    FTestIdentifiers                              TestIdentifiers;                                              // 0x0020(0x0040)
    FMemoryPerfStats                              MemoryPerfStats;                                              // 0x0060(0x00A0)
};


// ScriptStruct  ShooterGame.MemoryPerfStats
// Struct Size::0x00A0
struct FMemoryPerfStats
{
    float                                         PhysicalMemoryUtilizationPercentForProcess;                   // 0x0000(0x0004)
    float                                         PhysicalMemoryUtilizationPercentSystemwide;                   // 0x0004(0x0004)
    float                                         PhysicalMemoryUtilizationForProcessMB;                        // 0x0008(0x0004)
    int32_t                                       NameTableMemorySize;                                          // 0x000C(0x0004)
    uint64_t                                      StaticMeshStandardMemory;                                     // 0x0010(0x0008)
    uint64_t                                      StaticMeshRenderingMemory;                                    // 0x0018(0x0008)
    uint64_t                                      SkeletalMeshStandardMemory;                                   // 0x0020(0x0008)
    uint64_t                                      SkeletalMeshRenderingMemory;                                  // 0x0028(0x0008)
    uint64_t                                      TextureStandardMemory;                                        // 0x0030(0x0008)
    uint64_t                                      TextureRenderingMemory;                                       // 0x0038(0x0008)
    uint64_t                                      MaterialStandardMemory;                                       // 0x0040(0x0008)
    uint64_t                                      MaterialRenderingMemory;                                      // 0x0048(0x0008)
    uint64_t                                      ParticlesStandardMemory;                                      // 0x0050(0x0008)
    uint64_t                                      ParticlesRenderingMemory;                                     // 0x0058(0x0008)
    uint64_t                                      AnimationStandardMemory;                                      // 0x0060(0x0008)
    uint64_t                                      BodySetupStandardMemory;                                      // 0x0068(0x0008)
    uint64_t                                      MapBuildDataRegistryStandard;                                 // 0x0070(0x0008)
    uint64_t                                      UmbraStandardMemory;                                          // 0x0078(0x0008)
    uint64_t                                      AudioStandardMemory;                                          // 0x0080(0x0008)
    uint64_t                                      WidgetStandardMemory;                                         // 0x0088(0x0008)
    uint64_t                                      OtherStandardMemory;                                          // 0x0090(0x0008)
    uint64_t                                      OtherRenderingMemory;                                         // 0x0098(0x0008)
};


// ScriptStruct  ShooterGame.TestIdentifiers
// Struct Size::0x0040
struct FTestIdentifiers
{
    FString                                       TestSuite;                                                    // 0x0000(0x0010)
    FString                                       TestParameters;                                               // 0x0010(0x0010)
    FString                                       Scenario;                                                     // 0x0020(0x0010)
    FString                                       TestCase;                                                     // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.AppliedMaterialHandle
// Struct Size::0x0030
struct FAppliedMaterialHandle
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    FMaterialInterface*                           Material;                                                     // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  ShooterGame.ObjectiveStatusTracker
// Struct Size::0x0008
struct FObjectiveStatusTracker
{
    enum class EObjectiveStatus                   Status;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    uint32_t                                      Counter;                                                      // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.MissionStatusTracker
// Struct Size::0x0008
struct FMissionStatusTracker
{
    enum class EMissionStatus                     Status;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    uint32_t                                      Counter;                                                      // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.CompetitiveUpdateRequestContext
// Struct Size::0x0018
struct FCompetitiveUpdateRequestContext
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  ShooterGame.ProcessedSeasonInfo
// Struct Size::0x0098
struct FProcessedSeasonInfo
{
    FGuid                                         SeasonID;                                                     // 0x0000(0x0010)
    int32_t                                       NumberOfWins;                                                 // 0x0010(0x0004)
    int32_t                                       RankIndex;                                                    // 0x0014(0x0004)
    int32_t                                       RankTier;                                                     // 0x0018(0x0004)
    int32_t                                       Rank;                                                         // 0x001C(0x0004)
    int32_t                                       CapstoneWins;                                                 // 0x0020(0x0004)
    int32_t                                       CapstoneTier;                                                 // 0x0024(0x0004)
    TMap<int32_t,int32_t>                         WinsByTier;                                                   // 0x0028(0x0050)
    int32_t                                       TotalWinsNeededForRank;                                       // 0x0078(0x0004)
    int32_t                                       LeaderboardPosition;                                          // 0x007C(0x0004)
    int32_t                                       RankedRating;                                                 // 0x0080(0x0004)
    int32_t                                       CompetitiveTier;                                              // 0x0084(0x0004)
    int32_t                                       GamesNeededForRating;                                         // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    FSeasonDataAsset*                             SeasonAsset;                                                  // 0x0090(0x0008)
};


// ScriptStruct  ShooterGame.HideActRankBadgeRequestBody
// Struct Size::0x0001
struct FHideActRankBadgeRequestBody
{
    bool                                          Hide;                                                         // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.BTMOptOutRequestBody
// Struct Size::0x0010
struct FBTMOptOutRequestBody
{
    FString                                       OptOutOrigin;                                                 // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.AnonymizePlayerRequestBody
// Struct Size::0x0001
struct FAnonymizePlayerRequestBody
{
    bool                                          Anonymize;                                                    // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.DirectConnectSettings
// Struct Size::0x0050
struct FDirectConnectSettings
{
    FString                                       PlayerName;                                                   // 0x0000(0x0010)
    FString                                       Team;                                                         // 0x0010(0x0010)
    FString                                       Player;                                                       // 0x0020(0x0010)
    FString                                       ServerIP;                                                     // 0x0030(0x0010)
    FString                                       Port;                                                         // 0x0040(0x0010)
};


// ScriptStruct  ShooterGame.AresMobileDeviceTelemetryEvent
// Struct Size::0x0088
struct FAresMobileDeviceTelemetryEvent
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    uint32_t                                      RoundNumber;                                                  // 0x0010(0x0004)
    uint32_t                                      RoundDuration;                                                // 0x0014(0x0004)
    float                                         BatteryDrainedThisRound;                                      // 0x0018(0x0004)
    float                                         MinimumBatteryDuringPlay;                                     // 0x001C(0x0004)
    float                                         MaximumBatteryDuringPlay;                                     // 0x0020(0x0004)
    uint32_t                                      EstimatedTimeSpentCharging;                                   // 0x0024(0x0004)
    uint32_t                                      EstimatedTimeSpentInLowPowerMode;                             // 0x0028(0x0004)
    float                                         AverageDeviceTemperatureLevel;                                // 0x002C(0x0004)
    float                                         MinimumTemperatureLevel;                                      // 0x0030(0x0004)
    float                                         MaximumTemperatureLevel;                                      // 0x0034(0x0004)
    FString                                       DeviceModel;                                                  // 0x0038(0x0010)
    FString                                       puuid;                                                        // 0x0048(0x0010)
    FMobileDevicePlatformInfo                     PlatformInfo;                                                 // 0x0058(0x0020)
    FString                                       InstanceId;                                                   // 0x0078(0x0010)
};


// ScriptStruct  ShooterGame.MobileDevicePlatformInfo
// Struct Size::0x0020
struct FMobileDevicePlatformInfo
{
    FString                                       platformType;                                                 // 0x0000(0x0010)
    FString                                       platformOS;                                                   // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.ModalContextNavInfo
// Struct Size::0x0040
struct FModalContextNavInfo
{
    FGameplayTagContainer                         ContainsContexts;                                             // 0x0000(0x0020)
    FGameplayTagContainer                         ExactContexts;                                                // 0x0020(0x0020)
};


// ScriptStruct  ShooterGame.ModeVariables
// Struct Size::0x0008
struct FModeVariables
{
    int32_t                                       Mode;                                                         // 0x0000(0x0004)
    int32_t                                       NumModes;                                                     // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.PlayerJoinCompleteGameDataEvent
// Struct Size::0x0048
struct FPlayerJoinCompleteGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0040]                                               // 0x0008(0x0040)
};


// ScriptStruct  ShooterGame.PlayerDisassociatedGameDataEvent
// Struct Size::0x0038
struct FPlayerDisassociatedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0030]                                               // 0x0008(0x0030)
};


// ScriptStruct  ShooterGame.DropInEnabledUpdatedGameDataEvent
// Struct Size::0x0030
struct FDropInEnabledUpdatedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0028]                                               // 0x0008(0x0028)
};


// ScriptStruct  ShooterGame.RoundCeremonyUpdatedGameDataEvent
// Struct Size::0x0018
struct FRoundCeremonyUpdatedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.WorldConfigurationUpdatedGameDataEvent
// Struct Size::0x0070
struct FWorldConfigurationUpdatedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0068]                                               // 0x0008(0x0068)
};


// ScriptStruct  ShooterGame.TeamConfigurationGameDataModel
// Struct Size::0x0028
struct FTeamConfigurationGameDataModel
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  ShooterGame.PlayerConfigurationGameDataModel
// Struct Size::0x0050
struct FPlayerConfigurationGameDataModel
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.WorldSnapshottedGameDataEvent
// Struct Size::0x0038
struct FWorldSnapshottedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0030]                                               // 0x0008(0x0030)
};


// ScriptStruct  ShooterGame.ObserverSnapshotGameDataModel
// Struct Size::0x0028
struct FObserverSnapshotGameDataModel
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  ShooterGame.PlayerSnapshotGameDataModel
// Struct Size::0x0170
struct FPlayerSnapshotGameDataModel
{
    char                                          pa_0000[0x0170]                                               // 0x0000(0x0170)
};


// ScriptStruct  ShooterGame.AbilitySnapshotGameDataModel
// Struct Size::0x0020
struct FAbilitySnapshotGameDataModel
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  ShooterGame.EquippableItemSnapshotGameDataModel
// Struct Size::0x00D0
struct FEquippableItemSnapshotGameDataModel
{
    char                                          pa_0000[0x00D0]                                               // 0x0000(0x00D0)
};


// ScriptStruct  ShooterGame.GameShutdownEvent
// Struct Size::0x0008
struct FGameShutdownEvent : public FGameDataEventBase
{
};


// ScriptStruct  ShooterGame.MatchEndedGameDataEvent
// Struct Size::0x0038
struct FMatchEndedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0030]                                               // 0x0008(0x0030)
};


// ScriptStruct  ShooterGame.MatchTimeoutstateChangedGameDataEvent
// Struct Size::0x0018
struct FMatchTimeoutstateChangedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.MatchPausedGameDataEvent
// Struct Size::0x0010
struct FMatchPausedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.MatchBeganGameDataEvent
// Struct Size::0x0008
struct FMatchBeganGameDataEvent : public FGameDataEventBase
{
};


// ScriptStruct  ShooterGame.GameRestartedGameDataEvent
// Struct Size::0x0010
struct FGameRestartedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.RoundEndedGameDataEvent
// Struct Size::0x0010
struct FRoundEndedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.RoundStartedGameDataEvent
// Struct Size::0x0038
struct FRoundStartedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0030]                                               // 0x0008(0x0030)
};


// ScriptStruct  ShooterGame.ModeConfigGameDataModel
// Struct Size::0x0028
struct FModeConfigGameDataModel
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  ShooterGame.NewRoundResultGameDataEvent
// Struct Size::0x0020
struct FNewRoundResultGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0018]                                               // 0x0008(0x0018)
};


// ScriptStruct  ShooterGame.RoundResultGameDataModel
// Struct Size::0x0018
struct FRoundResultGameDataModel
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  ShooterGame.RoundResultsChangedGameDataEvent
// Struct Size::0x0008
struct FRoundResultsChangedGameDataEvent : public FGameDataEventBase
{
};


// ScriptStruct  ShooterGame.TeamScoreChangedGameDataEvent
// Struct Size::0x0008
struct FTeamScoreChangedGameDataEvent : public FGameDataEventBase
{
};


// ScriptStruct  ShooterGame.GamePhaseChangedGameDataEvent
// Struct Size::0x0010
struct FGamePhaseChangedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.BombPlantCompletedGameDataEvent
// Struct Size::0x0018
struct FBombPlantCompletedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.BombPlantStoppedGameDataEvent
// Struct Size::0x0010
struct FBombPlantStoppedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.BombPlantStartedGameDataEvent
// Struct Size::0x0010
struct FBombPlantStartedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.BombDefuseStoppedGameDataEvent
// Struct Size::0x0010
struct FBombDefuseStoppedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.BombDefuseCheckpointReachedGameDataEvent
// Struct Size::0x0010
struct FBombDefuseCheckpointReachedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.BombDefuseStartedGameDataEvent
// Struct Size::0x0010
struct FBombDefuseStartedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.BombStateChangedGameDataEvent
// Struct Size::0x0010
struct FBombStateChangedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.ScriptStateEffectInfoArray
// Struct Size::0x0010
struct FScriptStateEffectInfoArray
{
    TArray<FScriptStateEffectInfo>                Effects;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ScriptStateEffectInfo
// Struct Size::0x0038
struct FScriptStateEffectInfo
{
    FEmbeddedEffectInfo                           Effect;                                                       // 0x0000(0x0030)
    bool                                          bStopEffectOnStateEnd;                                        // 0x0030(0x0001)
    bool                                          bStopEffectOnStateInterrupt;                                  // 0x0031(0x0001)
    bool                                          bStopEffectOnUnequip;                                         // 0x0032(0x0001)
    bool                                          bOwnerEffectOnly;                                             // 0x0033(0x0001)
    enum class EStateContext                      Context;                                                      // 0x0034(0x0001)
    enum class EMovementSync                      MovementSync;                                                 // 0x0035(0x0001)
    char                                          pa_0036[0x0002]                                               // 0x0036(0x0002)
};


// ScriptStruct  ShooterGame.MutedWordsListChangedEvent
// Struct Size::0x0040
struct FMutedWordsListChangedEvent
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       MutedWordsList;                                               // 0x0010(0x0010)
    FString                                       Platform;                                                     // 0x0020(0x0010)
    FString                                       Affinity;                                                     // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.AntiDDoSPacketStats
// Struct Size::0x0050
struct FAntiDDoSPacketStats
{
    FMetric                                       ReceivedConnectionPackets;                                    // 0x0000(0x0014)
    FMetric                                       ReceivedNonConnectionPackets;                                 // 0x0014(0x0014)
    FMetric                                       ReceivedBadPackets;                                           // 0x0028(0x0014)
    FMetric                                       ReceivedErrorPackets;                                         // 0x003C(0x0014)
};


// ScriptStruct  ShooterGame.AresClientLatencyEvent
// Struct Size::0x00C0
struct FAresClientLatencyEvent
{
    FString                                       MatchId;                                                      // 0x0000(0x0010)
    FString                                       InstanceId;                                                   // 0x0010(0x0010)
    FMetric                                       NetworkRTTms;                                                 // 0x0020(0x0014)
    FPingBuckets                                  NetworkRTTmsBuckets;                                          // 0x0034(0x001C)
    uint64_t                                      TotalPackets;                                                 // 0x0050(0x0008)
    uint64_t                                      PacketsLost;                                                  // 0x0058(0x0008)
    uint64_t                                      PacketsOverSizeSoftLimit;                                     // 0x0060(0x0008)
    uint64_t                                      PacketsOverSizeHardLimit;                                     // 0x0068(0x0008)
    FString                                       NetworkConnectionType;                                        // 0x0070(0x0010)
    FString                                       SimulatedNetworkDegradationPreset;                            // 0x0080(0x0010)
    FPacketDeltaTimeBuckets                       PacketDeltaTimeBuckets;                                       // 0x0090(0x001C)
    int32_t                                       NetworkSmoothingLevel;                                        // 0x00AC(0x0004)
    FString                                       RemoteAddress;                                                // 0x00B0(0x0010)
};


// ScriptStruct  ShooterGame.AresServerBandwidthEvent
// Struct Size::0x0038
struct FAresServerBandwidthEvent
{
    FString                                       MatchId;                                                      // 0x0000(0x0010)
    FString                                       InstanceId;                                                   // 0x0010(0x0010)
    uint32_t                                      DurationMs;                                                   // 0x0020(0x0004)
    uint32_t                                      BytesDownloaded;                                              // 0x0024(0x0004)
    uint32_t                                      BytesUploaded;                                                // 0x0028(0x0004)
    uint32_t                                      PacketsUploaded;                                              // 0x002C(0x0004)
    uint32_t                                      PacketsDownloaded;                                            // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.NonVerbalCommsNonPingTelemetryEvent
// Struct Size::0x0038
struct FNonVerbalCommsNonPingTelemetryEvent
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    FString                                       Subject;                                                      // 0x0010(0x0010)
    int32_t                                       RoundNumber;                                                  // 0x0020(0x0004)
    int32_t                                       TextChatCount;                                                // 0x0024(0x0004)
    TArray<FNonPingEventTelemetryData>            NonPingEvents;                                                // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.NonPingEventTelemetryData
// Struct Size::0x0058
struct FNonPingEventTelemetryData
{
    FString                                       CommSystem;                                                   // 0x0000(0x0010)
    FString                                       CommSubSystem;                                                // 0x0010(0x0010)
    FString                                       CommSent;                                                     // 0x0020(0x0010)
    int64_t                                       CommTimeSent;                                                 // 0x0030(0x0008)
    FVector                                       CommLocation;                                                 // 0x0038(0x000C)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       RoundPhase;                                                   // 0x0048(0x0010)
};


// ScriptStruct  ShooterGame.NonVerbalCommsPingTelemetryEvent
// Struct Size::0x0038
struct FNonVerbalCommsPingTelemetryEvent
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    FString                                       Subject;                                                      // 0x0010(0x0010)
    int32_t                                       RoundNumber;                                                  // 0x0020(0x0004)
    int32_t                                       TextChatCount;                                                // 0x0024(0x0004)
    TArray<FPingEventTelemetryData>               PingEvents;                                                   // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.PingEventTelemetryData
// Struct Size::0x0050
struct FPingEventTelemetryData
{
    FString                                       PingMethod;                                                   // 0x0000(0x0010)
    FVector                                       PingDestination;                                              // 0x0010(0x000C)
    FVector                                       PingLocation;                                                 // 0x001C(0x000C)
    FString                                       PingItem;                                                     // 0x0028(0x0010)
    int64_t                                       PingSent;                                                     // 0x0038(0x0008)
    FString                                       RoundPhase;                                                   // 0x0040(0x0010)
};


// ScriptStruct  ShooterGame.ObfuscatedPlayerInformation
// Struct Size::0x0030
struct FObfuscatedPlayerInformation
{
    FUniqueNetIdRepl                              SubjectUniqueId;                                              // 0x0000(0x0028)
    bool                                          bIsAfk;                                                       // 0x0028(0x0001)
    enum class EConnectionStatus                  ConnectionStatus;                                             // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
};


// ScriptStruct  ShooterGame.ObjectiveOverrideData
// Struct Size::0x0008
struct FObjectiveOverrideData
{
    bool                                          bPreventDefaultProgressSource;                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       MinGuaranteedProgress;                                        // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.ObserverTargetSetGameDataEvent
// Struct Size::0x0010
struct FObserverTargetSetGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.ObserverPawnMove
// Struct Size::0x0030
struct FObserverPawnMove
{
    float                                         Timestamp;                                                    // 0x0000(0x0004)
    FVTSTimeStampIndex                            TimeStampIndex;                                               // 0x0004(0x0004)
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FVector                                       Velocity;                                                     // 0x0014(0x000C)
    FQuat                                         Rotation;                                                     // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.ObserverViewOptionsNetworkedData
// Struct Size::0x0004
struct FObserverViewOptionsNetworkedData
{
    bool                                          bFriendlyOutlinesEnabled;                                     // 0x0000(0x0001)
    bool                                          bEnemyOutlinesEnabled;                                        // 0x0001(0x0001)
    bool                                          bSightLinesEnabled;                                           // 0x0002(0x0001)
    bool                                          bMinimapEnabled;                                              // 0x0003(0x0001)
};


// ScriptStruct  ShooterGame.RoomInfo
// Struct Size::0x0040
struct FRoomInfo
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    FAkRoomComponent*                             RoomComponent;                                                // 0x0020(0x0008)
    TArray<int32_t>                               ExitPortalIndex;                                              // 0x0028(0x0010)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  ShooterGame.PortalInfo
// Struct Size::0x0020
struct FPortalInfo
{
    FAkAcousticPortal*                            PortalActor;                                                  // 0x0000(0x0008)
    FVector                                       PortalLocation;                                               // 0x0008(0x000C)
    int32_t                                       FrontRoomIndex;                                               // 0x0014(0x0004)
    int32_t                                       BackRoomIndex;                                                // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.OfferCostWithDiscountInfo
// Struct Size::0x0028
struct FOfferCostWithDiscountInfo
{
    FGuid                                         CurrencyID;                                                   // 0x0000(0x0010)
    int32_t                                       BaseCost;                                                     // 0x0010(0x0004)
    int32_t                                       DiscountCost;                                                 // 0x0014(0x0004)
    int32_t                                       DiscountPercent;                                              // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FTexture*                                     CurrencyIcon;                                                 // 0x0020(0x0008)
};


// ScriptStruct  ShooterGame.OrderedListModelChangeEventData
// Struct Size::0x0018
struct FOrderedListModelChangeEventData
{
    int32_t                                       FirstIndex;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0014]                                               // 0x0004(0x0014)
};


// ScriptStruct  ShooterGame.OrderedListModelChangeEventDataRange
// Struct Size::0x0008
struct FOrderedListModelChangeEventDataRange
{
    FIndexRange                                   Range;                                                        // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.OrderedListModelChangeEventData
// Struct Size::0x0008
struct FOrderedListModelChangeEventData : public FOrderedListModelChangeEventDataRange
{
};


// ScriptStruct  ShooterGame.OrderedListModelChangeEventData
// Struct Size::0x0008
struct FOrderedListModelChangeEventData : public FOrderedListModelChangeEventDataRange
{
};


// ScriptStruct  ShooterGame.OrderedListModelChangeEventData
// Struct Size::0x0008
struct FOrderedListModelChangeEventData : public FOrderedListModelChangeEventDataRange
{
};


// ScriptStruct  ShooterGame.OrderedListModelChangeEventData
// Struct Size::0x0001
struct FOrderedListModelChangeEventData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.RTPLogEntry
// Struct Size::0x0050
struct FRTPLogEntry
{
    FString                                       Message;                                                      // 0x0000(0x0010)
    FString                                       GameId;                                                       // 0x0010(0x0010)
    int64_t                                       GameStartTime;                                                // 0x0020(0x0008)
    double                                        FirstTime;                                                    // 0x0028(0x0008)
    double                                        LastTime;                                                     // 0x0030(0x0008)
    uint32_t                                      Count;                                                        // 0x0038(0x0004)
    uint32_t                                      Verbosity;                                                    // 0x003C(0x0004)
    FName                                         Category;                                                     // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ShooterGame.PagedListLocation
// Struct Size::0x0008
struct FPagedListLocation
{
    int32_t                                       PageNumber;                                                   // 0x0000(0x0004)
    int32_t                                       IndexOnPage;                                                  // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.ParallelAnimationConductorNode
// Struct Size::0x0018
struct FParallelAnimationConductorNode
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TScriptInterface<IAnimationConductorNode>     Node;                                                         // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.QueueIneligiblePlayers
// Struct Size::0x0010
struct FQueueIneligiblePlayers
{
    TArray<FPlayerQueueExpiry>                    Players;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PlayerQueueExpiry
// Struct Size::0x0018
struct FPlayerQueueExpiry
{
    FString                                       Puuid;                                                        // 0x0000(0x0010)
    FDateTime                                     Expiry;                                                       // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.SetPremierEventRequest
// Struct Size::0x0010
struct FSetPremierEventRequest
{
    FString                                       PremierEventID;                                               // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.JoinMatchRequest
// Struct Size::0x0060
struct FJoinMatchRequest
{
    FString                                       teamID;                                                       // 0x0000(0x0010)
    TMap<FString,FString>                         subjectToCharacterID;                                         // 0x0010(0x0050)
};


// ScriptStruct  ShooterGame.PartyInviteRequest
// Struct Size::0x0010
struct FPartyInviteRequest
{
    TArray<FString>                               Subjects;                                                     // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.MakeRosterPartyRequest
// Struct Size::0x0020
struct FMakeRosterPartyRequest
{
    FString                                       RosterId;                                                     // 0x0000(0x0010)
    FString                                       QueueId;                                                      // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.SoloExperienceRequest
// Struct Size::0x0018
struct FSoloExperienceRequest
{
    enum class ESoloExperienceType                GameType;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Module;                                                       // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.StartCustomGameRequest
// Struct Size::0x0050
struct FStartCustomGameRequest
{
    TMap<FString,FString>                         GameRules;                                                    // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.ChangeQueueRequest
// Struct Size::0x0010
struct FChangeQueueRequest
{
    FString                                       QueueID;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.SetCrossPlaySettingRequest
// Struct Size::0x0001
struct FSetCrossPlaySettingRequest
{
    bool                                          IsCrossplayEnabled;                                           // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.SetPreferredGamePodsRequest
// Struct Size::0x0010
struct FSetPreferredGamePodsRequest
{
    TArray<FString>                               GamePodIDs;                                                   // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.SetLookingForMoreRequest
// Struct Size::0x0001
struct FSetLookingForMoreRequest
{
    bool                                          LookingForMore;                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.SetAccessibilityRequest
// Struct Size::0x0010
struct FSetAccessibilityRequest
{
    FString                                       Accessibility;                                                // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PartyMUCInfo
// Struct Size::0x0020
struct FPartyMUCInfo
{
    FString                                       Token;                                                        // 0x0000(0x0010)
    FString                                       Room;                                                         // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.SetPlayerBroadcastHUDStatusRequest
// Struct Size::0x0018
struct FSetPlayerBroadcastHUDStatusRequest
{
    FString                                       PlayerToSetBroadcastHUDStatus;                                // 0x0000(0x0010)
    bool                                          BroadcastHUDStatus;                                           // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.SetPlayerModeratorStatusRequest
// Struct Size::0x0018
struct FSetPlayerModeratorStatusRequest
{
    FString                                       PlayerToSetModeratorStatus;                                   // 0x0000(0x0010)
    bool                                          ModeratorStatus;                                              // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.SwapPlayersRequestBody
// Struct Size::0x0020
struct FSwapPlayersRequestBody
{
    FString                                       PlayerA;                                                      // 0x0000(0x0010)
    FString                                       PlayerB;                                                      // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.ChangeTeamRequestBody
// Struct Size::0x0010
struct FChangeTeamRequestBody
{
    FString                                       PlayerToPutOnTeam;                                            // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.JoinRequestDTO
// Struct Size::0x0020
struct FJoinRequestDTO
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       JoinType;                                                     // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.CustomGameCollection
// Struct Size::0x0010
struct FCustomGameCollection
{
    TArray<FCustomGameSummary>                    Games;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.CustomGameSummary
// Struct Size::0x0068
struct FCustomGameSummary
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       Description;                                                  // 0x0020(0x0010)
    FString                                       Map;                                                          // 0x0030(0x0010)
    FString                                       Owner;                                                        // 0x0040(0x0010)
    int32_t                                       Count;                                                        // 0x0050(0x0004)
    int32_t                                       Limit;                                                        // 0x0054(0x0004)
    FString                                       ClientVersion;                                                // 0x0058(0x0010)
};


// ScriptStruct  ShooterGame.AresParty
// Struct Size::0x0358
struct FAresParty
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       MUCName;                                                      // 0x0010(0x0010)
    FString                                       VoiceRoomID;                                                  // 0x0020(0x0010)
    TArray<FAresPartyMember>                      Members;                                                      // 0x0030(0x0010)
    FCustomGameData                               CustomGameData;                                               // 0x0040(0x0108)
    FMatchmakingData                              MatchmakingData;                                              // 0x0148(0x0038)
    FTournamentData                               TournamentData;                                               // 0x0180(0x00D0)
    FString                                       ClientVersion;                                                // 0x0250(0x0010)
    int64_t                                       Version;                                                      // 0x0260(0x0008)
    bool                                          LookingForMore;                                               // 0x0268(0x0001)
    char                                          pa_0269[0x0007]                                               // 0x0269(0x0007)
    FCheatData                                    CheatData;                                                    // 0x0270(0x0018)
    TArray<FString>                               EligibleQueues;                                               // 0x0288(0x0010)
    TArray<FPartyXPBonus>                         XPBonuses;                                                    // 0x0298(0x0010)
    FString                                       State;                                                        // 0x02A8(0x0010)
    FString                                       PreviousState;                                                // 0x02B8(0x0010)
    enum class EAresPartyAccessibility            Accessibility;                                                // 0x02C8(0x0001)
    char                                          pa_02C9[0x0007]                                               // 0x02C9(0x0007)
    FString                                       StateTransitionReason;                                        // 0x02D0(0x0010)
    TArray<FPartyInvite>                          Invites;                                                      // 0x02E0(0x0010)
    TArray<FPartyRequest>                         Requests;                                                     // 0x02F0(0x0010)
    FDateTime                                     QueueEntryTime;                                               // 0x0300(0x0008)
    FAresPartyErrorNotification                   ErrorNotification;                                            // 0x0308(0x0020)
    int64_t                                       RestrictedSeconds;                                            // 0x0328(0x0008)
    TArray<FQueueIneligibility>                   QueueIneligibilities;                                         // 0x0330(0x0010)
    FString                                       InviteCode;                                                   // 0x0340(0x0010)
    bool                                          IsCrossPlayEnabled;                                           // 0x0350(0x0001)
    char                                          pa_0351[0x0007]                                               // 0x0351(0x0007)
};


// ScriptStruct  ShooterGame.QueueIneligibility
// Struct Size::0x0038
struct FQueueIneligibility
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    TArray<FString>                               QueueIDs;                                                     // 0x0010(0x0010)
    FString                                       Reason;                                                       // 0x0020(0x0010)
    FDateTime                                     Expiry;                                                       // 0x0030(0x0008)
};


// ScriptStruct  ShooterGame.AresPartyErrorNotification
// Struct Size::0x0020
struct FAresPartyErrorNotification
{
    FString                                       ErrorType;                                                    // 0x0000(0x0010)
    TArray<FString>                               ErroredPlayers;                                               // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PartyRequest
// Struct Size::0x0058
struct FPartyRequest
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       PartyID;                                                      // 0x0010(0x0010)
    TArray<FString>                               Subjects;                                                     // 0x0020(0x0010)
    FString                                       RequestedBySubject;                                           // 0x0030(0x0010)
    FDateTime                                     CreatedAt;                                                    // 0x0040(0x0008)
    int32_t                                       ExpiresIn;                                                    // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FDateTime                                     ExpiresAt;                                                    // 0x0050(0x0008)
};


// ScriptStruct  ShooterGame.PartyInvite
// Struct Size::0x0058
struct FPartyInvite
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       PartyID;                                                      // 0x0010(0x0010)
    FString                                       Subject;                                                      // 0x0020(0x0010)
    FString                                       InvitedBySubject;                                             // 0x0030(0x0010)
    FDateTime                                     CreatedAt;                                                    // 0x0040(0x0008)
    int32_t                                       ExpiresIn;                                                    // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FDateTime                                     ExpiresAt;                                                    // 0x0050(0x0008)
};


// ScriptStruct  ShooterGame.PartyXPBonus
// Struct Size::0x0018
struct FPartyXPBonus
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    bool                                          Applied;                                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.CheatData
// Struct Size::0x0018
struct FCheatData
{
    FString                                       GamePodOverride;                                              // 0x0000(0x0010)
    bool                                          ForcePostGameProcessing;                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.MatchmakingData
// Struct Size::0x0038
struct FMatchmakingData
{
    FString                                       QueueID;                                                      // 0x0000(0x0010)
    TArray<FQueueIneligibleMemberPair>            QueueIneligibleMemberPairs;                                   // 0x0010(0x0010)
    TArray<FString>                               PreferredGamePods;                                            // 0x0020(0x0010)
    float                                         SkillDisparityRRPenalty;                                      // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.QueueIneligibleMemberPair
// Struct Size::0x0020
struct FQueueIneligibleMemberPair
{
    FString                                       SubjectOne;                                                   // 0x0000(0x0010)
    FString                                       SubjectTwo;                                                   // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.CustomGameData
// Struct Size::0x0108
struct FCustomGameData
{
    FCustomGameSettings                           Settings;                                                     // 0x0000(0x00A8)
    FCustomGameTeams                              Membership;                                                   // 0x00A8(0x0050)
    int32_t                                       MaxPartySize;                                                 // 0x00F8(0x0004)
    bool                                          AutobalanceEnabled;                                           // 0x00FC(0x0001)
    char                                          pa_00FD[0x0003]                                               // 0x00FD(0x0003)
    int32_t                                       AutobalanceMinPlayers;                                        // 0x0100(0x0004)
    char                                          pa_0104[0x0004]                                               // 0x0104(0x0004)
};


// ScriptStruct  ShooterGame.CustomGameTeams
// Struct Size::0x0050
struct FCustomGameTeams
{
    TArray<FCustomGamePlayer>                     TeamOne;                                                      // 0x0000(0x0010)
    TArray<FCustomGamePlayer>                     TeamTwo;                                                      // 0x0010(0x0010)
    TArray<FCustomGamePlayer>                     TeamSpectate;                                                 // 0x0020(0x0010)
    TArray<FCustomGamePlayer>                     TeamOneCoaches;                                               // 0x0030(0x0010)
    TArray<FCustomGamePlayer>                     TeamTwoCoaches;                                               // 0x0040(0x0010)
};


// ScriptStruct  ShooterGame.CustomGamePlayer
// Struct Size::0x0010
struct FCustomGamePlayer
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.CustomGameSettings
// Struct Size::0x00A8
struct FCustomGameSettings
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Description;                                                  // 0x0010(0x0010)
    FString                                       Map;                                                          // 0x0020(0x0010)
    FString                                       Mode;                                                         // 0x0030(0x0010)
    FString                                       GamePod;                                                      // 0x0040(0x0010)
    bool                                          UseBots;                                                      // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
    TMap<FString,FString>                         GameRules;                                                    // 0x0058(0x0050)
};


// ScriptStruct  ShooterGame.AresPartyMember
// Struct Size::0x0128
struct FAresPartyMember
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    int32_t                                       CompetitiveTier;                                              // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FPlayerIdentity                               PlayerIdentity;                                               // 0x0018(0x0048)
    FPartyMemberSeasonalInfo                      SeasonalInfo;                                                 // 0x0060(0x0030)
    FMMRSeasonBadgeInfo                           SeasonalBadgeInfo;                                            // 0x0090(0x0078)
    bool                                          IsOwner;                                                      // 0x0108(0x0001)
    bool                                          IsReady;                                                      // 0x0109(0x0001)
    char                                          pa_010A[0x0002]                                               // 0x010A(0x0002)
    int32_t                                       QueueEligibleRemainingAccountLevels;                          // 0x010C(0x0004)
    TArray<FPingInfo>                             Pings;                                                        // 0x0110(0x0010)
    bool                                          IsModerator;                                                  // 0x0120(0x0001)
    bool                                          UseBroadcastHUD;                                              // 0x0121(0x0001)
    bool                                          IsCrossPlayEnabled;                                           // 0x0122(0x0001)
    char                                          pa_0123[0x0005]                                               // 0x0123(0x0005)
};


// ScriptStruct  ShooterGame.PartyMemberReadyStatus
// Struct Size::0x0001
struct FPartyMemberReadyStatus
{
    bool                                          Ready;                                                        // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.PartyPlayer
// Struct Size::0x0058
struct FPartyPlayer
{
    int32_t                                       Version;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Subject;                                                      // 0x0008(0x0010)
    FString                                       SessionClientID;                                              // 0x0018(0x0010)
    FString                                       CurrentPartyID;                                               // 0x0028(0x0010)
    TArray<FPartyInvite>                          Invites;                                                      // 0x0038(0x0010)
    TArray<FPartyRequest>                         Requests;                                                     // 0x0048(0x0010)
};


// ScriptStruct  ShooterGame.CustomGameConfigs
// Struct Size::0x0090
struct FCustomGameConfigs
{
    bool                                          Enabled;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FString>                               EnabledMaps;                                                  // 0x0008(0x0010)
    TArray<FString>                               EnabledModes;                                                 // 0x0018(0x0010)
    TArray<FQueueConfig>                          Queues;                                                       // 0x0028(0x0010)
    TMap<FString,FPingServiceInfo>                GamePodPingServiceInfo;                                       // 0x0038(0x0050)
    FDateTime                                     QueueConfigsLastUpdated;                                      // 0x0088(0x0008)
};


// ScriptStruct  ShooterGame.PingServiceInfo
// Struct Size::0x0018
struct FPingServiceInfo
{
    TArray<FString>                               PingProxyAddresses;                                           // 0x0000(0x0010)
    uint32_t                                      SecurityHash;                                                 // 0x0010(0x0004)
    uint32_t                                      ObfuscatedIP;                                                 // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.QueueConfig
// Struct Size::0x0080
struct FQueueConfig
{
    FString                                       QueueID;                                                      // 0x0000(0x0010)
    bool                                          Enabled;                                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       TeamSize;                                                     // 0x0014(0x0004)
    int32_t                                       HighSkillTier;                                                // 0x0018(0x0004)
    bool                                          AllowFullPartyBypassSkillRestrictions;                        // 0x001C(0x0001)
    bool                                          ApplyRRPenaltyToFullParty;                                    // 0x001D(0x0001)
    bool                                          AllowFiveStackRestrictions;                                   // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    FString                                       Mode;                                                         // 0x0020(0x0010)
    bool                                          IsRanked;                                                     // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       MinimumAccountLevelRequired;                                  // 0x0034(0x0004)
    int32_t                                       PartyMaxCompetitiveTierRange;                                 // 0x0038(0x0004)
    int32_t                                       FullPartyMaxCompetitiveTierRange;                             // 0x003C(0x0004)
    int32_t                                       MaxPartySize;                                                 // 0x0040(0x0004)
    int32_t                                       MinPartySize;                                                 // 0x0044(0x0004)
    TArray<int32_t>                               InvalidPartySizes;                                            // 0x0048(0x0010)
    int32_t                                       MaxPartySizeHighSkill;                                        // 0x0058(0x0004)
    bool                                          IsTournament;                                                 // 0x005C(0x0001)
    bool                                          RequireRoster;                                                // 0x005D(0x0001)
    char                                          pa_005E[0x0002]                                               // 0x005E(0x0002)
    int64_t                                       TimeUntilNextScheduleChangeSeconds;                           // 0x0060(0x0008)
    bool                                          crossPlayEnabledRequired;                                     // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
    TArray<FGuid>                                 DisabledContent;                                              // 0x0070(0x0010)
};


// ScriptStruct  ShooterGame.WallSpanList
// Struct Size::0x00A8
struct FWallSpanList
{
    TArray<FWallSpanInfo>                         Spans;                                                        // 0x0000(0x0010)
    bool                                          bLastPointInWall;                                             // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FHitResult                                    EntranceToLastPoint;                                          // 0x0014(0x0090)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
};


// ScriptStruct  ShooterGame.WallSpanInfo
// Struct Size::0x0120
struct FWallSpanInfo
{
    FHitResult                                    Entrance;                                                     // 0x0000(0x0090)
    FHitResult                                    Exit;                                                         // 0x0090(0x0090)
};


// ScriptStruct  ShooterGame.Equip
// Struct Size::0x0018
struct FEquip
{
    int32_t                                       AlternateLevel;                                               // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FSkinParam>                            Params;                                                       // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.SkinParam
// Struct Size::0x0020
struct FSkinParam
{
    FName                                         ParamName;                                                    // 0x0000(0x000C)
    enum class EAresParamType                     ParamType;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FString                                       ParamValue;                                                   // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PlayerMapping
// Struct Size::0x0068
struct FPlayerMapping
{
    TArray<FEquippableMapping>                    EquippableMappings;                                           // 0x0000(0x0010)
    TArray<FSprayMapping>                         SprayMappings;                                                // 0x0010(0x0010)
    FLoadoutIdentityMapping                       IdentityMapping;                                              // 0x0020(0x0034)
    FGuid                                         Subject;                                                      // 0x0054(0x0010)
    bool                                          bIncognito;                                                   // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
};


// ScriptStruct  ShooterGame.LoadoutIdentityMapping
// Struct Size::0x0034
struct FLoadoutIdentityMapping
{
    FGuid                                         PlayerCardID;                                                 // 0x0000(0x0010)
    FGuid                                         PlayerTitleID;                                                // 0x0010(0x0010)
    FGuid                                         PreferredLevelBorderID;                                       // 0x0020(0x0010)
    bool                                          bHideAccountLevel;                                            // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
};


// ScriptStruct  ShooterGame.SprayMapping
// Struct Size::0x0018
struct FSprayMapping
{
    FSprayEquipSlotDataAsset*                     SprayEquipSlotDataAsset;                                      // 0x0000(0x0008)
    FSprayDataAsset*                              SprayDataAsset;                                               // 0x0008(0x0008)
    FSprayLevelDataAsset*                         SprayLevelDataAsset;                                          // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.EquippableMapping
// Struct Size::0x0050
struct FEquippableMapping
{
    FEquippableDataAsset*                         EquippableDataAsset;                                          // 0x0000(0x0008)
    FEquippableSkinDataAsset*                     EquippableSkinDataAsset;                                      // 0x0008(0x0008)
    FEquippableSkinLevelDataAsset*                EquippableSkinLevelDataAsset;                                 // 0x0010(0x0008)
    FEquippableSkinChromaDataAsset*               EquippableSkinChromaDataAsset;                                // 0x0018(0x0008)
    FEquippableCharmDataAsset*                    EquippableCharmDataAsset;                                     // 0x0020(0x0008)
    FEquippableCharmLevelDataAsset*               EquippableCharmLevelDataAsset;                                // 0x0028(0x0008)
    FGuid                                         EquippableCharmInstance;                                      // 0x0030(0x0010)
    TArray<FAttachmentMappingV2>                  EquippableAttachments;                                        // 0x0040(0x0010)
};


// ScriptStruct  ShooterGame.AttachmentMappingV2
// Struct Size::0x0010
struct FAttachmentMappingV2
{
    FSocketDataAsset*                             SocketAsset;                                                  // 0x0000(0x0008)
    FEquippableAttachmentDataAsset*               AttachmentAsset;                                              // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.PlayerLoadout
// Struct Size::0x0070
struct FPlayerLoadout
{
    FGuid                                         Subject;                                                      // 0x0000(0x0010)
    int32_t                                       Version;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FGunLoadout>                           Guns;                                                         // 0x0018(0x0010)
    TArray<FSprayLoadout>                         Sprays;                                                       // 0x0028(0x0010)
    bool                                          Incognito;                                                    // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    FLoadoutIdentity                              Identity;                                                     // 0x003C(0x0034)
};


// ScriptStruct  ShooterGame.LoadoutIdentity
// Struct Size::0x0034
struct FLoadoutIdentity
{
    FGuid                                         PlayerCardID;                                                 // 0x0000(0x0010)
    FGuid                                         PlayerTitleID;                                                // 0x0010(0x0010)
    FGuid                                         PreferredLevelBorderID;                                       // 0x0020(0x0010)
    bool                                          HideAccountLevel;                                             // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
};


// ScriptStruct  ShooterGame.SprayLoadout
// Struct Size::0x0030
struct FSprayLoadout
{
    FGuid                                         EquipSlotID;                                                  // 0x0000(0x0010)
    FGuid                                         SprayID;                                                      // 0x0010(0x0010)
    FGuid                                         SprayLevelID;                                                 // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.GunLoadout
// Struct Size::0x0080
struct FGunLoadout
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FGuid                                         SkinID;                                                       // 0x0010(0x0010)
    FGuid                                         SkinLevelID;                                                  // 0x0020(0x0010)
    FGuid                                         ChromaID;                                                     // 0x0030(0x0010)
    FGuid                                         CharmInstanceID;                                              // 0x0040(0x0010)
    FGuid                                         CharmID;                                                      // 0x0050(0x0010)
    FGuid                                         CharmLevelID;                                                 // 0x0060(0x0010)
    TArray<FAttachmentLoadout>                    Attachments;                                                  // 0x0070(0x0010)
};


// ScriptStruct  ShooterGame.AttachmentLoadout
// Struct Size::0x0030
struct FAttachmentLoadout
{
    FGuid                                         SocketID;                                                     // 0x0000(0x0010)
    FGuid                                         AttachmentID;                                                 // 0x0010(0x0010)
    FString                                       Metadata;                                                     // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.PingRequestContainer
// Struct Size::0x0010
struct FPingRequestContainer
{
    TArray<FPingRequest*>                         Requests;                                                     // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PingableEndpoint
// Struct Size::0x0090
struct FPingableEndpoint
{
    enum class EEndpointType                      Type;                                                         // 0x0000(0x0001)
    enum class EEndpointState                     State;                                                        // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FPingRecord                                   Stats;                                                        // 0x0008(0x0018)
    FAddressablePingServiceInfo                   ServiceInfo;                                                  // 0x0020(0x0028)
    FLatencyDataPayload                           LatencyPayload;                                               // 0x0048(0x0048)
};


// ScriptStruct  ShooterGame.AddressablePingServiceInfo
// Struct Size::0x0028
struct FAddressablePingServiceInfo : public FPingServiceInfo
{
    FString                                       Address;                                                      // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.PingRecord
// Struct Size::0x0018
struct FPingRecord
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    uint32_t                                      ProcessedCount;                                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.IgnoreBody
// Struct Size::0x0001
struct FIgnoreBody
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.EmptyBody
// Struct Size::0x0001
struct FEmptyBody
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.PlayerAffinityToken
// Struct Size::0x0010
struct FPlayerAffinityToken
{
    FString                                       Token;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PlatformToken
// Struct Size::0x0040
struct FPlatformToken
{
    FString                                       PlatformType;                                                 // 0x0000(0x0010)
    FString                                       PlatformOS;                                                   // 0x0010(0x0010)
    FString                                       PlatformOSVersion;                                            // 0x0020(0x0010)
    FString                                       PlatformChipset;                                              // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.EntitlementsToken
// Struct Size::0x0020
struct FEntitlementsToken
{
    FString                                       Token;                                                        // 0x0000(0x0010)
    TArray<FString>                               Entitlements;                                                 // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.RSOToken
// Struct Size::0x0018
struct FRSOToken
{
    FString                                       AccessToken;                                                  // 0x0000(0x0010)
    FDateTime                                     Expiration;                                                   // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.PlatformErrorEvent
// Struct Size::0x0048
struct FPlatformErrorEvent
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       BuildVersion;                                                 // 0x0010(0x0010)
    FString                                       ErrorComponent;                                               // 0x0020(0x0010)
    int32_t                                       ErrorCode;                                                    // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       ErrorDescription;                                             // 0x0038(0x0010)
};


// ScriptStruct  ShooterGame.PlatformInitializerCycleEntry
// Struct Size::0x0010
struct FPlatformInitializerCycleEntry
{
    FInitSystem*                                  System;                                                       // 0x0000(0x0008)
    FInitSystem*                                  RequiredBy;                                                   // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.PlatformInitializerEntry
// Struct Size::0x0028
struct FPlatformInitializerEntry
{
    FInitSystem*                                  System;                                                       // 0x0000(0x0008)
    enum class EPlatformInitializerSystemImportanceImportance;                                                  // 0x0008(0x0001)
    enum class EPlatformInitializerSystemState    State;                                                        // 0x0009(0x0001)
    enum class EPlatformInitializerTimeoutOptions TimeoutOptions;                                               // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
    FDateTime                                     InitStartTime;                                                // 0x0010(0x0008)
    FDateTime                                     InitCompleteTime;                                             // 0x0018(0x0008)
    bool                                          bTimedOut;                                                    // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ShooterGame.PlatformPlayerSubject
// Struct Size::0x0010
struct FPlatformPlayerSubject
{
    FString                                       String;                                                       // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PlayerAlias
// Struct Size::0x0020
struct FPlayerAlias
{
    FString                                       GameName;                                                     // 0x0000(0x0010)
    FString                                       TagLine;                                                      // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PlayerPerfStat
// Struct Size::0x0024
struct FPlayerPerfStat
{
    float                                         CurrentTickMax;                                               // 0x0000(0x0004)
    float                                         CurrentTickMin;                                               // 0x0004(0x0004)
    float                                         CurrentTickAverage;                                           // 0x0008(0x0004)
    float                                         CurrentTickSum;                                               // 0x000C(0x0004)
    float                                         CurrentTickExpSmooth;                                         // 0x0010(0x0004)
    float                                         WorldDurationSum;                                             // 0x0014(0x0004)
    float                                         SlidingWindowSum;                                             // 0x0018(0x0004)
    float                                         SlidingWindowDuration;                                        // 0x001C(0x0004)
    uint32_t                                      SlidingWindowSampleCount;                                     // 0x0020(0x0004)
};


// ScriptStruct  ShooterGame.GraphMetricEntry
// Struct Size::0x0018
struct FGraphMetricEntry
{
    enum class EPlayerPerfStatField               MetricStat;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FLinearColor                                  MetricColor;                                                  // 0x0004(0x0010)
    enum class EGraphMetricTextPlacement          MetricTextPlacement;                                          // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  ShooterGame.TextMetricEntry
// Struct Size::0x0014
struct FTextMetricEntry
{
    enum class EPlayerPerfStatField               MetricStat;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FLinearColor                                  TextColor;                                                    // 0x0004(0x0010)
};


// ScriptStruct  ShooterGame.SurveyResponseDTO
// Struct Size::0x0028
struct FSurveyResponseDTO
{
    FDateTime                                     createdAt;                                                    // 0x0000(0x0008)
    TArray<FQuestionResponseDTO>                  questionResponses;                                            // 0x0008(0x0010)
    TArray<FResponseActionDTO>                    actions;                                                      // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.ResponseActionDTO
// Struct Size::0x0018
struct FResponseActionDTO
{
    FString                                       action;                                                       // 0x0000(0x0010)
    FDateTime                                     timeStamp;                                                    // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.QuestionResponseDTO
// Struct Size::0x0058
struct FQuestionResponseDTO
{
    int32_t                                       questionId;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TMap<FString,FString>                         responseData;                                                 // 0x0008(0x0050)
};


// ScriptStruct  ShooterGame.SurveyDTO
// Struct Size::0x0048
struct FSurveyDTO
{
    bool                                          IsSurveyAvailable;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Id;                                                           // 0x0004(0x0004)
    FString                                       Title;                                                        // 0x0008(0x0010)
    FString                                       Caption;                                                      // 0x0018(0x0010)
    FString                                       Type;                                                         // 0x0028(0x0010)
    FSurveyQuestionContainerDTO                   Data;                                                         // 0x0038(0x0010)
};


// ScriptStruct  ShooterGame.SurveyQuestionContainerDTO
// Struct Size::0x0010
struct FSurveyQuestionContainerDTO
{
    TArray<FSurveyQuestionDTO>                    Questions;                                                    // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.SurveyQuestionDTO
// Struct Size::0x0028
struct FSurveyQuestionDTO
{
    int32_t                                       Id;                                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Type;                                                         // 0x0008(0x0010)
    FString                                       Question;                                                     // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.PlayerFeedbackPayload
// Struct Size::0x00A8
struct FPlayerFeedbackPayload
{
    FString                                       AgentPlayed;                                                  // 0x0000(0x0010)
    TArray<FString>                               AgentsPlayedAgainst;                                          // 0x0010(0x0010)
    TArray<FString>                               AgentsPlayedWith;                                             // 0x0020(0x0010)
    FString                                       QueueId;                                                      // 0x0030(0x0010)
    FString                                       MapId;                                                        // 0x0040(0x0010)
    float                                         Mmr;                                                          // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       Platform;                                                     // 0x0058(0x0010)
    FString                                       Puuid;                                                        // 0x0068(0x0010)
    FString                                       PurchaseSource;                                               // 0x0078(0x0010)
    TArray<FString>                               PurchasedItems;                                               // 0x0088(0x0010)
    FString                                       Rank;                                                         // 0x0098(0x0010)
};


// ScriptStruct  ShooterGame.PlayerFeedbackMetadataConstants
// Struct Size::0x0001
struct FPlayerFeedbackMetadataConstants
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.TimeseriesData
// Struct Size::0x002C
struct FTimeseriesData
{
    char                                          pa_0000[0x002C]                                               // 0x0000(0x002C)
};


// ScriptStruct  ShooterGame.AbilityUsedGameDataEvent
// Struct Size::0x0028
struct FAbilityUsedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0020]                                               // 0x0008(0x0020)
};


// ScriptStruct  ShooterGame.PlayerShotTakenGameDataEvent
// Struct Size::0x0058
struct FPlayerShotTakenGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0050]                                               // 0x0008(0x0050)
};


// ScriptStruct  ShooterGame.HealGameDataEvent
// Struct Size::0x0028
struct FHealGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0020]                                               // 0x0008(0x0020)
};


// ScriptStruct  ShooterGame.DamageGameDataEvent
// Struct Size::0x0040
struct FDamageGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0038]                                               // 0x0008(0x0038)
};


// ScriptStruct  ShooterGame.PlayerLoadoutChangedGameDataEvent
// Struct Size::0x0028
struct FPlayerLoadoutChangedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0020]                                               // 0x0008(0x0020)
};


// ScriptStruct  ShooterGame.PlayerRecoveredGameDataEvent
// Struct Size::0x0010
struct FPlayerRecoveredGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.PlayerDownedGameDataEvent
// Struct Size::0x0038
struct FPlayerDownedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0030]                                               // 0x0008(0x0030)
};


// ScriptStruct  ShooterGame.PlayerResurrectedGameDataEvent
// Struct Size::0x0010
struct FPlayerResurrectedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.PlayerKilledGameDataEvent
// Struct Size::0x0048
struct FPlayerKilledGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0040]                                               // 0x0008(0x0040)
};


// ScriptStruct  ShooterGame.PlayerSpawnedGameDataEvent
// Struct Size::0x0010
struct FPlayerSpawnedGameDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.WeaponStatPair
// Struct Size::0x0040
struct FWeaponStatPair
{
    FAresEquippable*                              Weapon;                                                       // 0x0000(0x0008)
    FWeaponStats                                  WeaponStats;                                                  // 0x0008(0x0034)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ShooterGame.WeaponStats
// Struct Size::0x0034
struct FWeaponStats
{
    FWeaponHitzoneHits                            WeaponHitzoneHits;                                            // 0x0000(0x000C)
    float                                         TotalDamageDealt;                                             // 0x000C(0x0004)
    int32_t                                       TotalShotsHit;                                                // 0x0010(0x0004)
    int32_t                                       TotalShots;                                                   // 0x0014(0x0004)
    int32_t                                       Kills;                                                        // 0x0018(0x0004)
    int32_t                                       Deaths;                                                       // 0x001C(0x0004)
    int32_t                                       ShotsWithMovementError;                                       // 0x0020(0x0004)
    int32_t                                       HeadShotKills;                                                // 0x0024(0x0004)
    int32_t                                       FirstShotHeadShots;                                           // 0x0028(0x0004)
    int32_t                                       OpponenetEncounters;                                          // 0x002C(0x0004)
    bool                                          UsedInLife;                                                   // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
};


// ScriptStruct  ShooterGame.WeaponHitzoneHits
// Struct Size::0x000C
struct FWeaponHitzoneHits
{
    int32_t                                       HeadshotsHit;                                                 // 0x0000(0x0004)
    int32_t                                       UpperBodyShotsHit;                                            // 0x0004(0x0004)
    int32_t                                       LowerBodyShotsHit;                                            // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.OpponentCombatTracking
// Struct Size::0x0008
struct FOpponentCombatTracking
{
    float                                         LastRespawnTime;                                              // 0x0000(0x0004)
    int32_t                                       LastInteractionTime;                                          // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.PlayerLoginLocationHistory
// Struct Size::0x0010
struct FPlayerLoginLocationHistory
{
    FString                                       PlayerLoginLocation;                                          // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.EFeedbackMessage
// Struct Size::0x0028
struct FEFeedbackMessage
{
    enum class EFeedbackMessageType               Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Title;                                                        // 0x0008(0x0010)
    FString                                       Message;                                                      // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.PlayerScoreDebugEntry
// Struct Size::0x0010
struct FPlayerScoreDebugEntry
{
    int32_t                                       Delta;                                                        // 0x0000(0x0004)
    FName                                         Reason;                                                       // 0x0004(0x000C)
};


// ScriptStruct  ShooterGame.PlayerSettingChangedEvent
// Struct Size::0x0030
struct FPlayerSettingChangedEvent
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       SettingName;                                                  // 0x0010(0x0010)
    FString                                       Version;                                                      // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.PlayerSettingStringChangedEvent
// Struct Size::0x0050
struct FPlayerSettingStringChangedEvent : public FPlayerSettingChangedEvent
{
    FString                                       OldValue;                                                     // 0x0030(0x0010)
    FString                                       Value;                                                        // 0x0040(0x0010)
};


// ScriptStruct  ShooterGame.PlayerSettingBoolChangedEvent
// Struct Size::0x0038
struct FPlayerSettingBoolChangedEvent : public FPlayerSettingChangedEvent
{
    bool                                          OldValue;                                                     // 0x0030(0x0001)
    bool                                          Value;                                                        // 0x0031(0x0001)
    char                                          pa_0032[0x0006]                                               // 0x0032(0x0006)
};


// ScriptStruct  ShooterGame.PlayerSettingFloatChangedEvent
// Struct Size::0x0038
struct FPlayerSettingFloatChangedEvent : public FPlayerSettingChangedEvent
{
    float                                         OldValue;                                                     // 0x0030(0x0004)
    float                                         Value;                                                        // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.PlayerSettingIntChangedEvent
// Struct Size::0x0038
struct FPlayerSettingIntChangedEvent : public FPlayerSettingChangedEvent
{
    int32_t                                       OldValue;                                                     // 0x0030(0x0004)
    int32_t                                       Value;                                                        // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.SlotToCooldownMap
// Struct Size::0x0050
struct FSlotToCooldownMap
{
    TMap<enum class ECharacterAbilitySlot,FAgentAbilityCooldown>SlotToCooldownMap;                              // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.SelectedLoadout
// Struct Size::0x0008
struct FSelectedLoadout
{
    int32_t                                       LoadoutIndex;                                                 // 0x0000(0x0004)
    bool                                          bIsRandom;                                                    // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  ShooterGame.DataArrivedDebugEntry
// Struct Size::0x0008
struct FDataArrivedDebugEntry
{
    FTimeStampIndex                               TimelineTimestamp;                                            // 0x0000(0x0004)
    float                                         ArrivalTimestamp;                                             // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.PopupModalConfig
// Struct Size::0x0070
struct FPopupModalConfig
{
    FString                                       TitleText;                                                    // 0x0000(0x0010)
    FString                                       BodyText;                                                     // 0x0010(0x0010)
    FDelegate                                     AcceptCallback;                                               // 0x0020(0x0014)
    FDelegate                                     DismissCallback;                                              // 0x0034(0x0014)
    FString                                       AcceptText;                                                   // 0x0048(0x0010)
    FString                                       DismissText;                                                  // 0x0058(0x0010)
    bool                                          bShowDismissText;                                             // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
};


// ScriptStruct  ShooterGame.CalculatedProjectileStep
// Struct Size::0x001C
struct FCalculatedProjectileStep
{
    float                                         Timestamp;                                                    // 0x0000(0x0004)
    FVector                                       Location;                                                     // 0x0004(0x000C)
    FVector                                       Velocity;                                                     // 0x0010(0x000C)
};


// ScriptStruct  ShooterGame.PregameMatchLoadouts
// Struct Size::0x0018
struct FPregameMatchLoadouts
{
    TArray<FMegapacketLoadout>                    Loadouts;                                                     // 0x0000(0x0010)
    bool                                          LoadoutsValid;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.PregameMatch
// Struct Size::0x0298
struct FPregameMatch
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    int64_t                                       Version;                                                      // 0x0010(0x0008)
    FString                                       PregameState;                                                 // 0x0018(0x0010)
    TArray<FPregameTeam>                          Teams;                                                        // 0x0028(0x0010)
    TArray<FString>                               ObserverSubjects;                                             // 0x0038(0x0010)
    TArray<FPregameMatchCoach>                    MatchCoaches;                                                 // 0x0048(0x0010)
    int32_t                                       EnemyTeamLockCount;                                           // 0x0058(0x0004)
    int32_t                                       EnemyTeamSize;                                                // 0x005C(0x0004)
    FDateTime                                     LastUpdated;                                                  // 0x0060(0x0008)
    FString                                       MapID;                                                        // 0x0068(0x0010)
    TArray<FGuid>                                 MapSelectPool;                                                // 0x0078(0x0010)
    TArray<FGuid>                                 BannedMapIDs;                                                 // 0x0088(0x0010)
    TMap<FString,FString>                         CastedVotes;                                                  // 0x0098(0x0050)
    TArray<FPregameStep>                          MapSelectSteps;                                               // 0x00E8(0x0010)
    int32_t                                       MapSelectStep;                                                // 0x00F8(0x0004)
    char                                          pa_00FC[0x0004]                                               // 0x00FC(0x0004)
    FString                                       Team1;                                                        // 0x0100(0x0010)
    FString                                       Mode;                                                         // 0x0110(0x0010)
    FString                                       VoiceSessionID;                                               // 0x0120(0x0010)
    FString                                       MUCName;                                                      // 0x0130(0x0010)
    FString                                       TeamMatchToken;                                               // 0x0140(0x0010)
    FString                                       QueueID;                                                      // 0x0150(0x0010)
    FString                                       GamePodId;                                                    // 0x0160(0x0010)
    FString                                       ProvisioningFlowID;                                           // 0x0170(0x0010)
    enum class EProvisioningFlowID                ProvisioningFlowEnum;                                         // 0x0180(0x0001)
    bool                                          IsRanked;                                                     // 0x0181(0x0001)
    char                                          pa_0182[0x0006]                                               // 0x0182(0x0006)
    int64_t                                       PhaseTimeRemainingNS;                                         // 0x0188(0x0008)
    int64_t                                       StepTimeRemainingNS;                                          // 0x0190(0x0008)
    bool                                          AltModesFlagADA;                                              // 0x0198(0x0001)
    char                                          pa_0199[0x0007]                                               // 0x0199(0x0007)
    FTournamentMetadata                           TournamentMetadata;                                           // 0x01A0(0x0088)
    FTournamentRosterMetadata                     RosterMetadata;                                               // 0x0228(0x0070)
};


// ScriptStruct  ShooterGame.PregameMatchCoach
// Struct Size::0x0020
struct FPregameMatchCoach
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FName                                         TeamID;                                                       // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.PregameTeam
// Struct Size::0x0020
struct FPregameTeam
{
    TArray<FPregameMatchPlayer>                   Players;                                                      // 0x0000(0x0010)
    FName                                         TeamID;                                                       // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.PregameMatchPlayer
// Struct Size::0x0110
struct FPregameMatchPlayer
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       CharacterID;                                                  // 0x0010(0x0010)
    FString                                       CharacterSelectionState;                                      // 0x0020(0x0010)
    FString                                       PregamePlayerState;                                           // 0x0030(0x0010)
    int32_t                                       CompetitiveTier;                                              // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FPlayerIdentity                               PlayerIdentity;                                               // 0x0048(0x0048)
    FMMRSeasonBadgeInfo                           SeasonalBadgeInfo;                                            // 0x0090(0x0078)
    bool                                          IsCaptain;                                                    // 0x0108(0x0001)
    char                                          pa_0109[0x0007]                                               // 0x0109(0x0007)
};


// ScriptStruct  ShooterGame.PregamePlayer
// Struct Size::0x0028
struct FPregamePlayer
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    int64_t                                       Version;                                                      // 0x0010(0x0008)
    FString                                       MatchID;                                                      // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.PregameMUCInfo
// Struct Size::0x0020
struct FPregameMUCInfo
{
    FString                                       Token;                                                        // 0x0000(0x0010)
    FString                                       Room;                                                         // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PremierMatchScoreUpdateDataEvent
// Struct Size::0x0040
struct FPremierMatchScoreUpdateDataEvent : public FGameDataEventBase
{
    char                                          pa_0008[0x0038]                                               // 0x0008(0x0038)
};


// ScriptStruct  ShooterGame.PremierGameDataEventContext
// Struct Size::0x0088
struct FPremierGameDataEventContext
{
    char                                          pa_0000[0x0088]                                               // 0x0000(0x0088)
};


// ScriptStruct  ShooterGame.PremierMatchScoreUpdateDataModel
// Struct Size::0x0030
struct FPremierMatchScoreUpdateDataModel
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  ShooterGame.DivisionWinnerReward
// Struct Size::0x0018
struct FDivisionWinnerReward
{
    enum class EPremierDivisionGroup              DivisionGroup;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FEditableReward*>                      Rewards;                                                      // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.PremierEventDisplay
// Struct Size::0x00A8
struct FPremierEventDisplay
{
    FGuid                                         Uuid;                                                         // 0x0000(0x0010)
    enum class EPremierEventType                  Type;                                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FText                                         Name;                                                         // 0x0018(0x0018)
    FText                                         Description;                                                  // 0x0030(0x0018)
    TSoftClassPtr<UObject>                        Icon;                                                         // 0x0048(0x0030)
    TArray<TSoftClassPtr<UObject>>                MapAssets;                                                    // 0x0078(0x0010)
    TArray<FPremierEventScheduleDateTimes>        ScheduleDateTimes;                                            // 0x0088(0x0010)
    FDateTime                                     EarliestStartTime;                                            // 0x0098(0x0008)
    FDateTime                                     LatestEndTime;                                                // 0x00A0(0x0008)
};


// ScriptStruct  ShooterGame.PremierEventScheduleDateTimes
// Struct Size::0x0010
struct FPremierEventScheduleDateTimes
{
    FDateTime                                     StartTime;                                                    // 0x0000(0x0008)
    FDateTime                                     EndTime;                                                      // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.PremierEvent
// Struct Size::0x0110
struct FPremierEvent
{
    FGuid                                         Uuid;                                                         // 0x0000(0x0010)
    int32_t                                       WeekNumber;                                                   // 0x0010(0x0004)
    enum class EPremierEventDayOfWeek             DayOfWeek;                                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FTimecode                                     StartTime;                                                    // 0x0018(0x0014)
    FTimecode                                     Duration;                                                     // 0x002C(0x0014)
    enum class EPremierEventType                  Type;                                                         // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    FText                                         Name;                                                         // 0x0048(0x0018)
    FText                                         Description;                                                  // 0x0060(0x0018)
    TSoftClassPtr<UObject>                        Icon;                                                         // 0x0078(0x0030)
    TSoftClassPtr<UObject>                        Schedule;                                                     // 0x00A8(0x0030)
    enum class EPremierEventMapSelectionStrategy  MapSelectionStrategy;                                         // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
    TSoftClassPtr<UObject>                        MapPool;                                                      // 0x00E0(0x0030)
};


// ScriptStruct  ShooterGame.PremierEventDivisionSchedule
// Struct Size::0x002C
struct FPremierEventDivisionSchedule
{
    int32_t                                       Division;                                                     // 0x0000(0x0004)
    FTimecode                                     StartTime;                                                    // 0x0004(0x0014)
    FTimecode                                     Duration;                                                     // 0x0018(0x0014)
};


// ScriptStruct  ShooterGame.PremierDivisionData
// Struct Size::0x0060
struct FPremierDivisionData : public FTableRowBase
{
    int32_t                                       Division;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         DivisionName;                                                 // 0x0010(0x0018)
    enum class EPremierDivisionGroup              DivisionGroup;                                                // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FLinearColor                                  PrimaryColor;                                                 // 0x002C(0x0010)
    FLinearColor                                  SecondaryColor;                                               // 0x003C(0x0010)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FTexture*                                     IconTextureSmall;                                             // 0x0050(0x0008)
    FTexture*                                     IconTextureLarge;                                             // 0x0058(0x0008)
};


// ScriptStruct  ShooterGame.PremierRosterMUCToken
// Struct Size::0x0040
struct FPremierRosterMUCToken
{
    FString                                       Typ;                                                          // 0x0000(0x0010)
    FString                                       Chn;                                                          // 0x0010(0x0010)
    FString                                       Tgt;                                                          // 0x0020(0x0010)
    FString                                       Token;                                                        // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.PremierRosterConferenceBody
// Struct Size::0x0010
struct FPremierRosterConferenceBody
{
    FString                                       Conference;                                                   // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PremierMatchLimitInfo
// Struct Size::0x0010
struct FPremierMatchLimitInfo
{
    int32_t                                       LeagueMatchLimit;                                             // 0x0000(0x0004)
    int32_t                                       TournamentLimit;                                              // 0x0004(0x0004)
    int64_t                                       TimeUntilNextResetSeconds;                                    // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.PremierRosterMatchHistory
// Struct Size::0x0030
struct FPremierRosterMatchHistory
{
    TArray<FPremierRosterMatchHistoryMatchEntry>  LeagueMatchHistory;                                           // 0x0000(0x0010)
    TArray<FPremierRosterMatchHistoryTournamentEntry>TournamentMatchHistory;                                    // 0x0010(0x0010)
    TArray<FPremierRosterMatchHistoryScrimEntry>  ScrimMatchHistory;                                            // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.PremierRosterMatchHistoryScrimEntry
// Struct Size::0x0010
struct FPremierRosterMatchHistoryScrimEntry
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PremierRosterMatchHistoryTournamentEntry
// Struct Size::0x00D8
struct FPremierRosterMatchHistoryTournamentEntry
{
    FString                                       TournamentID;                                                 // 0x0000(0x0010)
    uint32_t                                      FinalPlacement;                                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    int64_t                                       FinalPlacementLeaguePointsBonus;                              // 0x0018(0x0008)
    int64_t                                       LeaguePointsBefore;                                           // 0x0020(0x0008)
    int64_t                                       LeaguePointsAfter;                                            // 0x0028(0x0008)
    int64_t                                       LeaguePointsEarned;                                           // 0x0030(0x0008)
    TMap<FString,int64_t>                         MatchEntries;                                                 // 0x0038(0x0050)
    TMap<FString,FPremierRosterMatchHistoryTournamentMatchData>TournamentMatchData;                             // 0x0088(0x0050)
};


// ScriptStruct  ShooterGame.PremierRosterMatchHistoryTournamentMatchData
// Struct Size::0x0020
struct FPremierRosterMatchHistoryTournamentMatchData
{
    int64_t                                       Points;                                                       // 0x0000(0x0008)
    int32_t                                       RoundNumber;                                                  // 0x0008(0x0004)
    int32_t                                       TotalRounds;                                                  // 0x000C(0x0004)
    FString                                       BracketType;                                                  // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PremierRosterMatchHistoryMatchEntry
// Struct Size::0x0028
struct FPremierRosterMatchHistoryMatchEntry
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    int64_t                                       LeaguePointsBefore;                                           // 0x0010(0x0008)
    int64_t                                       LeaguePointsAfter;                                            // 0x0018(0x0008)
    int64_t                                       LeaguePointsEarned;                                           // 0x0020(0x0008)
};


// ScriptStruct  ShooterGame.PremierRosterV2
// Struct Size::0x0180
struct FPremierRosterV2
{
    FString                                       RosterId;                                                     // 0x0000(0x0010)
    FString                                       Affinity;                                                     // 0x0010(0x0010)
    FString                                       Name;                                                         // 0x0020(0x0010)
    FString                                       Tag;                                                          // 0x0030(0x0010)
    FPremierRosterCustomization                   Customization;                                                // 0x0040(0x0040)
    TArray<FPremierRosterV2Member>                Members;                                                      // 0x0080(0x0010)
    TArray<FPremierRosterV2Invite>                Invites;                                                      // 0x0090(0x0010)
    TArray<FPremierRosterV2Lock>                  Locks;                                                        // 0x00A0(0x0010)
    FPremierRosterV2SeasonData                    Season;                                                       // 0x00B0(0x00A0)
    int32_t                                       MinimumRequiredMembersForEnrollment;                          // 0x0150(0x0004)
    int32_t                                       MatchesSinceReset;                                            // 0x0154(0x0004)
    int32_t                                       TournamentsSinceReset;                                        // 0x0158(0x0004)
    char                                          pa_015C[0x0004]                                               // 0x015C(0x0004)
    FPremierRosterV2Version                       Version;                                                      // 0x0160(0x0010)
    int64_t                                       UpdatedAt;                                                    // 0x0170(0x0008)
    int64_t                                       CreatedAt;                                                    // 0x0178(0x0008)
};


// ScriptStruct  ShooterGame.PremierRosterV2Version
// Struct Size::0x0010
struct FPremierRosterV2Version
{
    int64_t                                       SocialVersion;                                                // 0x0000(0x0008)
    int64_t                                       PremierVersion;                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.PremierRosterV2SeasonData
// Struct Size::0x00A0
struct FPremierRosterV2SeasonData
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    bool                                          IsEnrolled;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FString                                       Conference;                                                   // 0x0018(0x0010)
    int32_t                                       Division;                                                     // 0x0028(0x0004)
    bool                                          IsProvisionalDivision;                                        // 0x002C(0x0001)
    bool                                          PromotionApplied;                                             // 0x002D(0x0001)
    char                                          pa_002E[0x0002]                                               // 0x002E(0x0002)
    int64_t                                       Points;                                                       // 0x0030(0x0008)
    int32_t                                       Wins;                                                         // 0x0038(0x0004)
    int32_t                                       GamesPlayed;                                                  // 0x003C(0x0004)
    enum class EPremierCrestType                  Crest;                                                        // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    TMap<FString,FPremierMatch>                   Matches;                                                      // 0x0048(0x0050)
    bool                                          HasEarnedPromotionForNextSeason;                              // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
};


// ScriptStruct  ShooterGame.PremierMatch
// Struct Size::0x0078
struct FPremierMatch
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    FString                                       SeasonID;                                                     // 0x0010(0x0010)
    FString                                       EventID;                                                      // 0x0020(0x0010)
    int64_t                                       StartTime;                                                    // 0x0030(0x0008)
    FPointDeltas                                  PointDeltas;                                                  // 0x0038(0x0018)
    enum class EMatchOutcome                      Outcome;                                                      // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
    TArray<FString>                               Participants;                                                 // 0x0058(0x0010)
    FString                                       OpponentRosterID;                                             // 0x0068(0x0010)
};


// ScriptStruct  ShooterGame.PointDeltas
// Struct Size::0x0018
struct FPointDeltas
{
    int64_t                                       Before;                                                       // 0x0000(0x0008)
    int64_t                                       After;                                                        // 0x0008(0x0008)
    int64_t                                       Earned;                                                       // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.PremierRosterV2Lock
// Struct Size::0x0030
struct FPremierRosterV2Lock
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       ClientName;                                                   // 0x0010(0x0010)
    int64_t                                       CreatedAt;                                                    // 0x0020(0x0008)
    int64_t                                       ExpiresAt;                                                    // 0x0028(0x0008)
};


// ScriptStruct  ShooterGame.PremierRosterV2Invite
// Struct Size::0x0058
struct FPremierRosterV2Invite
{
    FString                                       RosterID;                                                     // 0x0000(0x0010)
    FString                                       RosterName;                                                   // 0x0010(0x0010)
    FString                                       RosterTag;                                                    // 0x0020(0x0010)
    FString                                       Puuid;                                                        // 0x0030(0x0010)
    FString                                       SenderPuuid;                                                  // 0x0040(0x0010)
    int64_t                                       CreatedAt;                                                    // 0x0050(0x0008)
};


// ScriptStruct  ShooterGame.PremierRosterV2Member
// Struct Size::0x0030
struct FPremierRosterV2Member
{
    FString                                       Puuid;                                                        // 0x0000(0x0010)
    FString                                       Role;                                                         // 0x0010(0x0010)
    int64_t                                       RoleID;                                                       // 0x0020(0x0008)
    int64_t                                       CreatedAt;                                                    // 0x0028(0x0008)
};


// ScriptStruct  ShooterGame.PremierPlayerV2
// Struct Size::0x0048
struct FPremierPlayerV2
{
    FString                                       Puuid;                                                        // 0x0000(0x0010)
    FString                                       RosterId;                                                     // 0x0010(0x0010)
    TArray<FPremierRosterV2Invite>                Invites;                                                      // 0x0020(0x0010)
    int64_t                                       Version;                                                      // 0x0030(0x0008)
    int64_t                                       CreatedAt;                                                    // 0x0038(0x0008)
    int64_t                                       UpdatedAt;                                                    // 0x0040(0x0008)
};


// ScriptStruct  ShooterGame.PremierRoster
// Struct Size::0x0158
struct FPremierRoster
{
    FString                                       Id;                                                           // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       Tag;                                                          // 0x0020(0x0010)
    int32_t                                       LeaguePoints;                                                 // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       Conference;                                                   // 0x0038(0x0010)
    int32_t                                       Division;                                                     // 0x0048(0x0004)
    bool                                          IsProvisionalDivision;                                        // 0x004C(0x0001)
    bool                                          PromotionApplied;                                             // 0x004D(0x0001)
    char                                          pa_004E[0x0002]                                               // 0x004E(0x0002)
    int32_t                                       LeaguePointsBonusMatchesRemaining;                            // 0x0050(0x0004)
    int32_t                                       LeaguePointsBonusMatchesTotal;                                // 0x0054(0x0004)
    int32_t                                       LeagueMatchesPlayed;                                          // 0x0058(0x0004)
    int32_t                                       TournamentsPlayed;                                            // 0x005C(0x0004)
    bool                                          IsEnrolled;                                                   // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    int32_t                                       MinimumRequiredMembersForEnrollment;                          // 0x0064(0x0004)
    int64_t                                       Version;                                                      // 0x0068(0x0008)
    int32_t                                       Wins;                                                         // 0x0070(0x0004)
    int32_t                                       GamesPlayed;                                                  // 0x0074(0x0004)
    FPremierRosterCustomization                   CustomizationData;                                            // 0x0078(0x0040)
    FPremierRosterV2SeasonData                    Season;                                                       // 0x00B8(0x00A0)
};


// ScriptStruct  ShooterGame.PremierChangeRole
// Struct Size::0x0010
struct FPremierChangeRole
{
    FString                                       Role;                                                         // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PremierRosterV2Creation
// Struct Size::0x0040
struct FPremierRosterV2Creation
{
    FString                                       OwnerSubject;                                                 // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       Tag;                                                          // 0x0020(0x0010)
    FString                                       Conference;                                                   // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.PremierSeasonsDTO
// Struct Size::0x0010
struct FPremierSeasonsDTO
{
    TArray<FPremierSeasonDTO>                     PremierSeasons;                                               // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PremierSeasonDTO
// Struct Size::0x0128
struct FPremierSeasonDTO
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FGuid                                         CompetitiveSeasonID;                                          // 0x0010(0x0010)
    FGuid                                         PreviousPremierSeasonID;                                      // 0x0020(0x0010)
    FGuid                                         NextPremierSeasonID;                                          // 0x0030(0x0010)
    bool                                          IsActive;                                                     // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    TArray<FPremierEventDTO>                      Events;                                                       // 0x0048(0x0010)
    TArray<FPremierScheduledEventDTO>             ScheduledEvents;                                              // 0x0058(0x0010)
    FDateTime                                     StartTime;                                                    // 0x0068(0x0008)
    FDateTime                                     EndTime;                                                      // 0x0070(0x0008)
    TMap<FString,FPremierEventPresets>            EventPresets;                                                 // 0x0078(0x0050)
    TArray<FPremierConference>                    Conferences;                                                  // 0x00C8(0x0010)
    TArray<FPremierDivision>                      Divisions;                                                    // 0x00D8(0x0010)
    FDateTime                                     EnrollmentPhaseStartDateTime;                                 // 0x00E8(0x0008)
    FDateTime                                     EnrollmentPhaseEndDateTime;                                   // 0x00F0(0x0008)
    TArray<FPremierDivisionThresholdDTO>          DivisionThresholds;                                           // 0x00F8(0x0010)
    int32_t                                       FlawlessPointRequirement;                                     // 0x0108(0x0004)
    int32_t                                       ChampionshipPointRequirement;                                 // 0x010C(0x0004)
    FString                                       ChampionshipEventID;                                          // 0x0110(0x0010)
    FDateTime                                     LeaderboardFinalizationDateTime;                              // 0x0120(0x0008)
};


// ScriptStruct  ShooterGame.PremierDivisionThresholdDTO
// Struct Size::0x0058
struct FPremierDivisionThresholdDTO
{
    FString                                       Conference;                                                   // 0x0000(0x0010)
    int32_t                                       Division;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       PlayoffThresholdType;                                         // 0x0018(0x0010)
    int32_t                                       PlayoffThresholdValue;                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       PromotionThresholdType;                                       // 0x0030(0x0010)
    int32_t                                       PromotionThresholdValue;                                      // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       PromotionConference;                                          // 0x0048(0x0010)
};


// ScriptStruct  ShooterGame.PremierDivision
// Struct Size::0x0038
struct FPremierDivision
{
    int32_t                                       Division;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       DivisionName;                                                 // 0x0008(0x0010)
    FString                                       DivisionGroup;                                                // 0x0018(0x0010)
    FString                                       EventPresetName;                                              // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.PremierConference
// Struct Size::0x0048
struct FPremierConference
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FString                                       Key;                                                          // 0x0010(0x0010)
    bool                                          IsSuper;                                                      // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FString>                               GamePods;                                                     // 0x0028(0x0010)
    FString                                       Timezone;                                                     // 0x0038(0x0010)
};


// ScriptStruct  ShooterGame.PremierEventPresets
// Struct Size::0x0050
struct FPremierEventPresets
{
    TMap<enum class EPremierEventType,FPremierEventPreset>EventPresetsByEventType;                              // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.PremierEventPreset
// Struct Size::0x0058
struct FPremierEventPreset
{
    FString                                       EventPresetName;                                              // 0x0000(0x0010)
    FString                                       EventType;                                                    // 0x0010(0x0010)
    int64_t                                       BestOfN;                                                      // 0x0020(0x0008)
    FString                                       MatchmakingStrategy;                                          // 0x0028(0x0010)
    FString                                       QueueID;                                                      // 0x0038(0x0010)
    FPointsConfig                                 PointsConfig;                                                 // 0x0048(0x0010)
};


// ScriptStruct  ShooterGame.PointsConfig
// Struct Size::0x0010
struct FPointsConfig
{
    int64_t                                       PointsForWin;                                                 // 0x0000(0x0008)
    int64_t                                       PointsForLoss;                                                // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.PremierEventDTO
// Struct Size::0x00A0
struct FPremierEventDTO
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FString                                       Type;                                                         // 0x0010(0x0010)
    TArray<FPremierEventDivisionScheduleDTO>      SchedulePerDivision;                                          // 0x0020(0x0010)
    TMap<FString,FPremierEventConferenceScheduleDTO>SchedulePerConference;                                      // 0x0030(0x0050)
    FString                                       MapSelectionStrategy;                                         // 0x0080(0x0010)
    TArray<FGuid>                                 MapPoolMapIds;                                                // 0x0090(0x0010)
};


// ScriptStruct  ShooterGame.PremierEventConferenceScheduleDTO
// Struct Size::0x0020
struct FPremierEventConferenceScheduleDTO
{
    FString                                       Conference;                                                   // 0x0000(0x0010)
    FDateTime                                     StartDateTime;                                                // 0x0010(0x0008)
    FDateTime                                     EndDateTime;                                                  // 0x0018(0x0008)
};


// ScriptStruct  ShooterGame.PremierEventDivisionScheduleDTO
// Struct Size::0x0030
struct FPremierEventDivisionScheduleDTO
{
    int32_t                                       Division;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FDateTime                                     StartDateTime;                                                // 0x0008(0x0008)
    FDateTime                                     EndDateTime;                                                  // 0x0010(0x0008)
    FString                                       QueueID;                                                      // 0x0018(0x0010)
    int32_t                                       RequiredMaxLeaguePoints;                                      // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.PremierDivisions
// Struct Size::0x0010
struct FPremierDivisions
{
    TArray<FPremierDivision>                      PremierDivisions;                                             // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PremierConferences
// Struct Size::0x0010
struct FPremierConferences
{
    TArray<FPremierConference>                    PremierConferences;                                           // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PresenceResourceMap
// Struct Size::0x0050
struct FPresenceResourceMap
{
    TMap<FString,FPresenceProductMap>             Map;                                                          // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.PresenceProductMap
// Struct Size::0x0050
struct FPresenceProductMap
{
    TMap<FString,FAresPresenceInfo>               Map;                                                          // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.AresPresenceInfo
// Struct Size::0x0280
struct FAresPresenceInfo
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Pid;                                                          // 0x0010(0x0010)
    FString                                       Resource;                                                     // 0x0020(0x0010)
    FString                                       Subject;                                                      // 0x0030(0x0010)
    FString                                       Product;                                                      // 0x0040(0x0010)
    enum class EChatPresenceProduct               ProductEnum;                                                  // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
    FString                                       Patchline;                                                    // 0x0058(0x0010)
    FString                                       Platform;                                                     // 0x0068(0x0010)
    FString                                       State;                                                        // 0x0078(0x0010)
    enum class EChatPresenceState                 StateEnum;                                                    // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
    int64_t                                       Time;                                                         // 0x0090(0x0008)
    FString                                       Msg;                                                          // 0x0098(0x0010)
    FString                                       Actor;                                                        // 0x00A8(0x0010)
    FString                                       Details;                                                      // 0x00B8(0x0010)
    FString                                       Location;                                                     // 0x00C8(0x0010)
    FString                                       Private;                                                      // 0x00D8(0x0010)
    FAresPresenceData                             Data;                                                         // 0x00E8(0x0198)
};


// ScriptStruct  ShooterGame.AresPresenceData
// Struct Size::0x0198
struct FAresPresenceData
{
    bool                                          IsValid;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       SessionLoopState;                                             // 0x0008(0x0010)
    FString                                       PartyOwnerSessionLoopState;                                   // 0x0018(0x0010)
    FText                                         CustomGameName;                                               // 0x0028(0x0018)
    FString                                       CustomGameTeam;                                               // 0x0040(0x0010)
    FString                                       PartyOwnerMatchMap;                                           // 0x0050(0x0010)
    FString                                       PartyOwnerMatchCurrentTeam;                                   // 0x0060(0x0010)
    int32_t                                       PartyOwnerMatchScoreAllyTeam;                                 // 0x0070(0x0004)
    int32_t                                       PartyOwnerMatchScoreEnemyTeam;                                // 0x0074(0x0004)
    enum class EProvisioningFlowID                PartyOwnerProvisioningFlow;                                   // 0x0078(0x0001)
    enum class EProvisioningFlowID                ProvisioningFlow;                                             // 0x0079(0x0001)
    char                                          pa_007A[0x0006]                                               // 0x007A(0x0006)
    FString                                       MatchMap;                                                     // 0x0080(0x0010)
    FString                                       PartyID;                                                      // 0x0090(0x0010)
    bool                                          IsPartyOwner;                                                 // 0x00A0(0x0001)
    char                                          pa_00A1[0x0007]                                               // 0x00A1(0x0007)
    FString                                       PartyState;                                                   // 0x00A8(0x0010)
    FString                                       PartyAccessibility;                                           // 0x00B8(0x0010)
    int32_t                                       MaxPartySize;                                                 // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    FString                                       QueueID;                                                      // 0x00D0(0x0010)
    bool                                          PartyLFM;                                                     // 0x00E0(0x0001)
    char                                          pa_00E1[0x0007]                                               // 0x00E1(0x0007)
    FString                                       PartyClientVersion;                                           // 0x00E8(0x0010)
    int32_t                                       PartySize;                                                    // 0x00F8(0x0004)
    char                                          pa_00FC[0x0004]                                               // 0x00FC(0x0004)
    FString                                       TournamentID;                                                 // 0x0100(0x0010)
    FString                                       RosterID;                                                     // 0x0110(0x0010)
    int64_t                                       PartyVersion;                                                 // 0x0120(0x0008)
    FDateTime                                     QueueEntryTime;                                               // 0x0128(0x0008)
    FString                                       PlayerCardID;                                                 // 0x0130(0x0010)
    FString                                       PlayerTitleID;                                                // 0x0140(0x0010)
    FString                                       PreferredLevelBorderID;                                       // 0x0150(0x0010)
    int32_t                                       AccountLevel;                                                 // 0x0160(0x0004)
    int32_t                                       CompetitiveTier;                                              // 0x0164(0x0004)
    int32_t                                       LeaderboardPosition;                                          // 0x0168(0x0004)
    bool                                          IsIdle;                                                       // 0x016C(0x0001)
    char                                          pa_016D[0x0003]                                               // 0x016D(0x0003)
    FString                                       TempValueX;                                                   // 0x0170(0x0010)
    FString                                       TempValueY;                                                   // 0x0180(0x0010)
    bool                                          TempValueZ;                                                   // 0x0190(0x0001)
    bool                                          TempValueW;                                                   // 0x0191(0x0001)
    char                                          TempValueV;                                                   // 0x0192(0x0001)
    char                                          pa_0193[0x0005]                                               // 0x0193(0x0005)
};


// ScriptStruct  ShooterGame.ChatPresenceDeleteRequest
// Struct Size::0x0010
struct FChatPresenceDeleteRequest
{
    FString                                       Product;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ChatPresenceUpdateRequest
// Struct Size::0x0200
struct FChatPresenceUpdateRequest
{
    FString                                       State;                                                        // 0x0000(0x0010)
    FString                                       Msg;                                                          // 0x0010(0x0010)
    FAresPresenceDataWrapper                      Private;                                                      // 0x0020(0x0198)
    FChatPresenceSharedData                       Shared;                                                       // 0x01B8(0x0048)
};


// ScriptStruct  ShooterGame.ChatPresenceSharedData
// Struct Size::0x0048
struct FChatPresenceSharedData
{
    FString                                       Actor;                                                        // 0x0000(0x0010)
    FString                                       Details;                                                      // 0x0010(0x0010)
    FString                                       Location;                                                     // 0x0020(0x0010)
    FString                                       Product;                                                      // 0x0030(0x0010)
    int64_t                                       Time;                                                         // 0x0040(0x0008)
};


// ScriptStruct  ShooterGame.AresPresenceDataWrapper
// Struct Size::0x0198
struct FAresPresenceDataWrapper
{
    FAresPresenceData                             AresData;                                                     // 0x0000(0x0198)
};


// ScriptStruct  ShooterGame.PresenceData
// Struct Size::0x01A0
struct FPresenceData
{
    int32_t                                       PresenceCounter;                                              // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FAresPresenceDataWrapper                      AresDataWrapper;                                              // 0x0008(0x0198)
};


// ScriptStruct  ShooterGame.ProgressModelSet
// Struct Size::0x0030
struct FProgressModelSet
{
    TScriptInterface<IProgressModel>              ProgressModel;                                                // 0x0000(0x0010)
    char                                          pa_0010[0x0020]                                               // 0x0010(0x0020)
};


// ScriptStruct  ShooterGame.ProjectileThrowTuning
// Struct Size::0x0040
struct FProjectileThrowTuning
{
    FGameFeatureSubclass                          ProjectileClass;                                              // 0x0000(0x0018)
    FProjectile*                                  ProjectileType;                                               // 0x0018(0x0008)
    float                                         SpeedScale;                                                   // 0x0020(0x0004)
    float                                         UpwardArc;                                                    // 0x0024(0x0004)
    float                                         UpwardShift;                                                  // 0x0028(0x0004)
    FVector                                       ThrowOffset;                                                  // 0x002C(0x000C)
    float                                         ThrowDelay;                                                   // 0x0038(0x0004)
    bool                                          bJumpThrowNormalization;                                      // 0x003C(0x0001)
    bool                                          bJumpThrowNormalization;                                      // 0x003D(0x0001)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
};


// ScriptStruct  ShooterGame.ProjectileCollisionResponse
// Struct Size::0x0010
struct FProjectileCollisionResponse
{
    enum class EProjectileCollisionProcessInstructionProcessInstruction;                                        // 0x0000(0x0001)
    bool                                          bVelocitySet;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    FVector                                       Velocity;                                                     // 0x0004(0x000C)
};


// ScriptStruct  ShooterGame.ProjectileEstimationInfo
// Struct Size::0x0034
struct FProjectileEstimationInfo
{
    float                                         ProjectileSpeed;                                              // 0x0000(0x0004)
    float                                         ProjectileGravityScale;                                       // 0x0004(0x0004)
    FVector                                       ImpartActorVelocityPercentVector;                             // 0x0008(0x000C)
    float                                         ImpartVelocityMatchingDirectionFraction;                      // 0x0014(0x0004)
    bool                                          bUseTrueVerticalVelocity;                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         DownwardVelocityScale;                                        // 0x001C(0x0004)
    char                                          bBounceAngleAffectsFriction;                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         Bounciness;                                                   // 0x0024(0x0004)
    float                                         Friction;                                                     // 0x0028(0x0004)
    float                                         BounceVelocityProjectileStopThreshold;                        // 0x002C(0x0004)
    float                                         BounceStopSurfaceAngle;                                       // 0x0030(0x0004)
};


// ScriptStruct  ShooterGame.PureEffectInstancePool
// Struct Size::0x0020
struct FPureEffectInstancePool
{
    TArray<FPureEffectInstance*>                  Pooled;                                                       // 0x0000(0x0010)
    TArray<FPureEffectInstance*>                  Active;                                                       // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.RegisterDeviceRequest
// Struct Size::0x0030
struct FRegisterDeviceRequest
{
    FString                                       device;                                                       // 0x0000(0x0010)
    FString                                       platform;                                                     // 0x0010(0x0010)
    FString                                       locale;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.RankChargeInfo
// Struct Size::0x0008
struct FRankChargeInfo
{
    float                                         CostToBuyRank;                                                // 0x0000(0x0004)
    int32_t                                       NumCharges;                                                   // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.RateLimiter
// Struct Size::0x0030
struct FRateLimiter
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
    enum class ERateLimiterMethod                 RateLimiterMethod;                                            // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         CooldownSeconds;                                              // 0x001C(0x0004)
    uint32_t                                      MaxActionInTimeWindow;                                        // 0x0020(0x0004)
    float                                         RollingTimeWindowDurationSeconds;                             // 0x0024(0x0004)
    float                                         ExtendedCooldownSeconds;                                      // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.ReflectedPlayerSettings
// Struct Size::0x01E0
struct FReflectedPlayerSettings
{
    TMap<FName,FBaseFloatSetting>                 FloatSettings;                                                // 0x0000(0x0050)
    TMap<FName,FBaseIntSetting>                   IntSettings;                                                  // 0x0050(0x0050)
    TMap<FName,FBaseBoolSetting>                  BoolSettings;                                                 // 0x00A0(0x0050)
    TMap<FName,FFloatSettingChangedDelegateList>  FloatSettingChangedEvents;                                    // 0x00F0(0x0050)
    TMap<FName,FIntSettingChangedDelegateList>    IntSettingChangedEvents;                                      // 0x0140(0x0050)
    TMap<FName,FBoolSettingChangedDelegateList>   BoolSettingChangedEvents;                                     // 0x0190(0x0050)
};


// ScriptStruct  ShooterGame.ReloadStateVariables
// Struct Size::0x0018
struct FReloadStateVariables
{
    FStateComponent*                              ScriptInterruptState;                                         // 0x0000(0x0008)
    FStateTransitionContext*                      ScriptInterruptContext;                                       // 0x0008(0x0008)
    int32_t                                       NumReloadsDone;                                               // 0x0010(0x0004)
    int32_t                                       NumCyclesCompleted;                                           // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.RemainingBalanceInfo
// Struct Size::0x0040
struct FRemainingBalanceInfo
{
    bool                                          HasSufficientFunds;                                           // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       RemainingFunds;                                               // 0x0004(0x0004)
    int32_t                                       BalanceBeforePurchase;                                        // 0x0008(0x0004)
    FGuid                                         CurrencyId;                                                   // 0x000C(0x0010)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FText                                         RemainingFundsMessage;                                        // 0x0020(0x0018)
    bool                                          RemainingFundsApplicable;                                     // 0x0038(0x0001)
    bool                                          IsNegativeDelta;                                              // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
};


// ScriptStruct  ShooterGame.RemoteCharacterUpdate
// Struct Size::0x0020
struct FRemoteCharacterUpdate
{
    uint32_t                                      ShooterCharacterNetGuidValue;                                 // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FComponentDataStream                          ComponentDataStream;                                          // 0x0008(0x0018)
};


// ScriptStruct  ShooterGame.RemoteClientMovementSnapShot
// Struct Size::0x0024
struct FRemoteClientMovementSnapShot
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    FVector                                       Acceleration;                                                 // 0x0018(0x000C)
};


// ScriptStruct  ShooterGame.AresTeamListEntry
// Struct Size::0x0008
struct FAresTeamListEntry
{
    FBaseTeamComponent*                           Team;                                                         // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.RemoteNetworkedInfo
// Struct Size::0x0028
struct FRemoteNetworkedInfo : public FAresTeamListEntry
{
    char                                          pa_0008[0x0020]                                               // 0x0008(0x0020)
};


// ScriptStruct  ShooterGame.ReplayMetadata
// Struct Size::0x0060
struct FReplayMetadata
{
    TArray<FReplayPlayerData>                     PlayersData;                                                  // 0x0000(0x0010)
    uint32_t                                      NetworkVersion;                                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       ReplayVersion;                                                // 0x0018(0x0010)
    uint32_t                                      ReplayCL;                                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       PlatformName;                                                 // 0x0030(0x0010)
    bool                                          LiveStream;                                                   // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    uint32_t                                      NumChunks;                                                    // 0x0044(0x0004)
    uint32_t                                      TotalTime;                                                    // 0x0048(0x0004)
    bool                                          Compressed;                                                   // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
    uint32_t                                      CompressionType;                                              // 0x0050(0x0004)
    uint32_t                                      CompressionLevel;                                             // 0x0054(0x0004)
    uint32_t                                      AbsSize;                                                      // 0x0058(0x0004)
    bool                                          SaveEventMetaToDB;                                            // 0x005C(0x0001)
    char                                          pa_005D[0x0003]                                               // 0x005D(0x0003)
};


// ScriptStruct  ShooterGame.ReplayPlayerData
// Struct Size::0x0010
struct FReplayPlayerData
{
    FString                                       Identifier;                                                   // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ReplayEventListResult
// Struct Size::0x0010
struct FReplayEventListResult
{
    TArray<FReplayEvent>                          events;                                                       // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ReplayEvent
// Struct Size::0x0038
struct FReplayEvent
{
    FString                                       id;                                                           // 0x0000(0x0010)
    FString                                       group;                                                        // 0x0010(0x0010)
    FString                                       meta;                                                         // 0x0020(0x0010)
    uint32_t                                      time1;                                                        // 0x0030(0x0004)
    uint32_t                                      time2;                                                        // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.ReplayCatalogResult
// Struct Size::0x0018
struct FReplayCatalogResult
{
    FString                                       Url;                                                          // 0x0000(0x0010)
    int64_t                                       ExpirationSecSinceEpoch;                                      // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.ReplayCharacterUpdate
// Struct Size::0x0018
struct FReplayCharacterUpdate
{
    char                                          Stamp;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0017]                                               // 0x0001(0x0017)
};


// ScriptStruct  ShooterGame.RoundStartEvent
// Struct Size::0x0004
struct FRoundStartEvent
{
    int32_t                                       RoundNumber;                                                  // 0x0000(0x0004)
};


// ScriptStruct  ShooterGame.EquippableResourceResponse
// Struct Size::0x0010
struct FEquippableResourceResponse
{
    FResourceComponent*                           ResourceComponent;                                            // 0x0000(0x0008)
    FStateComponent*                              State;                                                        // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.EquippableInventoryEventResponse
// Struct Size::0x0060
struct FEquippableInventoryEventResponse
{
    enum class EEquipType                         EquipType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TSet<FAresEquippable*>                        Equippables;                                                  // 0x0008(0x0050)
    FStateComponent*                              ToState;                                                      // 0x0058(0x0008)
};


// ScriptStruct  ShooterGame.ActorContextResponse
// Struct Size::0x0030
struct FActorContextResponse
{
    enum class EActorEvent                        Event;                                                        // 0x0000(0x0001)
    enum class EActorCombination                  Combination;                                                  // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<AActor*>                               ActorsToRespond;                                              // 0x0008(0x0010)
    FName                                         StateName;                                                    // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FStateComponent*                              State;                                                        // 0x0028(0x0008)
};


// ScriptStruct  ShooterGame.TriggerEventInputResponse
// Struct Size::0x0020
struct FTriggerEventInputResponse
{
    FTriggerInput                                 Input;                                                        // 0x0000(0x0002)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         Delay;                                                        // 0x0004(0x0004)
    bool                                          bCanRespondOutOfGameplay;                                     // 0x0008(0x0001)
    bool                                          bCanRespondInSpawnZone;                                       // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    FDelegate                                     Delegate;                                                     // 0x000C(0x0014)
};


// ScriptStruct  ShooterGame.StateChangeInputResponse
// Struct Size::0x0020
struct FStateChangeInputResponse
{
    FTriggerInput                                 Input;                                                        // 0x0000(0x0002)
    enum class EAresActivationInputType           ActivationType;                                               // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FName                                         StateName;                                                    // 0x0004(0x000C)
    float                                         Delay;                                                        // 0x0010(0x0004)
    bool                                          bCanRespondOutOfGameplay;                                     // 0x0014(0x0001)
    bool                                          bCanRespondWhileSuppressed;                                   // 0x0015(0x0001)
    bool                                          bCanRespondInSpawnZone;                                       // 0x0016(0x0001)
    char                                          pa_0017[0x0001]                                               // 0x0017(0x0001)
    FStateComponent*                              State;                                                        // 0x0018(0x0008)
};


// ScriptStruct  ShooterGame.EDisplayMessage
// Struct Size::0x0020
struct FEDisplayMessage
{
    FString                                       Title;                                                        // 0x0000(0x0010)
    FString                                       Message;                                                      // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.RestrictionsManagerState
// Struct Size::0x01E8
struct FRestrictionsManagerState
{
    FPlayerRestrictionV2                          CurrentPlayerRestrictionV2;                                   // 0x0000(0x0028)
    TMap<FString,FWarningEffect>                  CurrentWarnings;                                              // 0x0028(0x0050)
    TMap<FString,FQueuedNotification*>            CurrentWarningNotifications;                                  // 0x0078(0x0050)
    TMap<FString,FDateTime>                       CurrentQueueRestrictionExpiries;                              // 0x00C8(0x0050)
    TSet<FString>                                 SeenPenalties;                                                // 0x0118(0x0050)
    FPlayerAvoidList                              CachedPlayerAvoidList;                                        // 0x0168(0x0020)
    FString                                       PenalizedMatchID;                                             // 0x0188(0x0010)
    TMap<FString,FString>                         PenalizedPlayers;                                             // 0x0198(0x0050)
};


// ScriptStruct  ShooterGame.PlayerAvoidList
// Struct Size::0x0020
struct FPlayerAvoidList
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    TArray<FAvoidListEntry>                       AvoidList;                                                    // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.AvoidListEntry
// Struct Size::0x0010
struct FAvoidListEntry
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.WarningEffect
// Struct Size::0x0018
struct FWarningEffect
{
    FString                                       WarningType;                                                  // 0x0000(0x0010)
    int64_t                                       WarningTier;                                                  // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.PlayerRestrictionV2
// Struct Size::0x0028
struct FPlayerRestrictionV2
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    TArray<FPlayerPenaltyV2>                      Penalties;                                                    // 0x0010(0x0010)
    int64_t                                       Version;                                                      // 0x0020(0x0008)
};


// ScriptStruct  ShooterGame.PlayerPenaltyV2
// Struct Size::0x0088
struct FPlayerPenaltyV2
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    int64_t                                       IssuingGameStartUnixMillis;                                   // 0x0010(0x0008)
    FDateTime                                     Expiry;                                                       // 0x0018(0x0008)
    int64_t                                       GamesRemaining;                                               // 0x0020(0x0008)
    FWarningEffect                                WarningEffect;                                                // 0x0028(0x0018)
    FQueueRestrictionEffect                       QueueRestrictionEffect;                                       // 0x0040(0x0010)
    FPremierRestrictionEffect                     PremierRestrictionEffect;                                     // 0x0050(0x0030)
    bool                                          IsAutomatedDetection;                                         // 0x0080(0x0001)
    char                                          pa_0081[0x0007]                                               // 0x0081(0x0007)
};


// ScriptStruct  ShooterGame.PremierRestrictionEffect
// Struct Size::0x0030
struct FPremierRestrictionEffect
{
    FString                                       RestrictionType;                                              // 0x0000(0x0010)
    char                                          pa_0010[0x0020]                                               // 0x0010(0x0020)
};


// ScriptStruct  ShooterGame.QueueRestrictionEffect
// Struct Size::0x0010
struct FQueueRestrictionEffect
{
    TArray<FString>                               QueueIDs;                                                     // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ChatFilteringMessage
// Struct Size::0x0050
struct FChatFilteringMessage
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       EffectState;                                                  // 0x0010(0x0010)
    FString                                       Behavior;                                                     // 0x0020(0x0010)
    FString                                       Intervention;                                                 // 0x0030(0x0010)
    FString                                       Recipient;                                                    // 0x0040(0x0010)
};


// ScriptStruct  ShooterGame.AddQueueRestrictionEffect
// Struct Size::0x0018
struct FAddQueueRestrictionEffect
{
    TArray<FString>                               QueueIDs;                                                     // 0x0000(0x0010)
    int64_t                                       SecondsToExpiry;                                              // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.PenaltyNotifyEffect
// Struct Size::0x0018
struct FPenaltyNotifyEffect
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    enum class ERMSNotifyEffectPenaltyEffectState EffectState;                                                  // 0x0010(0x0001)
    enum class ERMSNotifyEffectBehavior           Behavior;                                                     // 0x0011(0x0001)
    enum class ERMSNotifyEffectIntervention       Intervention;                                                 // 0x0012(0x0001)
    enum class ERMSNotifyEffectRecipient          Recipient;                                                    // 0x0013(0x0001)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.AddAvoidListEntryRequest
// Struct Size::0x0038
struct FAddAvoidListEntryRequest
{
    bool                                          OverrideEntries;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       MatchID;                                                      // 0x0008(0x0010)
    FString                                       QueueID;                                                      // 0x0018(0x0010)
    FString                                       Affinity;                                                     // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.PlayerReportTokenResult
// Struct Size::0x0010
struct FPlayerReportTokenResult
{
    FString                                       Token;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.InterventionFeedback
// Struct Size::0x0038
struct FInterventionFeedback
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    int64_t                                       Version;                                                      // 0x0010(0x0008)
    TArray<FString>                               Participants;                                                 // 0x0018(0x0010)
    TArray<FRestrictionsSubjectInfractions>       FlaggedSubjects;                                              // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.RestrictionsSubjectInfractions
// Struct Size::0x0020
struct FRestrictionsSubjectInfractions
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    TArray<enum class EInfractionType>            Infractions;                                                  // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.IdempotentRewindable
// Struct Size::0x0010
struct FIdempotentRewindable
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    enum class ERewindState                       RewindState;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ShooterGame.RiotClientLaunchParams
// Struct Size::0x0090
struct FRiotClientLaunchParams
{
    bool                                          bValid;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       InstallPath;                                                  // 0x0008(0x0010)
    FString                                       CommandLineArgs;                                              // 0x0018(0x0010)
    FString                                       DesiredRegion;                                                // 0x0028(0x0010)
    FRiotPlatformClientSettings                   ClientSettings;                                               // 0x0038(0x0050)
    bool                                          bHeadless;                                                    // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
};


// ScriptStruct  Engine.RiotPlatformClientSettings
// Struct Size::0x0050
struct FRiotPlatformClientSettings
{
    FString                                       Region;                                                       // 0x0000(0x0010)
    FString                                       User;                                                         // 0x0010(0x0010)
    FString                                       Password;                                                     // 0x0020(0x0010)
    bool                                          bGeneratedTestAccount;                                        // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       RNetPort;                                                     // 0x0034(0x0004)
    FString                                       RNetAuthToken;                                                // 0x0038(0x0010)
    bool                                          bInitialized;                                                 // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  ShooterGame.PatchlineMetadata
// Struct Size::0x0060
struct FPatchlineMetadata
{
    FString                                       Product;                                                      // 0x0000(0x0010)
    FString                                       Channel;                                                      // 0x0010(0x0010)
    FString                                       Id;                                                           // 0x0020(0x0010)
    FString                                       PublishedAt;                                                  // 0x0030(0x0010)
    FString                                       ReleaseID;                                                    // 0x0040(0x0010)
    FString                                       DeployedAt;                                                   // 0x0050(0x0010)
};


// ScriptStruct  ShooterGame.RiotClientRegionLocale
// Struct Size::0x0040
struct FRiotClientRegionLocale
{
    FString                                       Locale;                                                       // 0x0000(0x0010)
    FString                                       Region;                                                       // 0x0010(0x0010)
    FString                                       WebLanguage;                                                  // 0x0020(0x0010)
    FString                                       WebRegion;                                                    // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.RiotClientPluginStatus
// Struct Size::0x0010
struct FRiotClientPluginStatus
{
    FString                                       State;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.RSOCredentials
// Struct Size::0x0038
struct FRSOCredentials
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  ShooterGame.RiotStatus
// Struct Size::0x0050
struct FRiotStatus
{
    FString                                       Id;                                                           // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    TArray<FString>                               Locales;                                                      // 0x0020(0x0010)
    TArray<FRiotStatusMaintenance>                Maintenances;                                                 // 0x0030(0x0010)
    TArray<FRiotStatusIncident>                   Incidents;                                                    // 0x0040(0x0010)
};


// ScriptStruct  ShooterGame.RiotStatusIncident
// Struct Size::0x0078
struct FRiotStatusIncident
{
    FString                                       Archive;                                                      // 0x0000(0x0010)
    FString                                       Incident;                                                     // 0x0010(0x0010)
    TArray<FRiotStatusUpdate>                     Updates;                                                      // 0x0020(0x0010)
    FString                                       Created;                                                      // 0x0030(0x0010)
    TArray<FString>                               Platforms;                                                    // 0x0040(0x0010)
    FString                                       Updated;                                                      // 0x0050(0x0010)
    int32_t                                       Id;                                                           // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    TArray<FRiotStatusTranslation>                Titles;                                                       // 0x0068(0x0010)
};


// ScriptStruct  ShooterGame.RiotStatusTranslation
// Struct Size::0x0020
struct FRiotStatusTranslation
{
    FString                                       Content;                                                      // 0x0000(0x0010)
    FString                                       Locale;                                                       // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.RiotStatusUpdate
// Struct Size::0x0060
struct FRiotStatusUpdate
{
    FString                                       Updated;                                                      // 0x0000(0x0010)
    bool                                          Publish;                                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FString                                       Author;                                                       // 0x0018(0x0010)
    FString                                       Created;                                                      // 0x0028(0x0010)
    TArray<FRiotStatusTranslation>                Translations;                                                 // 0x0038(0x0010)
    TArray<FString>                               PublishLocations;                                             // 0x0048(0x0010)
    int32_t                                       Id;                                                           // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  ShooterGame.RiotStatusMaintenance
// Struct Size::0x0078
struct FRiotStatusMaintenance
{
    FString                                       Archive;                                                      // 0x0000(0x0010)
    TArray<FRiotStatusUpdate>                     Updates;                                                      // 0x0010(0x0010)
    FString                                       Created;                                                      // 0x0020(0x0010)
    TArray<FString>                               Platforms;                                                    // 0x0030(0x0010)
    FString                                       Updated;                                                      // 0x0040(0x0010)
    int32_t                                       Id;                                                           // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       Maintenance;                                                  // 0x0058(0x0010)
    TArray<FRiotStatusTranslation>                Titles;                                                       // 0x0068(0x0010)
};


// ScriptStruct  ShooterGame.RiotWarning
// Struct Size::0x0050
struct FRiotWarning
{
    TMap<FString,FRiotWarningMessage>             RiotWarningMessageMap;                                        // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.RiotWarningMessage
// Struct Size::0x0070
struct FRiotWarningMessage
{
    FString                                       AcknowledgeText;                                              // 0x0000(0x0010)
    FString                                       Category;                                                     // 0x0010(0x0010)
    FString                                       Locale;                                                       // 0x0020(0x0010)
    FString                                       Message;                                                      // 0x0030(0x0010)
    FString                                       Title;                                                        // 0x0040(0x0010)
    FString                                       SeeMoreURL;                                                   // 0x0050(0x0010)
    FString                                       SeeMoreLabel;                                                 // 0x0060(0x0010)
};


// ScriptStruct  ShooterGame.RMSNotification
// Struct Size::0x0058
struct FRMSNotification
{
    FString                                       Resource;                                                     // 0x0000(0x0010)
    FString                                       Service;                                                      // 0x0010(0x0010)
    FString                                       Version;                                                      // 0x0020(0x0010)
    int64_t                                       Timestamp;                                                    // 0x0030(0x0008)
    FString                                       Body;                                                         // 0x0038(0x0010)
    FString                                       Payload;                                                      // 0x0048(0x0010)
};


// ScriptStruct  ShooterGame.RMSSession
// Struct Size::0x0001
struct FRMSSession
{
    enum class ERMSConnectionState                State;                                                        // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.RNetProcessInfo
// Struct Size::0x0018
struct FRNetProcessInfo
{
    int32_t                                       PID;                                                          // 0x0000(0x0004)
    int32_t                                       RestartCountdownSeconds;                                      // 0x0004(0x0004)
    FString                                       Status;                                                       // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.RNetEvent
// Struct Size::0x0028
struct FRNetEvent
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  ShooterGame.RiotClientHeartbeatResponse
// Struct Size::0x0001
struct FRiotClientHeartbeatResponse
{
    bool                                          Success;                                                      // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.RiotClientHeartbeat
// Struct Size::0x0008
struct FRiotClientHeartbeat
{
    enum class ERiotClientHeartbeatPhase          Phase;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       SessionTTL;                                                   // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.ClutchMuteTelemetryEvent
// Struct Size::0x0040
struct FClutchMuteTelemetryEvent
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    FString                                       Subject;                                                      // 0x0010(0x0010)
    FString                                       RoomID;                                                       // 0x0020(0x0010)
    int32_t                                       RoundNumber;                                                  // 0x0030(0x0004)
    float                                         GamePhaseElapsedTime;                                         // 0x0034(0x0004)
    float                                         GamePhaseRemainingTime;                                       // 0x0038(0x0004)
    bool                                          EnablingMute;                                                 // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  ShooterGame.PushToTalkSettingsV2
// Struct Size::0x0018
struct FPushToTalkSettingsV2
{
    bool                                          Enabled;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FPushToTalkKeyCombo>                   KeyCombos;                                                    // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.PushToTalkKeyCombo
// Struct Size::0x0020
struct FPushToTalkKeyCombo
{
    TArray<FPushToTalkKeyBinding>                 KeyBindings;                                                  // 0x0000(0x0010)
    FString                                       SessionID;                                                    // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PushToTalkKeyBinding
// Struct Size::0x0004
struct FPushToTalkKeyBinding
{
    uint32_t                                      Key;                                                          // 0x0000(0x0004)
};


// ScriptStruct  ShooterGame.InitializeProviderBody
// Struct Size::0x0010
struct FInitializeProviderBody
{
    FString                                       Provider;                                                     // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.AudioProperties
// Struct Size::0x0004
struct FAudioProperties
{
    int32_t                                       MicEnergy;                                                    // 0x0000(0x0004)
};


// ScriptStruct  ShooterGame.VoiceDevices
// Struct Size::0x0010
struct FVoiceDevices
{
    TArray<FVoiceDevice>                          Devices;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.VoiceDevice
// Struct Size::0x0028
struct FVoiceDevice
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Handle;                                                       // 0x0010(0x0010)
    bool                                          Is;                                                           // 0x0020(0x0001)
    bool                                          Is;                                                           // 0x0021(0x0001)
    bool                                          Is;                                                           // 0x0022(0x0001)
    char                                          pa_0023[0x0005]                                               // 0x0023(0x0005)
};


// ScriptStruct  ShooterGame.VoiceSessions
// Struct Size::0x0010
struct FVoiceSessions
{
    TArray<FVoiceSession>                         Sessions;                                                     // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.VoiceSession
// Struct Size::0x0038
struct FVoiceSession
{
    FString                                       Id;                                                           // 0x0000(0x0010)
    bool                                          IsMuted;                                                      // 0x0010(0x0001)
    bool                                          IsTransmitEnabled;                                            // 0x0011(0x0001)
    bool                                          IsRestricted;                                                 // 0x0012(0x0001)
    char                                          pa_0013[0x0005]                                               // 0x0013(0x0005)
    TArray<FVoiceSessionParticipant>              Participants;                                                 // 0x0018(0x0010)
    FName                                         Status;                                                       // 0x0028(0x000C)
    int32_t                                       Volume;                                                       // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.VoiceSessionProperties
// Struct Size::0x0001
struct FVoiceSessionProperties
{
    bool                                          IsTransmitEnabled;                                            // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.VoiceParticipantSettings
// Struct Size::0x0008
struct FVoiceParticipantSettings
{
    bool                                          IsMuted;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Volume;                                                       // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.RNetVoiceSettingsPTTOnly
// Struct Size::0x0001
struct FRNetVoiceSettingsPTTOnly
{
    bool                                          LocalMicMuted;                                                // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.RNetVoiceSettings
// Struct Size::0x0038
struct FRNetVoiceSettings
{
    FString                                       CurrentCaptureDeviceHandle;                                   // 0x0000(0x0010)
    FString                                       CurrentRenderDeviceHandle;                                    // 0x0010(0x0010)
    int32_t                                       MicLevel;                                                     // 0x0020(0x0004)
    int32_t                                       SpeakerLevel;                                                 // 0x0024(0x0004)
    int32_t                                       VadHangoverTime;                                              // 0x0028(0x0004)
    int32_t                                       VadSensitivity;                                               // 0x002C(0x0004)
    bool                                          LoopbackEnabled;                                              // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  ShooterGame.RiotKeyValueStoredSettingsDTO
// Struct Size::0x00A8
struct FRiotKeyValueStoredSettingsDTO
{
    FSettings                                     Data;                                                         // 0x0000(0x00A8)
};


// ScriptStruct  ShooterGame.Settings
// Struct Size::0x00A8
struct FSettings
{
    int32_t                                       RoamingSetttingsVersion;                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FAresFloatSettingDTO>                  FloatSettings;                                                // 0x0008(0x0010)
    TArray<FAresIntSettingDTO>                    IntSettings;                                                  // 0x0018(0x0010)
    TArray<FAresBoolSettingDTO>                   BoolSettings;                                                 // 0x0028(0x0010)
    TArray<FAresStringSettingDTO>                 StringSettings;                                               // 0x0038(0x0010)
    TArray<FActionMappingDTO>                     ActionMappings;                                               // 0x0048(0x0010)
    TArray<FAxisMappingDTO>                       AxisMappings;                                                 // 0x0058(0x0010)
    TArray<FConsoleSettingDTO>                    ConsoleSettings;                                              // 0x0068(0x0010)
    TArray<FConsoleSettingDTO>                    AudioSettings;                                                // 0x0078(0x0010)
    TArray<FName>                                 SettingsProfiles;                                             // 0x0088(0x0010)
    TArray<FCharacterProfileData>                 SettingsProfileData;                                          // 0x0098(0x0010)
};


// ScriptStruct  ShooterGame.ConsoleSettingDTO
// Struct Size::0x0020
struct FConsoleSettingDTO
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.RosterMUCToken
// Struct Size::0x0040
struct FRosterMUCToken
{
    FString                                       Typ;                                                          // 0x0000(0x0010)
    FString                                       Chn;                                                          // 0x0010(0x0010)
    FString                                       Tgt;                                                          // 0x0020(0x0010)
    FString                                       Token;                                                        // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.RosterRoleChangeBody
// Struct Size::0x0001
struct FRosterRoleChangeBody
{
    enum class ERosterMemberRole                  Role;                                                         // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.RosterCreateBody
// Struct Size::0x0090
struct FRosterCreateBody
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Tag;                                                          // 0x0010(0x0010)
    FRosterMetadata                               Metadata;                                                     // 0x0020(0x0070)
};


// ScriptStruct  ShooterGame.RosterUnverifiedMetadataBody
// Struct Size::0x0040
struct FRosterUnverifiedMetadataBody
{
    FRosterUnverifiedMetadata                     Unverified;                                                   // 0x0000(0x0040)
};


// ScriptStruct  ShooterGame.RosterAffinity
// Struct Size::0x0020
struct FRosterAffinity
{
    FString                                       GameShardZone;                                                // 0x0000(0x0010)
    FString                                       Affinity;                                                     // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.RosterPlayer
// Struct Size::0x0048
struct FRosterPlayer
{
    FString                                       Puuid;                                                        // 0x0000(0x0010)
    int64_t                                       Version;                                                      // 0x0010(0x0008)
    TArray<FRosterInfo>                           Rosters;                                                      // 0x0018(0x0010)
    TArray<FRosterInvite>                         Invites;                                                      // 0x0028(0x0010)
    int64_t                                       UpdatedAt;                                                    // 0x0038(0x0008)
    int64_t                                       CreatedAt;                                                    // 0x0040(0x0008)
};


// ScriptStruct  ShooterGame.RosterInfo
// Struct Size::0x0020
struct FRosterInfo
{
    FString                                       Realm;                                                        // 0x0000(0x0010)
    FString                                       RosterID;                                                     // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.RoundParticipantsInfo
// Struct Size::0x0018
struct FRoundParticipantsInfo
{
    int32_t                                       RoundNumber;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FShooterPlayerState*>                  PenalizedPlayers;                                             // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.RoundRestoreRecoveryOutput
// Struct Size::0x0010
struct FRoundRestoreRecoveryOutput
{
    TArray<FRoundRestoreRoundData>                Rounds;                                                       // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.RoundRestoreSnapshot
// Struct Size::0x0058
struct FRoundRestoreSnapshot
{
    char                                          pa_0000[0x0058]                                               // 0x0000(0x0058)
};


// ScriptStruct  ShooterGame.RoundStateLog
// Struct Size::0x0038
struct FRoundStateLog
{
    FString                                       RoundHeader;                                                  // 0x0000(0x0010)
    TArray<FRoundStateLogPlayer>                  Players;                                                      // 0x0010(0x0010)
    FRoundStateLogMatchState                      MatchState;                                                   // 0x0020(0x0018)
};


// ScriptStruct  ShooterGame.RoundStateLogMatchState
// Struct Size::0x0018
struct FRoundStateLogMatchState
{
    bool                                          bSidesAreSwapped;                                             // 0x0000(0x0001)
    bool                                          bIsOvertime;                                                  // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<FRoundStateLogRoundResult>             RoundHistory;                                                 // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.RoundStateLogRoundResult
// Struct Size::0x0028
struct FRoundStateLogRoundResult
{
    int32_t                                       RoundNumber;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       WinningTeam;                                                  // 0x0008(0x0010)
    FString                                       Outcome;                                                      // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.RoundStateLogPlayer
// Struct Size::0x0078
struct FRoundStateLogPlayer
{
    FString                                       PlayerName;                                                   // 0x0000(0x0010)
    FString                                       CharacterName;                                                // 0x0010(0x0010)
    FString                                       TeamName;                                                     // 0x0020(0x0010)
    FString                                       PrimaryWeapon;                                                // 0x0030(0x0010)
    FString                                       SecondaryWeapon;                                              // 0x0040(0x0010)
    TArray<FRoundStateLogAbility>                 Abilities;                                                    // 0x0050(0x0010)
    int32_t                                       UltimatePoints;                                               // 0x0060(0x0004)
    int32_t                                       Kills;                                                        // 0x0064(0x0004)
    int32_t                                       Deaths;                                                       // 0x0068(0x0004)
    int32_t                                       Assists;                                                      // 0x006C(0x0004)
    int32_t                                       ArmorAmount;                                                  // 0x0070(0x0004)
    int32_t                                       Money;                                                        // 0x0074(0x0004)
};


// ScriptStruct  ShooterGame.RoundStateLogAbility
// Struct Size::0x0018
struct FRoundStateLogAbility
{
    FString                                       AbilityName;                                                  // 0x0000(0x0010)
    int32_t                                       AbilityCharges;                                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.AccessToken
// Struct Size::0x0020
struct FAccessToken
{
    FString                                       Sub;                                                          // 0x0000(0x0010)
    TArray<FAccessTokenFederatedIdentity>         Fi;                                                           // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.AccessTokenFederatedIdentity
// Struct Size::0x0030
struct FAccessTokenFederatedIdentity
{
    FString                                       P;                                                            // 0x0000(0x0010)
    FString                                       Pe;                                                           // 0x0010(0x0010)
    FString                                       Pi;                                                           // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.UserInfoToken
// Struct Size::0x0070
struct FUserInfoToken
{
    FString                                       Sub;                                                          // 0x0000(0x0010)
    FString                                       Country;                                                      // 0x0010(0x0010)
    FString                                       Aud;                                                          // 0x0020(0x0010)
    bool                                          Account;                                                      // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    int64_t                                       Iat;                                                          // 0x0038(0x0008)
    FUserAccount                                  Acct;                                                         // 0x0040(0x0020)
    FBanClaims                                    Ban;                                                          // 0x0060(0x0010)
};


// ScriptStruct  ShooterGame.BanClaims
// Struct Size::0x0010
struct FBanClaims
{
    TArray<FRestrictionClaims>                    Restrictions;                                                 // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.RestrictionClaims
// Struct Size::0x0038
struct FRestrictionClaims
{
    FString                                       Type;                                                         // 0x0000(0x0010)
    FString                                       Scope;                                                        // 0x0010(0x0010)
    FString                                       Reason;                                                       // 0x0020(0x0010)
    FRestrictionInfo                              Dat;                                                          // 0x0030(0x0008)
};


// ScriptStruct  ShooterGame.RestrictionInfo
// Struct Size::0x0008
struct FRestrictionInfo
{
    int64_t                                       ExpirationMillis;                                             // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.UserAccount
// Struct Size::0x0020
struct FUserAccount
{
    FString                                       Game;                                                         // 0x0000(0x0010)
    FString                                       Tag;                                                          // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.RSOParsedIdToken
// Struct Size::0x0048
struct FRSOParsedIdToken
{
    FString                                       Sub;                                                          // 0x0000(0x0010)
    FString                                       Country;                                                      // 0x0010(0x0010)
    uint64_t                                      Exp;                                                          // 0x0020(0x0008)
    FRSOAccount                                   Acct;                                                         // 0x0028(0x0020)
};


// ScriptStruct  ShooterGame.RSOAccount
// Struct Size::0x0020
struct FRSOAccount
{
    FString                                       GameName;                                                     // 0x0000(0x0010)
    FString                                       TagLine;                                                      // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.RSOUserInfo
// Struct Size::0x0048
struct FRSOUserInfo
{
    FString                                       GameName;                                                     // 0x0000(0x0010)
    FString                                       TagLine;                                                      // 0x0010(0x0010)
    FString                                       Subject;                                                      // 0x0020(0x0010)
    FString                                       Country;                                                      // 0x0030(0x0010)
    bool                                          AccountVerified;                                              // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  ShooterGame.ServerNetworkDDoSEscalationEvent
// Struct Size::0x0020
struct FServerNetworkDDoSEscalationEvent
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    int32_t                                       BurstDDoSDetectionEventCount;                                 // 0x0010(0x0004)
    int32_t                                       DDoSActiveDDoSDetectionEventCount;                            // 0x0014(0x0004)
    int32_t                                       SevereDDoSActiveDDoSDetectionEventCount;                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.ServerRoundMetrics
// Struct Size::0x06B8
struct FServerRoundMetrics
{
    int32_t                                       RoundNumber;                                                  // 0x0000(0x0004)
    float                                         FinalMS;                                                      // 0x0004(0x0004)
    float                                         MedianMS;                                                     // 0x0008(0x0004)
    float                                         MedianMS;                                                     // 0x000C(0x0004)
    float                                         MinMS;                                                        // 0x0010(0x0004)
    float                                         MinMS;                                                        // 0x0014(0x0004)
    float                                         MaxMS;                                                        // 0x0018(0x0004)
    float                                         MaxMS;                                                        // 0x001C(0x0004)
    float                                         FlatMeanMS;                                                   // 0x0020(0x0004)
    float                                         FlatMeanMS;                                                   // 0x0024(0x0004)
    float                                         RoundDuration;                                                // 0x0028(0x0004)
    int32_t                                       PlayerCount;                                                  // 0x002C(0x0004)
    int32_t                                       ConcurrentServers;                                            // 0x0030(0x0004)
    FAresObjectMetrics                            ObjectMetrics;                                                // 0x0034(0x0064)
    FAresSystemTelemetryMetrics                   SystemMetrics;                                                // 0x0098(0x05A0)
    FServerFrameBuckets                           FrameBuckets;                                                 // 0x0638(0x001C)
    FMachinePerfStats                             MachinePerfStats;                                             // 0x0654(0x0064)
};


// ScriptStruct  ShooterGame.ServerFilteredPerformanceProfile
// Struct Size::0x00B0
struct FServerFilteredPerformanceProfile
{
    TArray<FServerPerRoundPerformanceData>        PerRoundPerformanceData;                                      // 0x0000(0x0010)
    char                                          GameplayFlagsFilter;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0018(0x0068)
    FServerHardwareInfo                           HardwareInfo;                                                 // 0x0080(0x0030)
};


// ScriptStruct  ShooterGame.ServerPerRoundPerformanceData
// Struct Size::0x06C8
struct FServerPerRoundPerformanceData
{
    int64_t                                       RoundDuration;                                                // 0x0000(0x0008)
    int32_t                                       RoundNumber;                                                  // 0x0008(0x0004)
    FMetric                                       TotalFrameTime;                                               // 0x000C(0x0014)
    FMetric                                       ProcessingTime;                                               // 0x0020(0x0014)
    FAresSystemTelemetryMetrics                   SystemMetrics;                                                // 0x0034(0x05A0)
    FServerFrameBuckets                           FrameBuckets;                                                 // 0x05D4(0x001C)
    FMachinePerfStats                             MachinePerfStats;                                             // 0x05F0(0x0064)
    FAresObjectMetrics                            ObjectMetrics;                                                // 0x0654(0x0064)
    int32_t                                       ConcurrentServers;                                            // 0x06B8(0x0004)
    float                                         MaxTickRate;                                                  // 0x06BC(0x0004)
    char                                          MoveTimestepsPerSecond;                                       // 0x06C0(0x0001)
    char                                          pa_06C1[0x0007]                                               // 0x06C1(0x0007)
};


// ScriptStruct  ShooterGame.ServerEndOfRoundPerformanceProfile
// Struct Size::0x0780
struct FServerEndOfRoundPerformanceProfile
{
    FMetric                                       TotalFrameTime;                                               // 0x0000(0x0014)
    FMetric                                       ProcessingTime;                                               // 0x0014(0x0014)
    FAresSystemTelemetryMetrics                   SystemMetrics;                                                // 0x0028(0x05A0)
    FString                                       MatchID;                                                      // 0x05C8(0x0010)
    int32_t                                       RoundNumber;                                                  // 0x05D8(0x0004)
    char                                          pa_05DC[0x0004]                                               // 0x05DC(0x0004)
    int64_t                                       RoundDuration;                                                // 0x05E0(0x0008)
    int32_t                                       ConcurrentServers;                                            // 0x05E8(0x0004)
    FAresObjectMetrics                            ObjectMetrics;                                                // 0x05EC(0x0064)
    FServerFrameBuckets                           FrameBuckets;                                                 // 0x0650(0x001C)
    FMachinePerfStats                             MachinePerfStats;                                             // 0x066C(0x0064)
    char                                          MoveTimestepsPerSecond;                                       // 0x06D0(0x0001)
    char                                          pa_06D1[0x0003]                                               // 0x06D1(0x0003)
    float                                         MaxTickRate;                                                  // 0x06D4(0x0004)
    FNetworkPacketStats                           NetworkPacketStats;                                           // 0x06D8(0x0054)
    FAntiDDoSPacketStats                          AntiDDoSPacketStats;                                          // 0x072C(0x0050)
    char                                          pa_077C[0x0004]                                               // 0x077C(0x0004)
};


// ScriptStruct  ShooterGame.ServerEndOfRoundPerformanceProfileDatadog
// Struct Size::0x0038
struct FServerEndOfRoundPerformanceProfileDatadog
{
    int32_t                                       RoundNumber;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    int64_t                                       RoundDuration;                                                // 0x0008(0x0008)
    int32_t                                       ConcurrentServers;                                            // 0x0010(0x0004)
    float                                         TotalFrameTimeMeanMs;                                         // 0x0014(0x0004)
    float                                         ProcessingTimeMeanMs;                                         // 0x0018(0x0004)
    int32_t                                       Sub4MsFrames;                                                 // 0x001C(0x0004)
    int32_t                                       Sub8MsFrames;                                                 // 0x0020(0x0004)
    int32_t                                       Sub10MsFrames;                                                // 0x0024(0x0004)
    int32_t                                       Sub20MsFrames;                                                // 0x0028(0x0004)
    int32_t                                       Sub100MsFrames;                                               // 0x002C(0x0004)
    int32_t                                       Sub300MsFrames;                                               // 0x0030(0x0004)
    int32_t                                       Over300MsFrames;                                              // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.RangeModuleInteractionEvent
// Struct Size::0x00C8
struct FRangeModuleInteractionEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FString                                       Subject;                                                      // 0x0068(0x0010)
    FRangeModuleInteractionResults                ModuleInteraction;                                            // 0x0078(0x0030)
    FTelemetryPlatformDetails                     clientPlatformDetails;                                        // 0x00A8(0x0020)
};


// ScriptStruct  ShooterGame.RangeModuleInteractionResults
// Struct Size::0x0030
struct FRangeModuleInteractionResults
{
    FString                                       ModuleName;                                                   // 0x0000(0x0010)
    float                                         FirstInteractionRoundTime;                                    // 0x0010(0x0004)
    float                                         LastInteractionRoundTime;                                     // 0x0014(0x0004)
    float                                         NetInteractionTime;                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FRangeModuleInteraction>               Interactions;                                                 // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.RangeModuleInteraction
// Struct Size::0x0018
struct FRangeModuleInteraction
{
    FString                                       Tag;                                                          // 0x0000(0x0010)
    float                                         Value;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.NewPlayerExperienceJourney
// Struct Size::0x0100
struct FNewPlayerExperienceJourney
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       MatchId;                                                      // 0x0010(0x0010)
    FString                                       ModuleType;                                                   // 0x0020(0x0010)
    FString                                       ModuleDescription;                                            // 0x0030(0x0010)
    FString                                       ModuleStatus;                                                 // 0x0040(0x0010)
    FString                                       ModuleTimestamp;                                              // 0x0050(0x0010)
    FNPEModuleStatistics                          Stats;                                                        // 0x0060(0x0058)
    FTelemetryPlatformDetails                     PlatformDetails;                                              // 0x00B8(0x0020)
    FTelemetryPlatformDetails                     clientPlatformDetails;                                        // 0x00D8(0x0020)
    enum class EAresPlatformType                  platformType;                                                 // 0x00F8(0x0001)
    char                                          pa_00F9[0x0007]                                               // 0x00F9(0x0007)
};


// ScriptStruct  ShooterGame.NPEModuleStatistics
// Struct Size::0x0058
struct FNPEModuleStatistics
{
    FString                                       ModuleName;                                                   // 0x0000(0x0010)
    FString                                       MissionName;                                                  // 0x0010(0x0010)
    FString                                       ObjectiveName;                                                // 0x0020(0x0010)
    float                                         TotalTimeTaken;                                               // 0x0030(0x0004)
    float                                         TimeAFK;                                                      // 0x0034(0x0004)
    float                                         StartTime;                                                    // 0x0038(0x0004)
    int32_t                                       Retries;                                                      // 0x003C(0x0004)
    int32_t                                       ShotsFired;                                                   // 0x0040(0x0004)
    int32_t                                       ShotsLanded;                                                  // 0x0044(0x0004)
    int32_t                                       Headshots;                                                    // 0x0048(0x0004)
    int32_t                                       Deaths;                                                       // 0x004C(0x0004)
    float                                         DamageTaken;                                                  // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  ShooterGame.KillRefuelEvent
// Struct Size::0x0078
struct FKillRefuelEvent
{
    FString                                       matchId;                                                      // 0x0000(0x0010)
    int32_t                                       roundNumber;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       subject;                                                      // 0x0018(0x0010)
    FString                                       enemySubject;                                                 // 0x0028(0x0010)
    float                                         abilityAvailableTime;                                         // 0x0038(0x0004)
    int32_t                                       castEventID;                                                  // 0x003C(0x0004)
    FString                                       triggerCondition;                                             // 0x0040(0x0010)
    FTelemetryPlatformDetails                     clientPlatformDetails;                                        // 0x0050(0x0020)
    enum class EAresPlatformType                  platformType;                                                 // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
};


// ScriptStruct  ShooterGame.ClashOrbContestEvent
// Struct Size::0x0120
struct FClashOrbContestEvent
{
    TArray<FClashOrbInfo>                         ClashOrbInfo;                                                 // 0x0000(0x0010)
    TArray<FShieldInfo>                           ShieldInfo;                                                   // 0x0010(0x0010)
    float                                         StartTime;                                                    // 0x0020(0x0004)
    float                                         Duration;                                                     // 0x0024(0x0004)
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0028(0x0068)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0090(0x0028)
    FGameEventPlayerInfo                          PlayerInfo;                                                   // 0x00B8(0x0060)
    int32_t                                       CombatReportID;                                               // 0x0118(0x0004)
    int32_t                                       AltActivateCombatReportID;                                    // 0x011C(0x0004)
};


// ScriptStruct  ShooterGame.ShieldInfo
// Struct Size::0x000C
struct FShieldInfo
{
    float                                         SpawnTime;                                                    // 0x0000(0x0004)
    float                                         EndTime;                                                      // 0x0004(0x0004)
    float                                         Duration;                                                     // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.ClashOrbInfo
// Struct Size::0x0038
struct FClashOrbInfo
{
    FString                                       Claimed;                                                      // 0x0000(0x0010)
    float                                         Angle;                                                        // 0x0010(0x0004)
    float                                         Duration;                                                     // 0x0014(0x0004)
    float                                         SpawnTime;                                                    // 0x0018(0x0004)
    float                                         EndTime;                                                      // 0x001C(0x0004)
    float                                         Distance;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       PlayerThatClaimed;                                            // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.UltimateChargedEvent
// Struct Size::0x0110
struct FUltimateChargedEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0068(0x0028)
    FGameEventPlayerInfo                          PlayerInfo;                                                   // 0x0090(0x0060)
    FUltChargeInfo                                ChargeInfo;                                                   // 0x00F0(0x001C)
    char                                          pa_010C[0x0004]                                               // 0x010C(0x0004)
};


// ScriptStruct  ShooterGame.UltChargeInfo
// Struct Size::0x001C
struct FUltChargeInfo
{
    int32_t                                       PointsOther;                                                  // 0x0000(0x0004)
    int32_t                                       PointsKill;                                                   // 0x0004(0x0004)
    int32_t                                       PointsDeath;                                                  // 0x0008(0x0004)
    int32_t                                       PointsSpike;                                                  // 0x000C(0x0004)
    int32_t                                       PointsOrb;                                                    // 0x0010(0x0004)
    int32_t                                       FullUltimatePointCost;                                        // 0x0014(0x0004)
    bool                                          IsFullyCharged;                                               // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  ShooterGame.InWorldReclamationTelemetryEvent
// Struct Size::0x0128
struct FInWorldReclamationTelemetryEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0068(0x0028)
    FGameEventPlayerInfo                          PlayerInfo;                                                   // 0x0090(0x0060)
    FReclaimOrbTelemetryInfo                      OrbInfo;                                                      // 0x00F0(0x0038)
};


// ScriptStruct  ShooterGame.ReclaimOrbTelemetryInfo
// Struct Size::0x0038
struct FReclaimOrbTelemetryInfo
{
    FString                                       AbilityId;                                                    // 0x0000(0x0010)
    FString                                       AbilityName;                                                  // 0x0010(0x0010)
    FVector                                       OrbLocation;                                                  // 0x0020(0x000C)
    int32_t                                       OrbCreationRoundTime;                                         // 0x002C(0x0004)
    int32_t                                       OrbReclaimRoundTime;                                          // 0x0030(0x0004)
    int32_t                                       OrbReclaimAttempts;                                           // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.ServerGameplaySystemSummaryEvent
// Struct Size::0x00C8
struct FServerGameplaySystemSummaryEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FString                                       Subject;                                                      // 0x0068(0x0010)
    FServerGameplaySystemSummary                  CombatData;                                                   // 0x0078(0x0028)
    FServerGameplaySystemSummary                  NonCombatData;                                                // 0x00A0(0x0028)
};


// ScriptStruct  ShooterGame.ServerGameplaySystemSummary
// Struct Size::0x0028
struct FServerGameplaySystemSummary
{
    uint32_t                                      AutonomousForwardPredictCount;                                // 0x0000(0x0004)
    float                                         AutonomousForwardPredictMeanDuration;                         // 0x0004(0x0004)
    float                                         AutonomousForwardPredictMaxDuration;                          // 0x0008(0x0004)
    uint32_t                                      AutonomousQueueSizeCount;                                     // 0x000C(0x0004)
    float                                         AutonomousQueueSizeMean;                                      // 0x0010(0x0004)
    float                                         AutonomousQueueSizeMax;                                       // 0x0014(0x0004)
    float                                         AutonomousMoveProcessingDelayMean;                            // 0x0018(0x0004)
    float                                         AutonomousMoveProcessingDelayStdDeviation;                    // 0x001C(0x0004)
    float                                         AutonomousMoveProcessingDelayP95;                             // 0x0020(0x0004)
    uint32_t                                      SoftDisconnectCount;                                          // 0x0024(0x0004)
};


// ScriptStruct  ShooterGame.SpawnExitEvent
// Struct Size::0x0120
struct FSpawnExitEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FString                                       StageID;                                                      // 0x0068(0x0010)
    FGameEventPlayerInfo                          PlayerInfo;                                                   // 0x0078(0x0060)
    FGameEventStagePlayerWeaponLoadout            HurmPlayerWeaponLoadout;                                      // 0x00D8(0x0020)
    float                                         SpawnTime;                                                    // 0x00F8(0x0004)
    float                                         SpawnExitTime;                                                // 0x00FC(0x0004)
    float                                         SpawnWorldTime;                                               // 0x0100(0x0004)
    float                                         SpawnExitWorldTime;                                           // 0x0104(0x0004)
    TArray<FPlayerLocationDTO>                    PlayerLocations;                                              // 0x0108(0x0010)
    float                                         UltimateStatus;                                               // 0x0118(0x0004)
    char                                          pa_011C[0x0004]                                               // 0x011C(0x0004)
};


// ScriptStruct  ShooterGame.GameEventStagePlayerWeaponLoadout
// Struct Size::0x0020
struct FGameEventStagePlayerWeaponLoadout
{
    FString                                       PrimaryEquip;                                                 // 0x0000(0x0010)
    FString                                       SecondaryEquip;                                               // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PlayerSpawnedEvent
// Struct Size::0x0110
struct FPlayerSpawnedEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FString                                       Subject;                                                      // 0x0068(0x0010)
    FString                                       Character;                                                    // 0x0078(0x0010)
    FString                                       SpawnPointName;                                               // 0x0088(0x0010)
    uint32_t                                      SpawnPointIndex;                                              // 0x0098(0x0004)
    bool                                          SpawnPointDataStale;                                          // 0x009C(0x0001)
    char                                          pa_009D[0x0003]                                               // 0x009D(0x0003)
    float                                         SpawnPointScore;                                              // 0x00A0(0x0004)
    int32_t                                       NumTicksUntilUpdate;                                          // 0x00A4(0x0004)
    float                                         LastUpdateTimestamp;                                          // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x00B0(0x0028)
    uint32_t                                      NumVisibleEnemyCharacters;                                    // 0x00D8(0x0004)
    uint32_t                                      NumAliveCharacters;                                           // 0x00DC(0x0004)
    float                                         LookAheadMultiplier;                                          // 0x00E0(0x0004)
    char                                          pa_00E4[0x0004]                                               // 0x00E4(0x0004)
    TArray<FNumSpawnsPerVisibilityScore>          NumSpawnsPerVisibilityScore;                                  // 0x00E8(0x0010)
    uint32_t                                      NumStaleSpawnPoints;                                          // 0x00F8(0x0004)
    char                                          pa_00FC[0x0004]                                               // 0x00FC(0x0004)
    TArray<float>                                 ConsideredSpawnPointScores;                                   // 0x0100(0x0010)
};


// ScriptStruct  ShooterGame.NumSpawnsPerVisibilityScore
// Struct Size::0x0008
struct FNumSpawnsPerVisibilityScore
{
    int32_t                                       Score;                                                        // 0x0000(0x0004)
    int32_t                                       NumOfSpawns;                                                  // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.ClientDisconnectEvent
// Struct Size::0x00B0
struct FClientDisconnectEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FString                                       Subject;                                                      // 0x0068(0x0010)
    FString                                       DisconnectReason;                                             // 0x0078(0x0010)
    FString                                       DisconnectContext;                                            // 0x0088(0x0010)
    FString                                       DisconnectOutcome;                                            // 0x0098(0x0010)
    float                                         DisconnectDuration;                                           // 0x00A8(0x0004)
    float                                         DisconnectTimeMs;                                             // 0x00AC(0x0004)
};


// ScriptStruct  ShooterGame.PlayerSecurityViolationDisconnectEvent
// Struct Size::0x00D8
struct FPlayerSecurityViolationDisconnectEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FGameEventPlayerInfo                          PlayerInfo;                                                   // 0x0068(0x0060)
    FString                                       SecurityViolation;                                            // 0x00C8(0x0010)
};


// ScriptStruct  ShooterGame.PlayerDiscrepancyDetectedEvent
// Struct Size::0x00F0
struct FPlayerDiscrepancyDetectedEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FGameEventPlayerInfo                          PlayerInfo;                                                   // 0x0068(0x0060)
    FString                                       DiscrepancyType;                                              // 0x00C8(0x0010)
    int32_t                                       ServerValue;                                                  // 0x00D8(0x0004)
    int32_t                                       ClientValue;                                                  // 0x00DC(0x0004)
    FString                                       DiscrepancyDetails;                                           // 0x00E0(0x0010)
};


// ScriptStruct  ShooterGame.PlayerBlindApplicationDiscrepancyDetails
// Struct Size::0x0008
struct FPlayerBlindApplicationDiscrepancyDetails
{
    float                                         ServerDuration;                                               // 0x0000(0x0004)
    float                                         ClientDuration;                                               // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.PlayerDiscrepancyDetectedDetails
// Struct Size::0x0008
struct FPlayerDiscrepancyDetectedDetails
{
    int32_t                                       ServerValue;                                                  // 0x0000(0x0004)
    int32_t                                       ClientValue;                                                  // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.InventoryChangeEvent
// Struct Size::0x03E8
struct FInventoryChangeEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0068(0x0028)
    FGameEventPlayerInfo                          PlayerInfo;                                                   // 0x0090(0x0060)
    int32_t                                       PreTransactionMoney;                                          // 0x00F0(0x0004)
    int32_t                                       PreTransactionMoneyReceiver;                                  // 0x00F4(0x0004)
    int32_t                                       PreTransactionMoneySender;                                    // 0x00F8(0x0004)
    char                                          pa_00FC[0x0004]                                               // 0x00FC(0x0004)
    FGameEventInventory                           StartingInventory;                                            // 0x0100(0x0148)
    FGameEventInventory                           EndingInventory;                                              // 0x0248(0x0148)
    FString                                       ItemId;                                                       // 0x0390(0x0010)
    FString                                       ItemName;                                                     // 0x03A0(0x0010)
    FString                                       ReceiverId;                                                   // 0x03B0(0x0010)
    FString                                       SenderId;                                                     // 0x03C0(0x0010)
    FString                                       TransactionType;                                              // 0x03D0(0x0010)
    int32_t                                       ItemCost;                                                     // 0x03E0(0x0004)
    char                                          pa_03E4[0x0004]                                               // 0x03E4(0x0004)
};


// ScriptStruct  ShooterGame.PlayerRoundSnapshotEvent
// Struct Size::0x0298
struct FPlayerRoundSnapshotEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0068(0x0028)
    FGameEventPlayerInfo                          PlayerInfo;                                                   // 0x0090(0x0060)
    FGameEventCharacterState                      PlayerState;                                                  // 0x00F0(0x01A8)
};


// ScriptStruct  ShooterGame.AbilityUsageEvent
// Struct Size::0x0300
struct FAbilityUsageEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0068(0x0028)
    FGameEventPlayerInfo                          PlayerInfo;                                                   // 0x0090(0x0060)
    FGameEventCharacterState                      PlayerState;                                                  // 0x00F0(0x01A8)
    FAbilityUsageInfo                             AbilityInfo;                                                  // 0x0298(0x0068)
};


// ScriptStruct  ShooterGame.AbilityUsageInfo
// Struct Size::0x0068
struct FAbilityUsageInfo
{
    FString                                       AbilityId;                                                    // 0x0000(0x0010)
    FString                                       AbilityName;                                                  // 0x0010(0x0010)
    TArray<FVector>                               Locations;                                                    // 0x0020(0x0010)
    FString                                       LocationType;                                                 // 0x0030(0x0010)
    TArray<FAbilityEffectInfo>                    AbilityEffects;                                               // 0x0040(0x0010)
    float                                         DestroyedCount;                                               // 0x0050(0x0004)
    int32_t                                       CastEventID;                                                  // 0x0054(0x0004)
    FString                                       UsageType;                                                    // 0x0058(0x0010)
};


// ScriptStruct  ShooterGame.AbilityEffectInfo
// Struct Size::0x0028
struct FAbilityEffectInfo
{
    FString                                       Tag;                                                          // 0x0000(0x0010)
    float                                         Amount;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FAbilityPerTargetEffectInfo>           AffectedTargets;                                              // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.AbilityPerTargetEffectInfo
// Struct Size::0x0018
struct FAbilityPerTargetEffectInfo
{
    FString                                       TargetPlayerSubject;                                          // 0x0000(0x0010)
    float                                         Amount;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.ServerHitRegSystemRoundSummaryEvent
// Struct Size::0x00A0
struct FServerHitRegSystemRoundSummaryEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FString                                       Subject;                                                      // 0x0068(0x0010)
    int32_t                                       DroppedShotCount;                                             // 0x0078(0x0004)
    int32_t                                       DisagreedShotCount;                                           // 0x007C(0x0004)
    int32_t                                       ShotsPastRewindLimitCount;                                    // 0x0080(0x0004)
    int32_t                                       TotalServerShots;                                             // 0x0084(0x0004)
    int32_t                                       TotalClientShots;                                             // 0x0088(0x0004)
    int32_t                                       TotalCharactersHitDiscrepancies;                              // 0x008C(0x0004)
    int32_t                                       TotalBonesHitDiscrepancies;                                   // 0x0090(0x0004)
    int32_t                                       TotalFiringLocationDiscrepancies;                             // 0x0094(0x0004)
    int32_t                                       TotalFiringDirectionDiscrepancies;                            // 0x0098(0x0004)
    int32_t                                       TotalImpactLocationDiscrepancies;                             // 0x009C(0x0004)
};


// ScriptStruct  ShooterGame.ServerRewindLimitExceededEvent
// Struct Size::0x0038
struct FServerRewindLimitExceededEvent
{
    FString                                       Version;                                                      // 0x0000(0x0010)
    FString                                       MatchID;                                                      // 0x0010(0x0010)
    FString                                       Subject;                                                      // 0x0020(0x0010)
    float                                         RequestedRewindAmount;                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.InWorldReclaimableEventHandle
// Struct Size::0x0008
struct FInWorldReclaimableEventHandle
{
    int32_t                                       RoundNumber;                                                  // 0x0000(0x0004)
    int32_t                                       EventID;                                                      // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.VoteCompleteEvent
// Struct Size::0x00C8
struct FVoteCompleteEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0068(0x0028)
    FString                                       VoteType;                                                     // 0x0090(0x0010)
    FString                                       OptionSelected;                                               // 0x00A0(0x0010)
    TArray<FVoteOptionInfo>                       OptionVotes;                                                  // 0x00B0(0x0010)
    int32_t                                       NumNonParticipants;                                           // 0x00C0(0x0004)
    int32_t                                       NumPenalizedPlayers;                                          // 0x00C4(0x0004)
};


// ScriptStruct  ShooterGame.VoteOptionInfo
// Struct Size::0x0018
struct FVoteOptionInfo
{
    FString                                       OptionName;                                                   // 0x0000(0x0010)
    int32_t                                       VoteCount;                                                    // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.TickerObject
// Struct Size::0x0018
struct FTickerObject
{
    enum class ETickerSeverity                    Severity;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Message;                                                      // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.SessionAllowHotfixDTO
// Struct Size::0x0001
struct FSessionAllowHotfixDTO
{
    bool                                          AllowHotfix;                                                  // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.SessionReconnectDTO
// Struct Size::0x0001
struct FSessionReconnectDTO
{
    bool                                          Reconnect;                                                    // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.SessionDTO
// Struct Size::0x00D0
struct FSessionDTO
{
    FString                                       Raw;                                                          // 0x0000(0x0010)
    FString                                       Subject;                                                      // 0x0010(0x0010)
    FString                                       CXNState;                                                     // 0x0020(0x0010)
    FString                                       CXNCloseReason;                                               // 0x0030(0x0010)
    FString                                       ClientID;                                                     // 0x0040(0x0010)
    FString                                       LoopState;                                                    // 0x0050(0x0010)
    int64_t                                       Version;                                                      // 0x0060(0x0008)
    FDateTime                                     LastHeartbeatTime;                                            // 0x0068(0x0008)
    FDateTime                                     ExpiredTime;                                                  // 0x0070(0x0008)
    int64_t                                       HeartbeatIntervalMillis;                                      // 0x0078(0x0008)
    FTimespan                                     HeartbeatInterval;                                            // 0x0080(0x0008)
    FString                                       HeartbeatIntervalMSString;                                    // 0x0088(0x0010)
    FString                                       PlaytimeNotification;                                         // 0x0098(0x0010)
    int32_t                                       PlaytimeMinutes;                                              // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
    FString                                       RestrictionType;                                              // 0x00B0(0x0010)
    FDateTime                                     UserInfoValidTime;                                            // 0x00C0(0x0008)
    bool                                          ShouldForceInvalidate;                                        // 0x00C8(0x0001)
    char                                          pa_00C9[0x0007]                                               // 0x00C9(0x0007)
};


// ScriptStruct  ShooterGame.SessionConnectRequestV2DTO
// Struct Size::0x0068
struct FSessionConnectRequestV2DTO
{
    bool                                          IsRestricted;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Pas;                                                          // 0x0008(0x0010)
    FString                                       Lq;                                                           // 0x0018(0x0010)
    FString                                       UserInfoToken;                                                // 0x0028(0x0010)
    FString                                       CustomAuthCode;                                               // 0x0038(0x0010)
    FSessionPlatformInfo                          PlatformInfo;                                                 // 0x0048(0x0020)
};


// ScriptStruct  ShooterGame.SessionPlatformInfo
// Struct Size::0x0020
struct FSessionPlatformInfo
{
    FString                                       PlatformType;                                                 // 0x0000(0x0010)
    FString                                       PlatformOS;                                                   // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.SessionConnectRequestDTO
// Struct Size::0x0058
struct FSessionConnectRequestDTO
{
    bool                                          IsRestricted;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Pas;                                                          // 0x0008(0x0010)
    FString                                       Lq;                                                           // 0x0018(0x0010)
    FString                                       UserInfoToken;                                                // 0x0028(0x0010)
    FSessionPlatformInfo                          PlatformInfo;                                                 // 0x0038(0x0020)
};


// ScriptStruct  ShooterGame.AimTargetScore
// Struct Size::0x0010
struct FAimTargetScore
{
    AActor*                                       Target;                                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.SpectatorFocusObjectCameraSettings
// Struct Size::0x0010
struct FSpectatorFocusObjectCameraSettings
{
    float                                         CameraSpectatorFocusObjectPitchLowerBound;                    // 0x0000(0x0004)
    float                                         CameraSpectatorFocusObjectPitchUpperBound;                    // 0x0004(0x0004)
    float                                         CameraSpectatorFocusObjectRotationSpeed;                      // 0x0008(0x0004)
    float                                         CameraSpectatorFocusObjectMinimumDistance;                    // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.AresThidPersonDebugCameraSettings
// Struct Size::0x0020
struct FAresThidPersonDebugCameraSettings
{
    float                                         ArmLengthMin;                                                 // 0x0000(0x0004)
    float                                         ArmLengthMax;                                                 // 0x0004(0x0004)
    float                                         ArmLengthZoomStep;                                            // 0x0008(0x0004)
    bool                                          bDoCollisionTest;                                             // 0x000C(0x0001)
    bool                                          bEnableCameraLag;                                             // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    float                                         CameraLagSpeed;                                               // 0x0010(0x0004)
    bool                                          bEnableCameraRotationLag;                                     // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         CameraRotationLagSpeed;                                       // 0x0018(0x0004)
    bool                                          bReversePitchRotationControls;                                // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  ShooterGame.CharacterReveal
// Struct Size::0x0028
struct FCharacterReveal
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    float                                         Time;                                                         // 0x000C(0x0004)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
    FString                                       CalloutSubRegion;                                             // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.DefaultSkeletalMeshInfo
// Struct Size::0x0018
struct FDefaultSkeletalMeshInfo
{
    USkeletalMesh*                                SkeletalMesh;                                                 // 0x0000(0x0008)
    UObject*                                      AnimInstanceClass;                                            // 0x0008(0x0008)
    bool                                          bVisible;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.CharacterScaleData
// Struct Size::0x0018
struct FCharacterScaleData
{
    float                                         CharacterScaleHeightOffset;                                   // 0x0000(0x0004)
    float                                         OriginalCrouchCompressionAmount;                              // 0x0004(0x0004)
    float                                         OriginalBaseEyeHeight;                                        // 0x0008(0x0004)
    float                                         OriginalCrouchedEyeHeight;                                    // 0x000C(0x0004)
    float                                         OriginalCapsuleRadius;                                        // 0x0010(0x0004)
    float                                         OriginalCapsuleHalfHeight;                                    // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.DeadAndSettledRespawnData
// Struct Size::0x0004
struct FDeadAndSettledRespawnData
{
    bool                                          bReachedDeadAndSettledState;                                  // 0x0000(0x0001)
    bool                                          bWasCoreMeshTickEnabled;                                      // 0x0001(0x0001)
    bool                                          bWasCosmeticMeshTickEnabled;                                  // 0x0002(0x0001)
    bool                                          bWasCosmeticMeshSimulatingPhysics;                            // 0x0003(0x0001)
};


// ScriptStruct  ShooterGame.CharacterClassDamageTypeModifer
// Struct Size::0x0038
struct FCharacterClassDamageTypeModifer
{
    TSoftClassPtr<UObject>                        DamageTypeClassAsset;                                         // 0x0000(0x0030)
    float                                         DamageModifier;                                               // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.CharacterClassCostModifer
// Struct Size::0x0010
struct FCharacterClassCostModifer
{
    FAresPurchasable*                             PurchasableClassAsset;                                        // 0x0000(0x0008)
    float                                         CostModifier;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.CharacterClassSlotModifer
// Struct Size::0x0010
struct FCharacterClassSlotModifer
{
    FAresEquippableSlot*                          PurchasableSlotAsset;                                         // 0x0000(0x0008)
    float                                         CostModifier;                                                 // 0x0008(0x0004)
    int32_t                                       SlotLimitModifier;                                            // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.StartingEquippable
// Struct Size::0x0030
struct FStartingEquippable
{
    TSoftClassPtr<UObject>                        EquippableClassAsset;                                         // 0x0000(0x0030)
};


// ScriptStruct  ShooterGame.AresDeathCameraSettings
// Struct Size::0x0048
struct FAresDeathCameraSettings
{
    float                                         FieldOfView;                                                  // 0x0000(0x0004)
    float                                         ArmLengthMin;                                                 // 0x0004(0x0004)
    float                                         ArmLengthMax;                                                 // 0x0008(0x0004)
    float                                         ArmHorizontalOffset;                                          // 0x000C(0x0004)
    bool                                          bDoCollisionTest;                                             // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         ProbeSize;                                                    // 0x0014(0x0004)
    enum class ECollisionChannel                  ProbeChannel;                                                 // 0x0018(0x0001)
    enum class EAresInterpolationFunction         InterpolationFunction;                                        // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    FAresDeathCameraTimings                       Timings;                                                      // 0x001C(0x000C)
    bool                                          ShouldFadeAudioOnDeath;                                       // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         SpringArmPitchOffset;                                         // 0x002C(0x0004)
    float                                         CameraPitchOffset;                                            // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FCurveFloat*                                  CameraLerpCurve;                                              // 0x0038(0x0008)
    enum class EAresDeathCamFocusPoint            DeathCamFocusPoint;                                           // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  ShooterGame.AresDeathCameraTimings
// Struct Size::0x000C
struct FAresDeathCameraTimings
{
    float                                         DeathCameraSwitchDelay;                                       // 0x0000(0x0004)
    float                                         FadeToBlackStartTime;                                         // 0x0004(0x0004)
    float                                         FadeToBlackDuration;                                          // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.Ares3PCameraSettings
// Struct Size::0x001C
struct FAres3PCameraSettings
{
    float                                         ArmLengthMin;                                                 // 0x0000(0x0004)
    float                                         ArmLengthMax;                                                 // 0x0004(0x0004)
    float                                         ArmLengthZoomStep;                                            // 0x0008(0x0004)
    bool                                          bDoCollisionTest;                                             // 0x000C(0x0001)
    bool                                          bEnableCameraLag;                                             // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    float                                         CameraLagSpeed;                                               // 0x0010(0x0004)
    bool                                          bEnableCameraRotationLag;                                     // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         CameraRotationLagSpeed;                                       // 0x0018(0x0004)
};


// ScriptStruct  ShooterGame.AimOffsetBlendspaceSlotArray
// Struct Size::0x0020
struct FAimOffsetBlendspaceSlotArray
{
    FAimOffsetBlendSpace*                         PrimaryBlendspace;                                            // 0x0000(0x0008)
    FAimOffsetBlendSpace*                         SecondaryBlendspace;                                          // 0x0008(0x0008)
    bool                                          bPrimaryIsAdditive;                                           // 0x0010(0x0001)
    bool                                          bSecondaryIsAdditive;                                         // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    int32_t                                       ActiveIndex;                                                  // 0x0014(0x0004)
    int32_t                                       LastValidActiveIndex;                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.Blendspace1DSlotArray
// Struct Size::0x0020
struct FBlendspace1DSlotArray
{
    FBlendSpace1D*                                PrimaryBlendspace;                                            // 0x0000(0x0008)
    FBlendSpace1D*                                SecondaryBlendspace;                                          // 0x0008(0x0008)
    bool                                          bPrimaryIsAdditive;                                           // 0x0010(0x0001)
    bool                                          bSecondaryIsAdditive;                                         // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    int32_t                                       ActiveIndex;                                                  // 0x0014(0x0004)
    int32_t                                       LastValidActiveIndex;                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.BlendspaceSlotArray
// Struct Size::0x0020
struct FBlendspaceSlotArray
{
    FBlendSpace*                                  PrimaryBlendspace;                                            // 0x0000(0x0008)
    FBlendSpace*                                  SecondaryBlendspace;                                          // 0x0008(0x0008)
    bool                                          bPrimaryIsAdditive;                                           // 0x0010(0x0001)
    bool                                          bSecondaryIsAdditive;                                         // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    int32_t                                       ActiveIndex;                                                  // 0x0014(0x0004)
    int32_t                                       LastValidActiveIndex;                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.AnimSequenceSlotArray
// Struct Size::0x0020
struct FAnimSequenceSlotArray
{
    FAnimSequence*                                PrimaryAnimSequence;                                          // 0x0000(0x0008)
    FAnimSequence*                                SecondaryAnimSequence;                                        // 0x0008(0x0008)
    bool                                          bPrimaryIsAdditive;                                           // 0x0010(0x0001)
    bool                                          bSecondaryIsAdditive;                                         // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    int32_t                                       ActiveIndex;                                                  // 0x0014(0x0004)
    int32_t                                       LastValidActiveIndex;                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.PendingAnimUpdate
// Struct Size::0x0040
struct FPendingAnimUpdate
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FAnimUpdate                                   AnimUpdate;                                                   // 0x0008(0x0028)
    FAnimInstanceReplicationComponent*            AnimInstanceReplicationComponent;                             // 0x0030(0x0008)
    FAnimationStateComponent*                     AnimationStateComponent;                                      // 0x0038(0x0008)
};


// ScriptStruct  ShooterGame.AnimUpdate
// Struct Size::0x0028
struct FAnimUpdate
{
    TArray<FAnimInstanceStateMachines>            AnimInstancesStateMachines;                                   // 0x0000(0x0010)
    TArray<FBlendSpacesUpdate>                    BlendSpacesUpdate;                                            // 0x0010(0x0010)
    FAnimationStateReplicationData                AnimStateReplicationData;                                     // 0x0020(0x0008)
};


// ScriptStruct  ShooterGame.BlendSpacesUpdate
// Struct Size::0x0018
struct FBlendSpacesUpdate
{
    float                                         NetworkTimeAdjustment;                                        // 0x0000(0x0004)
    int32_t                                       AnimInstanceID;                                               // 0x0004(0x0004)
    TArray<FAnimBlendSpaceInfo>                   BlendSpaces;                                                  // 0x0008(0x0010)
};


// ScriptStruct  Engine.AnimBlendSpaceInfo
// Struct Size::0x0038
struct FAnimBlendSpaceInfo
{
    int32_t                                       BlendSpaceID;                                                 // 0x0000(0x0004)
    float                                         TimeAccumulator;                                              // 0x0004(0x0004)
    FVector                                       BlendInput;                                                   // 0x0008(0x000C)
    float                                         LastUpdateTime;                                               // 0x0014(0x0004)
    int32_t                                       LastUpdateFrame;                                              // 0x0018(0x0004)
    float                                         CurrentAssetLength;                                           // 0x001C(0x0004)
    float                                         TimeAdjustment;                                               // 0x0020(0x0004)
    char                                          pa_0024[0x0014]                                               // 0x0024(0x0014)
};


// ScriptStruct  Engine.AnimInstanceStateMachines
// Struct Size::0x0018
struct FAnimInstanceStateMachines
{
    int32_t                                       AnimInstanceNameHash;                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FAnimStateMachineInfo>                 StateMachines;                                                // 0x0008(0x0010)
};


// ScriptStruct  Engine.AnimStateMachineInfo
// Struct Size::0x0030
struct FAnimStateMachineInfo
{
    uint32_t                                      MachineIndex;                                                 // 0x0000(0x0004)
    int32_t                                       CurrentState;                                                 // 0x0004(0x0004)
    TArray<float>                                 TimeSinceEnteringStates;                                      // 0x0008(0x0010)
    TArray<float>                                 TimeSinceLeavingStates;                                       // 0x0018(0x0010)
    float                                         LastUpdateTime;                                               // 0x0028(0x0004)
    float                                         TimeAdjustment;                                               // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.BodySectionEntry
// Struct Size::0x0018
struct FBodySectionEntry
{
    enum class EAresBodySection                   BodySection;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FName>                                 Bones;                                                        // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.DebugProjectileDamageSnapshot
// Struct Size::0x0018
struct FDebugProjectileDamageSnapshot
{
    FString                                       Report;                                                       // 0x0000(0x0010)
    float                                         StartTimeStamp;                                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.DebugProjectileFireSnapshot
// Struct Size::0x0048
struct FDebugProjectileFireSnapshot
{
    float                                         TimeStamp;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FProjectile*                                  ProjectileFired;                                              // 0x0008(0x0008)
    FVector                                       FiringDirection;                                              // 0x0010(0x000C)
    FVector                                       FiringLocation;                                               // 0x001C(0x000C)
    float                                         ErrorDegrees;                                                 // 0x0028(0x0004)
    float                                         ErrorPower;                                                   // 0x002C(0x0004)
    int32_t                                       ErrorRetries;                                                 // 0x0030(0x0004)
    int32_t                                       RandomSeed;                                                   // 0x0034(0x0004)
    FVector                                       CharacterVelocity;                                            // 0x0038(0x000C)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  ShooterGame.RepSocketTransform
// Struct Size::0x0040
struct FRepSocketTransform
{
    FName                                         BoneName;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
};


// ScriptStruct  ShooterGame.DebugProjectileFiringTuning
// Struct Size::0x0010
struct FDebugProjectileFiringTuning
{
    FDebugLineTuning                              FiringDirectionTuning;                                        // 0x0000(0x000C)
    float                                         LineDrawLength;                                               // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.DebugLineTuning
// Struct Size::0x000C
struct FDebugLineTuning
{
    float                                         LineStartRadius;                                              // 0x0000(0x0004)
    float                                         LineEndRadius;                                                // 0x0004(0x0004)
    float                                         LineThickness;                                                // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.DebugServerHitRegTuning
// Struct Size::0x001C
struct FDebugServerHitRegTuning
{
    FDebugImpactPointTuning                       ImpactPointTuning;                                            // 0x0000(0x000C)
    FDebugLineTuning                              RayTraceTuning;                                               // 0x000C(0x000C)
    FDebugRewindTimeTuning                        RewindTimeTuning;                                             // 0x0018(0x0004)
};


// ScriptStruct  ShooterGame.DebugRewindTimeTuning
// Struct Size::0x0004
struct FDebugRewindTimeTuning
{
    float                                         TextHeightOffset;                                             // 0x0000(0x0004)
};


// ScriptStruct  ShooterGame.DebugImpactPointTuning
// Struct Size::0x000C
struct FDebugImpactPointTuning
{
    FVector                                       ImpactPointBoxExtents;                                        // 0x0000(0x000C)
};


// ScriptStruct  ShooterGame.DebugProjectileTargetCheckingEntry
// Struct Size::0x0030
struct FDebugProjectileTargetCheckingEntry
{
    float                                         StartTimeStamp;                                               // 0x0000(0x0004)
    FVector                                       SphereCastStart;                                              // 0x0004(0x000C)
    FVector                                       SphereCastEnd;                                                // 0x0010(0x000C)
    float                                         SphereRadius;                                                 // 0x001C(0x0004)
    TArray<FVector>                               ImpactPoints;                                                 // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.DebugPruneComplexRewindEntry
// Struct Size::0x0030
struct FDebugPruneComplexRewindEntry
{
    float                                         StartTimeStamp;                                               // 0x0000(0x0004)
    FVector                                       SphereCastStart;                                              // 0x0004(0x000C)
    FVector                                       SphereCastEnd;                                                // 0x0010(0x000C)
    float                                         SphereRadius;                                                 // 0x001C(0x0004)
    TArray<FVector>                               ImpactPoints;                                                 // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.ReplicatedDebugHitRegSample
// Struct Size::0x0050
struct FReplicatedDebugHitRegSample
{
    TArray<FName>                                 HitBoxSocketNames;                                            // 0x0000(0x0010)
    TArray<FTransform>                            HitBoxSocketWorldTransforms;                                  // 0x0010(0x0010)
    FTransform                                    ActorTransform;                                               // 0x0020(0x0030)
};


// ScriptStruct  ShooterGame.ShotResult
// Struct Size::0x00E8
struct FShotResult
{
    FShotResultMetadata                           ClientShotMetadata;                                           // 0x0000(0x0070)
    FShotResultMetadata                           ServerShotMetadata;                                           // 0x0070(0x0070)
    bool                                          bReceivedServerResults;                                       // 0x00E0(0x0001)
    bool                                          bReceivedClientResults;                                       // 0x00E1(0x0001)
    char                                          pa_00E2[0x0006]                                               // 0x00E2(0x0006)
};


// ScriptStruct  ShooterGame.ShotResultMetadata
// Struct Size::0x0070
struct FShotResultMetadata
{
    TArray<FShooterCharacter*>                    ShooterCharactersHit;                                         // 0x0000(0x0010)
    TArray<FName>                                 BonesHit;                                                     // 0x0010(0x0010)
    FVector                                       InitialImpactLocation;                                        // 0x0020(0x000C)
    FVector                                       FiringLocation;                                               // 0x002C(0x000C)
    FVector                                       FiringDirection;                                              // 0x0038(0x000C)
    FStabilityValues                              StabilityValues;                                              // 0x0044(0x0018)
    FVector                                       MovementVelocity;                                             // 0x005C(0x000C)
    bool                                          bUsedPredictedLocation;                                       // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
};


// ScriptStruct  ShooterGame.NetworkedClientShotResult
// Struct Size::0x0078
struct FNetworkedClientShotResult
{
    FNetworkedShotId                              ShotId;                                                       // 0x0000(0x0008)
    FShotResultMetadata                           ShotMetadata;                                                 // 0x0008(0x0070)
};


// ScriptStruct  ShooterGame.NetworkedShotId
// Struct Size::0x0008
struct FNetworkedShotId
{
    uint32_t                                      ShotIdPrimary;                                                // 0x0000(0x0004)
    uint32_t                                      ShotIdSecondary;                                              // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.ProjectileInstigatorMovementContext
// Struct Size::0x0044
struct FProjectileInstigatorMovementContext
{
    char                                          pa_0000[0x0044]                                               // 0x0000(0x0044)
};


// ScriptStruct  ShooterGame.ServerMoveDebugData
// Struct Size::0x0028
struct FServerMoveDebugData
{
    FVector                                       ServerPosition;                                               // 0x0000(0x000C)
    FVector                                       ServerVelocity;                                               // 0x000C(0x000C)
    FVector                                       ServerAcceleration;                                           // 0x0018(0x000C)
    FTimeStampIndex                               TimeStampIndex;                                               // 0x0024(0x0004)
};


// ScriptStruct  ShooterGame.GradualCorrectionData
// Struct Size::0x0028
struct FGradualCorrectionData
{
    FVector                                       ClientToServerPositionDiff;                                   // 0x0000(0x000C)
    FVector                                       ServerVelocity;                                               // 0x000C(0x000C)
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.StabilityMovementData
// Struct Size::0x0010
struct FStabilityMovementData
{
    enum class EAresMovementType                  MovementType;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       Velocity;                                                     // 0x0004(0x000C)
};


// ScriptStruct  ShooterGame.AresJumpLandSlowTuningV2
// Struct Size::0x0010
struct FAresJumpLandSlowTuningV2
{
    float                                         JumpFallDistanceForSlowV2;                                    // 0x0000(0x0004)
    int32_t                                       MaxJumpsPerSecondThrottle;                                    // 0x0004(0x0004)
    FForceModule*                                 JumpLandSlowForceModule;                                      // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.AresJumpTuning
// Struct Size::0x0020
struct FAresJumpTuning
{
    float                                         MaxJumpHeight;                                                // 0x0000(0x0004)
    float                                         JumpTotalTime;                                                // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    float                                         JumpAccelerationSpeedLimit;                                   // 0x0010(0x0004)
    float                                         JumpAngleThresholdForConvertingForwardAccelToLateralDegrees;  // 0x0014(0x0004)
    float                                         JumpAccelerationCounterSteerMultiplier;                       // 0x0018(0x0004)
    float                                         StartAngleForJumpAccelerationCounterSteerMultiplier;          // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.AresMovementTuning
// Struct Size::0x00CC
struct FAresMovementTuning
{
    FAresPerMovementStateData                     BaseValues;                                                   // 0x0000(0x001C)
    FAresPerMovementStateData                     DefaultStateMultipliers;                                      // 0x001C(0x001C)
    char                                          pa_0038[0x008C]                                               // 0x0038(0x008C)
    float                                         MinimumAboveMaxSpeedDecayRate;                                // 0x00C4(0x0004)
    float                                         JumpLandSlowMaxSpeedDecayRate;                                // 0x00C8(0x0004)
};


// ScriptStruct  ShooterGame.AresPerMovementStateData
// Struct Size::0x001C
struct FAresPerMovementStateData
{
    float                                         Accel;                                                        // 0x0000(0x0004)
    float                                         Friction;                                                     // 0x0004(0x0004)
    float                                         FrictionMin;                                                  // 0x0008(0x0004)
    float                                         BrakingFriction;                                              // 0x000C(0x0004)
    float                                         MaxSpeed;                                                     // 0x0010(0x0004)
    FVector2D                                     InputDirectionalMultipliers;                                  // 0x0014(0x0008)
};


// ScriptStruct  ShooterGame.GunNamesToEquippableDataAssetTableRow
// Struct Size::0x0038
struct FGunNamesToEquippableDataAssetTableRow : public FTableRowBase
{
    TSoftClassPtr<UObject>                        Equippable;                                                   // 0x0008(0x0030)
};


// ScriptStruct  ShooterGame.DamagePenetration
// Struct Size::0x0008
struct FDamagePenetration
{
    enum class DamageSectionType                  Target;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Amount;                                                       // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.EquippedSkin
// Struct Size::0x0020
struct FEquippedSkin
{
    FGuid                                         BaseManifest;                                                 // 0x0000(0x0010)
    FGuid                                         SkinManifest;                                                 // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.AresRespawnGlobals
// Struct Size::0x0008
struct FAresRespawnGlobals
{
    float                                         RespawnPointSearchRadius;                                     // 0x0000(0x0004)
    float                                         RespawnPointSearchVerticalDistance;                           // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.AresStoreGlobals
// Struct Size::0x0008
struct FAresStoreGlobals
{
    int32_t                                       TotalPurchaseLimit;                                           // 0x0000(0x0004)
    bool                                          bDisallowDropping;                                            // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  ShooterGame.AresAccessibilityGlobals
// Struct Size::0x0024
struct FAresAccessibilityGlobals
{
    float                                         AllyFresnelOffset;                                            // 0x0000(0x0004)
    float                                         EnemyFresnelOffset;                                           // 0x0004(0x0004)
    FColor                                        AllyColor;                                                    // 0x0008(0x0004)
    FColor                                        HUDAllyColor;                                                 // 0x000C(0x0004)
    FColor                                        DefaultEnemyColor;                                            // 0x0010(0x0004)
    FColor                                        HUDEnemyColor;                                                // 0x0014(0x0004)
    FColor                                        TritanopiaEnemyColor;                                         // 0x0018(0x0004)
    FColor                                        DeuteranopiaEnemyColor;                                       // 0x001C(0x0004)
    FColor                                        ProtanopiaEnemyColor;                                         // 0x0020(0x0004)
};


// ScriptStruct  ShooterGame.AresDecalManagerGlobals
// Struct Size::0x0004
struct FAresDecalManagerGlobals
{
    int32_t                                       MaxLiveDecals;                                                // 0x0000(0x0004)
};


// ScriptStruct  ShooterGame.AresHUDGlobals
// Struct Size::0x03C0
struct FAresHUDGlobals
{
    FSlateFontInfo                                DefaultFont;                                                  // 0x0000(0x0060)
    bool                                          KeyLocationsAlwaysOn;                                         // 0x0060(0x0001)
    bool                                          bEnableSuperSquareCrosshair;                                  // 0x0061(0x0001)
    char                                          pa_0062[0x0006]                                               // 0x0062(0x0006)
    FCanvasIcon                                   SuperSquareCrosshairEdgeTexture;                              // 0x0068(0x0018)
    FCanvasIcon                                   SuperSquareCrosshairCornerTexture;                            // 0x0080(0x0018)
    float                                         SuperSquareCrosshairWidth;                                    // 0x0098(0x0004)
    float                                         SuperSquareCrosshairLength;                                   // 0x009C(0x0004)
    FColor                                        SuperSquareColor;                                             // 0x00A0(0x0004)
    float                                         SuperSquareMinRadiusPixels;                                   // 0x00A4(0x0004)
    FCanvasIcon                                   SuperSquareCenterTexture;                                     // 0x00A8(0x0018)
    bool                                          bDrawSuperSquareOffsetLine;                                   // 0x00C0(0x0001)
    char                                          pa_00C1[0x0003]                                               // 0x00C1(0x0003)
    float                                         MinVisualCrossHairSpread;                                     // 0x00C4(0x0004)
    float                                         ResourceBarScalePerSecond;                                    // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    FTexture*                                     CastingCircleActivePiece;                                     // 0x00D0(0x0008)
    TSoftObjectPtr<FTexture>                      CastingCircleActivePieceAsset;                                // 0x00D8(0x0030)
    FTexture*                                     CastingCircleInactivePiece;                                   // 0x0108(0x0008)
    TSoftObjectPtr<FTexture>                      CastingCircleInactivePieceAsset;                              // 0x0110(0x0030)
    FMaterialInterface*                           CircularMinimapMaterial;                                      // 0x0140(0x0008)
    FAkAudioEvent*                                KillConfirmEvent;                                             // 0x0148(0x0008)
    TSoftObjectPtr<FAkAudioEvent>                 KillConfirmEventAsset;                                        // 0x0150(0x0030)
    FParticleSystem*                              LastKnownPositionParticle;                                    // 0x0180(0x0008)
    TSoftObjectPtr<FParticleSystem>               LastKnownPositionParticleAsset;                               // 0x0188(0x0030)
    FAkAudioEvent*                                UIErrorEvent;                                                 // 0x01B8(0x0008)
    TSoftObjectPtr<FAkAudioEvent>                 UIErrorEventAsset;                                            // 0x01C0(0x0030)
    FAresDeathRecapHUDGlobals                     DeathRecapGlobals;                                            // 0x01F0(0x00C0)
    FAresHUDMinimapDangerZonesSettings            MinimapDangerZonesSettings;                                   // 0x02B0(0x0110)
};


// ScriptStruct  ShooterGame.AresHUDMinimapDangerZonesSettings
// Struct Size::0x0110
struct FAresHUDMinimapDangerZonesSettings
{
    TSoftObjectPtr<FMaterialInterface>            MinimapDangerZoneAsset;                                       // 0x0000(0x0030)
    TSoftObjectPtr<FCurveFloat>                   AlphaOverLifetimeCurve;                                       // 0x0030(0x0030)
    float                                         RegionLifeTime;                                               // 0x0060(0x0004)
    float                                         RegionExpansionSpeedScaleFactor;                              // 0x0064(0x0004)
    float                                         RegionInitialExpansionSize;                                   // 0x0068(0x0004)
    float                                         VisibleNearRegionDestroyRadius;                               // 0x006C(0x0004)
    FName                                         AliveTimeSecondsParameterName;                                // 0x0070(0x000C)
    FName                                         AliveTimePercentParameterName;                                // 0x007C(0x000C)
    FName                                         LifeCurveAlphaParameterName;                                  // 0x0088(0x000C)
    FName                                         LookupTableRowTexcoordParameterName;                          // 0x0094(0x000C)
    FName                                         CurrentUncertaintyRadiusWorldspaceParameterName;              // 0x00A0(0x000C)
    FName                                         CurrentUncertaintyRadiusPercentageParameterName;              // 0x00AC(0x000C)
    FName                                         MinimapScaleAndBiasParameterName;                             // 0x00B8(0x000C)
    FName                                         MinimapUITextureParameterName;                                // 0x00C4(0x000C)
    FName                                         MinimapUIDangerZonesTextureParameterName;                     // 0x00D0(0x000C)
    FName                                         MinimapUIDangerZonesLUTTextureParameterName;                  // 0x00DC(0x000C)
    FName                                         MinimapClipUVOffsetParameterName;                             // 0x00E8(0x000C)
    FName                                         MinimapClipScaleParameterName;                                // 0x00F4(0x000C)
    FName                                         DistanceLookupTableTextureParameterName;                      // 0x0100(0x000C)
    char                                          pa_010C[0x0004]                                               // 0x010C(0x0004)
};


// ScriptStruct  ShooterGame.AresDeathRecapHUDGlobals
// Struct Size::0x00C0
struct FAresDeathRecapHUDGlobals
{
    int32_t                                       InitialXPos;                                                  // 0x0000(0x0004)
    int32_t                                       InitialYPos;                                                  // 0x0004(0x0004)
    int32_t                                       NewLineSize;                                                  // 0x0008(0x0004)
    FColor                                        NeutralFontColor;                                             // 0x000C(0x0004)
    FColor                                        EnemyFontColor;                                               // 0x0010(0x0004)
    FColor                                        MyFontColor;                                                  // 0x0014(0x0004)
    FColor                                        FontShadowColor;                                              // 0x0018(0x0004)
    bool                                          bEnableFontOutline;                                           // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FColor                                        FontOutlineColor;                                             // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FFont*                                        DeathRecapFont;                                               // 0x0028(0x0008)
    TSoftObjectPtr<FFont>                         DeathRecapFontAsset;                                          // 0x0030(0x0030)
    int32_t                                       MinLeftLineLength;                                            // 0x0060(0x0004)
    int32_t                                       DamageDealtXPosPadding;                                       // 0x0064(0x0004)
    int32_t                                       MinRightLineLength;                                           // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FTexture2D*                                   DeathRecapBackground;                                         // 0x0070(0x0008)
    TSoftObjectPtr<FTexture2D>                    DeathRecapBackgroundAsset;                                    // 0x0078(0x0030)
    FColor                                        DeathRecapDamageDealtColor1;                                  // 0x00A8(0x0004)
    FColor                                        DeathRecapDamageDealtColor2;                                  // 0x00AC(0x0004)
    FColor                                        DeathRecapDamageTakenColor1;                                  // 0x00B0(0x0004)
    FColor                                        DeathRecapDamageTakenColor2;                                  // 0x00B4(0x0004)
    int32_t                                       DeathRecapItemYPadding;                                       // 0x00B8(0x0004)
    float                                         DeathRecapFadeTime;                                           // 0x00BC(0x0004)
};


// ScriptStruct  Engine.CanvasIcon
// Struct Size::0x0018
struct FCanvasIcon
{
    FTexture*                                     Texture;                                                      // 0x0000(0x0008)
    float                                         U;                                                            // 0x0008(0x0004)
    float                                         V;                                                            // 0x000C(0x0004)
    float                                         UL;                                                           // 0x0010(0x0004)
    float                                         VL;                                                           // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.AresTheme
// Struct Size::0x0018
struct FAresTheme
{
    FName                                         ThemeName;                                                    // 0x0000(0x000C)
    FColor                                        Colors;                                                       // 0x000C(0x0004)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  ShooterGame.AresAudioGlobals
// Struct Size::0x0010
struct FAresAudioGlobals
{
    FAresSoundHandler*                            SoundHandlerClass;                                            // 0x0000(0x0008)
    float                                         BulletWhizConsiderationRadius;                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.AresInputGlobals
// Struct Size::0x0014
struct FAresInputGlobals
{
    float                                         MouseScalePitch;                                              // 0x0000(0x0004)
    float                                         MouseScaleYaw;                                                // 0x0004(0x0004)
    float                                         NormalFoV;                                                    // 0x0008(0x0004)
    float                                         NormalFoV1P;                                                  // 0x000C(0x0004)
    float                                         TouchFoV;                                                     // 0x0010(0x0004)
};


// ScriptStruct  ShooterGame.AresGameGlobals
// Struct Size::0x0048
struct FAresGameGlobals
{
    int32_t                                       TeamSelectTime;                                               // 0x0000(0x0004)
    int32_t                                       PreRoundTime;                                                 // 0x0004(0x0004)
    int32_t                                       SwitchingTeamsTime;                                           // 0x0008(0x0004)
    int32_t                                       GameEndedTime;                                                // 0x000C(0x0004)
    FShooterDamageType*                           InternalDamageType;                                           // 0x0010(0x0008)
    TSoftClassPtr<UObject>                        InternalDamageTypeAsset;                                      // 0x0018(0x0030)
};


// ScriptStruct  ShooterGame.MainMenuGameModeEntry
// Struct Size::0x0048
struct FMainMenuGameModeEntry
{
    FString                                       DisplayName;                                                  // 0x0000(0x0010)
    FGameMode*                                    Asset;                                                        // 0x0010(0x0008)
    TSoftClassPtr<UObject>                        GameModeAsset;                                                // 0x0018(0x0030)
};


// ScriptStruct  ShooterGame.MainMenuLevelEntry
// Struct Size::0x0038
struct FMainMenuLevelEntry
{
    FString                                       DisplayName;                                                  // 0x0000(0x0010)
    FText                                         DisplayNameText;                                              // 0x0010(0x0018)
    FString                                       AssetName;                                                    // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.AresCheatData
// Struct Size::0x0070
struct FAresCheatData
{
    FPawn*                                        TargetMannequinClass;                                         // 0x0000(0x0008)
    TSoftClassPtr<UObject>                        TargetMannequinClassAsset;                                    // 0x0008(0x0030)
    TSoftClassPtr<UObject>                        MannequinPlayerControllerClassAsset;                          // 0x0038(0x0030)
    FColor                                        DebugMessageColor;                                            // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  ShooterGame.AresCharacterSelectResources
// Struct Size::0x0178
struct FAresCharacterSelectResources
{
    USkeletalMesh*                                CharacterSelectMesh;                                          // 0x0000(0x0008)
    TSoftObjectPtr<USkeletalMesh>                 CharacterSelectMeshAsset;                                     // 0x0008(0x0030)
    TArray<FAresCharacterSelectCharacterAttachment>CharacterSelectAttachments;                                  // 0x0038(0x0010)
    FVector                                       CharacterScale;                                               // 0x0048(0x000C)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    UObject*                                      CharacterSelectAnimGraphClass;                                // 0x0058(0x0008)
    TSoftClassPtr<UObject>                        CharacterSelectAnimGraphClassAsset;                           // 0x0060(0x0030)
    FTexture*                                     ClassIcon;                                                    // 0x0090(0x0008)
    TSoftObjectPtr<FTexture>                      ClassIconAsset;                                               // 0x0098(0x0030)
    TSoftObjectPtr<FTexture>                      ClassIconAsset2;                                              // 0x00C8(0x0030)
    TSoftObjectPtr<FTexture>                      LockedInIconAsset;                                            // 0x00F8(0x0030)
    FString                                       CharacterBackgroundText;                                      // 0x0128(0x0010)
    FString                                       CharacterQuoteText;                                           // 0x0138(0x0010)
    FText                                         CharacterBackgroundLocalizedText;                             // 0x0148(0x0018)
    FText                                         CharacterQuoteLocalizedText;                                  // 0x0160(0x0018)
};


// ScriptStruct  ShooterGame.AresCharacterSelectCharacterAttachment
// Struct Size::0x00C8
struct FAresCharacterSelectCharacterAttachment
{
    USkeletalMesh*                                AttachedMesh;                                                 // 0x0000(0x0008)
    TSoftObjectPtr<USkeletalMesh>                 AttachedMeshAsset;                                            // 0x0008(0x0030)
    FRotator                                      AttachRotation;                                               // 0x0038(0x000C)
    FName                                         AttachSocket;                                                 // 0x0044(0x000C)
    enum class EAnimationMode                     AnimationMode;                                                // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
    UObject*                                      AnimGraphClass;                                               // 0x0058(0x0008)
    TSoftClassPtr<UObject>                        AnimGraphClassAsset;                                          // 0x0060(0x0030)
    FAnimationAsset*                              AnimToPlay;                                                   // 0x0090(0x0008)
    TSoftObjectPtr<FAnimationAsset>               AnimToPlayAsset;                                              // 0x0098(0x0030)
};


// ScriptStruct  ShooterGame.AgentMasteryTelemetryEvent
// Struct Size::0x0038
struct FAgentMasteryTelemetryEvent
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
    FString                                       Subject;                                                      // 0x0010(0x0010)
    FAccoladeTelemetryData                        AccoladeData;                                                 // 0x0020(0x0018)
};


// ScriptStruct  ShooterGame.AccoladeTelemetryData
// Struct Size::0x0018
struct FAccoladeTelemetryData
{
    FString                                       AccoladeID;                                                   // 0x0000(0x0010)
    int32_t                                       Count;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.MatchStartEvent
// Struct Size::0x00A0
struct FMatchStartEvent
{
    FGameEventMatchInfo                           MatchInfo;                                                    // 0x0000(0x0068)
    FString                                       InstanceId;                                                   // 0x0068(0x0010)
    TArray<FGameEventPlayerInfo>                  PlayerInfos;                                                  // 0x0078(0x0010)
    FGameServerLoadTestInfo                       GameServerLoadTestInfo;                                       // 0x0088(0x0018)
};


// ScriptStruct  ShooterGame.GameServerLoadTestInfo
// Struct Size::0x0018
struct FGameServerLoadTestInfo
{
    FString                                       LoadTestID;                                                   // 0x0000(0x0010)
    int32_t                                       ServerInstanceID;                                             // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.AresTeamCount
// Struct Size::0x0010
struct FAresTeamCount : public FAresTeamListEntry
{
    int32_t                                       Count;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.AresTeamEconomy
// Struct Size::0x0018
struct FAresTeamEconomy : public FAresTeamListEntry
{
    int32_t                                       LoadoutValue;                                                 // 0x0008(0x0004)
    int32_t                                       AverageLoadoutValue;                                          // 0x000C(0x0004)
    int32_t                                       InventoryValue;                                               // 0x0010(0x0004)
    int32_t                                       MoneyValue;                                                   // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.AresTeamInfo
// Struct Size::0x0018
struct FAresTeamInfo : public FAresTeamListEntry
{
    enum class EAresTeamRole                      InitialRole;                                                  // 0x0008(0x0001)
    enum class EAresTeamRole                      TeamRole;                                                     // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    int32_t                                       Wins;                                                         // 0x000C(0x0004)
    int32_t                                       Points;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.AresGameInfo
// Struct Size::0x0040
struct FAresGameInfo
{
    float                                         DisplayRemainingTime;                                         // 0x0000(0x0004)
    float                                         LocalDisplayRemainingTime;                                    // 0x0004(0x0004)
    bool                                          bLocallyPredictTimeAdvancing;                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         GamePhaseElapsedTime;                                         // 0x000C(0x0004)
    bool                                          bIsStoreEnabled;                                              // 0x0010(0x0001)
    bool                                          bIsInfiniteAbilitiesEnabled;                                  // 0x0011(0x0001)
    bool                                          bIsInfiniteAmmoEnabled;                                       // 0x0012(0x0001)
    bool                                          bIsInfiniteReserveEnabled;                                    // 0x0013(0x0001)
    bool                                          bIsInfiniteMoneyEnabled;                                      // 0x0014(0x0001)
    bool                                          bIsIgnoreShoppingRestrictionsEnabled;                         // 0x0015(0x0001)
    bool                                          bIsMatchTimerPaused;                                          // 0x0016(0x0001)
    bool                                          bIsIntentionEnabled;                                          // 0x0017(0x0001)
    float                                         AuthGameplayStartTimestamp;                                   // 0x0018(0x0004)
    float                                         AuthGameplayEndTimestamp;                                     // 0x001C(0x0004)
    float                                         LocalGameplayStartTimestamp;                                  // 0x0020(0x0004)
    float                                         LocalGameplayEndTimestamp;                                    // 0x0024(0x0004)
    bool                                          bGameplayActive;                                              // 0x0028(0x0001)
    bool                                          bIsDropInEnabled;                                             // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    FShooterPlayerState*                          MatchTimeoutCallingPlayer;                                    // 0x0030(0x0008)
    float                                         MatchTimeoutExpireTimeStamp;                                  // 0x0038(0x0004)
    enum class EAresMatchTimeoutState             MatchTimeoutState;                                            // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  ShooterGame.DebugCustomTeamColor
// Struct Size::0x0010
struct FDebugCustomTeamColor
{
    FName                                         Team;                                                         // 0x0000(0x000C)
    FColor                                        TeamColor;                                                    // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.CustomTeamColor
// Struct Size::0x0010
struct FCustomTeamColor
{
    FBaseTeamComponent*                           Team;                                                         // 0x0000(0x0008)
    FColor                                        TeamColor;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.AresPlatformMatchInfo
// Struct Size::0x0010
struct FAresPlatformMatchInfo
{
    FString                                       MatchID;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.AresHeightDifference
// Struct Size::0x0028
struct FAresHeightDifference
{
    FCanvasIcon                                   HeightIcon;                                                   // 0x0000(0x0018)
    FVector2D                                     OffsetFromParentIcon;                                         // 0x0018(0x0008)
    float                                         HeightDifference;                                             // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ShooterGame.ClientErrorMessage
// Struct Size::0x0020
struct FClientErrorMessage
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  ShooterGame.AnnouncerHUD
// Struct Size::0x0004
struct FAnnouncerHUD
{
    float                                         PortraitScale;                                                // 0x0000(0x0004)
};


// ScriptStruct  ShooterGame.CharacterHUD
// Struct Size::0x0060
struct FCharacterHUD
{
    FMaterialInstanceConstant*                    SmokeScreenMaterial;                                          // 0x0000(0x0008)
    FName                                         SmokeScreenMaterialParameter;                                 // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FMaterialInstanceDynamic*                     SmokeScreenMaterialInstance;                                  // 0x0018(0x0008)
    FParticleSystem*                              SmokeScreenParticleSystem;                                    // 0x0020(0x0008)
    FName                                         SmokeScreenParticleSystemParameter;                           // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FParticleSystemComponent*                     SmokeScreenParticleSystemComponent;                           // 0x0038(0x0008)
    float                                         MinCharacterNameTextScale;                                    // 0x0040(0x0004)
    float                                         MaxCharacterNameTextScale;                                    // 0x0044(0x0004)
    float                                         MinNameTextScaleDistance;                                     // 0x0048(0x0004)
    float                                         MaxNameTextScaleDistance;                                     // 0x004C(0x0004)
    float                                         MinNameClipScaleDistance;                                     // 0x0050(0x0004)
    float                                         MaxNameClipScaleDistance;                                     // 0x0054(0x0004)
    float                                         MinDistanceNameClipRadius;                                    // 0x0058(0x0004)
    float                                         MaxDistanceNameClipRadius;                                    // 0x005C(0x0004)
};


// ScriptStruct  ShooterGame.AresIntentionTargetDrawInfo
// Struct Size::0x0058
struct FAresIntentionTargetDrawInfo
{
    TMap<FShooterPlayerState*,FAresPlayerIntention>AssignedIntentions;                                          // 0x0000(0x0050)
    bool                                          bDrawHighlighted;                                             // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
};


// ScriptStruct  ShooterGame.AresPlayerIntention
// Struct Size::0x000C
struct FAresPlayerIntention
{
    TWeakObjectPtr<FKeyLocationObject>            Target;                                                       // 0x0000(0x0008)
    enum class EAresPlayerIntentionType           IntentionType;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  ShooterGame.AresDebugHudTuning
// Struct Size::0x0080
struct FAresDebugHudTuning
{
    float                                         RectangleDrawThickness;                                       // 0x0000(0x0004)
    FColor                                        RectangleDrawColor;                                           // 0x0004(0x0004)
    FAresHudFontParams                            NameTextFontParams;                                           // 0x0008(0x0070)
    float                                         HudAlpha;                                                     // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  ShooterGame.AresHudTuning
// Struct Size::0x0004
struct FAresHudTuning
{
    float                                         SymmetricFontScalingThreshold;                                // 0x0000(0x0004)
};


// ScriptStruct  ShooterGame.AresHUDDebugMessage
// Struct Size::0x0018
struct FAresHUDDebugMessage
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    float                                         ExpireTime;                                                   // 0x0010(0x0004)
    enum class EDebugMessagePosition              Position;                                                     // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  ShooterGame.AresHUDDebugTextLine
// Struct Size::0x0018
struct FAresHUDDebugTextLine
{
    FString                                       ScreenMessage;                                                // 0x0000(0x0010)
    FColor                                        DisplayColor;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.PreDisconnectReasonInfo
// Struct Size::0x0020
struct FPreDisconnectReasonInfo
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  ShooterGame.VisualizeRestoreData
// Struct Size::0x00A0
struct FVisualizeRestoreData
{
    TMap<UPrimitiveComponent*,FVisualizeRestoreComponent>RestoreMap;                                            // 0x0000(0x0050)
    TMap<FDecalComponent*,FVisualizeRestoreComponent>DecalRestoreMap;                                           // 0x0050(0x0050)
};


// ScriptStruct  ShooterGame.VisualizeRestoreComponent
// Struct Size::0x0018
struct FVisualizeRestoreComponent
{
    bool                                          bHidden;                                                      // 0x0000(0x0001)
    bool                                          bComponentHiddenInGame;                                       // 0x0001(0x0001)
    bool                                          bActorHiddenInGame;                                           // 0x0002(0x0001)
    char                                          pa_0003[0x0005]                                               // 0x0003(0x0005)
    TArray<FMaterialInterface*>                   SavedMaterials;                                               // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.ProjectileTuning
// Struct Size::0x0028
struct FProjectileTuning
{
    FProjectile*                                  ProjectileFired;                                              // 0x0000(0x0008)
    float                                         SpeedScale;                                                   // 0x0008(0x0004)
    int32_t                                       ProjectilesPerShot;                                           // 0x000C(0x0004)
    TArray<FVector2D>                             MultiProjectileOffsets;                                       // 0x0010(0x0010)
    bool                                          bRandomlyRotateProjectileOffsets;                             // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ShooterGame.ExplicitFloatCurve
// Struct Size::0x0088
struct FExplicitFloatCurve
{
    FRuntimeFloatCurve                            Curve;                                                        // 0x0000(0x0088)
};


// ScriptStruct  ShooterGame.NormalDistributionParameters
// Struct Size::0x0008
struct FNormalDistributionParameters
{
    float                                         Mean;                                                         // 0x0000(0x0004)
    float                                         StdDev;                                                       // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.AresDebugTextReplicated
// Struct Size::0x0018
struct FAresDebugTextReplicated
{
    FString                                       Text;                                                         // 0x0000(0x0010)
    float                                         LifeTime;                                                     // 0x0010(0x0004)
    FColor                                        Color;                                                        // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.AresDebugLineReplicated
// Struct Size::0x002C
struct FAresDebugLineReplicated
{
    FVector                                       LineStart;                                                    // 0x0000(0x000C)
    FVector                                       LineEnd;                                                      // 0x000C(0x000C)
    FColor                                        Color;                                                        // 0x0018(0x0004)
    bool                                          bPersistentLines;                                             // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         LifeTime;                                                     // 0x0020(0x0004)
    char                                          DepthPriority;                                                // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         Thickness;                                                    // 0x0028(0x0004)
};


// ScriptStruct  ShooterGame.AresDebugSphereReplicated
// Struct Size::0x0024
struct FAresDebugSphereReplicated
{
    FVector                                       Center;                                                       // 0x0000(0x000C)
    float                                         Radius;                                                       // 0x000C(0x0004)
    int32_t                                       Segments;                                                     // 0x0010(0x0004)
    FColor                                        Color;                                                        // 0x0014(0x0004)
    bool                                          bPersistentLines;                                             // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         LifeTime;                                                     // 0x001C(0x0004)
    char                                          DepthPriority;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
};


// ScriptStruct  ShooterGame.AresGameRewardReplicated
// Struct Size::0x0030
struct FAresGameRewardReplicated
{
    FName                                         RewardName;                                                   // 0x0000(0x000C)
    FAresGameReward                               Reward;                                                       // 0x000C(0x0024)
};


// ScriptStruct  ShooterGame.AresGameRewardTuning
// Struct Size::0x0058
struct FAresGameRewardTuning
{
    FName                                         RewardName;                                                   // 0x0000(0x000C)
    FName                                         RewardDisplayName;                                            // 0x000C(0x000C)
    FText                                         RewardDisplayText;                                            // 0x0018(0x0018)
    FAresGameReward                               DefaultReward;                                                // 0x0030(0x0024)
    enum class EAresRewardGrantStrategy           WhenToGrantReward;                                            // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
};


// ScriptStruct  ShooterGame.AresGameRewardMultiplier
// Struct Size::0x0024
struct FAresGameRewardMultiplier
{
    float                                         Multipliers;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0020]                                               // 0x0004(0x0020)
};


// ScriptStruct  ShooterGame.AresHitImpactParticle
// Struct Size::0x0018
struct FAresHitImpactParticle
{
    FParticleSystem*                              ParticleSystem;                                               // 0x0000(0x0008)
    FCurveFloat*                                  ScaleDistance;                                                // 0x0008(0x0008)
    enum class EAresHitImpactParticleOrientation  Orientation;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.AresWaveSpawnInfo
// Struct Size::0x0018
struct FAresWaveSpawnInfo
{
    TArray<AActor*>                               WaveMinionClasses;                                            // 0x0000(0x0010)
    float                                         SpawnFrequency;                                               // 0x0010(0x0004)
    float                                         SpawnTimeRemaining;                                           // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.AresInputInterpolant
// Struct Size::0x0014
struct FAresInputInterpolant
{
    float                                         InputRangeStart;                                              // 0x0000(0x0004)
    float                                         InputRangeEnd;                                                // 0x0004(0x0004)
    float                                         OutputRangeStart;                                             // 0x0008(0x0004)
    float                                         OutputRangeEnd;                                               // 0x000C(0x0004)
    enum class EAresInterpolationFunction         InterpolationType;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  ShooterGame.AresPlayerRoundInfo
// Struct Size::0x0014
struct FAresPlayerRoundInfo
{
    int32_t                                       RoundNumber;                                                  // 0x0000(0x0004)
    int32_t                                       StartOfRoundMoney;                                            // 0x0004(0x0004)
    int32_t                                       StartOfRoundLoadoutValue;                                     // 0x0008(0x0004)
    int32_t                                       EndOfRoundMoney;                                              // 0x000C(0x0004)
    int32_t                                       EndOfRoundLoadoutValue;                                       // 0x0010(0x0004)
};


// ScriptStruct  ShooterGame.AresRoundResult
// Struct Size::0x0020
struct FAresRoundResult
{
    FName                                         WinningTeam;                                                  // 0x0000(0x000C)
    enum class EAresTeamRole                      WinningTeamRole;                                              // 0x000C(0x0001)
    enum class EAresRoundOutcome                  RoundResult;                                                  // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    TArray<FBaseTeamComponent*>                   EliminatedTeams;                                              // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.ShooterGameTimeMarker
// Struct Size::0x000C
struct FShooterGameTimeMarker
{
    float                                         PausableUndilatedWorldTime;                                   // 0x0000(0x0004)
    int32_t                                       RoundNumber;                                                  // 0x0004(0x0004)
    enum class EAresGamePhase                     GamePhase;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  ShooterGame.DegradedNetworkSimulationPresets
// Struct Size::0x0010
struct FDegradedNetworkSimulationPresets
{
    TArray<FNamedNetworkPresets>                  Presets;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.NamedNetworkPresets
// Struct Size::0x0088
struct FNamedNetworkPresets
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FNetworkDegradationSettings                   Mean;                                                         // 0x0010(0x003C)
    FNetworkDegradationSettings                   StdDev;                                                       // 0x004C(0x003C)
};


// ScriptStruct  ShooterGame.NetworkDegradationSettings
// Struct Size::0x003C
struct FNetworkDegradationSettings
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         LagMean;                                                      // 0x0004(0x0004)
    float                                         LagVariance;                                                  // 0x0008(0x0004)
    float                                         BaselinePacketLoss;                                           // 0x000C(0x0004)
    FBurstPacketLossSettings                      BurstLoss;                                                    // 0x0010(0x002C)
};


// ScriptStruct  ShooterGame.BurstPacketLossSettings
// Struct Size::0x002C
struct FBurstPacketLossSettings
{
    bool                                          bSimulateBurstLoss;                                           // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         NextStartTime;                                                // 0x0004(0x0004)
    float                                         NextDurationMS;                                               // 0x0008(0x0004)
    float                                         NextLossPercentage;                                           // 0x000C(0x0004)
    bool                                          bIsActive;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FNormalDistributionParameters                 DurationMS;                                                   // 0x0014(0x0008)
    FNormalDistributionParameters                 PeriodSeconds;                                                // 0x001C(0x0008)
    FNormalDistributionParameters                 LossPercentage;                                               // 0x0024(0x0008)
};


// ScriptStruct  ShooterGame.CurrentNetworkSimulationSettings
// Struct Size::0x0018
struct FCurrentNetworkSimulationSettings
{
    FString                                       PresetName;                                                   // 0x0000(0x0010)
    bool                                          bEnabled;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.SkeletalPoseSnapshot
// Struct Size::0x0028
struct FSkeletalPoseSnapshot
{
    float                                         TimeStamp;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    uint64_t                                      FrameCounter;                                                 // 0x0008(0x0008)
    bool                                          bOnDemand;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TArray<FTransform>                            ComponentSpaceTransforms;                                     // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.SniperCrosshairMaterial
// Struct Size::0x0040
struct FSniperCrosshairMaterial
{
    FMaterialInterface*                           Material;                                                     // 0x0000(0x0008)
    FName                                         DistortionParameterName;                                      // 0x0008(0x000C)
    FVector2D                                     DrawExtents;                                                  // 0x0014(0x0008)
    enum class ESniperCrosshairMaterialType       MaterialType;                                                 // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FName                                         ColorParameterName;                                           // 0x0020(0x000C)
    FName                                         OpacityParameterName;                                         // 0x002C(0x000C)
    FMaterialInstanceDynamic*                     MaterialInstanceDynamic;                                      // 0x0038(0x0008)
};


// ScriptStruct  ShooterGame.SpawnActorInfo
// Struct Size::0x0050
struct FSpawnActorInfo
{
    FGameFeatureSubclass                          ActorClass;                                                   // 0x0000(0x0018)
    AActor*                                       ActorType;                                                    // 0x0018(0x0008)
    FTransform                                    Offset;                                                       // 0x0020(0x0030)
};


// ScriptStruct  ShooterGame.SpawnPointDataAdditionalStats
// Struct Size::0x0070
struct FSpawnPointDataAdditionalStats
{
    int32_t                                       NumAliveCharacters;                                           // 0x0000(0x0004)
    float                                         LookAheadMultiplier;                                          // 0x0004(0x0004)
    TMap<int32_t,int32_t>                         NumSpawnsPerVisibilityScore;                                  // 0x0008(0x0050)
    int32_t                                       NumStaleSpawnPoints;                                          // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    TArray<float>                                 ConsideredSpawnPointScores;                                   // 0x0060(0x0010)
};


// ScriptStruct  ShooterGame.SpawnPointDebugData
// Struct Size::0x00D8
struct FSpawnPointDebugData
{
    FSpawnPointData                               SpawnPointData;                                               // 0x0000(0x0078)
    FVector                                       SpawnPointLocation;                                           // 0x0078(0x000C)
    float                                         HalfHeight;                                                   // 0x0084(0x0004)
    float                                         Radius;                                                       // 0x0088(0x0004)
    FRotator                                      Rotation;                                                     // 0x008C(0x000C)
    bool                                          bInitialSpawnPoint;                                           // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
    FString                                       SpawnPointActorName;                                          // 0x00A0(0x0010)
    float                                         FFATeamScore;                                                 // 0x00B0(0x0004)
    int32_t                                       FFATeamNumVisibleEnemyCharacters;                             // 0x00B4(0x0004)
    bool                                          FFATeamSpawnPointDataStale;                                   // 0x00B8(0x0001)
    char                                          pa_00B9[0x0003]                                               // 0x00B9(0x0003)
    float                                         AttackerTeamScore;                                            // 0x00BC(0x0004)
    int32_t                                       AttackerTeamNumVisibleEnemyCharacters;                        // 0x00C0(0x0004)
    bool                                          AttackerTeamSpawnPointDataStale;                              // 0x00C4(0x0001)
    char                                          pa_00C5[0x0003]                                               // 0x00C5(0x0003)
    float                                         DefenderTeamScore;                                            // 0x00C8(0x0004)
    int32_t                                       DefenderTeamNumVisibleEnemyCharacters;                        // 0x00CC(0x0004)
    bool                                          DefenderTeamSpawnPointDataStale;                              // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
};


// ScriptStruct  ShooterGame.FixedRateDecayForStability
// Struct Size::0x00A0
struct FFixedRateDecayForStability
{
    FRuntimeFloatCurve                            DecayRateAtStability;                                         // 0x0000(0x0088)
    float                                         AdditionalDecayRate;                                          // 0x0088(0x0004)
    enum class EDecayBehaviorBelowDesired         IncreaseBehaviorWhenNotFiring;                                // 0x008C(0x0001)
    char                                          pa_008D[0x0003]                                               // 0x008D(0x0003)
    float                                         IncreaseRate;                                                 // 0x0090(0x0004)
    float                                         CurrentValue;                                                 // 0x0094(0x0004)
    float                                         CurrentDecayStartValue;                                       // 0x0098(0x0004)
    float                                         CurrentDecayStartTime;                                        // 0x009C(0x0004)
};


// ScriptStruct  ShooterGame.StabilityFiringValues
// Struct Size::0x0010
struct FStabilityFiringValues
{
    float                                         StabilityIndex;                                               // 0x0000(0x0004)
    float                                         Error;                                                        // 0x0004(0x0004)
    float                                         PitchRecoil;                                                  // 0x0008(0x0004)
    float                                         YawRecoil;                                                    // 0x000C(0x0004)
};


// ScriptStruct  ShooterGame.YawDirectionManipulator
// Struct Size::0x002C
struct FYawDirectionManipulator
{
    float                                         BaseYawSwitchChance;                                          // 0x0000(0x0004)
    float                                         YawSwitchStabilityMultipliers;                                // 0x0004(0x0004)
    char                                          pa_0008[0x0014]                                               // 0x0008(0x0014)
    enum class EStabilityInterpolationType        YawSwitchChanceIncreaseInterpolationType;                     // 0x001C(0x0001)
    enum class EStabilityInterpolationType        YawSwitchChanceRecoveryInterpolationType;                     // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    float                                         TimeToSwitchYaw;                                              // 0x0020(0x0004)
    enum class EStabilityInterpolationType        YawSwitchOverInterpolationType;                               // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         ProtectedBulletCount;                                         // 0x0028(0x0004)
};


// ScriptStruct  ShooterGame.StabilityInterpolation
// Struct Size::0x0064
struct FStabilityInterpolation
{
    FStabilityInterpolationVariable               InterpolationVariables;                                       // 0x0000(0x0014)
    char                                          pa_0014[0x0050]                                               // 0x0014(0x0050)
};


// ScriptStruct  ShooterGame.StabilityInterpolationVariable
// Struct Size::0x0014
struct FStabilityInterpolationVariable
{
    float                                         StartValue;                                                   // 0x0000(0x0004)
    float                                         TargetValue;                                                  // 0x0004(0x0004)
    float                                         InterpolationTimeRemaining;                                   // 0x0008(0x0004)
    float                                         InterpolationDuration;                                        // 0x000C(0x0004)
    enum class EStabilityInterpolationType        InterpolationType;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  ShooterGame.StabilityVariable
// Struct Size::0x07C8
struct FStabilityVariable
{
    FRuntimeFloatCurve                            FiringCurve;                                                  // 0x0000(0x0088)
    FRuntimeFloatCurve                            MovementCurves;                                               // 0x0088(0x0088)
    char                                          pa_0110[0x02A8]                                               // 0x0110(0x02A8)
    FRuntimeFloatCurve                            TaggingOverrideCurves;                                        // 0x03B8(0x0088)
    char                                          pa_0440[0x02A8]                                               // 0x0440(0x02A8)
    float                                         StabilityStateMultipliers;                                    // 0x06E8(0x0004)
    char                                          pa_06EC[0x0014]                                               // 0x06EC(0x0014)
    float                                         ADSStabilityMultipliers;                                      // 0x0700(0x0004)
    char                                          pa_0704[0x0014]                                               // 0x0704(0x0014)
    float                                         ADSStabilityAddends;                                          // 0x0718(0x0004)
    char                                          pa_071C[0x0014]                                               // 0x071C(0x0014)
    FRuntimeFloatCurve                            CrouchingOrInZoomStabilityStateModifier;                      // 0x0730(0x0088)
    char                                          pa_07B8[0x0010]                                               // 0x07B8(0x0010)
};


// ScriptStruct  ShooterGame.StabilityValuePercents
// Struct Size::0x0014
struct FStabilityValuePercents
{
    FErrorValuePercents                           Error;                                                        // 0x0000(0x000C)
    FRecoilValuePercents                          Recoil;                                                       // 0x000C(0x0008)
};


// ScriptStruct  ShooterGame.RecoilValuePercents
// Struct Size::0x0008
struct FRecoilValuePercents
{
    float                                         PitchPercent;                                                 // 0x0000(0x0004)
    float                                         YawPercent;                                                   // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.ErrorValuePercents
// Struct Size::0x000C
struct FErrorValuePercents
{
    float                                         FiringErrorPercent;                                           // 0x0000(0x0004)
    float                                         MovementErrorPercent;                                         // 0x0004(0x0004)
    float                                         TotalErrorPercent;                                            // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.CameraTuning
// Struct Size::0x0250
struct FCameraTuning
{
    FCameraFollowTuning                           CameraFollowTuning;                                           // 0x0000(0x0118)
    FCameraPopTuning                              CameraPopTuning;                                              // 0x0118(0x0120)
    FAdsCameraPopTuning                           AdsCameraPopTuning;                                           // 0x0238(0x0008)
    FAdsCameraShakeTuning                         AdsCameraShakeTuning;                                         // 0x0240(0x0008)
    float                                         AdsForwardOffset;                                             // 0x0248(0x0004)
    bool                                          bAdsAnimationEnabled;                                         // 0x024C(0x0001)
    bool                                          bAdsCrosshairFollowsRecoil;                                   // 0x024D(0x0001)
    char                                          pa_024E[0x0002]                                               // 0x024E(0x0002)
};


// ScriptStruct  ShooterGame.AdsCameraShakeTuning
// Struct Size::0x0008
struct FAdsCameraShakeTuning
{
    float                                         RotationCameraShakePercent;                                   // 0x0000(0x0004)
    float                                         TranslationCameraShakePercent;                                // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.AdsCameraPopTuning
// Struct Size::0x0008
struct FAdsCameraPopTuning
{
    float                                         WeaponPitchCameraPopPercent;                                  // 0x0000(0x0004)
    float                                         WeaponYawCameraPopPercent;                                    // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.CameraPopTuning
// Struct Size::0x0120
struct FCameraPopTuning
{
    FRuntimeFloatCurve                            PitchPopCurve;                                                // 0x0000(0x0088)
    FRuntimeFloatCurve                            YawPopCurve;                                                  // 0x0088(0x0088)
    float                                         PitchMinPop;                                                  // 0x0110(0x0004)
    float                                         PitchMaxPop;                                                  // 0x0114(0x0004)
    float                                         YawMinPop;                                                    // 0x0118(0x0004)
    float                                         YawMaxPop;                                                    // 0x011C(0x0004)
};


// ScriptStruct  ShooterGame.CameraFollowTuning
// Struct Size::0x0118
struct FCameraFollowTuning
{
    float                                         PitchRecoilFollowPercent;                                     // 0x0000(0x0004)
    float                                         YawRecoilFollowPercent;                                       // 0x0004(0x0004)
    FRuntimeFloatCurve                            PitchFollowPercentCurve;                                      // 0x0008(0x0088)
    FRuntimeFloatCurve                            YawFollowPercentCurve;                                        // 0x0090(0x0088)
};


// ScriptStruct  ShooterGame.ActiveScriptStateEffect
// Struct Size::0x0030
struct FActiveScriptStateEffect
{
    FEffectID                                     EffectID;                                                     // 0x0000(0x0020)
    enum class EMovementSync                      MovementSync;                                                 // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    FEffectManagerComponent*                      TargetEffectManager;                                          // 0x0028(0x0008)
};


// ScriptStruct  ShooterGame.MultiStateEffectRequest
// Struct Size::0x000C
struct FMultiStateEffectRequest
{
    FName                                         EffectName;                                                   // 0x0000(0x000C)
};


// ScriptStruct  ShooterGame.MultiStateEffectDefinition
// Struct Size::0x0038
struct FMultiStateEffectDefinition
{
    FScriptStateEffectInfo                        EffectInfo;                                                   // 0x0000(0x0038)
};


// ScriptStruct  ShooterGame.StateContext
// Struct Size::0x0018
struct FStateContext
{
    FStateComponent*                              CurrentState;                                                 // 0x0000(0x0008)
    FStateTransitionContext*                      TransitionContext;                                            // 0x0008(0x0008)
    float                                         AuthStartWorldTime;                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.StateMetadata
// Struct Size::0x0004
struct FStateMetadata
{
    float                                         TimeForNextTick;                                              // 0x0000(0x0004)
};


// ScriptStruct  ShooterGame.StateMachineDebugHistoryEntry
// Struct Size::0x0030
struct FStateMachineDebugHistoryEntry
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
    float                                         NetTimestamp;                                                 // 0x0004(0x0004)
    float                                         RealtimeTimestamp;                                            // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FStateComponent*                              NewState;                                                     // 0x0010(0x0008)
    FString                                       ContextName;                                                  // 0x0018(0x0010)
    enum class EStateMachineDebugEntryMatchState  MatchState;                                                   // 0x0028(0x0001)
    bool                                          bWasLastStateBeforeDisagreement;                              // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
};


// ScriptStruct  ShooterGame.StateTransition
// Struct Size::0x0020
struct FStateTransition
{
    bool                                          bIsSet;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FStateComponent*                              NextState;                                                    // 0x0008(0x0008)
    FStateTransitionContext*                      TransitionContext;                                            // 0x0010(0x0008)
    float                                         DeltaTimeConsumed;                                            // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.RevealInfo
// Struct Size::0x0008
struct FRevealInfo
{
    bool                                          bInRevealRange;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         RangeChangeTimestamp;                                         // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.StealthTrackedEnemies
// Struct Size::0x00A0
struct FStealthTrackedEnemies
{
    TMap<FShooterCharacter*,FStealthRangeData>    TrackedEnemies;                                               // 0x0000(0x0050)
    TMap<FShooterCharacter*,float>                TrackedEnemyExitTimes;                                        // 0x0050(0x0050)
};


// ScriptStruct  ShooterGame.StealthRangeData
// Struct Size::0x0058
struct FStealthRangeData
{
    float                                         TimeInRange;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TSet<UPrimitiveComponent*>                    OverlappedRangeColliders;                                     // 0x0008(0x0050)
};


// ScriptStruct  ShooterGame.EntitlementTypeInfo
// Struct Size::0x00D0
struct FEntitlementTypeInfo
{
    enum class EAresContentType                   AresContentType;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FGuid                                         ItemTypeUUID;                                                 // 0x0004(0x0010)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TSet<FOwnedEntitlement>                       OwnedEntitlements;                                            // 0x0018(0x0050)
    TSet<FGuid>                                   OwnedItems;                                                   // 0x0068(0x0050)
    bool                                          bInitialized;                                                 // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
    FMulticastInlineDelegate                      OnChangeDelegate;                                             // 0x00C0(0x0010)
};


// ScriptStruct  ShooterGame.OwnedEntitlement
// Struct Size::0x0034
struct FOwnedEntitlement
{
    FGuid                                         EntitlementTypeID;                                            // 0x0000(0x0010)
    enum class EAresContentType                   TypeID;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FGuid                                         ServiceID;                                                    // 0x0014(0x0010)
    FGuid                                         InstanceID;                                                   // 0x0024(0x0010)
};


// ScriptStruct  ShooterGame.PlatformOfferPrice
// Struct Size::0x0028
struct FPlatformOfferPrice
{
    float                                         Price;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       CurrencyCode;                                                 // 0x0008(0x0010)
    FString                                       FormattedPrice;                                               // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.PluginStorefrontBundleModels
// Struct Size::0x0010
struct FPluginStorefrontBundleModels
{
    TArray<FPluginStorefrontBundleModel*>         PluginStorefrontBundleModels;                                 // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.StoreOfferReward
// Struct Size::0x0030
struct FStoreOfferReward
{
    FGuid                                         ItemTypeID;                                                   // 0x0000(0x0010)
    FGuid                                         ItemID;                                                       // 0x0010(0x0010)
    int32_t                                       Quantity;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FRewardModel*                                 RewardModel;                                                  // 0x0028(0x0008)
};


// ScriptStruct  ShooterGame.WalletCurrency
// Struct Size::0x0058
struct FWalletCurrency
{
    int32_t                                       amount;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TMap<FString,int32_t>                         subCurrencies;                                                // 0x0008(0x0050)
};


// ScriptStruct  ShooterGame.EntitlementsRMSPayload
// Struct Size::0x0050
struct FEntitlementsRMSPayload
{
    FString                                       itemId;                                                       // 0x0000(0x0010)
    FString                                       entitlementId;                                                // 0x0010(0x0010)
    FString                                       resourceOperation;                                            // 0x0020(0x0010)
    FString                                       entitlementTypeId;                                            // 0x0030(0x0010)
    FString                                       itemTypeId;                                                   // 0x0040(0x0010)
};


// ScriptStruct  ShooterGame.OrderRMSPayload
// Struct Size::0x0040
struct FOrderRMSPayload
{
    FString                                       eventTypeId;                                                  // 0x0000(0x0010)
    FString                                       orderId;                                                      // 0x0010(0x0010)
    FString                                       eventType;                                                    // 0x0020(0x0010)
    FString                                       status;                                                       // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.ConnexRMSPayload
// Struct Size::0x0038
struct FConnexRMSPayload
{
    FGuid                                         puuid;                                                        // 0x0000(0x0010)
    FGuid                                         subscriptionId;                                               // 0x0010(0x0010)
    bool                                          active;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    FString                                       identityProvider;                                             // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.GetAllEntitlementsResponse
// Struct Size::0x0010
struct FGetAllEntitlementsResponse
{
    TArray<FGetEntitlementsResponse>              EntitlementsByTypes;                                          // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.GetEntitlementsResponse
// Struct Size::0x0020
struct FGetEntitlementsResponse
{
    FGuid                                         ItemTypeID;                                                   // 0x0000(0x0010)
    TArray<FStoreEntitlement>                     Entitlements;                                                 // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.StoreEntitlement
// Struct Size::0x0030
struct FStoreEntitlement
{
    FGuid                                         TypeID;                                                       // 0x0000(0x0010)
    FGuid                                         ItemID;                                                       // 0x0010(0x0010)
    FGuid                                         InstanceID;                                                   // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.GetOffersResponse
// Struct Size::0x0020
struct FGetOffersResponse
{
    TArray<FStoreOffer*>                          Offers;                                                       // 0x0000(0x0010)
    TArray<FUpgradeCurrencyOfferResponse>         UpgradeCurrencyOffers;                                        // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.UpgradeCurrencyOfferResponse
// Struct Size::0x0030
struct FUpgradeCurrencyOfferResponse
{
    FGuid                                         OfferID;                                                      // 0x0000(0x0010)
    FGuid                                         StorefrontItemID;                                             // 0x0010(0x0010)
    FStoreOffer*                                  Offer;                                                        // 0x0020(0x0008)
    float                                         DiscountedPercent;                                            // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.GetStorefrontResponseV3
// Struct Size::0x01C0
struct FGetStorefrontResponseV3
{
    FBundleLayout                                 FeaturedBundle;                                               // 0x0000(0x0118)
    FSkinsPanelLayout                             SkinsPanelLayout;                                             // 0x0118(0x0028)
    FBonusStoreStorefront                         BonusStore;                                                   // 0x0140(0x0018)
    FAccessoryStorefront                          AccessoryStore;                                               // 0x0158(0x0028)
    FJuiceBoxStorefront                           JuiceBoxStore;                                                // 0x0180(0x0018)
    FUpgradeCurrencyStorefront                    UpgradeCurrencyStore;                                         // 0x0198(0x0010)
    TArray<FPluginStorefront>                     PluginStores;                                                 // 0x01A8(0x0010)
    int32_t                                       SecondsUntilRefreshNeeded;                                    // 0x01B8(0x0004)
    char                                          pa_01BC[0x0004]                                               // 0x01BC(0x0004)
};


// ScriptStruct  ShooterGame.PluginStorefront
// Struct Size::0x0020
struct FPluginStorefront
{
    FGuid                                         PluginID;                                                     // 0x0000(0x0010)
    FPluginStoreOffers                            PluginOffers;                                                 // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.PluginStoreOffers
// Struct Size::0x0010
struct FPluginStoreOffers
{
    TArray<FPluginStoreOffer>                     StoreOffers;                                                  // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.PluginStoreOffer
// Struct Size::0x0110
struct FPluginStoreOffer
{
    FPluginStorePurchaseInformation               PurchaseInformation;                                          // 0x0000(0x0100)
    TArray<FPluginStoreSubOffer>                  SubOffers;                                                    // 0x0100(0x0010)
};


// ScriptStruct  ShooterGame.PluginStoreSubOffer
// Struct Size::0x0100
struct FPluginStoreSubOffer
{
    FPluginStorePurchaseInformation               PurchaseInformation;                                          // 0x0000(0x0100)
};


// ScriptStruct  ShooterGame.PluginStorePurchaseInformation
// Struct Size::0x0100
struct FPluginStorePurchaseInformation
{
    FGuid                                         DataAssetID;                                                  // 0x0000(0x0010)
    FGuid                                         OfferID;                                                      // 0x0010(0x0010)
    FDateTime                                     StartDate;                                                    // 0x0020(0x0008)
    FGuid                                         PrimaryCurrencyID;                                            // 0x0028(0x0010)
    TMap<FGuid,int32_t>                           Cost;                                                         // 0x0038(0x0050)
    TMap<FGuid,int32_t>                           DiscountedCost;                                               // 0x0088(0x0050)
    int32_t                                       DiscountedPercentage;                                         // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
    FStoreOffer*                                  Offer;                                                        // 0x00E0(0x0008)
    TArray<FPluginStoreReward>                    Rewards;                                                      // 0x00E8(0x0010)
    bool                                          WholeSaleOnly;                                                // 0x00F8(0x0001)
    char                                          pa_00F9[0x0007]                                               // 0x00F9(0x0007)
};


// ScriptStruct  ShooterGame.PluginStoreReward
// Struct Size::0x0024
struct FPluginStoreReward
{
    FGuid                                         ItemTypeID;                                                   // 0x0000(0x0010)
    FGuid                                         ItemID;                                                       // 0x0010(0x0010)
    int32_t                                       Quantity;                                                     // 0x0020(0x0004)
};


// ScriptStruct  ShooterGame.UpgradeCurrencyStorefront
// Struct Size::0x0010
struct FUpgradeCurrencyStorefront
{
    TArray<FUpgradeCurrencyOfferResponse>         UpgradeCurrencyOffers;                                        // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.JuiceBoxStorefront
// Struct Size::0x0018
struct FJuiceBoxStorefront
{
    TArray<FJuiceBoxOffer>                        Offers;                                                       // 0x0000(0x0010)
    bool                                          IsEligibleForJuice;                                           // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.JuiceBoxOffer
// Struct Size::0x004C
struct FJuiceBoxOffer
{
    FGuid                                         JuiceBoxOfferID;                                              // 0x0000(0x0010)
    FGuid                                         StorefrontItemID;                                             // 0x0010(0x0010)
    FGuid                                         JuiceBoxID;                                                   // 0x0020(0x0010)
    int32_t                                       Amount;                                                       // 0x0030(0x0004)
    int32_t                                       BonusAmount;                                                  // 0x0034(0x0004)
    FGuid                                         PurchaseCurrency;                                             // 0x0038(0x0010)
    int32_t                                       PurchaseCost;                                                 // 0x0048(0x0004)
};


// ScriptStruct  ShooterGame.AccessoryStorefront
// Struct Size::0x0028
struct FAccessoryStorefront
{
    TArray<FAccessoryStoreOfferDTO>               AccessoryStoreOffers;                                         // 0x0000(0x0010)
    int32_t                                       AccessoryStoreRemainingDurationInSeconds;                     // 0x0010(0x0004)
    FGuid                                         StorefrontID;                                                 // 0x0014(0x0010)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ShooterGame.AccessoryStoreOfferDTO
// Struct Size::0x0018
struct FAccessoryStoreOfferDTO
{
    FStoreOffer*                                  Offer;                                                        // 0x0000(0x0008)
    FGuid                                         ContractID;                                                   // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.BonusStoreStorefront
// Struct Size::0x0018
struct FBonusStoreStorefront
{
    TArray<FBonusStoreOfferDTO>                   BonusStoreOffers;                                             // 0x0000(0x0010)
    int32_t                                       BonusStoreRemainingDurationInSeconds;                         // 0x0010(0x0004)
    int32_t                                       BonusStoreSecondsSinceItStarted;                              // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.BonusStoreOfferDTO
// Struct Size::0x0078
struct FBonusStoreOfferDTO
{
    FGuid                                         BonusOfferID;                                                 // 0x0000(0x0010)
    FStoreOffer*                                  Offer;                                                        // 0x0010(0x0008)
    int32_t                                       DiscountPercent;                                              // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TMap<FGuid,int32_t>                           DiscountCosts;                                                // 0x0020(0x0050)
    bool                                          IsSeen;                                                       // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
};


// ScriptStruct  ShooterGame.SkinsPanelLayout
// Struct Size::0x0028
struct FSkinsPanelLayout
{
    TArray<FGuid>                                 SingleItemOffers;                                             // 0x0000(0x0010)
    TArray<FStoreOffer*>                          SingleItemStoreOffers;                                        // 0x0010(0x0010)
    int32_t                                       SingleItemOffersRemainingDurationInSeconds;                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ShooterGame.BundleLayout
// Struct Size::0x0118
struct FBundleLayout
{
    FStorefrontBundle                             Bundle;                                                       // 0x0000(0x0100)
    TArray<FStorefrontBundle>                     Bundles;                                                      // 0x0100(0x0010)
    int32_t                                       BundleRemainingDurationInSeconds;                             // 0x0110(0x0004)
    char                                          pa_0114[0x0004]                                               // 0x0114(0x0004)
};


// ScriptStruct  ShooterGame.StorefrontBundle
// Struct Size::0x0100
struct FStorefrontBundle
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FGuid                                         DataAssetID;                                                  // 0x0010(0x0010)
    FGuid                                         CurrencyID;                                                   // 0x0020(0x0010)
    TArray<FStorefrontBundleItem>                 Items;                                                        // 0x0030(0x0010)
    TArray<FStorefrontBundleItemOffer>            ItemOffers;                                                   // 0x0040(0x0010)
    TMap<FGuid,int32_t>                           TotalBaseCost;                                                // 0x0050(0x0050)
    TMap<FGuid,int32_t>                           TotalDiscountedCost;                                          // 0x00A0(0x0050)
    float                                         TotalDiscountPercent;                                         // 0x00F0(0x0004)
    int32_t                                       DurationRemainingInSeconds;                                   // 0x00F4(0x0004)
    bool                                          WholesaleOnly;                                                // 0x00F8(0x0001)
    char                                          pa_00F9[0x0007]                                               // 0x00F9(0x0007)
};


// ScriptStruct  ShooterGame.StorefrontBundleItemOffer
// Struct Size::0x0070
struct FStorefrontBundleItemOffer
{
    FGuid                                         BundleItemOfferID;                                            // 0x0000(0x0010)
    FStoreOffer*                                  Offer;                                                        // 0x0010(0x0008)
    float                                         DiscountPercent;                                              // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TMap<FGuid,int32_t>                           DiscountedCost;                                               // 0x0020(0x0050)
};


// ScriptStruct  ShooterGame.StorefrontBundleItem
// Struct Size::0x0048
struct FStorefrontBundleItem
{
    FEntitlementReward                            Item;                                                         // 0x0000(0x0028)
    int32_t                                       BasePrice;                                                    // 0x0028(0x0004)
    FGuid                                         CurrencyID;                                                   // 0x002C(0x0010)
    float                                         DiscountPercent;                                              // 0x003C(0x0004)
    int32_t                                       DiscountedPrice;                                              // 0x0040(0x0004)
    bool                                          IsPromoItem;                                                  // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
};


// ScriptStruct  ShooterGame.AgentStorefront
// Struct Size::0x0030
struct FAgentStorefront
{
    FAgentStore                                   AgentStore;                                                   // 0x0000(0x0030)
};


// ScriptStruct  ShooterGame.AgentStore
// Struct Size::0x0030
struct FAgentStore
{
    TArray<FAgentStoreOffer>                      AgentStoreOffers;                                             // 0x0000(0x0010)
    FGuid                                         CurrentFeaturedAgent;                                         // 0x0010(0x0010)
    FGuid                                         NextFeaturedAgent;                                            // 0x0020(0x0010)
};


// ScriptStruct  ShooterGame.AgentStoreOffer
// Struct Size::0x0020
struct FAgentStoreOffer
{
    FGuid                                         AgentID;                                                      // 0x0000(0x0010)
    TArray<FStoreOffer*>                          StoreOffers;                                                  // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.GetStorefrontRequest
// Struct Size::0x0010
struct FGetStorefrontRequest
{
    FString                                       IDToken;                                                      // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.OpenJuiceBoxRequest
// Struct Size::0x00A8
struct FOpenJuiceBoxRequest
{
    FGuid                                         XID;                                                          // 0x0000(0x0010)
    FGuid                                         JuiceBoxID;                                                   // 0x0010(0x0010)
    int32_t                                       OpenQuantity;                                                 // 0x0020(0x0004)
    int32_t                                       ExpectedInInventory;                                          // 0x0024(0x0004)
    FOrderMetadata                                Metadata;                                                     // 0x0028(0x0080)
};


// ScriptStruct  ShooterGame.CreateJuiceOrderRequest
// Struct Size::0x0120
struct FCreateJuiceOrderRequest
{
    char                                          JuiceOrderType;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FGuid                                         XID;                                                          // 0x0004(0x0010)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FOrderMetadata                                Metadata;                                                     // 0x0018(0x0080)
    FJuiceCraftRewards                            ExpectedRewards;                                              // 0x0098(0x0038)
    TMap<FGuid,int32_t>                           ExpectedCosts;                                                // 0x00D0(0x0050)
};


// ScriptStruct  ShooterGame.JuiceCraftRewards
// Struct Size::0x0038
struct FJuiceCraftRewards
{
    FItemProgressionDTO                           ExpectedProgression;                                          // 0x0000(0x0018)
    TArray<FEntitlementReward>                    ExpectedEntitlementRewards;                                   // 0x0018(0x0010)
    TArray<FWalletReward>                         ExpectedWalletRewards;                                        // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.ItemProgressionDTO
// Struct Size::0x0018
struct FItemProgressionDTO
{
    FGuid                                         ItemProgressionDefinitionID;                                  // 0x0000(0x0010)
    uint32_t                                      CurrentTier;                                                  // 0x0010(0x0004)
    uint32_t                                      NewTier;                                                      // 0x0014(0x0004)
};


// ScriptStruct  ShooterGame.CreateBundleOrderRequest
// Struct Size::0x0100
struct FCreateBundleOrderRequest
{
    FGuid                                         XID;                                                          // 0x0000(0x0010)
    TMap<FGuid,int32_t>                           ExpectedCosts;                                                // 0x0010(0x0050)
    TArray<FEntitlementReward>                    ExpectedEntitlementRewards;                                   // 0x0060(0x0010)
    TArray<FWalletReward>                         ExpectedWalletRewards;                                        // 0x0070(0x0010)
    FOrderMetadata                                Metadata;                                                     // 0x0080(0x0080)
};


// ScriptStruct  ShooterGame.RevealNightMarketOffersRequest
// Struct Size::0x0010
struct FRevealNightMarketOffersRequest
{
    TArray<FGuid>                                 RevealedOfferIDs;                                             // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.CreateOrderRequest
// Struct Size::0x0100
struct FCreateOrderRequest
{
    FGuid                                         XID;                                                          // 0x0000(0x0010)
    FGuid                                         OfferID;                                                      // 0x0010(0x0010)
    TMap<FGuid,int32_t>                           PurchasePrice;                                                // 0x0020(0x0050)
    FString                                       IDToken;                                                      // 0x0070(0x0010)
    FOrderMetadata                                Metadata;                                                     // 0x0080(0x0080)
};


// ScriptStruct  ShooterGame.QueryWalletRequest
// Struct Size::0x0004
struct FQueryWalletRequest
{
    int32_t                                       QueryType;                                                    // 0x0000(0x0004)
};


// ScriptStruct  ShooterGame.GetWalletResponse
// Struct Size::0x00A0
struct FGetWalletResponse
{
    TMap<FGuid,int32_t>                           Balances;                                                     // 0x0000(0x0050)
    TMap<FGuid,FCurrencyLimits>                   CurrencyLimits;                                               // 0x0050(0x0050)
};


// ScriptStruct  ShooterGame.CurrencyLimits
// Struct Size::0x0050
struct FCurrencyLimits
{
    TMap<FGuid,FSubCurrencyLimit>                 Limits;                                                       // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.SubCurrencyLimit
// Struct Size::0x0018
struct FSubCurrencyLimit
{
    int32_t                                       Amount;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       LimitType;                                                    // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.ChromaInspectEvent
// Struct Size::0x0070
struct FChromaInspectEvent
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       InstanceId;                                                   // 0x0010(0x0010)
    FString                                       ClientSessionId;                                              // 0x0020(0x0010)
    FString                                       OfferType;                                                    // 0x0030(0x0010)
    FString                                       OfferId;                                                      // 0x0040(0x0010)
    FString                                       ItemId;                                                       // 0x0050(0x0010)
    FString                                       ChromaId;                                                     // 0x0060(0x0010)
};


// ScriptStruct  ShooterGame.StoreInteractionEvent
// Struct Size::0x0080
struct FStoreInteractionEvent
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       InstanceId;                                                   // 0x0010(0x0010)
    FString                                       ClientSessionId;                                              // 0x0020(0x0010)
    FString                                       OfferType;                                                    // 0x0030(0x0010)
    FString                                       EventType;                                                    // 0x0040(0x0010)
    FString                                       OfferId;                                                      // 0x0050(0x0010)
    FString                                       ItemId;                                                       // 0x0060(0x0010)
    FString                                       StorefrontId;                                                 // 0x0070(0x0010)
};


// ScriptStruct  ShooterGame.PluginStorefrontBundleViewModels
// Struct Size::0x0010
struct FPluginStorefrontBundleViewModels
{
    TArray<FBundleViewModel*>                     PluginStorefrontBundleViewModels;                             // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.StrategicOutcomeOfRound
// Struct Size::0x0040
struct FStrategicOutcomeOfRound
{
    int32_t                                       RoundNumber;                                                  // 0x0000(0x0004)
    enum class EAresRoundOutcome                  RoundOutcome;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FBaseTeamComponent*                           RoundVictor;                                                  // 0x0008(0x0008)
    TArray<FPlayerOutcomeOfRound>                 PlayerDeaths;                                                 // 0x0010(0x0010)
    TArray<FShooterPlayerState*>                  RemainingRedPlayers;                                          // 0x0020(0x0010)
    TArray<FShooterPlayerState*>                  RemainingBluePlayers;                                         // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.PlayerOutcomeOfRound
// Struct Size::0x0030
struct FPlayerOutcomeOfRound
{
    FVector                                       DeathLocation;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FRoundTimestamp                               DeathTime;                                                    // 0x0010(0x0018)
    FShooterPlayerState*                          PlayerState;                                                  // 0x0028(0x0008)
};


// ScriptStruct  ShooterGame.StreamedVideoFile
// Struct Size::0x0028
struct FStreamedVideoFile
{
    enum class EStreamedVideoQuality              Quality;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Culture;                                                      // 0x0008(0x0010)
    FFilePath                                     FilePath;                                                     // 0x0018(0x0010)
};


// ScriptStruct  Engine.FilePath
// Struct Size::0x0010
struct FFilePath
{
    FString                                       FilePath;                                                     // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.DebuffRevealedSources
// Struct Size::0x0050
struct FDebuffRevealedSources
{
    TSet<TWeakObjectPtr<AActor>>                  Sources;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.QueuedMessage
// Struct Size::0x0058
struct FQueuedMessage
{
    TArray<uint64_t>                              Data;                                                         // 0x0000(0x0010)
    FScriptStruct*                                StaticStructDef;                                              // 0x0010(0x0008)
    enum class EQueuedMessageType                 Type;                                                         // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FString                                       EventId;                                                      // 0x0020(0x0010)
    FString                                       LogMessage;                                                   // 0x0030(0x0010)
    FString                                       MetricName;                                                   // 0x0040(0x0010)
    int32_t                                       MetricValue;                                                  // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  ShooterGame.SampleLog
// Struct Size::0x0038
struct FSampleLog
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       SampleLevel;                                                  // 0x0010(0x0010)
    bool                                          WasSampled;                                                   // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    FString                                       Version;                                                      // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.CertPinFailureEvent
// Struct Size::0x0038
struct FCertPinFailureEvent
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    FString                                       Domain;                                                       // 0x0010(0x0010)
    int32_t                                       NumberOfCertificates;                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FString>                               Certificates;                                                 // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.GameEventCommsMuteInGame
// Struct Size::0x00B0
struct FGameEventCommsMuteInGame
{
    FString                                       ReporterPuuid;                                                // 0x0000(0x0010)
    FString                                       OffenderPuuid;                                                // 0x0010(0x0010)
    FString                                       MatchId;                                                      // 0x0020(0x0010)
    FString                                       CommsMethod;                                                  // 0x0030(0x0010)
    FString                                       MuteMethod;                                                   // 0x0040(0x0010)
    bool                                          MuteValue;                                                    // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
    FString                                       ReporterOffenderAllianceType;                                 // 0x0058(0x0010)
    FGameEventRoundInfo                           RoundInfo;                                                    // 0x0068(0x0028)
    FString                                       ReporterTeamName;                                             // 0x0090(0x0010)
    FString                                       OffenderTeamName;                                             // 0x00A0(0x0010)
};


// ScriptStruct  ShooterGame.GameEventCommsMute
// Struct Size::0x0068
struct FGameEventCommsMute
{
    FString                                       ReporterPuuid;                                                // 0x0000(0x0010)
    FString                                       OffenderPuuid;                                                // 0x0010(0x0010)
    FString                                       MatchId;                                                      // 0x0020(0x0010)
    FString                                       CommsMethod;                                                  // 0x0030(0x0010)
    FString                                       MuteMethod;                                                   // 0x0040(0x0010)
    bool                                          MuteValue;                                                    // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
    FString                                       ReporterOffenderAllianceType;                                 // 0x0058(0x0010)
};


// ScriptStruct  ShooterGame.TeleportLocationCheckRing
// Struct Size::0x0008
struct FTeleportLocationCheckRing
{
    float                                         RingRadius;                                                   // 0x0000(0x0004)
    int32_t                                       NumPoints;                                                    // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.InitializeAliasRequest
// Struct Size::0x0020
struct FInitializeAliasRequest
{
    FString                                       GameName;                                                     // 0x0000(0x0010)
    FString                                       TagLine;                                                      // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.GeneratedAccount
// Struct Size::0x0080
struct FGeneratedAccount
{
    FUserAccountInfo                              AccountInfo;                                                  // 0x0000(0x0070)
    FString                                       GeneratedPassword;                                            // 0x0070(0x0010)
};


// ScriptStruct  ShooterGame.UserAccountInfo
// Struct Size::0x0070
struct FUserAccountInfo
{
    FGuid                                         PUUID;                                                        // 0x0000(0x0010)
    FString                                       Username;                                                     // 0x0010(0x0010)
    FString                                       GameName;                                                     // 0x0020(0x0010)
    FString                                       TagLine;                                                      // 0x0030(0x0010)
    FString                                       Region;                                                       // 0x0040(0x0010)
    FString                                       GasAccountId;                                                 // 0x0050(0x0010)
    FString                                       CreatedDatetime;                                              // 0x0060(0x0010)
};


// ScriptStruct  ShooterGame.AtlasCreateAccountBody
// Struct Size::0x0040
struct FAtlasCreateAccountBody
{
    FString                                       Username;                                                     // 0x0000(0x0010)
    FString                                       Password;                                                     // 0x0010(0x0010)
    FString                                       EmailAddress;                                                 // 0x0020(0x0010)
    FString                                       BirthDate;                                                    // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.RSOTokenRequestBody
// Struct Size::0x0020
struct FRSOTokenRequestBody
{
    FString                                       GrantType;                                                    // 0x0000(0x0010)
    TArray<FString>                               Scopes;                                                       // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.TextChatDraftTextInfo
// Struct Size::0x0018
struct FTextChatDraftTextInfo
{
    FText                                         DraftText;                                                    // 0x0000(0x0018)
};


// ScriptStruct  ShooterGame.PatchRiotChatAccountChatSettings
// Struct Size::0x0001
struct FPatchRiotChatAccountChatSettings
{
    bool                                          chatFilterDisabled;                                           // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.ChatSettings
// Struct Size::0x0001
struct FChatSettings
{
    bool                                          ChatFilterDisabled;                                           // 0x0000(0x0001)
};


// ScriptStruct  ShooterGame.SetActiveConversationRequest
// Struct Size::0x0010
struct FSetActiveConversationRequest
{
    FString                                       Cid;                                                          // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.MarkMessageReadRequest
// Struct Size::0x0010
struct FMarkMessageReadRequest
{
    FString                                       Cid;                                                          // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.LeaveMucRequest
// Struct Size::0x0010
struct FLeaveMucRequest
{
    FString                                       Cid;                                                          // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.JoinMucRequest
// Struct Size::0x0050
struct FJoinMucRequest
{
    FString                                       Id;                                                           // 0x0000(0x0010)
    FString                                       Domain;                                                       // 0x0010(0x0010)
    FString                                       TargetRegion;                                                 // 0x0020(0x0010)
    FString                                       Password;                                                     // 0x0030(0x0010)
    FString                                       Type;                                                         // 0x0040(0x0010)
};


// ScriptStruct  ShooterGame.MUCParticipants
// Struct Size::0x0010
struct FMUCParticipants
{
    TArray<FMUCParticipant>                       Participants;                                                 // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.MUCParticipant
// Struct Size::0x0060
struct FMUCParticipant
{
    FString                                       Cid;                                                          // 0x0000(0x0010)
    FString                                       Pid;                                                          // 0x0010(0x0010)
    FString                                       game;                                                         // 0x0020(0x0010)
    FString                                       game;                                                         // 0x0030(0x0010)
    FText                                         Name;                                                         // 0x0040(0x0018)
    bool                                          Muted;                                                        // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
};


// ScriptStruct  ShooterGame.MucMessageRequest
// Struct Size::0x0038
struct FMucMessageRequest
{
    FString                                       Cid;                                                          // 0x0000(0x0010)
    FText                                         Message;                                                      // 0x0010(0x0018)
    FString                                       Type;                                                         // 0x0028(0x0010)
};


// ScriptStruct  ShooterGame.MUCMessages
// Struct Size::0x0010
struct FMUCMessages
{
    TArray<FMUCMessage>                           Messages;                                                     // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.MuteRequest
// Struct Size::0x0018
struct FMuteRequest
{
    FString                                       Puuid;                                                        // 0x0000(0x0010)
    bool                                          Muted;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.MUCInfos
// Struct Size::0x0010
struct FMUCInfos
{
    TArray<FMUCInfo>                              Conversations;                                                // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.MUCInfo
// Struct Size::0x0030
struct FMUCInfo
{
    FString                                       Cid;                                                          // 0x0000(0x0010)
    enum class ETextChatRoomType                  RoomType;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FString                                       Type;                                                         // 0x0018(0x0010)
    bool                                          MutedRestriction;                                             // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  ShooterGame.SyncPoint
// Struct Size::0x0048
struct FSyncPoint
{
    FNetworkedMovementTimestamp                   SnapshotTime;                                                 // 0x0000(0x0010)
    FChronometer                                  Chronometer;                                                  // 0x0010(0x0030)
    bool                                          bInState;                                                     // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  ShooterGame.TimedEvent
// Struct Size::0x001C
struct FTimedEvent
{
    float                                         TimeSeconds;                                                  // 0x0000(0x0004)
    FDelegate                                     EventToBroadcast;                                             // 0x0004(0x0014)
    enum class EAresTimerDirection                TimeDirection;                                                // 0x0018(0x0001)
    bool                                          bIsMarkedToRemove;                                            // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
};


// ScriptStruct  ShooterGame.ToggleInputSetting
// Struct Size::0x0028
struct FToggleInputSetting
{
    FRespondToEventStateComponent*                StateToToggle;                                                // 0x0000(0x0008)
    FStateComponent*                              StateToTransitionTo;                                          // 0x0008(0x0008)
    bool                                          bCanRespondOutOfGameplay;                                     // 0x0010(0x0001)
    bool                                          bCanRespondWhileSuppressed;                                   // 0x0011(0x0001)
    bool                                          bCanRespondInSpawnZones;                                      // 0x0012(0x0001)
    char                                          pa_0013[0x0005]                                               // 0x0013(0x0005)
    TArray<enum class EAresEquippableInput>       InputsToCancelToggle;                                         // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.MatchupGameScorePair
// Struct Size::0x0008
struct FMatchupGameScorePair
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.MatchupGamePlacementPair
// Struct Size::0x0008
struct FMatchupGamePlacementPair
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.TournamentMatchScoreUpdateRMSNotification
// Struct Size::0x0090
struct FTournamentMatchScoreUpdateRMSNotification
{
    FString                                       TournamentID;                                                 // 0x0000(0x0010)
    FString                                       MatchupId;                                                    // 0x0010(0x0010)
    FTournamentMatchupScores                      GamesScore;                                                   // 0x0020(0x0070)
};


// ScriptStruct  ShooterGame.TournamentMatchupGameScheduledStartTimeUpdatedRMSNotification
// Struct Size::0x0030
struct FTournamentMatchupGameScheduledStartTimeUpdatedRMSNotification
{
    FString                                       TournamentId;                                                 // 0x0000(0x0010)
    FString                                       MatchupId;                                                    // 0x0010(0x0010)
    int64_t                                       ScheduledStartDateInSeconds;                                  // 0x0020(0x0008)
    int32_t                                       GameIndex;                                                    // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ShooterGame.TournamentMatchupScheduledStartTimeUpdatedRMSNotification
// Struct Size::0x0028
struct FTournamentMatchupScheduledStartTimeUpdatedRMSNotification
{
    FString                                       TournamentId;                                                 // 0x0000(0x0010)
    FString                                       MatchupId;                                                    // 0x0010(0x0010)
    int64_t                                       scheduledStartTime;                                           // 0x0020(0x0008)
};


// ScriptStruct  ShooterGame.TournamentMatchupGameStatusUpdatedRMSNotification
// Struct Size::0x0048
struct FTournamentMatchupGameStatusUpdatedRMSNotification
{
    FString                                       TournamentId;                                                 // 0x0000(0x0010)
    FString                                       MatchupId;                                                    // 0x0010(0x0010)
    FString                                       GameId;                                                       // 0x0020(0x0010)
    FString                                       NewStatus;                                                    // 0x0030(0x0010)
    int32_t                                       GameIndex;                                                    // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  ShooterGame.TournamentMatchupStatusUpdatedRMSNotification
// Struct Size::0x0040
struct FTournamentMatchupStatusUpdatedRMSNotification
{
    FString                                       TournamentId;                                                 // 0x0000(0x0010)
    FString                                       MatchupId;                                                    // 0x0010(0x0010)
    FString                                       NewStatus;                                                    // 0x0020(0x0010)
    FString                                       OldStatus;                                                    // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.TournamentStatusUpdatedRMSNotification
// Struct Size::0x0010
struct FTournamentStatusUpdatedRMSNotification
{
    FString                                       TournamentId;                                                 // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.MatchupGameMetadata
// Struct Size::0x0050
struct FMatchupGameMetadata
{
    TMap<FString,int32_t>                         RosterScores;                                                 // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.TournamentsTeamColorData
// Struct Size::0x0040
struct FTournamentsTeamColorData : public FTableRowBase
{
    FText                                         ColorName;                                                    // 0x0008(0x0018)
    FGuid                                         Guid;                                                         // 0x0020(0x0010)
    FLinearColor                                  Color;                                                        // 0x0030(0x0010)
};


// ScriptStruct  ShooterGame.TracerEffects
// Struct Size::0x0008
struct FTracerEffects
{
    FAresTracerInterface*                         Template;                                                     // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.MissionsMapEntry
// Struct Size::0x0010
struct FMissionsMapEntry
{
    FMissionGameStateComponent*                   MissionStateComponent;                                        // 0x0000(0x0008)
    FMission*                                     MissionActor;                                                 // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.TransformSnapshot
// Struct Size::0x0050
struct FTransformSnapshot
{
    float                                         TimeStamp;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    bool                                          bWasTeleport;                                                 // 0x0040(0x0001)
    char                                          pa_0041[0x000F]                                               // 0x0041(0x000F)
};


// ScriptStruct  ShooterGame.DestinationURL
// Struct Size::0x0020
struct FDestinationURL
{
    bool                                          bValid;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Host;                                                         // 0x0008(0x0010)
    int32_t                                       Port;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.LoadingScreenTeam
// Struct Size::0x0020
struct FLoadingScreenTeam
{
    FName                                         TeamID;                                                       // 0x0000(0x000C)
    enum class EAresTeam                          Team;                                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    TArray<FLoadingScreenPlayer>                  Players;                                                      // 0x0010(0x0010)
};


// ScriptStruct  ShooterGame.LoadingScreenPlayer
// Struct Size::0x0048
struct FLoadingScreenPlayer
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    bool                                          bMe;                                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FCharacterDataAsset*                          Character;                                                    // 0x0018(0x0008)
    FPlayerCardDataAsset*                         PlayerCard;                                                   // 0x0020(0x0008)
    FPlayerTitleDataAsset*                        PlayerTitle;                                                  // 0x0028(0x0008)
    int32_t                                       AccountLevel;                                                 // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FLevelBorderDataAsset*                        LevelBorder;                                                  // 0x0038(0x0008)
    bool                                          bHideAccountLevel;                                            // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  ShooterGame.UINavigationRequest
// Struct Size::0x0068
struct FUINavigationRequest
{
    TMap<FName,FWildcard>                         Parameters;                                                   // 0x0000(0x0050)
    char                                          pa_0050[0x0018]                                               // 0x0050(0x0018)
};


// ScriptStruct  ShooterGame.UIModalRequest
// Struct Size::0x0090
struct FUIModalRequest : public FUINavigationRequest
{
    char                                          pa_0068[0x0018]                                               // 0x0068(0x0018)
    TArray<FGameplayTag>                          Contexts;                                                     // 0x0080(0x0010)
};


// ScriptStruct  ShooterGame.UISystemErrorInfo
// Struct Size::0x0048
struct FUISystemErrorInfo
{
    char                                          pa_0000[0x0048]                                               // 0x0000(0x0048)
};


// ScriptStruct  ShooterGame.NavigationBarData
// Struct Size::0x0018
struct FNavigationBarData
{
    TArray<FRGICommonNavBarDetails>               ButtonDetails;                                                // 0x0000(0x0010)
    bool                                          bIsEnabled;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.UIActionEvent
// Struct Size::0x0060
struct FUIActionEvent
{
    FString                                       InstanceId;                                                   // 0x0000(0x0010)
    FString                                       ClientSessionId;                                              // 0x0010(0x0010)
    FString                                       Subject;                                                      // 0x0020(0x0010)
    FString                                       EventPageName;                                                // 0x0030(0x0010)
    FString                                       ActionType;                                                   // 0x0040(0x0010)
    FString                                       ActionTarget;                                                 // 0x0050(0x0010)
};


// ScriptStruct  ShooterGame.SliderRange
// Struct Size::0x0010
struct FSliderRange
{
    bool                                          bRange;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FirstValue;                                                   // 0x0004(0x0004)
    float                                         SecondValue;                                                  // 0x0008(0x0004)
    enum class EAresWidgetDependentState          DependentState;                                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  ShooterGame.UIDependentState
// Struct Size::0x0018
struct FUIDependentState
{
    FString                                       StateName;                                                    // 0x0000(0x0010)
    enum class EAresWidgetDependentState          DependentState;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ShooterGame.AresSingleSelectDisplayInfo
// Struct Size::0x0028
struct FAresSingleSelectDisplayInfo
{
    FText                                         SelectionTitle;                                               // 0x0000(0x0018)
    TArray<FText>                                 Options;                                                      // 0x0018(0x0010)
};


// ScriptStruct  ShooterGame.AresConditionalInputActionData
// Struct Size::0x0068
struct FAresConditionalInputActionData
{
    FAresConditionalInputAction                   ConditionalInputAction;                                       // 0x0000(0x0028)
    FText                                         OverrideConditionalActionDisplayName;                         // 0x0028(0x0018)
    bool                                          bConditionActive;                                             // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    int32_t                                       Priority;                                                     // 0x0044(0x0004)
    bool                                          bShouldOverrideInputActionIcon;                               // 0x0048(0x0001)
    bool                                          bDisplayInActionBar;                                          // 0x0049(0x0001)
    char                                          pa_004A[0x001E]                                               // 0x004A(0x001E)
};


// ScriptStruct  ShooterGame.AresConditionalInputAction
// Struct Size::0x0028
struct FAresConditionalInputAction
{
    FDataTableRowHandle                           InputRowHandle;                                               // 0x0000(0x0018)
    enum class EAresCommonInputCondition          InputCondition;                                               // 0x0018(0x0001)
    enum class EActivationPreference              DefaultActiveState;                                           // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    FGameplayTag                                  ConditionalInputTag;                                          // 0x001C(0x000C)
};


// ScriptStruct  ShooterGame.AmmoHudInfo
// Struct Size::0x0010
struct FAmmoHudInfo
{
    FAmmoStoreHudInfo                             Magazine;                                                     // 0x0000(0x0008)
    FAmmoStoreHudInfo                             Reserve;                                                      // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.AmmoStoreHudInfo
// Struct Size::0x0008
struct FAmmoStoreHudInfo
{
    int32_t                                       Ammo;                                                         // 0x0000(0x0004)
    int32_t                                       MaxAmmo;                                                      // 0x0004(0x0004)
};


// ScriptStruct  ShooterGame.AuthUsableUser
// Struct Size::0x0008
struct FAuthUsableUser
{
    FInteractableUserComponent*                   User;                                                         // 0x0000(0x0008)
};


// ScriptStruct  ShooterGame.ValueDisagreementTimerTickFunction
// Struct Size::0x0030
struct FValueDisagreementTimerTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  ShooterGame.VanguardErrorEvent
// Struct Size::0x0048
struct FVanguardErrorEvent
{
    FString                                       InstanceId;                                                   // 0x0000(0x0010)
    FString                                       ClientSessionId;                                              // 0x0010(0x0010)
    FString                                       Subject;                                                      // 0x0020(0x0010)
    FString                                       Error;                                                        // 0x0030(0x0010)
    int32_t                                       ErrorCode;                                                    // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  ShooterGame.ViewTransformRecorderSnapshot
// Struct Size::0x0020
struct FViewTransformRecorderSnapshot
{
    FVector                                       PawnLocation;                                                 // 0x0000(0x000C)
    FRotator                                      ControlRotation;                                              // 0x000C(0x000C)
    bool                                          bDidTeleport;                                                 // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         NetTimestamp;                                                 // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.VoteSlashCommandEntry
// Struct Size::0x0010
struct FVoteSlashCommandEntry
{
    FGameplayVote*                                VoteType;                                                     // 0x0000(0x0008)
    FGameplayVoteOptionComponent*                 OptionType;                                                   // 0x0008(0x0008)
};


// ScriptStruct  ShooterGame.VoteRecord
// Struct Size::0x0028
struct FVoteRecord
{
    int32_t                                       Round;                                                        // 0x0000(0x0004)
    float                                         RemainingTime;                                                // 0x0004(0x0004)
    int32_t                                       VoteID;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FGameplayVote*                                Vote;                                                         // 0x0010(0x0008)
    FShooterPlayerState*                          Requester;                                                    // 0x0018(0x0008)
    FGameplayVoteOptionComponent*                 Result;                                                       // 0x0020(0x0008)
};


// ScriptStruct  ShooterGame.VoteQueue
// Struct Size::0x0018
struct FVoteQueue : public FAresTeamListEntry
{
    TArray<FGameplayVote*>                        Queue;                                                        // 0x0008(0x0010)
};


// ScriptStruct  ShooterGame.WallPenHitResult
// Struct Size::0x00A4
struct FWallPenHitResult
{
    char                                          pa_0000[0x00A4]                                               // 0x0000(0x00A4)
};


// ScriptStruct  ShooterGame.WeaponModifiersDataTableRow
// Struct Size::0x0038
struct FWeaponModifiersDataTableRow : public FTableRowBase
{
    FSoftClassPath                                WeaponClass;                                                  // 0x0008(0x0020)
    FEquippableInfo                               Modifiers;                                                    // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ShooterGame.EquippableInfo
// Struct Size::0x000C
struct FEquippableInfo
{
    bool                                          Droppable;                                                    // 0x0000(0x0001)
    bool                                          DestroyOnDrop;                                                // 0x0001(0x0001)
    bool                                          InfiniteReserveAmmo;                                          // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    int32_t                                       MaxReserveAmmo;                                               // 0x0004(0x0004)
    float                                         TimeToRespawn;                                                // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.WeaponModifiersTableRow
// Struct Size::0x0020
struct FWeaponModifiersTableRow : public FTableRowBase
{
    FAresEquippable*                              WeaponClass;                                                  // 0x0008(0x0008)
    FEquippableInfo                               Modifiers;                                                    // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ShooterGame.WidgetAnimationSettings
// Struct Size::0x0018
struct FWidgetAnimationSettings
{
    float                                         StartAtTime;                                                  // 0x0000(0x0004)
    float                                         EndAtTime;                                                    // 0x0004(0x0004)
    int32_t                                       NumLoopsToPlay;                                               // 0x0008(0x0004)
    enum class EUMGSequencePlayMode               PlayMode;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         PlaybackSpeed;                                                // 0x0010(0x0004)
    bool                                          bRestoreState;                                                // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  ShooterGame.WidgetLayoutData
// Struct Size::0x0050
struct FWidgetLayoutData
{
    TMap<FString,FWidgetLayoutPreset>             Layouts;                                                      // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.WidgetLayoutPreset
// Struct Size::0x0058
struct FWidgetLayoutPreset
{
    enum class EWidgetLayoutPresetType            RootPresetIndex;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TMap<FString,FWidgetLayout>                   WidgetTagToLayoutMap;                                         // 0x0008(0x0050)
};


// ScriptStruct  ShooterGame.WidgetLayout
// Struct Size::0x0108
struct FWidgetLayout
{
    FVector2D                                     Position;                                                     // 0x0000(0x0008)
    float                                         Scale;                                                        // 0x0008(0x0004)
    float                                         Opacity;                                                      // 0x000C(0x0004)
    enum class EWidgetVisibilityState             VisibilityState;                                              // 0x0010(0x0001)
    bool                                          AllowedForPreset;                                             // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
    TMap<enum class EWidgetLayoutSettingName,float>FloatSettings;                                               // 0x0018(0x0050)
    TMap<enum class EWidgetLayoutSettingName,bool>BoolSettings;                                                 // 0x0068(0x0050)
    TMap<FString,FWidgetLayoutSettingValueMap>    BoolSettingWeaponOverrides;                                   // 0x00B8(0x0050)
};


// ScriptStruct  ShooterGame.WidgetLayoutSettingValueMap
// Struct Size::0x0050
struct FWidgetLayoutSettingValueMap
{
    TMap<enum class EWidgetLayoutSettingName,bool>SettingMap;                                                   // 0x0000(0x0050)
};


// ScriptStruct  ShooterGame.WidgetLayoutSettingOverrides
// Struct Size::0x00A0
struct FWidgetLayoutSettingOverrides
{
    TMap<enum class EWidgetLayoutSettingName,float>FloatSettings;                                               // 0x0000(0x0050)
    TMap<enum class EWidgetLayoutSettingName,bool>BoolSettings;                                                 // 0x0050(0x0050)
};


// ScriptStruct  ShooterGame.WidgetPool
// Struct Size::0x0010
struct FWidgetPool
{
    TArray<FUserWidget*>                          AvailableWidgets;                                             // 0x0000(0x0010)
};


// ScriptStruct  ShooterGame.ZoomLevelInfo
// Struct Size::0x000C
struct FZoomLevelInfo
{
    float                                         Multiplier;                                                   // 0x0000(0x0004)
    bool                                          bUseDefaultFov1P;                                             // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         Fov1P;                                                        // 0x0008(0x0004)
};


// ScriptStruct  ShooterGame.ZoomTransition
// Struct Size::0x0024
struct FZoomTransition
{
    FZoomTransitionDescription                    TransitionDescription;                                        // 0x0000(0x0020)
    enum class EZoomTransitionState               TransitionState;                                              // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
};


// ScriptStruct  ShooterGame.ZoomTransitionDescription
// Struct Size::0x0020
struct FZoomTransitionDescription
{
    float                                         SourceFov;                                                    // 0x0000(0x0004)
    float                                         SourceFov1P;                                                  // 0x0004(0x0004)
    int32_t                                       SourceZoomLevel;                                              // 0x0008(0x0004)
    float                                         TargetFov;                                                    // 0x000C(0x0004)
    float                                         TargetFov1P;                                                  // 0x0010(0x0004)
    int32_t                                       TargetZoomLevel;                                              // 0x0014(0x0004)
    float                                         TotalTransitionTimeDuration;                                  // 0x0018(0x0004)
    enum class EZoomCooldownOption                CooldownOption;                                               // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  ShooterGame.ZoomTransitionSettings
// Struct Size::0x0014
struct FZoomTransitionSettings
{
    float                                         ZoomInInitialTimeDuration;                                    // 0x0000(0x0004)
    float                                         CosmeticZoomInTriggerPercent;                                 // 0x0004(0x0004)
    float                                         ZoomInSuccessiveTimeDuration;                                 // 0x0008(0x0004)
    float                                         ZoomOutTimeDuration;                                          // 0x000C(0x0004)
    float                                         ZoomCooldownTimeDuration;                                     // 0x0010(0x0004)
};


// ScriptStruct  ShooterGame.ZoomValidStates
// Struct Size::0x0020
struct FZoomValidStates
{
    TArray<FScriptStateComponent*>                StateList;                                                    // 0x0000(0x0010)
    bool                                          bInvalidStates;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FScriptStateComponent*                        StateToTransitionTo;                                          // 0x0018(0x0008)
};


// ScriptStruct  SlateCore.CompositeFont
// Struct Size::0x0038
struct FCompositeFont
{
    FTypeface                                     DefaultTypeface;                                              // 0x0000(0x0010)
    FCompositeFallbackFont                        FallbackTypeface;                                             // 0x0010(0x0018)
    TArray<FCompositeSubFont>                     SubTypefaces;                                                 // 0x0028(0x0010)
};


// ScriptStruct  SlateCore.CompositeFallbackFont
// Struct Size::0x0018
struct FCompositeFallbackFont
{
    FTypeface                                     Typeface;                                                     // 0x0000(0x0010)
    float                                         ScalingFactor;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SlateCore.Typeface
// Struct Size::0x0010
struct FTypeface
{
    TArray<FTypefaceEntry>                        Fonts;                                                        // 0x0000(0x0010)
};


// ScriptStruct  SlateCore.TypefaceEntry
// Struct Size::0x0030
struct FTypefaceEntry
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FFontData                                     Font;                                                         // 0x0010(0x0020)
};


// ScriptStruct  SlateCore.FontData
// Struct Size::0x0020
struct FFontData
{
    FString                                       FontFilename;                                                 // 0x0000(0x0010)
    enum class EFontHinting                       Hinting;                                                      // 0x0010(0x0001)
    enum class EFontLoadingPolicy                 LoadingPolicy;                                                // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    int32_t                                       SubFaceIndex;                                                 // 0x0014(0x0004)
    UObject*                                      FontFaceAsset;                                                // 0x0018(0x0008)
};


// ScriptStruct  SlateCore.CompositeSubFont
// Struct Size::0x0038
struct FCompositeSubFont : public FCompositeFallbackFont
{
    TArray<FInt32Range>                           CharacterRanges;                                              // 0x0018(0x0010)
    FString                                       Cultures;                                                     // 0x0028(0x0010)
};


// ScriptStruct  SlateCore.CaptureLostEvent
// Struct Size::0x0008
struct FCaptureLostEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  SlateCore.WindowStyle
// Struct Size::0x1178
struct FWindowStyle : public FSlateWidgetStyle
{
    FButtonStyle                                  MinimizeButtonStyle;                                          // 0x0008(0x02A8)
    FButtonStyle                                  MaximizeButtonStyle;                                          // 0x02B0(0x02A8)
    FButtonStyle                                  RestoreButtonStyle;                                           // 0x0558(0x02A8)
    FButtonStyle                                  CloseButtonStyle;                                             // 0x0800(0x02A8)
    FTextBlockStyle                               TitleTextStyle;                                               // 0x0AA8(0x0290)
    FSlateBrush                                   ActiveTitleBrush;                                             // 0x0D38(0x0090)
    FSlateBrush                                   InactiveTitleBrush;                                           // 0x0DC8(0x0090)
    FSlateBrush                                   FlashTitleBrush;                                              // 0x0E58(0x0090)
    FSlateColor                                   BackgroundColor;                                              // 0x0EE8(0x0028)
    FSlateBrush                                   OutlineBrush;                                                 // 0x0F10(0x0090)
    FSlateColor                                   OutlineColor;                                                 // 0x0FA0(0x0028)
    FSlateBrush                                   BorderBrush;                                                  // 0x0FC8(0x0090)
    FSlateBrush                                   BackgroundBrush;                                              // 0x1058(0x0090)
    FSlateBrush                                   ChildBackgroundBrush;                                         // 0x10E8(0x0090)
};


// ScriptStruct  SlateCore.ScrollBorderStyle
// Struct Size::0x0128
struct FScrollBorderStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   TopShadowBrush;                                               // 0x0008(0x0090)
    FSlateBrush                                   BottomShadowBrush;                                            // 0x0098(0x0090)
};


// ScriptStruct  SlateCore.ScrollBoxStyle
// Struct Size::0x0248
struct FScrollBoxStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   TopShadowBrush;                                               // 0x0008(0x0090)
    FSlateBrush                                   BottomShadowBrush;                                            // 0x0098(0x0090)
    FSlateBrush                                   LeftShadowBrush;                                              // 0x0128(0x0090)
    FSlateBrush                                   RightShadowBrush;                                             // 0x01B8(0x0090)
};


// ScriptStruct  SlateCore.DockTabStyle
// Struct Size::0x0770
struct FDockTabStyle : public FSlateWidgetStyle
{
    FButtonStyle                                  CloseButtonStyle;                                             // 0x0008(0x02A8)
    FSlateBrush                                   NormalBrush;                                                  // 0x02B0(0x0090)
    FSlateBrush                                   ActiveBrush;                                                  // 0x0340(0x0090)
    FSlateBrush                                   ColorOverlayTabBrush;                                         // 0x03D0(0x0090)
    FSlateBrush                                   ColorOverlayIconBrush;                                        // 0x0460(0x0090)
    FSlateBrush                                   ForegroundBrush;                                              // 0x04F0(0x0090)
    FSlateBrush                                   HoveredBrush;                                                 // 0x0580(0x0090)
    FSlateBrush                                   ContentAreaBrush;                                             // 0x0610(0x0090)
    FSlateBrush                                   TabWellBrush;                                                 // 0x06A0(0x0090)
    FMargin                                       TabPadding;                                                   // 0x0730(0x0010)
    float                                         OverlapWidth;                                                 // 0x0740(0x0004)
    char                                          pa_0744[0x0004]                                               // 0x0744(0x0004)
    FSlateColor                                   FlashColor;                                                   // 0x0748(0x0028)
};


// ScriptStruct  SlateCore.HeaderRowStyle
// Struct Size::0x0C18
struct FHeaderRowStyle : public FSlateWidgetStyle
{
    FTableColumnHeaderStyle                       ColumnStyle;                                                  // 0x0008(0x0518)
    FTableColumnHeaderStyle                       LastColumnStyle;                                              // 0x0520(0x0518)
    FSplitterStyle                                ColumnSplitterStyle;                                          // 0x0A38(0x0128)
    FSlateBrush                                   BackgroundBrush;                                              // 0x0B60(0x0090)
    FSlateColor                                   ForegroundColor;                                              // 0x0BF0(0x0028)
};


// ScriptStruct  SlateCore.SplitterStyle
// Struct Size::0x0128
struct FSplitterStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   HandleNormalBrush;                                            // 0x0008(0x0090)
    FSlateBrush                                   HandleHighlightBrush;                                         // 0x0098(0x0090)
};


// ScriptStruct  SlateCore.TableColumnHeaderStyle
// Struct Size::0x0518
struct FTableColumnHeaderStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   SortPrimaryAscendingImage;                                    // 0x0008(0x0090)
    FSlateBrush                                   SortPrimaryDescendingImage;                                   // 0x0098(0x0090)
    FSlateBrush                                   SortSecondaryAscendingImage;                                  // 0x0128(0x0090)
    FSlateBrush                                   SortSecondaryDescendingImage;                                 // 0x01B8(0x0090)
    FSlateBrush                                   NormalBrush;                                                  // 0x0248(0x0090)
    FSlateBrush                                   HoveredBrush;                                                 // 0x02D8(0x0090)
    FSlateBrush                                   MenuDropdownImage;                                            // 0x0368(0x0090)
    FSlateBrush                                   MenuDropdownNormalBorderBrush;                                // 0x03F8(0x0090)
    FSlateBrush                                   MenuDropdownHoveredBorderBrush;                               // 0x0488(0x0090)
};


// ScriptStruct  SlateCore.InlineTextImageStyle
// Struct Size::0x00A0
struct FInlineTextImageStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   Image;                                                        // 0x0008(0x0090)
    int16_t                                       Baseline;                                                     // 0x0098(0x0002)
    char                                          pa_009A[0x0006]                                               // 0x009A(0x0006)
};


// ScriptStruct  SlateCore.VolumeControlStyle
// Struct Size::0x0648
struct FVolumeControlStyle : public FSlateWidgetStyle
{
    FSliderStyle                                  SliderStyle;                                                  // 0x0008(0x0370)
    FSlateBrush                                   HighVolumeImage;                                              // 0x0378(0x0090)
    FSlateBrush                                   MidVolumeImage;                                               // 0x0408(0x0090)
    FSlateBrush                                   LowVolumeImage;                                               // 0x0498(0x0090)
    FSlateBrush                                   NoVolumeImage;                                                // 0x0528(0x0090)
    FSlateBrush                                   MutedImage;                                                   // 0x05B8(0x0090)
};


// ScriptStruct  SlateCore.SliderStyle
// Struct Size::0x0370
struct FSliderStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   NormalBarImage;                                               // 0x0008(0x0090)
    FSlateBrush                                   HoveredBarImage;                                              // 0x0098(0x0090)
    FSlateBrush                                   DisabledBarImage;                                             // 0x0128(0x0090)
    FSlateBrush                                   NormalThumbImage;                                             // 0x01B8(0x0090)
    FSlateBrush                                   HoveredThumbImage;                                            // 0x0248(0x0090)
    FSlateBrush                                   DisabledThumbImage;                                           // 0x02D8(0x0090)
    float                                         BarThickness;                                                 // 0x0368(0x0004)
    char                                          pa_036C[0x0004]                                               // 0x036C(0x0004)
};


// ScriptStruct  SlateCore.SearchBoxStyle
// Struct Size::0x0B28
struct FSearchBoxStyle : public FSlateWidgetStyle
{
    FEditableTextBoxStyle                         TextBoxStyle;                                                 // 0x0008(0x0868)
    FSlateFontInfo                                ActiveFontInfo;                                               // 0x0870(0x0060)
    FSlateBrush                                   UpArrowImage;                                                 // 0x08D0(0x0090)
    FSlateBrush                                   DownArrowImage;                                               // 0x0960(0x0090)
    FSlateBrush                                   GlassImage;                                                   // 0x09F0(0x0090)
    FSlateBrush                                   ClearImage;                                                   // 0x0A80(0x0090)
    FMargin                                       ImagePadding;                                                 // 0x0B10(0x0010)
    bool                                          bLeftAlignButtons;                                            // 0x0B20(0x0001)
    char                                          pa_0B21[0x0007]                                               // 0x0B21(0x0007)
};


// ScriptStruct  SlateCore.ExpandableAreaStyle
// Struct Size::0x0130
struct FExpandableAreaStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   CollapsedImage;                                               // 0x0008(0x0090)
    FSlateBrush                                   ExpandedImage;                                                // 0x0098(0x0090)
    float                                         RolloutAnimationSeconds;                                      // 0x0128(0x0004)
    char                                          pa_012C[0x0004]                                               // 0x012C(0x0004)
};


// ScriptStruct  SlateCore.ProgressBarStyle
// Struct Size::0x01B8
struct FProgressBarStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   BackgroundImage;                                              // 0x0008(0x0090)
    FSlateBrush                                   FillImage;                                                    // 0x0098(0x0090)
    FSlateBrush                                   MarqueeImage;                                                 // 0x0128(0x0090)
};


// ScriptStruct  SlateCore.InlineEditableTextBlockStyle
// Struct Size::0x0B00
struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
{
    FEditableTextBoxStyle                         EditableTextBoxStyle;                                         // 0x0008(0x0868)
    FTextBlockStyle                               TextStyle;                                                    // 0x0870(0x0290)
};


// ScriptStruct  SlateCore.HyperlinkStyle
// Struct Size::0x0550
struct FHyperlinkStyle : public FSlateWidgetStyle
{
    FButtonStyle                                  UnderlineStyle;                                               // 0x0008(0x02A8)
    FTextBlockStyle                               TextStyle;                                                    // 0x02B0(0x0290)
    FMargin                                       Padding;                                                      // 0x0540(0x0010)
};


// ScriptStruct  SlateCore.CheckBoxStyle
// Struct Size::0x05E0
struct FCheckBoxStyle : public FSlateWidgetStyle
{
    enum class ESlateCheckBoxType                 CheckBoxType;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FSlateBrush                                   UncheckedImage;                                               // 0x0010(0x0090)
    FSlateBrush                                   UncheckedHoveredImage;                                        // 0x00A0(0x0090)
    FSlateBrush                                   UncheckedPressedImage;                                        // 0x0130(0x0090)
    FSlateBrush                                   CheckedImage;                                                 // 0x01C0(0x0090)
    FSlateBrush                                   CheckedHoveredImage;                                          // 0x0250(0x0090)
    FSlateBrush                                   CheckedPressedImage;                                          // 0x02E0(0x0090)
    FSlateBrush                                   UndeterminedImage;                                            // 0x0370(0x0090)
    FSlateBrush                                   UndeterminedHoveredImage;                                     // 0x0400(0x0090)
    FSlateBrush                                   UndeterminedPressedImage;                                     // 0x0490(0x0090)
    FMargin                                       Padding;                                                      // 0x0520(0x0010)
    FSlateColor                                   ForegroundColor;                                              // 0x0530(0x0028)
    FSlateColor                                   BorderBackgroundColor;                                        // 0x0558(0x0028)
    FSlateSound                                   CheckedSlateSound;                                            // 0x0580(0x0020)
    FSlateSound                                   UncheckedSlateSound;                                          // 0x05A0(0x0020)
    FSlateSound                                   HoveredSlateSound;                                            // 0x05C0(0x0020)
};


// ScriptStruct  Slate.CustomizedToolMenu
// Struct Size::0x01F0
struct FCustomizedToolMenu
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TMap<FName,FCustomizedToolMenuEntry>          Entries;                                                      // 0x0010(0x0050)
    TMap<FName,FCustomizedToolMenuSection>        Sections;                                                     // 0x0060(0x0050)
    TMap<FName,FCustomizedToolMenuNameArray>      EntryOrder;                                                   // 0x00B0(0x0050)
    TArray<FName>                                 SectionOrder;                                                 // 0x0100(0x0010)
    char                                          pa_0110[0x00E0]                                               // 0x0110(0x00E0)
};


// ScriptStruct  Slate.CustomizedToolMenuNameArray
// Struct Size::0x0010
struct FCustomizedToolMenuNameArray
{
    TArray<FName>                                 Names;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Slate.CustomizedToolMenuSection
// Struct Size::0x0004
struct FCustomizedToolMenuSection
{
    enum class ECustomizedToolMenuVisibility      Visibility;                                                   // 0x0000(0x0004)
};


// ScriptStruct  Slate.CustomizedToolMenuEntry
// Struct Size::0x0004
struct FCustomizedToolMenuEntry
{
    enum class ECustomizedToolMenuVisibility      Visibility;                                                   // 0x0000(0x0004)
};


// ScriptStruct  RGILatencyMarkers.RGILatencyInterval
// Struct Size::0x0003
struct FRGILatencyInterval
{
    enum class ERGILatencyIntervalType            IntervalType;                                                 // 0x0000(0x0001)
    enum class ERGILatencyMarkerType              BeginMarker;                                                  // 0x0001(0x0001)
    enum class ERGILatencyMarkerType              EndMarker;                                                    // 0x0002(0x0001)
};


// ScriptStruct  ImageWriteQueue.ImageWriteOptions
// Struct Size::0x0060
struct FImageWriteOptions
{
    enum class EDesiredImageFormat                Format;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FDelegate                                     OnComplete;                                                   // 0x0004(0x0014)
    int32_t                                       CompressionQuality;                                           // 0x0018(0x0004)
    bool                                          bOverwriteFile;                                               // 0x001C(0x0001)
    bool                                          bAsync;                                                       // 0x001D(0x0001)
    char                                          pa_001E[0x0042]                                               // 0x001E(0x0042)
};


// ScriptStruct  MaterialShaderQualitySettings.MaterialQualityOverrides
// Struct Size::0x0009
struct FMaterialQualityOverrides
{
    bool                                          bDiscardQualityDuringCook;                                    // 0x0000(0x0001)
    bool                                          bEnableOverride;                                              // 0x0001(0x0001)
    bool                                          bForceFullyRough;                                             // 0x0002(0x0001)
    bool                                          bForceNonMetal;                                               // 0x0003(0x0001)
    bool                                          bForceDisableLMDirectionality;                                // 0x0004(0x0001)
    bool                                          bForceLQReflections;                                          // 0x0005(0x0001)
    bool                                          bForceDisablePreintegratedGF;                                 // 0x0006(0x0001)
    bool                                          bDisableMaterialNormalCalculation;                            // 0x0007(0x0001)
    enum class EMobileShadowQuality               MobileShadowQuality;                                          // 0x0008(0x0001)
};


// ScriptStruct  EyeTracker.EyeTrackerStereoGazeData
// Struct Size::0x0040
struct FEyeTrackerStereoGazeData
{
    FVector                                       LeftEyeOrigin;                                                // 0x0000(0x000C)
    FVector                                       LeftEyeDirection;                                             // 0x000C(0x000C)
    FVector                                       RightEyeOrigin;                                               // 0x0018(0x000C)
    FVector                                       RightEyeDirection;                                            // 0x0024(0x000C)
    FVector                                       FixationPoint;                                                // 0x0030(0x000C)
    float                                         ConfidenceValue;                                              // 0x003C(0x0004)
};


// ScriptStruct  EyeTracker.EyeTrackerGazeData
// Struct Size::0x0028
struct FEyeTrackerGazeData
{
    FVector                                       GazeOrigin;                                                   // 0x0000(0x000C)
    FVector                                       GazeDirection;                                                // 0x000C(0x000C)
    FVector                                       FixationPoint;                                                // 0x0018(0x000C)
    float                                         ConfidenceValue;                                              // 0x0024(0x0004)
};


// ScriptStruct  Renderer.LightPropagationVolumeSettings
// Struct Size::0x0040
struct FLightPropagationVolumeSettings
{
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         LPVIntensity;                                                 // 0x0004(0x0004)
    float                                         LPVVplInjectionBias;                                          // 0x0008(0x0004)
    float                                         LPVSize;                                                      // 0x000C(0x0004)
    float                                         LPVSecondaryOcclusionIntensity;                               // 0x0010(0x0004)
    float                                         LPVSecondaryBounceIntensity;                                  // 0x0014(0x0004)
    float                                         LPVGeometryVolumeBias;                                        // 0x0018(0x0004)
    float                                         LPVEmissiveInjectionIntensity;                                // 0x001C(0x0004)
    float                                         LPVDirectionalOcclusionIntensity;                             // 0x0020(0x0004)
    float                                         LPVDirectionalOcclusionRadius;                                // 0x0024(0x0004)
    float                                         LPVDiffuseOcclusionExponent;                                  // 0x0028(0x0004)
    float                                         LPVSpecularOcclusionExponent;                                 // 0x002C(0x0004)
    float                                         LPVDiffuseOcclusionIntensity;                                 // 0x0030(0x0004)
    float                                         LPVSpecularOcclusionIntensity;                                // 0x0034(0x0004)
    float                                         LPVFadeRange;                                                 // 0x0038(0x0004)
    float                                         LPVDirectionalOcclusionFadeRange;                             // 0x003C(0x0004)
};


// ScriptStruct  EngineSettings.AutoCompleteCommand
// Struct Size::0x0028
struct FAutoCompleteCommand
{
    FString                                       Command;                                                      // 0x0000(0x0010)
    FString                                       Desc;                                                         // 0x0010(0x0010)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  EngineSettings.GameModeName
// Struct Size::0x0030
struct FGameModeName
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FSoftClassPath                                GameMode;                                                     // 0x0010(0x0020)
};


// ScriptStruct  Chaos.ChaosSolverConfiguration
// Struct Size::0x0068
struct FChaosSolverConfiguration
{
    int32_t                                       Iterations;                                                   // 0x0000(0x0004)
    int32_t                                       CollisionPairIterations;                                      // 0x0004(0x0004)
    int32_t                                       PushOutIterations;                                            // 0x0008(0x0004)
    int32_t                                       CollisionPushOutPairIterations;                               // 0x000C(0x0004)
    float                                         CollisionMarginFraction;                                      // 0x0010(0x0004)
    float                                         CollisionMarginMax;                                           // 0x0014(0x0004)
    float                                         CollisionCullDistance;                                        // 0x0018(0x0004)
    int32_t                                       JointPairIterations;                                          // 0x001C(0x0004)
    int32_t                                       JointPushOutPairIterations;                                   // 0x0020(0x0004)
    float                                         ClusterConnectionFactor;                                      // 0x0024(0x0004)
    enum class EClusterUnionMethod                ClusterUnionConnectionType;                                   // 0x0028(0x0001)
    bool                                          bGenerateCollisionData;                                       // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    FSolverCollisionFilterSettings                CollisionFilterSettings;                                      // 0x002C(0x0010)
    bool                                          bGenerateBreakData;                                           // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    FSolverBreakingFilterSettings                 BreakingFilterSettings;                                       // 0x0040(0x0010)
    bool                                          bGenerateTrailingData;                                        // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    FSolverTrailingFilterSettings                 TrailingFilterSettings;                                       // 0x0054(0x0010)
    bool                                          bGenerateContactGraph;                                        // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
};


// ScriptStruct  Chaos.SolverTrailingFilterSettings
// Struct Size::0x0010
struct FSolverTrailingFilterSettings
{
    bool                                          FilterEnabled;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinVolume;                                                    // 0x000C(0x0004)
};


// ScriptStruct  Chaos.SolverBreakingFilterSettings
// Struct Size::0x0010
struct FSolverBreakingFilterSettings
{
    bool                                          FilterEnabled;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinVolume;                                                    // 0x000C(0x0004)
};


// ScriptStruct  Chaos.SolverCollisionFilterSettings
// Struct Size::0x0010
struct FSolverCollisionFilterSettings
{
    bool                                          FilterEnabled;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinImpulse;                                                   // 0x000C(0x0004)
};


// ScriptStruct  Chaos.RecordedTransformTrack
// Struct Size::0x0010
struct FRecordedTransformTrack
{
    TArray<FRecordedFrame>                        Records;                                                      // 0x0000(0x0010)
};


// ScriptStruct  Chaos.RecordedFrame
// Struct Size::0x00B8
struct FRecordedFrame
{
    TArray<FTransform>                            Transforms;                                                   // 0x0000(0x0010)
    TArray<int32_t>                               TransformIndices;                                             // 0x0010(0x0010)
    TArray<int32_t>                               PreviousTransformIndices;                                     // 0x0020(0x0010)
    TArray<bool>                                  DisabledFlags;                                                // 0x0030(0x0010)
    TArray<FSolverCollisionData>                  Collisions;                                                   // 0x0040(0x0010)
    TArray<FSolverBreakingData>                   Breakings;                                                    // 0x0050(0x0010)
    TSet<FSolverTrailingData>                     Trailings;                                                    // 0x0060(0x0050)
    float                                         Timestamp;                                                    // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
};


// ScriptStruct  Chaos.SolverTrailingData
// Struct Size::0x0030
struct FSolverTrailingData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    FVector                                       AngularVelocity;                                              // 0x0018(0x000C)
    float                                         Mass;                                                         // 0x0024(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x0028(0x0004)
    int32_t                                       ParticleIndexMesh;                                            // 0x002C(0x0004)
};


// ScriptStruct  Chaos.SolverBreakingData
// Struct Size::0x0030
struct FSolverBreakingData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    FVector                                       AngularVelocity;                                              // 0x0018(0x000C)
    float                                         Mass;                                                         // 0x0024(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x0028(0x0004)
    int32_t                                       ParticleIndexMesh;                                            // 0x002C(0x0004)
};


// ScriptStruct  Chaos.SolverCollisionData
// Struct Size::0x006C
struct FSolverCollisionData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       AccumulatedImpulse;                                           // 0x000C(0x000C)
    FVector                                       Normal;                                                       // 0x0018(0x000C)
    FVector                                       Velocity1;                                                    // 0x0024(0x000C)
    FVector                                       Velocity2;                                                    // 0x0030(0x000C)
    FVector                                       AngularVelocity1;                                             // 0x003C(0x000C)
    FVector                                       AngularVelocity2;                                             // 0x0048(0x000C)
    float                                         Mass1;                                                        // 0x0054(0x0004)
    float                                         Mass2;                                                        // 0x0058(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x005C(0x0004)
    int32_t                                       LevelsetIndex;                                                // 0x0060(0x0004)
    int32_t                                       ParticleIndexMesh;                                            // 0x0064(0x0004)
    int32_t                                       LevelsetIndexMesh;                                            // 0x0068(0x0004)
};


// ScriptStruct  MRMesh.MRMeshConfiguration
// Struct Size::0x0001
struct FMRMeshConfiguration
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  AugmentedReality.TrackedGeometryGroup
// Struct Size::0x0018
struct FTrackedGeometryGroup
{
    FARActor*                                     ARActor;                                                      // 0x0000(0x0008)
    FARComponent*                                 ARComponent;                                                  // 0x0008(0x0008)
    FARTrackedGeometry*                           TrackedGeometry;                                              // 0x0010(0x0008)
};


// ScriptStruct  AugmentedReality.ARGeoAnchorUpdatePayload
// Struct Size::0x0070
struct FARGeoAnchorUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldTransform;                                               // 0x0020(0x0030)
    float                                         Longitude;                                                    // 0x0050(0x0004)
    float                                         Latitude;                                                     // 0x0054(0x0004)
    float                                         AltitudeMeters;                                               // 0x0058(0x0004)
    enum class EARAltitudeSource                  AltitudeSource;                                               // 0x005C(0x0001)
    char                                          pa_005D[0x0003]                                               // 0x005D(0x0003)
    FString                                       AnchorName;                                                   // 0x0060(0x0010)
};


// ScriptStruct  AugmentedReality.ARSessionPayload
// Struct Size::0x0018
struct FARSessionPayload
{
    int32_t                                       ConfigFlags;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMaterialInterface*                           DefaultMeshMaterial;                                          // 0x0008(0x0008)
    FMaterialInterface*                           DefaultWireframeMeshMaterial;                                 // 0x0010(0x0008)
};


// ScriptStruct  AugmentedReality.ARMeshUpdatePayload
// Struct Size::0x0060
struct FARMeshUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldTransform;                                               // 0x0020(0x0030)
    enum class EARObjectClassification            ObjectClassification;                                         // 0x0050(0x0001)
    char                                          pa_0051[0x000F]                                               // 0x0051(0x000F)
};


// ScriptStruct  AugmentedReality.ARObjectUpdatePayload
// Struct Size::0x0030
struct FARObjectUpdatePayload
{
    FTransform                                    WorldTransform;                                               // 0x0000(0x0030)
};


// ScriptStruct  AugmentedReality.AREnvironmentProbeUpdatePayload
// Struct Size::0x0030
struct FAREnvironmentProbeUpdatePayload
{
    FTransform                                    WorldTransform;                                               // 0x0000(0x0030)
};


// ScriptStruct  AugmentedReality.ARPoseUpdatePayload
// Struct Size::0x0040
struct FARPoseUpdatePayload
{
    FTransform                                    WorldTransform;                                               // 0x0000(0x0030)
    TArray<FTransform>                            JointTransforms;                                              // 0x0030(0x0010)
};


// ScriptStruct  AugmentedReality.ARQRCodeUpdatePayload
// Struct Size::0x0070
struct FARQRCodeUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldTransform;                                               // 0x0020(0x0030)
    FVector                                       Extents;                                                      // 0x0050(0x000C)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       QRCode;                                                       // 0x0060(0x0010)
};


// ScriptStruct  AugmentedReality.ARImageUpdatePayload
// Struct Size::0x0060
struct FARImageUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldTransform;                                               // 0x0020(0x0030)
    FARCandidateImage*                            DetectedImage;                                                // 0x0050(0x0008)
    FVector2D                                     EstimatedSize;                                                // 0x0058(0x0008)
};


// ScriptStruct  AugmentedReality.ARFaceUpdatePayload
// Struct Size::0x0040
struct FARFaceUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    FVector                                       LeftEyePosition;                                              // 0x0018(0x000C)
    FVector                                       RightEyePosition;                                             // 0x0024(0x000C)
    FVector                                       LookAtTarget;                                                 // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  AugmentedReality.ARPointUpdatePayload
// Struct Size::0x0001
struct FARPointUpdatePayload
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  AugmentedReality.ARPlaneUpdatePayload
// Struct Size::0x0080
struct FARPlaneUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldTransform;                                               // 0x0020(0x0030)
    FVector                                       Center;                                                       // 0x0050(0x000C)
    FVector                                       Extents;                                                      // 0x005C(0x000C)
    TArray<FVector>                               BoundaryVertices;                                             // 0x0068(0x0010)
    enum class EARObjectClassification            ObjectClassification;                                         // 0x0078(0x0001)
    char                                          pa_0079[0x0007]                                               // 0x0079(0x0007)
};


// ScriptStruct  AugmentedReality.ARSharedWorldReplicationState
// Struct Size::0x0008
struct FARSharedWorldReplicationState
{
    int32_t                                       PreviewImageOffset;                                           // 0x0000(0x0004)
    int32_t                                       ARWorldOffset;                                                // 0x0004(0x0004)
};


// ScriptStruct  AugmentedReality.ARTraceResult
// Struct Size::0x0060
struct FARTraceResult
{
    float                                         DistanceFromCamera;                                           // 0x0000(0x0004)
    enum class EARLineTraceChannels               TraceChannel;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x000B]                                               // 0x0005(0x000B)
    FTransform                                    LocalTransform;                                               // 0x0010(0x0030)
    FARTrackedGeometry*                           TrackedGeometry;                                              // 0x0040(0x0008)
    char                                          pa_0048[0x0018]                                               // 0x0048(0x0018)
};


// ScriptStruct  AugmentedReality.ARCameraIntrinsics
// Struct Size::0x0018
struct FARCameraIntrinsics
{
    FIntPoint                                     ImageResolution;                                              // 0x0000(0x0008)
    FVector2D                                     FocalLength;                                                  // 0x0008(0x0008)
    FVector2D                                     PrincipalPoint;                                               // 0x0010(0x0008)
};


// ScriptStruct  AugmentedReality.ARPose3D
// Struct Size::0x0050
struct FARPose3D
{
    FARSkeletonDefinition                         SkeletonDefinition;                                           // 0x0000(0x0028)
    TArray<FTransform>                            JointTransforms;                                              // 0x0028(0x0010)
    TArray<bool>                                  IsJointTracked;                                               // 0x0038(0x0010)
    enum class EARJointTransformSpace             JointTransformSpace;                                          // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  AugmentedReality.ARSkeletonDefinition
// Struct Size::0x0028
struct FARSkeletonDefinition
{
    int32_t                                       NumJoints;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FName>                                 JointNames;                                                   // 0x0008(0x0010)
    TArray<int32_t>                               ParentIndices;                                                // 0x0018(0x0010)
};


// ScriptStruct  AugmentedReality.ARPose2D
// Struct Size::0x0048
struct FARPose2D
{
    FARSkeletonDefinition                         SkeletonDefinition;                                           // 0x0000(0x0028)
    TArray<FVector2D>                             JointLocations;                                               // 0x0028(0x0010)
    TArray<bool>                                  IsJointTracked;                                               // 0x0038(0x0010)
};


// ScriptStruct  AugmentedReality.ARVideoFormat
// Struct Size::0x000C
struct FARVideoFormat
{
    int32_t                                       FPS;                                                          // 0x0000(0x0004)
    int32_t                                       Width;                                                        // 0x0004(0x0004)
    int32_t                                       Height;                                                       // 0x0008(0x0004)
};


// ScriptStruct  AugmentedReality.ARSessionStatus
// Struct Size::0x0018
struct FARSessionStatus
{
    FString                                       AdditionalInfo;                                               // 0x0000(0x0010)
    enum class EARSessionStatus                   Status;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  HeadMountedDisplay.XRMotionControllerData
// Struct Size::0x00A0
struct FXRMotionControllerData
{
    bool                                          bValid;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         DeviceName;                                                   // 0x0004(0x000C)
    FGuid                                         ApplicationInstanceID;                                        // 0x0010(0x0010)
    enum class EXRVisualType                      DeviceVisualType;                                             // 0x0020(0x0001)
    enum class EControllerHand                    HandIndex;                                                    // 0x0021(0x0001)
    enum class ETrackingStatus                    TrackingStatus;                                               // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
    FVector                                       GripPosition;                                                 // 0x0024(0x000C)
    FQuat                                         GripRotation;                                                 // 0x0030(0x0010)
    FVector                                       AimPosition;                                                  // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FQuat                                         AimRotation;                                                  // 0x0050(0x0010)
    TArray<FVector>                               HandKeyPositions;                                             // 0x0060(0x0010)
    TArray<FQuat>                                 HandKeyRotations;                                             // 0x0070(0x0010)
    TArray<float>                                 HandKeyRadii;                                                 // 0x0080(0x0010)
    bool                                          bIsGrasped;                                                   // 0x0090(0x0001)
    char                                          pa_0091[0x000F]                                               // 0x0091(0x000F)
};


// ScriptStruct  HeadMountedDisplay.XRHMDData
// Struct Size::0x0040
struct FXRHMDData
{
    bool                                          bValid;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         DeviceName;                                                   // 0x0004(0x000C)
    FGuid                                         ApplicationInstanceID;                                        // 0x0010(0x0010)
    enum class ETrackingStatus                    TrackingStatus;                                               // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Position;                                                     // 0x0024(0x000C)
    FQuat                                         Rotation;                                                     // 0x0030(0x0010)
};


// ScriptStruct  HeadMountedDisplay.XRDeviceId
// Struct Size::0x0010
struct FXRDeviceId
{
    FName                                         SystemName;                                                   // 0x0000(0x000C)
    int32_t                                       DeviceId;                                                     // 0x000C(0x0004)
};


// ScriptStruct  HeadMountedDisplay.XRGestureConfig
// Struct Size::0x0006
struct FXRGestureConfig
{
    bool                                          bTap;                                                         // 0x0000(0x0001)
    bool                                          bHold;                                                        // 0x0001(0x0001)
    enum class ESpatialInputGestureAxis           AxisGesture;                                                  // 0x0002(0x0001)
    bool                                          bNavigationAxisX;                                             // 0x0003(0x0001)
    bool                                          bNavigationAxisY;                                             // 0x0004(0x0001)
    bool                                          bNavigationAxisZ;                                             // 0x0005(0x0001)
};


// ScriptStruct  BuildPatchServices.FileManifestData
// Struct Size::0x0068
struct FFileManifestData
{
    FString                                       Filename;                                                     // 0x0000(0x0010)
    FSHAHashData                                  FileHash;                                                     // 0x0010(0x0014)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FChunkPartData>                        FileChunkParts;                                               // 0x0028(0x0010)
    TArray<FString>                               InstallTags;                                                  // 0x0038(0x0010)
    bool                                          bIsUnixExecutable;                                            // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    FString                                       SymlinkTarget;                                                // 0x0050(0x0010)
    bool                                          bIsReadOnly;                                                  // 0x0060(0x0001)
    bool                                          bIsCompressed;                                                // 0x0061(0x0001)
    char                                          pa_0062[0x0006]                                               // 0x0062(0x0006)
};


// ScriptStruct  BuildPatchServices.ChunkPartData
// Struct Size::0x0018
struct FChunkPartData
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    uint32_t                                      Offset;                                                       // 0x0010(0x0004)
    uint32_t                                      Size;                                                         // 0x0014(0x0004)
};


// ScriptStruct  BuildPatchServices.SHAHashData
// Struct Size::0x0014
struct FSHAHashData
{
    char                                          Hash;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0013]                                               // 0x0001(0x0013)
};


// ScriptStruct  BuildPatchServices.ChunkInfoData
// Struct Size::0x0040
struct FChunkInfoData
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    uint64_t                                      Hash;                                                         // 0x0010(0x0008)
    FSHAHashData                                  ShaHash;                                                      // 0x0018(0x0014)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    int64_t                                       FileSize;                                                     // 0x0030(0x0008)
    char                                          GroupNumber;                                                  // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  BuildPatchServices.CustomFieldData
// Struct Size::0x0020
struct FCustomFieldData
{
    FString                                       Key;                                                          // 0x0000(0x0010)
    FString                                       Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Foliage.FoliageVertexColorChannelMask
// Struct Size::0x000C
struct FFoliageVertexColorChannelMask
{
    char                                          UseMask;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MaskThreshold;                                                // 0x0004(0x0004)
    char                                          InvertMask;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Foliage.FoliageTypeObject
// Struct Size::0x0020
struct FFoliageTypeObject
{
    UObject*                                      FoliageTypeObject;                                            // 0x0000(0x0008)
    FFoliageType*                                 TypeInstance;                                                 // 0x0008(0x0008)
    bool                                          bIsAsset;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FFoliageType*                                 Type;                                                         // 0x0018(0x0008)
};


// ScriptStruct  Foliage.ProceduralFoliageInstance
// Struct Size::0x0050
struct FProceduralFoliageInstance
{
    FQuat                                         Rotation;                                                     // 0x0000(0x0010)
    FVector                                       Location;                                                     // 0x0010(0x000C)
    float                                         Age;                                                          // 0x001C(0x0004)
    FVector                                       Normal;                                                       // 0x0020(0x000C)
    float                                         Scale;                                                        // 0x002C(0x0004)
    FFoliageType*                                 Type;                                                         // 0x0030(0x0008)
    char                                          pa_0038[0x0018]                                               // 0x0038(0x0018)
};


// ScriptStruct  Landscape.LandscapeLayer
// Struct Size::0x0090
struct FLandscapeLayer
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    FName                                         Name;                                                         // 0x0010(0x000C)
    bool                                          bVisible;                                                     // 0x001C(0x0001)
    bool                                          bLocked;                                                      // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    float                                         HeightmapAlpha;                                               // 0x0020(0x0004)
    float                                         WeightmapAlpha;                                               // 0x0024(0x0004)
    enum class ELandscapeBlendMode                BlendMode;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    TArray<FLandscapeLayerBrush>                  Brushes;                                                      // 0x0030(0x0010)
    TMap<FLandscapeLayerInfoObject*,bool>         WeightmapLayerAllocationBlend;                                // 0x0040(0x0050)
};


// ScriptStruct  Landscape.LandscapeLayerBrush
// Struct Size::0x0001
struct FLandscapeLayerBrush
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.LandscapeLayerComponentData
// Struct Size::0x0038
struct FLandscapeLayerComponentData
{
    FHeightmapData                                HeightmapData;                                                // 0x0000(0x0008)
    FWeightmapData                                WeightmapData;                                                // 0x0008(0x0030)
};


// ScriptStruct  Landscape.WeightmapData
// Struct Size::0x0030
struct FWeightmapData
{
    TArray<FTexture2D*>                           Textures;                                                     // 0x0000(0x0010)
    TArray<FWeightmapLayerAllocationInfo>         LayerAllocations;                                             // 0x0010(0x0010)
    TArray<FLandscapeWeightmapUsage*>             TextureUsages;                                                // 0x0020(0x0010)
};


// ScriptStruct  Landscape.WeightmapLayerAllocationInfo
// Struct Size::0x0010
struct FWeightmapLayerAllocationInfo
{
    FLandscapeLayerInfoObject*                    LayerInfo;                                                    // 0x0000(0x0008)
    char                                          WeightmapTextureIndex;                                        // 0x0008(0x0001)
    char                                          WeightmapTextureChannel;                                      // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  Landscape.HeightmapData
// Struct Size::0x0008
struct FHeightmapData
{
    FTexture2D*                                   Texture;                                                      // 0x0000(0x0008)
};


// ScriptStruct  Landscape.LandscapeComponentMaterialOverride
// Struct Size::0x0010
struct FLandscapeComponentMaterialOverride
{
    FPerPlatformInt                               LODIndex;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Landscape.LandscapeEditToolRenderData
// Struct Size::0x0038
struct FLandscapeEditToolRenderData
{
    FMaterialInterface*                           ToolMaterial;                                                 // 0x0000(0x0008)
    FMaterialInterface*                           GizmoMaterial;                                                // 0x0008(0x0008)
    int32_t                                       SelectedType;                                                 // 0x0010(0x0004)
    int32_t                                       DebugChannelR;                                                // 0x0014(0x0004)
    int32_t                                       DebugChannelG;                                                // 0x0018(0x0004)
    int32_t                                       DebugChannelB;                                                // 0x001C(0x0004)
    FTexture2D*                                   DataTexture;                                                  // 0x0020(0x0008)
    FTexture2D*                                   LayerContributionTexture;                                     // 0x0028(0x0008)
    FTexture2D*                                   DirtyTexture;                                                 // 0x0030(0x0008)
};


// ScriptStruct  Landscape.GizmoSelectData
// Struct Size::0x0050
struct FGizmoSelectData
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  Landscape.GrassVariety
// Struct Size::0x0058
struct FGrassVariety
{
    FStaticMesh*                                  GrassMesh;                                                    // 0x0000(0x0008)
    TArray<FMaterialInterface*>                   OverrideMaterials;                                            // 0x0008(0x0010)
    FPerPlatformFloat                             GrassDensity;                                                 // 0x0018(0x0004)
    bool                                          bUseGrid;                                                     // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         PlacementJitter;                                              // 0x0020(0x0004)
    FPerPlatformInt                               StartCullDistance;                                            // 0x0024(0x0004)
    FPerPlatformInt                               EndCullDistance;                                              // 0x0028(0x0004)
    int32_t                                       MinLOD;                                                       // 0x002C(0x0004)
    enum class EGrassScaling                      Scaling;                                                      // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    FFloatInterval                                ScaleX;                                                       // 0x0034(0x0008)
    FFloatInterval                                ScaleY;                                                       // 0x003C(0x0008)
    FFloatInterval                                ScaleZ;                                                       // 0x0044(0x0008)
    bool                                          RandomRotation;                                               // 0x004C(0x0001)
    bool                                          AlignToSurface;                                               // 0x004D(0x0001)
    bool                                          bUseLandscapeLightmap;                                        // 0x004E(0x0001)
    FLightingChannels                             LightingChannels;                                             // 0x004F(0x0001)
    bool                                          bReceivesDecals;                                              // 0x0050(0x0001)
    bool                                          bCastDynamicShadow;                                           // 0x0051(0x0001)
    bool                                          bKeepInstanceBufferCPUCopy;                                   // 0x0052(0x0001)
    char                                          pa_0053[0x0005]                                               // 0x0053(0x0005)
};


// ScriptStruct  Landscape.LandscapeInfoLayerSettings
// Struct Size::0x0018
struct FLandscapeInfoLayerSettings
{
    FLandscapeLayerInfoObject*                    LayerInfoObj;                                                 // 0x0000(0x0008)
    FName                                         LayerName;                                                    // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Landscape.LandscapeMaterialTextureStreamingInfo
// Struct Size::0x0010
struct FLandscapeMaterialTextureStreamingInfo
{
    FName                                         TextureName;                                                  // 0x0000(0x000C)
    float                                         TexelFactor;                                                  // 0x000C(0x0004)
};


// ScriptStruct  Landscape.LandscapeProxyMaterialOverride
// Struct Size::0x0010
struct FLandscapeProxyMaterialOverride
{
    FPerPlatformInt                               LODIndex;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Landscape.LandscapeImportLayerInfo
// Struct Size::0x0001
struct FLandscapeImportLayerInfo
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.LandscapeLayerStruct
// Struct Size::0x0008
struct FLandscapeLayerStruct
{
    FLandscapeLayerInfoObject*                    LayerInfoObj;                                                 // 0x0000(0x0008)
};


// ScriptStruct  Landscape.LandscapeEditorLayerSettings
// Struct Size::0x0001
struct FLandscapeEditorLayerSettings
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.LandscapeSplineConnection
// Struct Size::0x0010
struct FLandscapeSplineConnection
{
    FLandscapeSplineSegment*                      Segment;                                                      // 0x0000(0x0008)
    char                                          End;                                                          // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Landscape.ForeignWorldSplineData
// Struct Size::0x0001
struct FForeignWorldSplineData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.ForeignSplineSegmentData
// Struct Size::0x0001
struct FForeignSplineSegmentData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.ForeignControlPointData
// Struct Size::0x0001
struct FForeignControlPointData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.LandscapeSplineMeshEntry
// Struct Size::0x0038
struct FLandscapeSplineMeshEntry
{
    FStaticMesh*                                  Mesh;                                                         // 0x0000(0x0008)
    TArray<FMaterialInterface*>                   MaterialOverrides;                                            // 0x0008(0x0010)
    char                                          bCenterH;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FVector2D                                     CenterAdjust;                                                 // 0x001C(0x0008)
    char                                          bScaleToWidth;                                                // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FVector                                       Scale;                                                        // 0x0028(0x000C)
    enum class LandscapeSplineMeshOrientation     Orientation;                                                  // 0x0034(0x0001)
    enum class ESplineMeshAxis                    ForwardAxis;                                                  // 0x0035(0x0001)
    enum class ESplineMeshAxis                    UpAxis;                                                       // 0x0036(0x0001)
    char                                          pa_0037[0x0001]                                               // 0x0037(0x0001)
};


// ScriptStruct  Landscape.LandscapeSplineSegmentConnection
// Struct Size::0x0018
struct FLandscapeSplineSegmentConnection
{
    FLandscapeSplineControlPoint*                 ControlPoint;                                                 // 0x0000(0x0008)
    float                                         TangentLen;                                                   // 0x0008(0x0004)
    FName                                         SocketName;                                                   // 0x000C(0x000C)
};


// ScriptStruct  Landscape.LandscapeSplineInterpPoint
// Struct Size::0x0070
struct FLandscapeSplineInterpPoint
{
    FVector                                       Center;                                                       // 0x0000(0x000C)
    FVector                                       Left;                                                         // 0x000C(0x000C)
    FVector                                       Right;                                                        // 0x0018(0x000C)
    FVector                                       FalloffLeft;                                                  // 0x0024(0x000C)
    FVector                                       FalloffRight;                                                 // 0x0030(0x000C)
    FVector                                       LayerLeft;                                                    // 0x003C(0x000C)
    FVector                                       LayerRight;                                                   // 0x0048(0x000C)
    FVector                                       LayerFalloffLeft;                                             // 0x0054(0x000C)
    FVector                                       LayerFalloffRight;                                            // 0x0060(0x000C)
    float                                         StartEndFalloff;                                              // 0x006C(0x0004)
};


// ScriptStruct  Landscape.GrassInput
// Struct Size::0x0038
struct FGrassInput
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FLandscapeGrassType*                          GrassType;                                                    // 0x0010(0x0008)
    FExpressionInput                              Input;                                                        // 0x0018(0x001C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Landscape.LayerBlendInput
// Struct Size::0x005C
struct FLayerBlendInput
{
    FName                                         LayerName;                                                    // 0x0000(0x000C)
    enum class ELandscapeLayerBlendType           BlendType;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FExpressionInput                              LayerInput;                                                   // 0x0010(0x001C)
    FExpressionInput                              HeightInput;                                                  // 0x002C(0x001C)
    float                                         PreviewWeight;                                                // 0x0048(0x0004)
    FVector                                       ConstLayerInput;                                              // 0x004C(0x000C)
    float                                         ConstHeightInput;                                             // 0x0058(0x0004)
};


// ScriptStruct  Landscape.PhysicalMaterialInput
// Struct Size::0x0028
struct FPhysicalMaterialInput
{
    FPhysicalMaterial*                            PhysicalMaterial;                                             // 0x0000(0x0008)
    FExpressionInput                              Input;                                                        // 0x0008(0x001C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  TimeManagement.TimedDataInputEvaluationData
// Struct Size::0x0008
struct FTimedDataInputEvaluationData
{
    float                                         DistanceToNewestSampleSeconds;                                // 0x0000(0x0004)
    float                                         DistanceToOldestSampleSeconds;                                // 0x0004(0x0004)
};


// ScriptStruct  TimeManagement.TimedDataChannelSampleTime
// Struct Size::0x0018
struct FTimedDataChannelSampleTime
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  MovieScene.TrackInstanceInputComponent
// Struct Size::0x0010
struct FTrackInstanceInputComponent
{
    FMovieSceneSection*                           Section;                                                      // 0x0000(0x0008)
    int32_t                                       OutputIndex;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationHookComponent
// Struct Size::0x0020
struct FMovieSceneEvaluationHookComponent
{
    TScriptInterface<IMovieSceneEvaluationHook>   Interface;                                                    // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneTrackInstanceComponent
// Struct Size::0x0010
struct FMovieSceneTrackInstanceComponent
{
    FMovieSceneSection*                           Owner;                                                        // 0x0000(0x0008)
    FMovieSceneTrackInstance*                     TrackInstanceClass;                                           // 0x0008(0x0008)
};


// ScriptStruct  MovieScene.EasingComponentData
// Struct Size::0x0008
struct FEasingComponentData
{
    FMovieSceneSection*                           Section;                                                      // 0x0000(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneDeterminismData
// Struct Size::0x0018
struct FMovieSceneDeterminismData
{
    TArray<FFrameTime>                            Fences;                                                       // 0x0000(0x0010)
    bool                                          bParentSequenceRequiresLowerFence;                            // 0x0010(0x0001)
    bool                                          bParentSequenceRequiresUpperFence;                            // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  MovieScene.MovieSceneSectionGroup
// Struct Size::0x0010
struct FMovieSceneSectionGroup
{
    TArray<TWeakObjectPtr<FMovieSceneSection>>    Sections;                                                     // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneObjectBindingIDs
// Struct Size::0x0010
struct FMovieSceneObjectBindingIDs
{
    TArray<FMovieSceneObjectBindingID>            IDs;                                                          // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneTrackLabels
// Struct Size::0x0010
struct FMovieSceneTrackLabels
{
    TArray<FString>                               Strings;                                                      // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEditorData
// Struct Size::0x00F0
struct FMovieSceneEditorData
{
    TMap<FString,FMovieSceneExpansionState>       ExpansionStates;                                              // 0x0000(0x0050)
    TArray<FString>                               PinnedNodes;                                                  // 0x0050(0x0010)
    double                                        ViewStart;                                                    // 0x0060(0x0008)
    double                                        ViewEnd;                                                      // 0x0068(0x0008)
    double                                        WorkStart;                                                    // 0x0070(0x0008)
    double                                        WorkEnd;                                                      // 0x0078(0x0008)
    TSet<FFrameNumber>                            MarkedFrames;                                                 // 0x0080(0x0050)
    FFloatRange                                   WorkingRange;                                                 // 0x00D0(0x0010)
    FFloatRange                                   ViewRange;                                                    // 0x00E0(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneExpansionState
// Struct Size::0x0001
struct FMovieSceneExpansionState
{
    bool                                          bExpanded;                                                    // 0x0000(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneMarkedFrame
// Struct Size::0x0020
struct FMovieSceneMarkedFrame
{
    FFrameNumber                                  FrameNumber;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Label;                                                        // 0x0008(0x0010)
    bool                                          bIsDeterminismFence;                                          // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  MovieScene.MovieSceneTimecodeSource
// Struct Size::0x0018
struct FMovieSceneTimecodeSource
{
    FTimecode                                     Timecode;                                                     // 0x0000(0x0014)
    FFrameNumber                                  DeltaFrame;                                                   // 0x0014(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneBinding
// Struct Size::0x0030
struct FMovieSceneBinding
{
    FGuid                                         ObjectGuid;                                                   // 0x0000(0x0010)
    FString                                       BindingName;                                                  // 0x0010(0x0010)
    TArray<FMovieSceneTrack*>                     Tracks;                                                       // 0x0020(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneBindingOverrideData
// Struct Size::0x0024
struct FMovieSceneBindingOverrideData
{
    FMovieSceneObjectBindingID                    ObjectBindingId;                                              // 0x0000(0x0018)
    TWeakObjectPtr<UObject>                       Object;                                                       // 0x0018(0x0008)
    bool                                          bOverridesDefault;                                            // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
};


// ScriptStruct  MovieScene.OptionalMovieSceneBlendType
// Struct Size::0x0002
struct FOptionalMovieSceneBlendType
{
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x0000(0x0001)
    bool                                          bIsValid;                                                     // 0x0001(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneCompiledSequenceFlagStruct
// Struct Size::0x0001
struct FMovieSceneCompiledSequenceFlagStruct
{
    char                                          bParentSequenceRequiresLowerFence;                            // 0x0000(0x0001)
    char                                          bParentSequenceRequiresUpperFence;                            // 0x0000(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneSequenceCompilerMaskStruct
// Struct Size::0x0001
struct FMovieSceneSequenceCompilerMaskStruct
{
    char                                          bHierarchy;                                                   // 0x0000(0x0001)
    char                                          bEvaluationTemplate;                                          // 0x0000(0x0001)
    char                                          bEvaluationTemplateField;                                     // 0x0000(0x0001)
    char                                          bEntityComponentField;                                        // 0x0000(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneEntitySystemGraph
// Struct Size::0x0138
struct FMovieSceneEntitySystemGraph
{
    char                                          pa_0000[0x0080]                                               // 0x0000(0x0080)
    FMovieSceneEntitySystemGraphNodes             Nodes;                                                        // 0x0080(0x0038)
    char                                          pa_00B8[0x0080]                                               // 0x00B8(0x0080)
};


// ScriptStruct  MovieScene.MovieSceneEntitySystemGraphNodes
// Struct Size::0x0038
struct FMovieSceneEntitySystemGraphNodes
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  MovieScene.MovieSceneEntitySystemGraphNode
// Struct Size::0x0028
struct FMovieSceneEntitySystemGraphNode
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    FMovieSceneEntitySystem*                      System;                                                       // 0x0020(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneEvalTemplatePtr
// Struct Size::0x0088
struct FMovieSceneEvalTemplatePtr
{
    char                                          pa_0000[0x0088]                                               // 0x0000(0x0088)
};


// ScriptStruct  MovieScene.MovieSceneEmptyStruct
// Struct Size::0x0001
struct FMovieSceneEmptyStruct
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationField
// Struct Size::0x0030
struct FMovieSceneEvaluationField
{
    TArray<FMovieSceneFrameRange>                 Ranges;                                                       // 0x0000(0x0010)
    TArray<FMovieSceneEvaluationGroup>            Groups;                                                       // 0x0010(0x0010)
    TArray<FMovieSceneEvaluationMetaData>         MetaData;                                                     // 0x0020(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationMetaData
// Struct Size::0x0020
struct FMovieSceneEvaluationMetaData
{
    TArray<FMovieSceneSequenceID>                 ActiveSequences;                                              // 0x0000(0x0010)
    TArray<FMovieSceneOrderedEvaluationKey>       ActiveEntities;                                               // 0x0010(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneOrderedEvaluationKey
// Struct Size::0x0010
struct FMovieSceneOrderedEvaluationKey
{
    FMovieSceneEvaluationKey                      Key;                                                          // 0x0000(0x000C)
    uint16_t                                      SetupIndex;                                                   // 0x000C(0x0002)
    uint16_t                                      TearDownIndex;                                                // 0x000E(0x0002)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationKey
// Struct Size::0x000C
struct FMovieSceneEvaluationKey
{
    FMovieSceneSequenceID                         SequenceID;                                                   // 0x0000(0x0004)
    FMovieSceneTrackIdentifier                    TrackIdentifier;                                              // 0x0004(0x0004)
    uint32_t                                      SectionIndex;                                                 // 0x0008(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneTrackIdentifier
// Struct Size::0x0004
struct FMovieSceneTrackIdentifier
{
    uint32_t                                      Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationGroup
// Struct Size::0x0030
struct FMovieSceneEvaluationGroup
{
    TArray<FMovieSceneEvaluationGroupLUTIndex>    LUTIndices;                                                   // 0x0000(0x0010)
    TArray<FMovieSceneFieldEntry>                 TrackLUT;                                                     // 0x0010(0x0010)
    TArray<FMovieSceneFieldEntry>                 SectionLUT;                                                   // 0x0020(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneFieldEntry
// Struct Size::0x0008
struct FMovieSceneFieldEntry
{
    uint16_t                                      ChildIndex;                                                   // 0x0000(0x0002)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FFrameNumber                                  ForcedTime;                                                   // 0x0004(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneFieldEntry
// Struct Size::0x000C
struct FMovieSceneFieldEntry
{
    FMovieSceneEvaluationFieldTrackPtr            TrackPtr;                                                     // 0x0000(0x0008)
    uint16_t                                      NumChildren;                                                  // 0x0008(0x0002)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldTrackPtr
// Struct Size::0x0008
struct FMovieSceneEvaluationFieldTrackPtr
{
    FMovieSceneSequenceID                         SequenceID;                                                   // 0x0000(0x0004)
    FMovieSceneTrackIdentifier                    TrackIdentifier;                                              // 0x0004(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationGroupLUTIndex
// Struct Size::0x0008
struct FMovieSceneEvaluationGroupLUTIndex
{
    int32_t                                       NumInitPtrs;                                                  // 0x0000(0x0004)
    int32_t                                       NumEvalPtrs;                                                  // 0x0004(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneFrameRange
// Struct Size::0x0010
struct FMovieSceneFrameRange
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldSegmentPtr
// Struct Size::0x000C
struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
{
    FMovieSceneSegmentIdentifier                  SegmentID;                                                    // 0x0008(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSegmentIdentifier
// Struct Size::0x0004
struct FMovieSceneSegmentIdentifier
{
    int32_t                                       IdentifierIndex;                                              // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEntityComponentField
// Struct Size::0x00F0
struct FMovieSceneEntityComponentField
{
    FMovieSceneEvaluationFieldEntityTree          PersistentEntityTree;                                         // 0x0000(0x0060)
    FMovieSceneEvaluationFieldEntityTree          OneShotEntityTree;                                            // 0x0060(0x0060)
    TArray<FMovieSceneEvaluationFieldEntity>      Entities;                                                     // 0x00C0(0x0010)
    TArray<FMovieSceneEvaluationFieldEntityMetaData>EntityMetaData;                                             // 0x00D0(0x0010)
    TArray<FMovieSceneEvaluationFieldSharedEntityMetaData>SharedMetaData;                                       // 0x00E0(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldSharedEntityMetaData
// Struct Size::0x0010
struct FMovieSceneEvaluationFieldSharedEntityMetaData
{
    FGuid                                         ObjectBindingID;                                              // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldEntityMetaData
// Struct Size::0x0020
struct FMovieSceneEvaluationFieldEntityMetaData
{
    FString                                       OverrideBoundPropertyPath;                                    // 0x0000(0x0010)
    FFrameNumber                                  ForcedTime;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x0018(0x0001)
    char                                          bEvaluateInSequencePreRoll;                                   // 0x0019(0x0001)
    char                                          bEvaluateInSequencePostRoll;                                  // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldEntity
// Struct Size::0x0010
struct FMovieSceneEvaluationFieldEntity
{
    FMovieSceneEvaluationFieldEntityKey           Key;                                                          // 0x0000(0x000C)
    int32_t                                       SharedMetaDataIndex;                                          // 0x000C(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldEntityKey
// Struct Size::0x000C
struct FMovieSceneEvaluationFieldEntityKey
{
    TWeakObjectPtr<UObject>                       EntityOwner;                                                  // 0x0000(0x0008)
    uint32_t                                      EntityID;                                                     // 0x0008(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldEntityTree
// Struct Size::0x0060
struct FMovieSceneEvaluationFieldEntityTree
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationInstanceKey
// Struct Size::0x0004
struct FMovieSceneEvaluationInstanceKey
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationHookEventContainer
// Struct Size::0x0010
struct FMovieSceneEvaluationHookEventContainer
{
    TArray<FMovieSceneEvaluationHookEvent>        Events;                                                       // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationHookEvent
// Struct Size::0x0038
struct FMovieSceneEvaluationHookEvent
{
    FMovieSceneEvaluationHookComponent            Hook;                                                         // 0x0000(0x0020)
    char                                          pa_0020[0x0018]                                               // 0x0020(0x0018)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationTemplate
// Struct Size::0x0160
struct FMovieSceneEvaluationTemplate
{
    TMap<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack>Tracks;                                          // 0x0000(0x0050)
    char                                          pa_0050[0x0050]                                               // 0x0050(0x0050)
    FGuid                                         SequenceSignature;                                            // 0x00A0(0x0010)
    FMovieSceneEvaluationTemplateSerialNumber     TemplateSerialNumber;                                         // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
    FMovieSceneTemplateGenerationLedger           TemplateLedger;                                               // 0x00B8(0x00A8)
};


// ScriptStruct  MovieScene.MovieSceneTemplateGenerationLedger
// Struct Size::0x00A8
struct FMovieSceneTemplateGenerationLedger
{
    FMovieSceneTrackIdentifier                    LastTrackIdentifier;                                          // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TMap<FGuid,FMovieSceneTrackIdentifier>        TrackSignatureToTrackIdentifier;                              // 0x0008(0x0050)
    TMap<FGuid,FMovieSceneFrameRange>             SubSectionRanges;                                             // 0x0058(0x0050)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationTemplateSerialNumber
// Struct Size::0x0004
struct FMovieSceneEvaluationTemplateSerialNumber
{
    uint32_t                                      Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationTrack
// Struct Size::0x0078
struct FMovieSceneEvaluationTrack
{
    FGuid                                         ObjectBindingID;                                              // 0x0000(0x0010)
    uint16_t                                      EvaluationPriority;                                           // 0x0010(0x0002)
    enum class EEvaluationMethod                  EvaluationMethod;                                             // 0x0012(0x0001)
    char                                          pa_0013[0x0001]                                               // 0x0013(0x0001)
    TWeakObjectPtr<FMovieSceneTrack>              SourceTrack;                                                  // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FMovieSceneEvalTemplatePtr>            ChildTemplates;                                               // 0x0020(0x0010)
    FMovieSceneTrackImplementationPtr             TrackTemplate;                                                // 0x0030(0x0038)
    FName                                         EvaluationGroup;                                              // 0x0068(0x000C)
    char                                          bEvaluateInPreroll;                                           // 0x0074(0x0001)
    char                                          bEvaluateInPostroll;                                          // 0x0074(0x0001)
    char                                          bTearDownPriority;                                            // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneTrackImplementationPtr
// Struct Size::0x0038
struct FMovieSceneTrackImplementationPtr
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  MovieScene.MovieSceneSubSectionData
// Struct Size::0x001C
struct FMovieSceneSubSectionData
{
    TWeakObjectPtr<FMovieSceneSubSection>         Section;                                                      // 0x0000(0x0008)
    FGuid                                         ObjectBindingId;                                              // 0x0008(0x0010)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneRootEvaluationTemplateInstance
// Struct Size::0x00E8
struct FMovieSceneRootEvaluationTemplateInstance
{
    TWeakObjectPtr<FMovieSceneSequence>           WeakRootSequence;                                             // 0x0000(0x0008)
    FMovieSceneCompiledDataManager*               CompiledDataManager;                                          // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
    FMovieSceneEntitySystemLinker*                EntitySystemLinker;                                           // 0x0018(0x0008)
    char                                          pa_0020[0x0070]                                               // 0x0020(0x0070)
    TMap<FMovieSceneSequenceID,UObject*>          DirectorInstances;                                            // 0x0090(0x0050)
    char                                          pa_00E0[0x0008]                                               // 0x00E0(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneKeyStruct
// Struct Size::0x0008
struct FMovieSceneKeyStruct
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneKeyTimeStruct
// Struct Size::0x0028
struct FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
{
    FFrameNumber                                  Time;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x001C]                                               // 0x000C(0x001C)
};


// ScriptStruct  MovieScene.GeneratedMovieSceneKeyStruct
// Struct Size::0x0050
struct FGeneratedMovieSceneKeyStruct
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  MovieScene.MovieSceneObjectPathChannel
// Struct Size::0x00C8
struct FMovieSceneObjectPathChannel : public FMovieSceneChannel
{
    UObject*                                      PropertyClass;                                                // 0x0008(0x0008)
    TArray<FFrameNumber>                          Times;                                                        // 0x0010(0x0010)
    TArray<FMovieSceneObjectPathChannelKeyValue>  Values;                                                       // 0x0020(0x0010)
    FMovieSceneObjectPathChannelKeyValue          DefaultValue;                                                 // 0x0030(0x0038)
    char                                          pa_0068[0x0060]                                               // 0x0068(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneObjectPathChannelKeyValue
// Struct Size::0x0038
struct FMovieSceneObjectPathChannelKeyValue
{
    TSoftObjectPtr<UObject>                       SoftPtr;                                                      // 0x0000(0x0030)
    UObject*                                      HardPtr;                                                      // 0x0030(0x0008)
};


// ScriptStruct  MovieScene.MovieScenePossessable
// Struct Size::0x0048
struct FMovieScenePossessable
{
    TArray<FName>                                 Tags;                                                         // 0x0000(0x0010)
    FGuid                                         Guid;                                                         // 0x0010(0x0010)
    FString                                       Name;                                                         // 0x0020(0x0010)
    UObject*                                      PossessedObjectClass;                                         // 0x0030(0x0008)
    FGuid                                         ParentGuid;                                                   // 0x0038(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEasingSettings
// Struct Size::0x0038
struct FMovieSceneEasingSettings
{
    int32_t                                       AutoEaseInDuration;                                           // 0x0000(0x0004)
    int32_t                                       AutoEaseOutDuration;                                          // 0x0004(0x0004)
    TScriptInterface<IMovieSceneEasingFunction>   EaseIn;                                                       // 0x0008(0x0010)
    bool                                          bManualEaseIn;                                                // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    int32_t                                       ManualEaseInDuration;                                         // 0x001C(0x0004)
    TScriptInterface<IMovieSceneEasingFunction>   EaseOut;                                                      // 0x0020(0x0010)
    bool                                          bManualEaseOut;                                               // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       ManualEaseOutDuration;                                        // 0x0034(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSectionEvalOptions
// Struct Size::0x0002
struct FMovieSceneSectionEvalOptions
{
    bool                                          bCanEditCompletionMode;                                       // 0x0000(0x0001)
    enum class EMovieSceneCompletionMode          CompletionMode;                                               // 0x0001(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneSectionParameters
// Struct Size::0x0024
struct FMovieSceneSectionParameters
{
    FFrameNumber                                  StartFrameOffset;                                             // 0x0000(0x0004)
    bool                                          bCanLoop;                                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FFrameNumber                                  EndFrameOffset;                                               // 0x0008(0x0004)
    FFrameNumber                                  FirstLoopStartFrameOffset;                                    // 0x000C(0x0004)
    float                                         TimeScale;                                                    // 0x0010(0x0004)
    int32_t                                       HierarchicalBias;                                             // 0x0014(0x0004)
    float                                         StartOffset;                                                  // 0x0018(0x0004)
    float                                         PrerollTime;                                                  // 0x001C(0x0004)
    float                                         PostrollTime;                                                 // 0x0020(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSegment
// Struct Size::0x0058
struct FMovieSceneSegment
{
    char                                          pa_0000[0x0058]                                               // 0x0000(0x0058)
};


// ScriptStruct  MovieScene.SectionEvaluationData
// Struct Size::0x000C
struct FSectionEvaluationData
{
    int32_t                                       ImplIndex;                                                    // 0x0000(0x0004)
    FFrameNumber                                  ForcedTime;                                                   // 0x0004(0x0004)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneSequenceHierarchy
// Struct Size::0x0118
struct FMovieSceneSequenceHierarchy
{
    FMovieSceneSequenceHierarchyNode              RootNode;                                                     // 0x0000(0x0018)
    FMovieSceneSubSequenceTree                    Tree;                                                         // 0x0018(0x0060)
    TMap<FMovieSceneSequenceID,FMovieSceneSubSequenceData>SubSequences;                                         // 0x0078(0x0050)
    TMap<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode>Hierarchy;                                      // 0x00C8(0x0050)
};


// ScriptStruct  MovieScene.MovieSceneSequenceHierarchyNode
// Struct Size::0x0018
struct FMovieSceneSequenceHierarchyNode
{
    FMovieSceneSequenceID                         ParentID;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FMovieSceneSequenceID>                 Children;                                                     // 0x0008(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneSubSequenceData
// Struct Size::0x0110
struct FMovieSceneSubSequenceData
{
    FSoftObjectPath                               Sequence;                                                     // 0x0000(0x0020)
    FMovieSceneSequenceTransform                  OuterToInnerTransform;                                        // 0x0020(0x0020)
    FMovieSceneSequenceTransform                  RootToSequenceTransform;                                      // 0x0040(0x0020)
    FFrameRate                                    TickResolution;                                               // 0x0060(0x0008)
    FMovieSceneSequenceID                         DeterministicSequenceID;                                      // 0x0068(0x0004)
    FMovieSceneFrameRange                         ParentPlayRange;                                              // 0x006C(0x0010)
    FFrameNumber                                  ParentStartFrameOffset;                                       // 0x007C(0x0004)
    FFrameNumber                                  ParentEndFrameOffset;                                         // 0x0080(0x0004)
    FFrameNumber                                  ParentFirstLoopStartFrameOffset;                              // 0x0084(0x0004)
    bool                                          bCanLoop;                                                     // 0x0088(0x0001)
    char                                          pa_0089[0x0003]                                               // 0x0089(0x0003)
    FMovieSceneFrameRange                         PlayRange;                                                    // 0x008C(0x0010)
    FMovieSceneFrameRange                         FullPlayRange;                                                // 0x009C(0x0010)
    FMovieSceneFrameRange                         UnwarpedPlayRange;                                            // 0x00AC(0x0010)
    FMovieSceneFrameRange                         PreRollRange;                                                 // 0x00BC(0x0010)
    FMovieSceneFrameRange                         PostRollRange;                                                // 0x00CC(0x0010)
    int16_t                                       HierarchicalBias;                                             // 0x00DC(0x0002)
    bool                                          bHasHierarchicalEasing;                                       // 0x00DE(0x0001)
    char                                          pa_00DF[0x0001]                                               // 0x00DF(0x0001)
    FMovieSceneSequenceInstanceDataPtr            InstanceData;                                                 // 0x00E0(0x0018)
    char                                          pa_00F8[0x0008]                                               // 0x00F8(0x0008)
    FGuid                                         SubSectionSignature;                                          // 0x0100(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneSequenceInstanceDataPtr
// Struct Size::0x0018
struct FMovieSceneSequenceInstanceDataPtr
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  MovieScene.MovieSceneSequenceTransform
// Struct Size::0x0020
struct FMovieSceneSequenceTransform
{
    FMovieSceneTimeTransform                      LinearTransform;                                              // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FMovieSceneNestedSequenceTransform>    NestedTransforms;                                             // 0x0010(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneNestedSequenceTransform
// Struct Size::0x0014
struct FMovieSceneNestedSequenceTransform
{
    FMovieSceneTimeTransform                      LinearTransform;                                              // 0x0000(0x000C)
    FMovieSceneTimeWarping                        Warping;                                                      // 0x000C(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneTimeWarping
// Struct Size::0x0008
struct FMovieSceneTimeWarping
{
    FFrameNumber                                  Start;                                                        // 0x0000(0x0004)
    FFrameNumber                                  End;                                                          // 0x0004(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneTimeTransform
// Struct Size::0x000C
struct FMovieSceneTimeTransform
{
    float                                         TimeScale;                                                    // 0x0000(0x0004)
    FFrameTime                                    Offset;                                                       // 0x0004(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneSubSequenceTree
// Struct Size::0x0060
struct FMovieSceneSubSequenceTree
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneSubSequenceTreeEntry
// Struct Size::0x0018
struct FMovieSceneSubSequenceTreeEntry
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  MovieScene.MovieSceneSequencePlaybackParams
// Struct Size::0x0028
struct FMovieSceneSequencePlaybackParams
{
    FFrameTime                                    Frame;                                                        // 0x0000(0x0008)
    float                                         Time;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       MarkedFrame;                                                  // 0x0010(0x0010)
    enum class EMovieScenePositionType            PositionType;                                                 // 0x0020(0x0001)
    enum class EUpdatePositionMethod              UpdateMethod;                                                 // 0x0021(0x0001)
    char                                          pa_0022[0x0006]                                               // 0x0022(0x0006)
};


// ScriptStruct  MovieScene.MovieSceneSequencePlaybackSettings
// Struct Size::0x0014
struct FMovieSceneSequencePlaybackSettings
{
    char                                          bAutoPlay;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FMovieSceneSequenceLoopCount                  LoopCount;                                                    // 0x0004(0x0004)
    float                                         PlayRate;                                                     // 0x0008(0x0004)
    float                                         StartTime;                                                    // 0x000C(0x0004)
    char                                          bRandomStartTime;                                             // 0x0010(0x0001)
    char                                          bRestoreState;                                                // 0x0010(0x0001)
    char                                          bDisableMovementInput;                                        // 0x0010(0x0001)
    char                                          bDisableLookAtInput;                                          // 0x0010(0x0001)
    char                                          bHidePlayer;                                                  // 0x0010(0x0001)
    char                                          bHideHud;                                                     // 0x0010(0x0001)
    char                                          bDisableCameraCuts;                                           // 0x0010(0x0001)
    char                                          bPauseAtEnd;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneSequenceLoopCount
// Struct Size::0x0004
struct FMovieSceneSequenceLoopCount
{
    int32_t                                       Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSequenceReplProperties
// Struct Size::0x0010
struct FMovieSceneSequenceReplProperties
{
    FFrameTime                                    LastKnownPosition;                                            // 0x0000(0x0008)
    enum class EMovieScenePlayerStatus            LastKnownStatus;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       LastKnownNumLoops;                                            // 0x000C(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSequenceActorPointers
// Struct Size::0x0018
struct FMovieSceneSequenceActorPointers
{
    AActor*                                       SequenceActor;                                                // 0x0000(0x0008)
    TScriptInterface<IMovieSceneSequenceActor>    SequenceActorInterface;                                       // 0x0008(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneWarpCounter
// Struct Size::0x0010
struct FMovieSceneWarpCounter
{
    TArray<uint32_t>                              WarpCounts;                                                   // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneSpawnable
// Struct Size::0x0090
struct FMovieSceneSpawnable
{
    FTransform                                    SpawnTransform;                                               // 0x0000(0x0030)
    TArray<FName>                                 Tags;                                                         // 0x0030(0x0010)
    bool                                          bContinuouslyRespawn;                                         // 0x0040(0x0001)
    bool                                          bNetAddressableName;                                          // 0x0041(0x0001)
    bool                                          bEvaluateTracksWhenNotSpawned;                                // 0x0042(0x0001)
    char                                          pa_0043[0x0001]                                               // 0x0043(0x0001)
    FGuid                                         Guid;                                                         // 0x0044(0x0010)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       Name;                                                         // 0x0058(0x0010)
    UObject*                                      ObjectTemplate;                                               // 0x0068(0x0008)
    TArray<FGuid>                                 ChildPossessables;                                            // 0x0070(0x0010)
    enum class ESpawnOwnership                    Ownership;                                                    // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    FName                                         LevelName;                                                    // 0x0084(0x000C)
};


// ScriptStruct  MovieScene.TestMovieSceneEvalTemplate
// Struct Size::0x0020
struct FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
{
};


// ScriptStruct  MovieScene.MovieSceneTrackDisplayOptions
// Struct Size::0x0004
struct FMovieSceneTrackDisplayOptions
{
    char                                          bShowVerticalFrames;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneTrackEvalOptions
// Struct Size::0x0004
struct FMovieSceneTrackEvalOptions
{
    char                                          bCanEvaluateNearestSection;                                   // 0x0000(0x0001)
    char                                          bEvalNearestSection;                                          // 0x0000(0x0001)
    char                                          bEvaluateInPreroll;                                           // 0x0000(0x0001)
    char                                          bEvaluateInPostroll;                                          // 0x0000(0x0001)
    char                                          bEvaluateNearestSection;                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneTrackEvaluationField
// Struct Size::0x0010
struct FMovieSceneTrackEvaluationField
{
    TArray<FMovieSceneTrackEvaluationFieldEntry>  Entries;                                                      // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneTrackEvaluationFieldEntry
// Struct Size::0x0020
struct FMovieSceneTrackEvaluationFieldEntry
{
    FMovieSceneSection*                           Section;                                                      // 0x0000(0x0008)
    FFrameNumberRange                             Range;                                                        // 0x0008(0x0010)
    FFrameNumber                                  ForcedTime;                                                   // 0x0018(0x0004)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x001C(0x0001)
    char                                          pa_001D[0x0001]                                               // 0x001D(0x0001)
    int16_t                                       LegacySortOrder;                                              // 0x001E(0x0002)
};


// ScriptStruct  MovieScene.MovieSceneTrackInstanceInput
// Struct Size::0x0010
struct FMovieSceneTrackInstanceInput
{
    FMovieSceneSection*                           Section;                                                      // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneTrackInstanceEntry
// Struct Size::0x0010
struct FMovieSceneTrackInstanceEntry
{
    UObject*                                      BoundObject;                                                  // 0x0000(0x0008)
    FMovieSceneTrackInstance*                     TrackInstance;                                                // 0x0008(0x0008)
};


// ScriptStruct  AnimationCore.Axis
// Struct Size::0x0010
struct FAxis
{
    FVector                                       Axis;                                                         // 0x0000(0x000C)
    bool                                          bInLocalSpace;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  AnimationCore.ConstraintDescriptionEx
// Struct Size::0x0010
struct FConstraintDescriptionEx
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FFilterOptionPerAxis                          AxesFilterOption;                                             // 0x0008(0x0003)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  AnimationCore.AimConstraintDescription
// Struct Size::0x0040
struct FAimConstraintDescription : public FConstraintDescriptionEx
{
    FAxis                                         LookAt;                                                       // 0x0010(0x0010)
    FAxis                                         LookUp;                                                       // 0x0020(0x0010)
    bool                                          bUseLookUp;                                                   // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    FVector                                       LookUpTarget;                                                 // 0x0034(0x000C)
};


// ScriptStruct  AnimationCore.TransformConstraintDescription
// Struct Size::0x0018
struct FTransformConstraintDescription : public FConstraintDescriptionEx
{
    enum class ETransformConstraintType           TransformType;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  AnimationCore.NodeChain
// Struct Size::0x0010
struct FNodeChain
{
    TArray<FName>                                 Nodes;                                                        // 0x0000(0x0010)
};


// ScriptStruct  AnimationCore.TransformNoScale
// Struct Size::0x0020
struct FTransformNoScale
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         Rotation;                                                     // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0038
struct FAnimNode : public FAnimNode
{
    FName                                         GroupName;                                                    // 0x0010(0x000C)
    enum class EAnimGroupRole                     GroupRole;                                                    // 0x001C(0x0001)
    enum class EAnimSyncGroupScope                GroupScope;                                                   // 0x001D(0x0001)
    bool                                          bIgnoreForRelevancyTest;                                      // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    float                                         BlendWeight;                                                  // 0x0020(0x0004)
    float                                         InternalTimeAccumulator;                                      // 0x0024(0x0004)
    char                                          pa_0028[0x0010]                                               // 0x0028(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0118
struct FAnimNode : public FAnimNode
{
    float                                         X;                                                            // 0x0038(0x0004)
    float                                         Y;                                                            // 0x003C(0x0004)
    float                                         Z;                                                            // 0x0040(0x0004)
    float                                         PlayRate;                                                     // 0x0044(0x0004)
    bool                                          bLoop;                                                        // 0x0048(0x0001)
    bool                                          bResetPlayTimeWhenBlendSpaceChanges;                          // 0x0049(0x0001)
    char                                          pa_004A[0x0002]                                               // 0x004A(0x0002)
    float                                         StartPosition;                                                // 0x004C(0x0004)
    FBlendSpaceBase*                              BlendSpace;                                                   // 0x0050(0x0008)
    bool                                          bReplicate;                                                   // 0x0058(0x0001)
    char                                          pa_0059[0x008F]                                               // 0x0059(0x008F)
    FBlendSpaceBase*                              PreviousBlendSpace;                                           // 0x00E8(0x0008)
    char                                          pa_00F0[0x0028]                                               // 0x00F0(0x0028)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0200
struct FAnimNode : public FAnimNode
{
    char                                          pa_0118[0x0068]                                               // 0x0118(0x0068)
    FPoseLink                                     BasePose;                                                     // 0x0180(0x0010)
    int32_t                                       LODThreshold;                                                 // 0x0190(0x0004)
    FName                                         SourceSocketName;                                             // 0x0194(0x000C)
    FName                                         PivotSocketName;                                              // 0x01A0(0x000C)
    FVector                                       LookAtLocation;                                               // 0x01AC(0x000C)
    FVector                                       SocketAxis;                                                   // 0x01B8(0x000C)
    float                                         Alpha;                                                        // 0x01C4(0x0004)
    char                                          pa_01C8[0x0038]                                               // 0x01C8(0x0038)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0450
struct FAnimNode : public FAnimNode
{
    float                                         LinearDampingOverride;                                        // 0x00D0(0x0004)
    float                                         AngularDampingOverride;                                       // 0x00D4(0x0004)
    char                                          pa_00D8[0x0068]                                               // 0x00D8(0x0068)
    FBoneReference                                RelativeSpaceBone;                                            // 0x0140(0x0014)
    FBoneReference                                BoundBone;                                                    // 0x0154(0x0014)
    FBoneReference                                ChainEnd;                                                     // 0x0168(0x0014)
    FVector                                       BoxExtents;                                                   // 0x017C(0x000C)
    FVector                                       LocalJointOffset;                                             // 0x0188(0x000C)
    float                                         GravityScale;                                                 // 0x0194(0x0004)
    FVector                                       GravityOverride;                                              // 0x0198(0x000C)
    float                                         LinearSpringConstant;                                         // 0x01A4(0x0004)
    float                                         AngularSpringConstant;                                        // 0x01A8(0x0004)
    float                                         WindScale;                                                    // 0x01AC(0x0004)
    FVector                                       ComponentLinearAccScale;                                      // 0x01B0(0x000C)
    FVector                                       ComponentLinearVelScale;                                      // 0x01BC(0x000C)
    FVector                                       ComponentAppliedLinearAccClamp;                               // 0x01C8(0x000C)
    float                                         AngularBiasOverride;                                          // 0x01D4(0x0004)
    int32_t                                       NumSolverIterationsPreUpdate;                                 // 0x01D8(0x0004)
    int32_t                                       NumSolverIterationsPostUpdate;                                // 0x01DC(0x0004)
    FAnimPhysConstraintSetup                      ConstraintSetup;                                              // 0x01E0(0x0048)
    TArray<FAnimPhysSphericalLimit>               SphericalLimits;                                              // 0x0228(0x0010)
    float                                         SphereCollisionRadius;                                        // 0x0238(0x0004)
    FVector                                       ExternalForce;                                                // 0x023C(0x000C)
    TArray<FAnimPhysPlanarLimit>                  PlanarLimits;                                                 // 0x0248(0x0010)
    enum class AnimPhysCollisionType              CollisionType;                                                // 0x0258(0x0001)
    enum class AnimPhysSimSpaceType               SimulationSpace;                                              // 0x0259(0x0001)
    char                                          pa_025A[0x0002]                                               // 0x025A(0x0002)
    char                                          bUseSphericalLimits;                                          // 0x025C(0x0001)
    char                                          bUsePlanarLimit;                                              // 0x025C(0x0001)
    char                                          bDoUpdate;                                                    // 0x025C(0x0001)
    char                                          bDoEval;                                                      // 0x025C(0x0001)
    char                                          bOverrideLinearDamping;                                       // 0x025C(0x0001)
    char                                          bOverrideAngularBias;                                         // 0x025C(0x0001)
    char                                          bOverrideAngularDamping;                                      // 0x025C(0x0001)
    char                                          bEnableWind;                                                  // 0x025C(0x0001)
    char                                          bUseGravityOverride;                                          // 0x025D(0x0001)
    char                                          bLinearSpring;                                                // 0x025D(0x0001)
    char                                          bAngularSpring;                                               // 0x025D(0x0001)
    char                                          bChain;                                                       // 0x025D(0x0001)
    char                                          pa_025E[0x0002]                                               // 0x025E(0x0002)
    FRotationRetargetingInfo                      RetargetingSettings;                                          // 0x0260(0x0130)
    char                                          pa_0390[0x00C0]                                               // 0x0390(0x00C0)
};


// ScriptStruct  AnimGraphRuntime.RotationRetargetingInfo
// Struct Size::0x0130
struct FRotationRetargetingInfo
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x000F]                                               // 0x0001(0x000F)
    FTransform                                    Source;                                                       // 0x0010(0x0030)
    FTransform                                    Target;                                                       // 0x0040(0x0030)
    enum class ERotationComponent                 RotationComponent;                                            // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FVector                                       TwistAxis;                                                    // 0x0074(0x000C)
    bool                                          bUseAbsoluteAngle;                                            // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    float                                         SourceMinimum;                                                // 0x0084(0x0004)
    float                                         SourceMaximum;                                                // 0x0088(0x0004)
    float                                         TargetMinimum;                                                // 0x008C(0x0004)
    float                                         TargetMaximum;                                                // 0x0090(0x0004)
    enum class EEasingFuncType                    EasingType;                                                   // 0x0094(0x0001)
    char                                          pa_0095[0x0003]                                               // 0x0095(0x0003)
    FRuntimeFloatCurve                            CustomCurve;                                                  // 0x0098(0x0088)
    bool                                          bFlipEasing;                                                  // 0x0120(0x0001)
    char                                          pa_0121[0x0003]                                               // 0x0121(0x0003)
    float                                         EasingWeight;                                                 // 0x0124(0x0004)
    bool                                          bClamp;                                                       // 0x0128(0x0001)
    char                                          pa_0129[0x0007]                                               // 0x0129(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimPhysPlanarLimit
// Struct Size::0x0050
struct FAnimPhysPlanarLimit
{
    FBoneReference                                DrivingBone;                                                  // 0x0000(0x0014)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FTransform                                    PlaneTransform;                                               // 0x0020(0x0030)
};


// ScriptStruct  AnimGraphRuntime.AnimPhysSphericalLimit
// Struct Size::0x0028
struct FAnimPhysSphericalLimit
{
    FBoneReference                                DrivingBone;                                                  // 0x0000(0x0014)
    FVector                                       SphereLocalOffset;                                            // 0x0014(0x000C)
    float                                         LimitRadius;                                                  // 0x0020(0x0004)
    enum class ESphericalLimitType                LimitType;                                                    // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  AnimGraphRuntime.AnimPhysConstraintSetup
// Struct Size::0x0048
struct FAnimPhysConstraintSetup
{
    enum class AnimPhysLinearConstraintType       LinearXLimitType;                                             // 0x0000(0x0001)
    enum class AnimPhysLinearConstraintType       LinearYLimitType;                                             // 0x0001(0x0001)
    enum class AnimPhysLinearConstraintType       LinearZLimitType;                                             // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FVector                                       LinearAxesMin;                                                // 0x0004(0x000C)
    FVector                                       LinearAxesMax;                                                // 0x0010(0x000C)
    enum class AnimPhysAngularConstraintType      AngularConstraintType;                                        // 0x001C(0x0001)
    enum class AnimPhysTwistAxis                  TwistAxis;                                                    // 0x001D(0x0001)
    enum class AnimPhysTwistAxis                  AngularTargetAxis;                                            // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    float                                         ConeAngle;                                                    // 0x0020(0x0004)
    FVector                                       AngularLimitsMin;                                             // 0x0024(0x000C)
    FVector                                       AngularLimitsMax;                                             // 0x0030(0x000C)
    FVector                                       AngularTarget;                                                // 0x003C(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00D0
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Base;                                                         // 0x0010(0x0010)
    FPoseLink                                     Additive;                                                     // 0x0020(0x0010)
    float                                         Alpha;                                                        // 0x0030(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0034(0x0008)
    int32_t                                       LODThreshold;                                                 // 0x003C(0x0004)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0040(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0088(0x000C)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x0094(0x0030)
    char                                          pa_00C4[0x0004]                                               // 0x00C4(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x00C8(0x0001)
    bool                                          bAlphaBoolEnabled;                                            // 0x00C9(0x0001)
    char                                          pa_00CA[0x0006]                                               // 0x00CA(0x0006)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00F0
struct FAnimNode : public FAnimNode
{
    TArray<FAngularRangeLimit>                    AngularRangeLimits;                                           // 0x00D0(0x0010)
    TArray<FVector>                               AngularOffsets;                                               // 0x00E0(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AngularRangeLimit
// Struct Size::0x002C
struct FAngularRangeLimit
{
    FVector                                       LimitMin;                                                     // 0x0000(0x000C)
    FVector                                       LimitMax;                                                     // 0x000C(0x000C)
    FBoneReference                                Bone;                                                         // 0x0018(0x0014)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0068
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     A;                                                            // 0x0010(0x0010)
    FPoseLink                                     B;                                                            // 0x0020(0x0010)
    TArray<FBlendBoneByChannelEntry>              BoneDefinitions;                                              // 0x0030(0x0010)
    char                                          pa_0040[0x0010]                                               // 0x0040(0x0010)
    float                                         Alpha;                                                        // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0058(0x0008)
    enum class EBoneControlSpace                  TransformsSpace;                                              // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  AnimGraphRuntime.BlendBoneByChannelEntry
// Struct Size::0x002C
struct FBlendBoneByChannelEntry
{
    FBoneReference                                SourceBone;                                                   // 0x0000(0x0014)
    FBoneReference                                TargetBone;                                                   // 0x0014(0x0014)
    bool                                          bBlendTranslation;                                            // 0x0028(0x0001)
    bool                                          bBlendRotation;                                               // 0x0029(0x0001)
    bool                                          bBlendScale;                                                  // 0x002A(0x0001)
    char                                          pa_002B[0x0001]                                               // 0x002B(0x0001)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0098
struct FAnimNode : public FAnimNode
{
    TArray<FPoseLink>                             BlendPose;                                                    // 0x0010(0x0010)
    TArray<float>                                 BlendTime;                                                    // 0x0020(0x0010)
    enum class EBlendListTransitionType           TransitionType;                                               // 0x0030(0x0001)
    enum class EAlphaBlendOption                  BlendType;                                                    // 0x0031(0x0001)
    bool                                          bResetChildOnActivation;                                      // 0x0032(0x0001)
    char                                          pa_0033[0x0005]                                               // 0x0033(0x0005)
    FCurveFloat*                                  CustomBlendCurve;                                             // 0x0038(0x0008)
    FBlendProfile*                                BlendProfile;                                                 // 0x0040(0x0008)
    char                                          pa_0048[0x0050]                                               // 0x0048(0x0050)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00A0
struct FAnimNode : public FAnimNode
{
    bool                                          bActiveValue;                                                 // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00B0
struct FAnimNode : public FAnimNode
{
    TArray<int32_t>                               EnumToPoseIndex;                                              // 0x0098(0x0010)
    char                                          ActiveEnumValue;                                              // 0x00A8(0x0001)
    char                                          pa_00A9[0x0007]                                               // 0x00A9(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00A0
struct FAnimNode : public FAnimNode
{
    int32_t                                       ActiveChildIndex;                                             // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0120
struct FAnimNode : public FAnimNode
{
    float                                         NormalizedTime;                                               // 0x0118(0x0004)
    char                                          pa_011C[0x0004]                                               // 0x011C(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0130
struct FAnimNode : public FAnimNode
{
    FBoneReference                                SourceBone;                                                   // 0x00D0(0x0014)
    char                                          pa_00E4[0x0004]                                               // 0x00E4(0x0004)
    FCurveFloat*                                  DrivingCurve;                                                 // 0x00E8(0x0008)
    float                                         Multiplier;                                                   // 0x00F0(0x0004)
    float                                         RangeMin;                                                     // 0x00F4(0x0004)
    float                                         RangeMax;                                                     // 0x00F8(0x0004)
    float                                         RemappedMin;                                                  // 0x00FC(0x0004)
    float                                         RemappedMax;                                                  // 0x0100(0x0004)
    FName                                         ParameterName;                                                // 0x0104(0x000C)
    FBoneReference                                TargetBone;                                                   // 0x0110(0x0014)
    enum class EDrivenDestinationMode             DestinationMode;                                              // 0x0124(0x0001)
    enum class EDrivenBoneModificationMode        ModificationMode;                                             // 0x0125(0x0001)
    enum class EComponentType                     SourceComponent;                                              // 0x0126(0x0001)
    char                                          bUseRange;                                                    // 0x0127(0x0001)
    char                                          bAffectTargetTranslationX;                                    // 0x0127(0x0001)
    char                                          bAffectTargetTranslationY;                                    // 0x0127(0x0001)
    char                                          bAffectTargetTranslationZ;                                    // 0x0127(0x0001)
    char                                          bAffectTargetRotationX;                                       // 0x0127(0x0001)
    char                                          bAffectTargetRotationY;                                       // 0x0127(0x0001)
    char                                          bAffectTargetRotationZ;                                       // 0x0127(0x0001)
    char                                          bAffectTargetScaleX;                                          // 0x0127(0x0001)
    char                                          bAffectTargetScaleY;                                          // 0x0128(0x0001)
    char                                          bAffectTargetScaleZ;                                          // 0x0128(0x0001)
    char                                          pa_0129[0x0007]                                               // 0x0129(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x01A0
struct FAnimNode : public FAnimNode
{
    FVector                                       EffectorLocation;                                             // 0x00D0(0x000C)
    enum class EBoneControlSpace                  EffectorLocationSpace;                                        // 0x00DC(0x0001)
    char                                          pa_00DD[0x0003]                                               // 0x00DD(0x0003)
    FBoneSocketTarget                             EffectorTarget;                                               // 0x00E0(0x0070)
    FBoneReference                                TipBone;                                                      // 0x0150(0x0014)
    FBoneReference                                RootBone;                                                     // 0x0164(0x0014)
    float                                         Precision;                                                    // 0x0178(0x0004)
    int32_t                                       MaxIterations;                                                // 0x017C(0x0004)
    bool                                          bStartFromTail;                                               // 0x0180(0x0001)
    bool                                          bEnableRotationLimit;                                         // 0x0181(0x0001)
    char                                          pa_0182[0x0006]                                               // 0x0182(0x0006)
    TArray<float>                                 RotationLimitPerJoints;                                       // 0x0188(0x0010)
    char                                          pa_0198[0x0008]                                               // 0x0198(0x0008)
};


// ScriptStruct  AnimGraphRuntime.BoneSocketTarget
// Struct Size::0x0070
struct FBoneSocketTarget
{
    bool                                          bUseSocket;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FBoneReference                                BoneReference;                                                // 0x0004(0x0014)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FSocketReference                              SocketReference;                                              // 0x0020(0x0050)
};


// ScriptStruct  AnimGraphRuntime.SocketReference
// Struct Size::0x0050
struct FSocketReference
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
    FName                                         SocketName;                                                   // 0x0030(0x000C)
    char                                          pa_003C[0x0014]                                               // 0x003C(0x0014)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0130
struct FAnimNode : public FAnimNode
{
    FBoneReference                                BoneToModify;                                                 // 0x00D0(0x0014)
    char                                          pa_00E4[0x0004]                                               // 0x00E4(0x0004)
    TArray<FConstraint>                           ConstraintSetup;                                              // 0x00E8(0x0010)
    TArray<float>                                 ConstraintWeights;                                            // 0x00F8(0x0010)
    bool                                          bUseConstraintOverrideBones;                                  // 0x0108(0x0001)
    char                                          pa_0109[0x0007]                                               // 0x0109(0x0007)
    TArray<FBoneReference>                        ConstraintOverrideBones;                                      // 0x0110(0x0010)
    char                                          pa_0120[0x0010]                                               // 0x0120(0x0010)
};


// ScriptStruct  AnimGraphRuntime.Constraint
// Struct Size::0x0020
struct FConstraint
{
    FBoneReference                                TargetBone;                                                   // 0x0000(0x0014)
    enum class EConstraintOffsetOption            OffsetOption;                                                 // 0x0014(0x0001)
    enum class ETransformConstraintType           TransformType;                                                // 0x0015(0x0001)
    FFilterOptionPerAxis                          PerAxis;                                                      // 0x0016(0x0003)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0100
struct FAnimNode : public FAnimNode
{
    FBoneReference                                SourceBone;                                                   // 0x00D0(0x0014)
    FBoneReference                                TargetBone;                                                   // 0x00E4(0x0014)
    bool                                          bCopyTranslation;                                             // 0x00F8(0x0001)
    bool                                          bCopyRotation;                                                // 0x00F9(0x0001)
    bool                                          bCopyScale;                                                   // 0x00FA(0x0001)
    enum class EBoneControlSpace                  ControlSpace;                                                 // 0x00FB(0x0001)
    char                                          pa_00FC[0x0004]                                               // 0x00FC(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0108
struct FAnimNode : public FAnimNode
{
    FBoneReference                                SourceBone;                                                   // 0x00D0(0x0014)
    FBoneReference                                TargetBone;                                                   // 0x00E4(0x0014)
    bool                                          bCopyTranslation;                                             // 0x00F8(0x0001)
    bool                                          bCopyRotation;                                                // 0x00F9(0x0001)
    bool                                          bCopyScale;                                                   // 0x00FA(0x0001)
    enum class CopyBoneDeltaMode                  CopyMode;                                                     // 0x00FB(0x0001)
    float                                         TranslationMultiplier;                                        // 0x00FC(0x0004)
    float                                         RotationMultiplier;                                           // 0x0100(0x0004)
    float                                         ScaleMultiplier;                                              // 0x0104(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x01D8
struct FAnimNode : public FAnimNode
{
    TWeakObjectPtr<FSkeletalMeshComponent>        SourceMeshComponent;                                          // 0x0010(0x0008)
    char                                          bUseAttachedParent;                                           // 0x0018(0x0001)
    char                                          bCopyCurves;                                                  // 0x0018(0x0001)
    bool                                          bCopyCustomAttributes;                                        // 0x0019(0x0001)
    char                                          bUseMeshPose;                                                 // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
    FName                                         RootBoneToCopy;                                               // 0x001C(0x000C)
    char                                          pa_0028[0x01B0]                                               // 0x0028(0x01B0)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0040
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     SourcePose;                                                   // 0x0010(0x0010)
    FName                                         SourceBinding;                                                // 0x0020(0x000C)
    float                                         Alpha;                                                        // 0x002C(0x0004)
    TScriptInterface<ICurveSourceInterface>       CurveSource;                                                  // 0x0030(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x01B0
struct FAnimNode : public FAnimNode
{
    FTransform                                    EffectorTransform;                                            // 0x00D0(0x0030)
    FBoneSocketTarget                             EffectorTarget;                                               // 0x0100(0x0070)
    FBoneReference                                TipBone;                                                      // 0x0170(0x0014)
    FBoneReference                                RootBone;                                                     // 0x0184(0x0014)
    float                                         Precision;                                                    // 0x0198(0x0004)
    int32_t                                       MaxIterations;                                                // 0x019C(0x0004)
    enum class EBoneControlSpace                  EffectorTransformSpace;                                       // 0x01A0(0x0001)
    enum class EBoneRotationSource                EffectorRotationSource;                                       // 0x01A1(0x0001)
    char                                          pa_01A2[0x000E]                                               // 0x01A2(0x000E)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0138
struct FAnimNode : public FAnimNode
{
    FBoneReference                                RightHandFK;                                                  // 0x00D0(0x0014)
    FBoneReference                                LeftHandFK;                                                   // 0x00E4(0x0014)
    FBoneReference                                RightHandIK;                                                  // 0x00F8(0x0014)
    FBoneReference                                LeftHandIK;                                                   // 0x010C(0x0014)
    TArray<FBoneReference>                        IKBonesToMove;                                                // 0x0120(0x0010)
    float                                         HandFKWeight;                                                 // 0x0130(0x0004)
    char                                          pa_0134[0x0004]                                               // 0x0134(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00C0
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     BasePose;                                                     // 0x0010(0x0010)
    TArray<FPoseLink>                             BlendPoses;                                                   // 0x0020(0x0010)
    TArray<FInputBlendPose>                       LayerSetup;                                                   // 0x0030(0x0010)
    TArray<float>                                 BlendWeights;                                                 // 0x0040(0x0010)
    bool                                          bMeshSpaceRotationBlend;                                      // 0x0050(0x0001)
    bool                                          bMeshSpaceScaleBlend;                                         // 0x0051(0x0001)
    enum class ECurveBlendOption                  CurveBlendOption;                                             // 0x0052(0x0001)
    bool                                          bBlendRootMotionBasedOnRootBone;                              // 0x0053(0x0001)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    int32_t                                       LODThreshold;                                                 // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    TArray<FPerBoneBlendWeight>                   PerBoneBlendWeights;                                          // 0x0060(0x0010)
    FGuid                                         SkeletonGuid;                                                 // 0x0070(0x0010)
    FGuid                                         VirtualBoneGuid;                                              // 0x0080(0x0010)
    char                                          pa_0090[0x0030]                                               // 0x0090(0x0030)
};


// ScriptStruct  Engine.PerBoneBlendWeight
// Struct Size::0x0008
struct FPerBoneBlendWeight
{
    int32_t                                       SourceIndex;                                                  // 0x0000(0x0004)
    float                                         BlendWeight;                                                  // 0x0004(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0100
struct FAnimNode : public FAnimNode
{
    float                                         ReachPrecision;                                               // 0x00D0(0x0004)
    int32_t                                       MaxIterations;                                                // 0x00D4(0x0004)
    TArray<FAnimLegIKDefinition>                  LegsDefinition;                                               // 0x00D8(0x0010)
    char                                          pa_00E8[0x0018]                                               // 0x00E8(0x0018)
};


// ScriptStruct  AnimGraphRuntime.AnimLegIKDefinition
// Struct Size::0x0034
struct FAnimLegIKDefinition
{
    FBoneReference                                IKFootBone;                                                   // 0x0000(0x0014)
    FBoneReference                                FKFootBone;                                                   // 0x0014(0x0014)
    int32_t                                       NumBonesInLimb;                                               // 0x0028(0x0004)
    float                                         MinRotationAngle;                                             // 0x002C(0x0004)
    enum class EAxis                              FootBoneForwardAxis;                                          // 0x0030(0x0001)
    enum class EAxis                              HingeRotationAxis;                                            // 0x0031(0x0001)
    bool                                          bEnableRotationLimit;                                         // 0x0032(0x0001)
    bool                                          bEnableKneeTwistCorrection;                                   // 0x0033(0x0001)
};


// ScriptStruct  AnimGraphRuntime.AnimLegIKData
// Struct Size::0x00A0
struct FAnimLegIKData
{
    char                                          pa_0000[0x00A0]                                               // 0x0000(0x00A0)
};


// ScriptStruct  AnimGraphRuntime.IKChain
// Struct Size::0x0038
struct FIKChain
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  AnimGraphRuntime.IKChainLink
// Struct Size::0x0040
struct FIKChainLink
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x01D0
struct FAnimNode : public FAnimNode
{
    FBoneReference                                BoneToModify;                                                 // 0x00D0(0x0014)
    char                                          pa_00E4[0x000C]                                               // 0x00E4(0x000C)
    FBoneSocketTarget                             LookAtTarget;                                                 // 0x00F0(0x0070)
    FVector                                       LookAtLocation;                                               // 0x0160(0x000C)
    FAxis                                         LookAt;                                                       // 0x016C(0x0010)
    bool                                          bUseLookUpAxis;                                               // 0x017C(0x0001)
    enum class EInterpolationBlend                InterpolationType;                                            // 0x017D(0x0001)
    char                                          pa_017E[0x0002]                                               // 0x017E(0x0002)
    FAxis                                         LookUp;                                                       // 0x0180(0x0010)
    float                                         LookAtClamp;                                                  // 0x0190(0x0004)
    float                                         InterpolationTime;                                            // 0x0194(0x0004)
    float                                         InterpolationTriggerThreashold;                               // 0x0198(0x0004)
    char                                          pa_019C[0x0034]                                               // 0x019C(0x0034)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0038
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Base;                                                         // 0x0010(0x0010)
    FPoseLink                                     Additive;                                                     // 0x0020(0x0010)
    bool                                          bMeshSpaceAdditive;                                           // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0110
struct FAnimNode : public FAnimNode
{
    FBoneReference                                BoneToModify;                                                 // 0x00D0(0x0014)
    FVector                                       Translation;                                                  // 0x00E4(0x000C)
    FRotator                                      Rotation;                                                     // 0x00F0(0x000C)
    FVector                                       Scale;                                                        // 0x00FC(0x000C)
    enum class EBoneModificationMode              TranslationMode;                                              // 0x0108(0x0001)
    enum class EBoneModificationMode              RotationMode;                                                 // 0x0109(0x0001)
    enum class EBoneModificationMode              ScaleMode;                                                    // 0x010A(0x0001)
    enum class EBoneControlSpace                  TranslationSpace;                                             // 0x010B(0x0001)
    enum class EBoneControlSpace                  RotationSpace;                                                // 0x010C(0x0001)
    enum class EBoneControlSpace                  ScaleSpace;                                                   // 0x010D(0x0001)
    char                                          pa_010E[0x0002]                                               // 0x010E(0x0002)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0168
struct FAnimNode : public FAnimNode
{
    TArray<FBoneReference>                        BonesToModify;                                                // 0x00D0(0x0010)
    TArray<FVector>                               Translations;                                                 // 0x00E0(0x0010)
    TArray<FRotator>                              Rotations;                                                    // 0x00F0(0x0010)
    TArray<FVector>                               Scales;                                                       // 0x0100(0x0010)
    enum class EBoneModificationMode              TranslationMode;                                              // 0x0110(0x0001)
    enum class EBoneModificationMode              RotationMode;                                                 // 0x0111(0x0001)
    enum class EBoneModificationMode              ScaleMode;                                                    // 0x0112(0x0001)
    enum class EBoneControlSpace                  TranslationSpace;                                             // 0x0113(0x0001)
    enum class EBoneControlSpace                  RotationSpace;                                                // 0x0114(0x0001)
    enum class EBoneControlSpace                  ScaleSpace;                                                   // 0x0115(0x0001)
    char                                          pa_0116[0x0052]                                               // 0x0116(0x0052)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0058
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     SourcePose;                                                   // 0x0010(0x0010)
    TArray<float>                                 CurveValues;                                                  // 0x0020(0x0010)
    TArray<FName>                                 CurveNames;                                                   // 0x0030(0x0010)
    char                                          pa_0040[0x0010]                                               // 0x0040(0x0010)
    float                                         Alpha;                                                        // 0x0050(0x0004)
    enum class EModifyCurveApplyMode              ApplyMode;                                                    // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0050
struct FAnimNode : public FAnimNode
{
    TArray<FPoseLink>                             Poses;                                                        // 0x0010(0x0010)
    TArray<float>                                 DesiredAlphas;                                                // 0x0020(0x0010)
    char                                          pa_0030[0x0010]                                               // 0x0030(0x0010)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0040(0x0008)
    bool                                          bAdditiveNode;                                                // 0x0048(0x0001)
    bool                                          bNormalizeAlpha;                                              // 0x0049(0x0001)
    char                                          pa_004A[0x0006]                                               // 0x004A(0x0006)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0110
struct FAnimNode : public FAnimNode
{
    FBoneReference                                BoneToObserve;                                                // 0x00D0(0x0014)
    enum class EBoneControlSpace                  DisplaySpace;                                                 // 0x00E4(0x0001)
    bool                                          bRelativeToRefPose;                                           // 0x00E5(0x0001)
    char                                          pa_00E6[0x0002]                                               // 0x00E6(0x0002)
    FVector                                       Translation;                                                  // 0x00E8(0x000C)
    FRotator                                      Rotation;                                                     // 0x00F4(0x000C)
    FVector                                       Scale;                                                        // 0x0100(0x000C)
    char                                          pa_010C[0x0004]                                               // 0x010C(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0080
struct FAnimNode : public FAnimNode
{
    FPoseAsset*                                   PoseAsset;                                                    // 0x0038(0x0008)
    char                                          pa_0040[0x0040]                                               // 0x0040(0x0040)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00A0
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     SourcePose;                                                   // 0x0080(0x0010)
    enum class EAlphaBlendOption                  BlendOption;                                                  // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
    FCurveFloat*                                  CustomCurve;                                                  // 0x0098(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00A0
struct FAnimNode : public FAnimNode
{
    FName                                         PoseName;                                                     // 0x0080(0x000C)
    float                                         PoseWeight;                                                   // 0x008C(0x0004)
    char                                          pa_0090[0x0010]                                               // 0x0090(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0168
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     SourcePose;                                                   // 0x0080(0x0010)
    TArray<FBoneReference>                        SourceBones;                                                  // 0x0090(0x0010)
    TArray<FBoneReference>                        OnlyDriveBones;                                               // 0x00A0(0x0010)
    TArray<FPoseDriverTarget>                     PoseTargets;                                                  // 0x00B0(0x0010)
    char                                          pa_00C0[0x0030]                                               // 0x00C0(0x0030)
    FBoneReference                                EvalSpaceBone;                                                // 0x00F0(0x0014)
    FRBFParams                                    RBFParams;                                                    // 0x0104(0x002C)
    enum class EPoseDriverSource                  DriveSource;                                                  // 0x0130(0x0001)
    enum class EPoseDriverOutput                  DriveOutput;                                                  // 0x0131(0x0001)
    char                                          bOnlyDriveSelectedBones;                                      // 0x0132(0x0001)
    char                                          pa_0133[0x0001]                                               // 0x0133(0x0001)
    int32_t                                       LODThreshold;                                                 // 0x0134(0x0004)
    char                                          pa_0138[0x0030]                                               // 0x0138(0x0030)
};


// ScriptStruct  AnimGraphRuntime.RBFParams
// Struct Size::0x002C
struct FRBFParams
{
    int32_t                                       TargetDimensions;                                             // 0x0000(0x0004)
    enum class ERBFSolverType                     SolverType;                                                   // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         Radius;                                                       // 0x0008(0x0004)
    bool                                          bAutomaticRadius;                                             // 0x000C(0x0001)
    enum class ERBFFunctionType                   Function;                                                     // 0x000D(0x0001)
    enum class ERBFDistanceMethod                 DistanceMethod;                                               // 0x000E(0x0001)
    enum class EBoneAxis                          TwistAxis;                                                    // 0x000F(0x0001)
    float                                         WeightThreshold;                                              // 0x0010(0x0004)
    enum class ERBFNormalizeMethod                NormalizeMethod;                                              // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FVector                                       MedianReference;                                              // 0x0018(0x000C)
    float                                         MedianMin;                                                    // 0x0024(0x0004)
    float                                         MedianMax;                                                    // 0x0028(0x0004)
};


// ScriptStruct  AnimGraphRuntime.PoseDriverTarget
// Struct Size::0x00C0
struct FPoseDriverTarget
{
    TArray<FPoseDriverTransform>                  BoneTransforms;                                               // 0x0000(0x0010)
    FRotator                                      TargetRotation;                                               // 0x0010(0x000C)
    float                                         TargetScale;                                                  // 0x001C(0x0004)
    enum class ERBFDistanceMethod                 DistanceMethod;                                               // 0x0020(0x0001)
    enum class ERBFFunctionType                   FunctionType;                                                 // 0x0021(0x0001)
    bool                                          bApplyCustomCurve;                                            // 0x0022(0x0001)
    char                                          pa_0023[0x0005]                                               // 0x0023(0x0005)
    FRichCurve                                    CustomCurve;                                                  // 0x0028(0x0080)
    FName                                         DrivenName;                                                   // 0x00A8(0x000C)
    char                                          pa_00B4[0x0008]                                               // 0x00B4(0x0008)
    bool                                          bIsHidden;                                                    // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
};


// ScriptStruct  AnimGraphRuntime.PoseDriverTransform
// Struct Size::0x0018
struct FPoseDriverTransform
{
    FVector                                       TargetTranslation;                                            // 0x0000(0x000C)
    FRotator                                      TargetRotation;                                               // 0x000C(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00B0
struct FAnimNode : public FAnimNode
{
    FName                                         SnapshotName;                                                 // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FPoseSnapshot                                 Snapshot;                                                     // 0x0020(0x0040)
    enum class ESnapshotSourceMode                Mode;                                                         // 0x0060(0x0001)
    char                                          pa_0061[0x004F]                                               // 0x0061(0x004F)
};


// ScriptStruct  Engine.PoseSnapshot
// Struct Size::0x0040
struct FPoseSnapshot
{
    TArray<FTransform>                            LocalTransforms;                                              // 0x0000(0x0010)
    TArray<FName>                                 BoneNames;                                                    // 0x0010(0x0010)
    FName                                         SkeletalMeshName;                                             // 0x0020(0x000C)
    FName                                         SnapshotName;                                                 // 0x002C(0x000C)
    bool                                          bIsValid;                                                     // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0088
struct FAnimNode : public FAnimNode
{
    TArray<FRandomPlayerSequenceEntry>            Entries;                                                      // 0x0010(0x0010)
    char                                          pa_0020[0x0060]                                               // 0x0020(0x0060)
    bool                                          bShuffleMode;                                                 // 0x0080(0x0001)
    char                                          pa_0081[0x0007]                                               // 0x0081(0x0007)
};


// ScriptStruct  AnimGraphRuntime.RandomPlayerSequenceEntry
// Struct Size::0x0050
struct FRandomPlayerSequenceEntry
{
    FAnimSequence*                                Sequence;                                                     // 0x0000(0x0008)
    float                                         ChanceToPlay;                                                 // 0x0008(0x0004)
    int32_t                                       MinLoopCount;                                                 // 0x000C(0x0004)
    int32_t                                       MaxLoopCount;                                                 // 0x0010(0x0004)
    float                                         MinPlayRate;                                                  // 0x0014(0x0004)
    float                                         MaxPlayRate;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FAlphaBlend                                   BlendIn;                                                      // 0x0020(0x0030)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0010
struct FAnimNode : public FAnimNode
{
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0018
struct FAnimNode : public FAnimNode
{
    enum class ERefPoseType                       RefPoseType;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00E0
struct FAnimNode : public FAnimNode
{
    char                                          pa_00D0[0x0010]                                               // 0x00D0(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x08A0
struct FAnimNode : public FAnimNode
{
    FPhysicsAsset*                                OverridePhysicsAsset;                                         // 0x00D0(0x0008)
    char                                          pa_00D8[0x00A0]                                               // 0x00D8(0x00A0)
    FVector                                       OverrideWorldGravity;                                         // 0x0178(0x000C)
    FVector                                       ExternalForce;                                                // 0x0184(0x000C)
    FVector                                       ComponentLinearAccScale;                                      // 0x0190(0x000C)
    FVector                                       ComponentLinearVelScale;                                      // 0x019C(0x000C)
    FVector                                       ComponentAppliedLinearAccClamp;                               // 0x01A8(0x000C)
    FSimSpaceSettings                             SimSpaceSettings;                                             // 0x01B4(0x0040)
    float                                         CachedBoundsScale;                                            // 0x01F4(0x0004)
    FBoneReference                                BaseBoneRef;                                                  // 0x01F8(0x0014)
    enum class ECollisionChannel                  OverlapChannel;                                               // 0x020C(0x0001)
    enum class ESimulationSpace                   SimulationSpace;                                              // 0x020D(0x0001)
    bool                                          bForceDisableCollisionBetweenConstraintBodies;                // 0x020E(0x0001)
    char                                          pa_020F[0x0001]                                               // 0x020F(0x0001)
    char                                          bEnableWorldGeometry;                                         // 0x0210(0x0001)
    char                                          bOverrideWorldGravity;                                        // 0x0210(0x0001)
    char                                          bTransferBoneVelocities;                                      // 0x0210(0x0001)
    char                                          bFreezeIncomingPoseOnStart;                                   // 0x0210(0x0001)
    char                                          bClampLinearTranslationLimitToRefPose;                        // 0x0210(0x0001)
    char                                          pa_0211[0x0003]                                               // 0x0211(0x0003)
    float                                         WorldSpaceMinimumScale;                                       // 0x0214(0x0004)
    float                                         EvaluationResetTime;                                          // 0x0218(0x0004)
    char                                          pa_021C[0x0684]                                               // 0x021C(0x0684)
};


// ScriptStruct  AnimGraphRuntime.SimSpaceSettings
// Struct Size::0x0040
struct FSimSpaceSettings
{
    float                                         MasterAlpha;                                                  // 0x0000(0x0004)
    float                                         VelocityScaleZ;                                               // 0x0004(0x0004)
    float                                         MaxLinearVelocity;                                            // 0x0008(0x0004)
    float                                         MaxAngularVelocity;                                           // 0x000C(0x0004)
    float                                         MaxLinearAcceleration;                                        // 0x0010(0x0004)
    float                                         MaxAngularAcceleration;                                       // 0x0014(0x0004)
    float                                         ExternalLinearDrag;                                           // 0x0018(0x0004)
    FVector                                       ExternalLinearDragV;                                          // 0x001C(0x000C)
    FVector                                       ExternalLinearVelocity;                                       // 0x0028(0x000C)
    FVector                                       ExternalAngularVelocity;                                      // 0x0034(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00A0
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     BasePose;                                                     // 0x0010(0x0010)
    float                                         Pitch;                                                        // 0x0020(0x0004)
    float                                         Yaw;                                                          // 0x0024(0x0004)
    FInputScaleBiasClamp                          PitchScaleBiasClamp;                                          // 0x0028(0x0030)
    FInputScaleBiasClamp                          YawScaleBiasClamp;                                            // 0x0058(0x0030)
    FRotator                                      MeshToComponent;                                              // 0x0088(0x000C)
    char                                          pa_0094[0x000C]                                               // 0x0094(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0100
struct FAnimNode : public FAnimNode
{
    FBoneReference                                TargetBone;                                                   // 0x00D0(0x0014)
    FBoneReference                                SourceBone;                                                   // 0x00E4(0x0014)
    float                                         Multiplier;                                                   // 0x00F8(0x0004)
    enum class EBoneAxis                          RotationAxisToRefer;                                          // 0x00FC(0x0001)
    bool                                          bIsAdditive;                                                  // 0x00FD(0x0001)
    char                                          pa_00FE[0x0002]                                               // 0x00FE(0x0002)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x01C8
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     BasePose;                                                     // 0x0118(0x0010)
    int32_t                                       LODThreshold;                                                 // 0x0128(0x0004)
    float                                         Alpha;                                                        // 0x012C(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0130(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0138(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0180(0x000C)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x018C(0x0030)
    char                                          pa_01BC[0x0004]                                               // 0x01BC(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x01C0(0x0001)
    bool                                          bAlphaBoolEnabled;                                            // 0x01C1(0x0001)
    char                                          pa_01C2[0x0006]                                               // 0x01C2(0x0006)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0080
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     InputPose;                                                    // 0x0010(0x0010)
    float                                         DefaultChainLength;                                           // 0x0020(0x0004)
    FBoneReference                                ChainStartBone;                                               // 0x0024(0x0014)
    FBoneReference                                ChainEndBone;                                                 // 0x0038(0x0014)
    FVector                                       TargetLocation;                                               // 0x004C(0x000C)
    float                                         Alpha;                                                        // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0060(0x0008)
    enum class EScaleChainInitialLength           ChainInitialLength;                                           // 0x0068(0x0001)
    char                                          pa_0069[0x0017]                                               // 0x0069(0x0017)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0050
struct FAnimNode : public FAnimNode
{
    FAnimSequenceBase*                            Sequence;                                                     // 0x0038(0x0008)
    float                                         ExplicitTime;                                                 // 0x0040(0x0004)
    bool                                          bShouldLoop;                                                  // 0x0044(0x0001)
    bool                                          bTeleportToExplicitTime;                                      // 0x0045(0x0001)
    enum class ESequenceEvalReinit                ReinitializationBehavior;                                     // 0x0046(0x0001)
    char                                          pa_0047[0x0001]                                               // 0x0047(0x0001)
    float                                         StartPosition;                                                // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0050
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Source;                                                       // 0x0010(0x0010)
    FName                                         SlotName;                                                     // 0x0020(0x000C)
    bool                                          bAlwaysUpdateSourcePose;                                      // 0x002C(0x0001)
    char                                          pa_002D[0x0023]                                               // 0x002D(0x0023)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0280
struct FAnimNode : public FAnimNode
{
    FBoneReference                                StartBone;                                                    // 0x00D0(0x0014)
    FBoneReference                                EndBone;                                                      // 0x00E4(0x0014)
    enum class ESplineBoneAxis                    BoneAxis;                                                     // 0x00F8(0x0001)
    bool                                          bAutoCalculateSpline;                                         // 0x00F9(0x0001)
    char                                          pa_00FA[0x0002]                                               // 0x00FA(0x0002)
    int32_t                                       PointCount;                                                   // 0x00FC(0x0004)
    TArray<FTransform>                            ControlPoints;                                                // 0x0100(0x0010)
    float                                         Roll;                                                         // 0x0110(0x0004)
    float                                         TwistStart;                                                   // 0x0114(0x0004)
    float                                         TwistEnd;                                                     // 0x0118(0x0004)
    char                                          pa_011C[0x0004]                                               // 0x011C(0x0004)
    FAlphaBlend                                   TwistBlend;                                                   // 0x0120(0x0030)
    float                                         Stretch;                                                      // 0x0150(0x0004)
    float                                         Offset;                                                       // 0x0154(0x0004)
    char                                          pa_0158[0x0128]                                               // 0x0158(0x0128)
};


// ScriptStruct  AnimGraphRuntime.SplineIKCachedBoneData
// Struct Size::0x0018
struct FSplineIKCachedBoneData
{
    FBoneReference                                Bone;                                                         // 0x0000(0x0014)
    int32_t                                       RefSkeletonIndex;                                             // 0x0014(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0138
struct FAnimNode : public FAnimNode
{
    FBoneReference                                SpringBone;                                                   // 0x00D0(0x0014)
    float                                         MaxDisplacement;                                              // 0x00E4(0x0004)
    float                                         SpringStiffness;                                              // 0x00E8(0x0004)
    float                                         SpringDamping;                                                // 0x00EC(0x0004)
    float                                         ErrorResetThresh;                                             // 0x00F0(0x0004)
    char                                          pa_00F4[0x003C]                                               // 0x00F4(0x003C)
    char                                          bLimitDisplacement;                                           // 0x0130(0x0001)
    char                                          bTranslateX;                                                  // 0x0130(0x0001)
    char                                          bTranslateY;                                                  // 0x0130(0x0001)
    char                                          bTranslateZ;                                                  // 0x0130(0x0001)
    char                                          bRotateX;                                                     // 0x0130(0x0001)
    char                                          bRotateY;                                                     // 0x0130(0x0001)
    char                                          bRotateZ;                                                     // 0x0130(0x0001)
    char                                          pa_0131[0x0007]                                               // 0x0131(0x0007)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0038
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Result;                                                       // 0x0010(0x0010)
    FName                                         Name;                                                         // 0x0020(0x000C)
    FName                                         Group;                                                        // 0x002C(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0038
struct FAnimNode : public FAnimNode
{
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0270
struct FAnimNode : public FAnimNode
{
    char                                          pa_00D0[0x0030]                                               // 0x00D0(0x0030)
    FBoneReference                                TrailBone;                                                    // 0x0100(0x0014)
    int32_t                                       ChainLength;                                                  // 0x0114(0x0004)
    enum class EAxis                              ChainBoneAxis;                                                // 0x0118(0x0001)
    char                                          bInvertChainBoneAxis;                                         // 0x0119(0x0001)
    char                                          bLimitStretch;                                                // 0x0119(0x0001)
    char                                          bLimitRotation;                                               // 0x0119(0x0001)
    char                                          bUsePlanarLimit;                                              // 0x0119(0x0001)
    char                                          bActorSpaceFakeVel;                                           // 0x0119(0x0001)
    char                                          bReorientParentToChild;                                       // 0x0119(0x0001)
    char                                          pa_011A[0x0002]                                               // 0x011A(0x0002)
    float                                         MaxDeltaTime;                                                 // 0x011C(0x0004)
    float                                         RelaxationSpeedScale;                                         // 0x0120(0x0004)
    char                                          pa_0124[0x0004]                                               // 0x0124(0x0004)
    FRuntimeFloatCurve                            TrailRelaxationSpeed;                                         // 0x0128(0x0088)
    FInputScaleBiasClamp                          RelaxationSpeedScaleInputProcessor;                           // 0x01B0(0x0030)
    TArray<FRotationLimit>                        RotationLimits;                                               // 0x01E0(0x0010)
    TArray<FVector>                               RotationOffsets;                                              // 0x01F0(0x0010)
    TArray<FAnimPhysPlanarLimit>                  PlanarLimits;                                                 // 0x0200(0x0010)
    float                                         StretchLimit;                                                 // 0x0210(0x0004)
    FVector                                       FakeVelocity;                                                 // 0x0214(0x000C)
    FBoneReference                                BaseJoint;                                                    // 0x0220(0x0014)
    float                                         LastBoneRotationAnimAlphaBlend;                               // 0x0234(0x0004)
    char                                          pa_0238[0x0038]                                               // 0x0238(0x0038)
};


// ScriptStruct  AnimGraphRuntime.RotationLimit
// Struct Size::0x0018
struct FRotationLimit
{
    FVector                                       LimitMin;                                                     // 0x0000(0x000C)
    FVector                                       LimitMax;                                                     // 0x000C(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0150
struct FAnimNode : public FAnimNode
{
    FReferenceBoneFrame                           BaseFrame;                                                    // 0x00D0(0x0024)
    FReferenceBoneFrame                           TwistFrame;                                                   // 0x00F4(0x0024)
    FAxis                                         TwistPlaneNormalAxis;                                         // 0x0118(0x0010)
    float                                         RangeMax;                                                     // 0x0128(0x0004)
    float                                         RemappedMin;                                                  // 0x012C(0x0004)
    float                                         RemappedMax;                                                  // 0x0130(0x0004)
    FAnimCurveParam                               Curve;                                                        // 0x0134(0x0010)
    char                                          pa_0144[0x000C]                                               // 0x0144(0x000C)
};


// ScriptStruct  Engine.AnimCurveParam
// Struct Size::0x0010
struct FAnimCurveParam
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  AnimGraphRuntime.ReferenceBoneFrame
// Struct Size::0x0024
struct FReferenceBoneFrame
{
    FBoneReference                                Bone;                                                         // 0x0000(0x0014)
    FAxis                                         Axis;                                                         // 0x0014(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0210
struct FAnimNode : public FAnimNode
{
    FBoneReference                                IKBone;                                                       // 0x00D0(0x0014)
    float                                         StartStretchRatio;                                            // 0x00E4(0x0004)
    float                                         MaxStretchScale;                                              // 0x00E8(0x0004)
    FVector                                       EffectorLocation;                                             // 0x00EC(0x000C)
    char                                          pa_00F8[0x0008]                                               // 0x00F8(0x0008)
    FBoneSocketTarget                             EffectorTarget;                                               // 0x0100(0x0070)
    FVector                                       JointTargetLocation;                                          // 0x0170(0x000C)
    char                                          pa_017C[0x0004]                                               // 0x017C(0x0004)
    FBoneSocketTarget                             JointTarget;                                                  // 0x0180(0x0070)
    FAxis                                         TwistAxis;                                                    // 0x01F0(0x0010)
    enum class EBoneControlSpace                  EffectorLocationSpace;                                        // 0x0200(0x0001)
    enum class EBoneControlSpace                  JointTargetLocationSpace;                                     // 0x0201(0x0001)
    char                                          bAllowStretching;                                             // 0x0202(0x0001)
    char                                          bTakeRotationFromEffectorSpace;                               // 0x0202(0x0001)
    char                                          bMaintainEffectorRelRot;                                      // 0x0202(0x0001)
    char                                          bAllowTwist;                                                  // 0x0202(0x0001)
    char                                          pa_0203[0x000D]                                               // 0x0203(0x000D)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00C8
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     A;                                                            // 0x0010(0x0010)
    FPoseLink                                     B;                                                            // 0x0020(0x0010)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0030(0x0001)
    char                                          bAlphaBoolEnabled;                                            // 0x0031(0x0001)
    char                                          bResetChildOnActivation;                                      // 0x0031(0x0001)
    char                                          pa_0032[0x0002]                                               // 0x0032(0x0002)
    float                                         Alpha;                                                        // 0x0034(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0038(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0040(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0088(0x000C)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x0094(0x0030)
    char                                          pa_00C4[0x0004]                                               // 0x00C4(0x0004)
};


// ScriptStruct  AnimGraphRuntime.PositionHistory
// Struct Size::0x0030
struct FPositionHistory
{
    TArray<FVector>                               Positions;                                                    // 0x0000(0x0010)
    float                                         Range;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x001C]                                               // 0x0014(0x001C)
};


// ScriptStruct  AnimGraphRuntime.RBFEntry
// Struct Size::0x0010
struct FRBFEntry
{
    TArray<float>                                 Values;                                                       // 0x0000(0x0010)
};


// ScriptStruct  AnimGraphRuntime.RBFTarget
// Struct Size::0x00A0
struct FRBFTarget : public FRBFEntry
{
    float                                         ScaleFactor;                                                  // 0x0010(0x0004)
    bool                                          bApplyCustomCurve;                                            // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FRichCurve                                    CustomCurve;                                                  // 0x0018(0x0080)
    enum class ERBFDistanceMethod                 DistanceMethod;                                               // 0x0098(0x0001)
    enum class ERBFFunctionType                   FunctionType;                                                 // 0x0099(0x0001)
    char                                          pa_009A[0x0006]                                               // 0x009A(0x0006)
};


// ScriptStruct  PropertyPath.CachedPropertyPath
// Struct Size::0x0028
struct FCachedPropertyPath
{
    TArray<FPropertyPathSegment>                  Segments;                                                     // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
    FFunction*                                    CachedFunction;                                               // 0x0018(0x0008)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  PropertyPath.PropertyPathSegment
// Struct Size::0x0028
struct FPropertyPathSegment
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    int32_t                                       ArrayIndex;                                                   // 0x000C(0x0004)
    FStruct*                                      Struct;                                                       // 0x0010(0x0008)
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DPathSectionTemplate
// Struct Size::0x00E0
struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneObjectBindingID                    PathBindingID;                                                // 0x0020(0x0018)
    FMovieSceneFloatChannel                       TimingCurve;                                                  // 0x0038(0x00A0)
    enum class MovieScene3DPathSection            FrontAxisEnum;                                                // 0x00D8(0x0001)
    enum class MovieScene3DPathSection            UpAxisEnum;                                                   // 0x00D9(0x0001)
    char                                          pa_00DA[0x0002]                                               // 0x00DA(0x0002)
    char                                          bFollow;                                                      // 0x00DC(0x0001)
    char                                          bReverse;                                                     // 0x00DC(0x0001)
    char                                          bForceUpright;                                                // 0x00DC(0x0001)
    char                                          pa_00DD[0x0003]                                               // 0x00DD(0x0003)
};


// ScriptStruct  MovieSceneTracks.MovieSceneTransformMask
// Struct Size::0x0004
struct FMovieSceneTransformMask
{
    uint32_t                                      Mask;                                                         // 0x0000(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DTransformKeyStruct
// Struct Size::0x0048
struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
{
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FRotator                                      Rotation;                                                     // 0x0014(0x000C)
    FVector                                       Scale;                                                        // 0x0020(0x000C)
    FFrameNumber                                  Time;                                                         // 0x002C(0x0004)
    char                                          pa_0030[0x0018]                                               // 0x0030(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DScaleKeyStruct
// Struct Size::0x0030
struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
{
    FVector                                       Scale;                                                        // 0x0008(0x000C)
    FFrameNumber                                  Time;                                                         // 0x0014(0x0004)
    char                                          pa_0018[0x0018]                                               // 0x0018(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DRotationKeyStruct
// Struct Size::0x0030
struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
{
    FRotator                                      Rotation;                                                     // 0x0008(0x000C)
    FFrameNumber                                  Time;                                                         // 0x0014(0x0004)
    char                                          pa_0018[0x0018]                                               // 0x0018(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DLocationKeyStruct
// Struct Size::0x0030
struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
{
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FFrameNumber                                  Time;                                                         // 0x0014(0x0004)
    char                                          pa_0018[0x0018]                                               // 0x0018(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieSceneActorReferenceData
// Struct Size::0x00B8
struct FMovieSceneActorReferenceData : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          KeyTimes;                                                     // 0x0008(0x0010)
    FMovieSceneActorReferenceKey                  DefaultValue;                                                 // 0x0018(0x0030)
    TArray<FMovieSceneActorReferenceKey>          KeyValues;                                                    // 0x0048(0x0010)
    char                                          pa_0058[0x0060]                                               // 0x0058(0x0060)
};


// ScriptStruct  MovieSceneTracks.MovieSceneActorReferenceKey
// Struct Size::0x0030
struct FMovieSceneActorReferenceKey
{
    FMovieSceneObjectBindingID                    Object;                                                       // 0x0000(0x0018)
    FName                                         ComponentName;                                                // 0x0018(0x000C)
    FName                                         SocketName;                                                   // 0x0024(0x000C)
};


// ScriptStruct  MovieSceneTracks.MovieSceneActorReferenceSectionTemplate
// Struct Size::0x00F8
struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieScenePropertySectionData                PropertyData;                                                 // 0x0020(0x0020)
    FMovieSceneActorReferenceData                 ActorReferenceData;                                           // 0x0040(0x00B8)
};


// ScriptStruct  MovieSceneTracks.MovieSceneAudioSectionTemplate
// Struct Size::0x0028
struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneAudioSection*                      AudioSection;                                                 // 0x0020(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraAnimSectionData
// Struct Size::0x0020
struct FMovieSceneCameraAnimSectionData
{
    FCameraAnim*                                  CameraAnim;                                                   // 0x0000(0x0008)
    float                                         PlayRate;                                                     // 0x0008(0x0004)
    float                                         PlayScale;                                                    // 0x000C(0x0004)
    float                                         BlendInTime;                                                  // 0x0010(0x0004)
    float                                         BlendOutTime;                                                 // 0x0014(0x0004)
    bool                                          bLooping;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraAnimSectionTemplate
// Struct Size::0x0048
struct FMovieSceneCameraAnimSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneCameraAnimSectionData              SourceData;                                                   // 0x0020(0x0020)
    FFrameNumber                                  SectionStartTime;                                             // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSectionData
// Struct Size::0x0020
struct FMovieSceneCameraShakeSectionData
{
    FCameraShakeBase*                             ShakeClass;                                                   // 0x0000(0x0008)
    float                                         PlayScale;                                                    // 0x0008(0x0004)
    enum class ECameraShakePlaySpace              PlaySpace;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FRotator                                      UserDefinedPlaySpace;                                         // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSourceShakeSectionTemplate
// Struct Size::0x0048
struct FMovieSceneCameraShakeSourceShakeSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneCameraShakeSectionData             SourceData;                                                   // 0x0020(0x0020)
    FFrameNumber                                  SectionStartTime;                                             // 0x0040(0x0004)
    FFrameNumber                                  SectionEndTime;                                               // 0x0044(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSourceTriggerChannel
// Struct Size::0x0088
struct FMovieSceneCameraShakeSourceTriggerChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          KeyTimes;                                                     // 0x0008(0x0010)
    TArray<FMovieSceneCameraShakeSourceTrigger>   KeyValues;                                                    // 0x0018(0x0010)
    char                                          pa_0028[0x0060]                                               // 0x0028(0x0060)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSourceTrigger
// Struct Size::0x0020
struct FMovieSceneCameraShakeSourceTrigger
{
    FCameraShakeBase*                             ShakeClass;                                                   // 0x0000(0x0008)
    float                                         PlayScale;                                                    // 0x0008(0x0004)
    enum class ECameraShakePlaySpace              PlaySpace;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FRotator                                      UserDefinedPlaySpace;                                         // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSourceTriggerSectionTemplate
// Struct Size::0x0040
struct FMovieSceneCameraShakeSourceTriggerSectionTemplate : public FMovieSceneEvalTemplate
{
    TArray<FFrameNumber>                          TriggerTimes;                                                 // 0x0020(0x0010)
    TArray<FMovieSceneCameraShakeSourceTrigger>   TriggerValues;                                                // 0x0030(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSectionTemplate
// Struct Size::0x0048
struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneCameraShakeSectionData             SourceData;                                                   // 0x0020(0x0020)
    FFrameNumber                                  SectionStartTime;                                             // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneColorKeyStruct
// Struct Size::0x0038
struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
{
    FLinearColor                                  Color;                                                        // 0x0008(0x0010)
    FFrameNumber                                  Time;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x001C]                                               // 0x001C(0x001C)
};


// ScriptStruct  MovieSceneTracks.MovieSceneColorSectionTemplate
// Struct Size::0x02C8
struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneFloatChannel                       Curves;                                                       // 0x0040(0x00A0)
    char                                          pa_00E0[0x01E0]                                               // 0x00E0(0x01E0)
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x02C0(0x0001)
    char                                          pa_02C1[0x0007]                                               // 0x02C1(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEvent
// Struct Size::0x0028
struct FMovieSceneEvent
{
    FMovieSceneEventPtrs                          Ptrs;                                                         // 0x0000(0x0028)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventPtrs
// Struct Size::0x0028
struct FMovieSceneEventPtrs
{
    FFunction*                                    Function;                                                     // 0x0000(0x0008)
    BoundObjectProperty                           BoundObjectProperty;                                          // 0x0008(0x0020)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventPayloadVariable
// Struct Size::0x0010
struct FMovieSceneEventPayloadVariable
{
    FString                                       Value;                                                        // 0x0000(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventChannel
// Struct Size::0x0088
struct FMovieSceneEventChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          KeyTimes;                                                     // 0x0008(0x0010)
    TArray<FMovieSceneEvent>                      KeyValues;                                                    // 0x0018(0x0010)
    char                                          pa_0028[0x0060]                                               // 0x0028(0x0060)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventSectionData
// Struct Size::0x0088
struct FMovieSceneEventSectionData : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0008(0x0010)
    TArray<FEventPayload>                         KeyValues;                                                    // 0x0018(0x0010)
    char                                          pa_0028[0x0060]                                               // 0x0028(0x0060)
};


// ScriptStruct  MovieSceneTracks.EventPayload
// Struct Size::0x0040
struct FEventPayload
{
    FName                                         EventName;                                                    // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FMovieSceneEventParameters                    Parameters;                                                   // 0x0010(0x0030)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventParameters
// Struct Size::0x0030
struct FMovieSceneEventParameters
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventTriggerData
// Struct Size::0x0048
struct FMovieSceneEventTriggerData
{
    FMovieSceneEventPtrs                          Ptrs;                                                         // 0x0000(0x0028)
    FGuid                                         ObjectBindingID;                                              // 0x0028(0x0010)
    char                                          pa_0038[0x0010]                                               // 0x0038(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventSectionTemplate
// Struct Size::0x00B0
struct FMovieSceneEventSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneEventSectionData                   EventData;                                                    // 0x0020(0x0088)
    char                                          bFireEventsWhenForwards;                                      // 0x00A8(0x0001)
    char                                          bFireEventsWhenBackwards;                                     // 0x00A8(0x0001)
    char                                          pa_00A9[0x0007]                                               // 0x00A9(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneFadeSectionTemplate
// Struct Size::0x00D8
struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneFloatChannel                       FadeCurve;                                                    // 0x0020(0x00A0)
    FLinearColor                                  FadeColor;                                                    // 0x00C0(0x0010)
    char                                          bFadeAudio;                                                   // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneMaterialParameterCollectionTemplate
// Struct Size::0x0088
struct FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
{
    FMaterialParameterCollection*                 MPC;                                                          // 0x0080(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneObjectPropertyTemplate
// Struct Size::0x0108
struct FMovieSceneObjectPropertyTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneObjectPathChannel                  ObjectChannel;                                                // 0x0040(0x00C8)
};


// ScriptStruct  MovieSceneTracks.MovieSceneComponentMaterialSectionTemplate
// Struct Size::0x0088
struct FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
{
    int32_t                                       MaterialIndex;                                                // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneParticleParameterSectionTemplate
// Struct Size::0x0080
struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
{
};


// ScriptStruct  MovieSceneTracks.MovieSceneParticleChannel
// Struct Size::0x0098
struct FMovieSceneParticleChannel : public FMovieSceneByteChannel
{
};


// ScriptStruct  MovieSceneTracks.MovieSceneParticleSectionTemplate
// Struct Size::0x00B8
struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneParticleChannel                    ParticleKeys;                                                 // 0x0020(0x0098)
};


// ScriptStruct  MovieSceneTracks.MovieScenePrimitiveMaterialTemplate
// Struct Size::0x00F0
struct FMovieScenePrimitiveMaterialTemplate : public FMovieSceneEvalTemplate
{
    int32_t                                       MaterialIndex;                                                // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FMovieSceneObjectPathChannel                  MaterialChannel;                                              // 0x0028(0x00C8)
};


// ScriptStruct  MovieSceneTracks.MovieSceneStringPropertySectionTemplate
// Struct Size::0x00E0
struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneStringChannel                      StringCurve;                                                  // 0x0040(0x00A0)
};


// ScriptStruct  MovieSceneTracks.MovieSceneStringChannel
// Struct Size::0x00A0
struct FMovieSceneStringChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0008(0x0010)
    TArray<FString>                               Values;                                                       // 0x0018(0x0010)
    FString                                       DefaultValue;                                                 // 0x0028(0x0010)
    bool                                          bHasDefaultValue;                                             // 0x0038(0x0001)
    char                                          pa_0039[0x0067]                                               // 0x0039(0x0067)
};


// ScriptStruct  MovieSceneTracks.MovieSceneBoolPropertySectionTemplate
// Struct Size::0x00D0
struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneBoolChannel                        BoolCurve;                                                    // 0x0040(0x0090)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSkeletalAnimationParams
// Struct Size::0x00D8
struct FMovieSceneSkeletalAnimationParams
{
    FAnimSequenceBase*                            Animation;                                                    // 0x0000(0x0008)
    FFrameNumber                                  FirstLoopStartFrameOffset;                                    // 0x0008(0x0004)
    FFrameNumber                                  StartFrameOffset;                                             // 0x000C(0x0004)
    FFrameNumber                                  EndFrameOffset;                                               // 0x0010(0x0004)
    float                                         PlayRate;                                                     // 0x0014(0x0004)
    char                                          bReverse;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         SlotName;                                                     // 0x001C(0x000C)
    FMovieSceneFloatChannel                       Weight;                                                       // 0x0028(0x00A0)
    bool                                          bSkipAnimNotifiers;                                           // 0x00C8(0x0001)
    bool                                          bForceCustomMode;                                             // 0x00C9(0x0001)
    char                                          pa_00CA[0x0002]                                               // 0x00CA(0x0002)
    float                                         StartOffset;                                                  // 0x00CC(0x0004)
    float                                         EndOffset;                                                    // 0x00D0(0x0004)
    char                                          pa_00D4[0x0004]                                               // 0x00D4(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplate
// Struct Size::0x0100
struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneSkeletalAnimationSectionTemplateParametersParams;                                                // 0x0020(0x00E0)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplateParameters
// Struct Size::0x00E0
struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
{
    FFrameNumber                                  SectionStartTime;                                             // 0x00D8(0x0004)
    FFrameNumber                                  SectionEndTime;                                               // 0x00DC(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSkeletalAnimRootMotionTrackParams
// Struct Size::0x0030
struct FMovieSceneSkeletalAnimRootMotionTrackParams
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSlomoSectionTemplate
// Struct Size::0x00C0
struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneFloatChannel                       SlomoCurve;                                                   // 0x0020(0x00A0)
};


// ScriptStruct  MovieSceneTracks.LevelVisibilityComponentData
// Struct Size::0x0008
struct FLevelVisibilityComponentData
{
    FMovieSceneLevelVisibilitySection*            Section;                                                      // 0x0000(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVectorKeyStructBase
// Struct Size::0x0028
struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
{
    FFrameNumber                                  Time;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x001C]                                               // 0x000C(0x001C)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVector4KeyStruct
// Struct Size::0x0040
struct FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FVector4                                      Vector;                                                       // 0x0030(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVectorKeyStruct
// Struct Size::0x0038
struct FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
{
    FVector                                       Vector;                                                       // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVector2DKeyStruct
// Struct Size::0x0030
struct FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
{
    FVector2D                                     Vector;                                                       // 0x0028(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVisibilitySectionTemplate
// Struct Size::0x00D0
struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
{
};


// ScriptStruct  UMG.AnchorData
// Struct Size::0x0028
struct FAnchorData
{
    FMargin                                       Offsets;                                                      // 0x0000(0x0010)
    FAnchors                                      Anchors;                                                      // 0x0010(0x0010)
    FVector2D                                     Alignment;                                                    // 0x0020(0x0008)
};


// ScriptStruct  UMG.DynamicPropertyPath
// Struct Size::0x0028
struct FDynamicPropertyPath : public FCachedPropertyPath
{
};


// ScriptStruct  UMG.MovieScene2DTransformMask
// Struct Size::0x0004
struct FMovieScene2DTransformMask
{
    uint32_t                                      Mask;                                                         // 0x0000(0x0004)
};


// ScriptStruct  UMG.MovieSceneWidgetMaterialSectionTemplate
// Struct Size::0x0090
struct FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
{
    TArray<FName>                                 BrushPropertyNamePath;                                        // 0x0080(0x0010)
};


// ScriptStruct  UMG.RadialBoxSettings
// Struct Size::0x0010
struct FRadialBoxSettings
{
    float                                         StartingAngle;                                                // 0x0000(0x0004)
    bool                                          bDistributeItemsEvenly;                                       // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         AngleBetweenItems;                                            // 0x0008(0x0004)
    float                                         SectorCentralAngle;                                           // 0x000C(0x0004)
};


// ScriptStruct  UMG.RichTextStyleRow
// Struct Size::0x0298
struct FRichTextStyleRow : public FTableRowBase
{
    FTextBlockStyle                               TextStyle;                                                    // 0x0008(0x0290)
};


// ScriptStruct  UMG.RichImageRow
// Struct Size::0x0098
struct FRichImageRow : public FTableRowBase
{
    FSlateBrush                                   Brush;                                                        // 0x0008(0x0090)
};


// ScriptStruct  UMG.SlateMeshVertex
// Struct Size::0x003C
struct FSlateMeshVertex
{
    FVector2D                                     Position;                                                     // 0x0000(0x0008)
    FColor                                        Color;                                                        // 0x0008(0x0004)
    FVector2D                                     UV0;                                                          // 0x000C(0x0008)
    FVector2D                                     UV1;                                                          // 0x0014(0x0008)
    FVector2D                                     UV2;                                                          // 0x001C(0x0008)
    FVector2D                                     UV3;                                                          // 0x0024(0x0008)
    FVector2D                                     UV4;                                                          // 0x002C(0x0008)
    FVector2D                                     UV5;                                                          // 0x0034(0x0008)
};


// ScriptStruct  UMG.SlateChildSize
// Struct Size::0x0008
struct FSlateChildSize
{
    float                                         Value;                                                        // 0x0000(0x0004)
    enum class ESlateSizeRule                     SizeRule;                                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  UMG.SequenceTickManagerWidgetData
// Struct Size::0x0002
struct FSequenceTickManagerWidgetData
{
    bool                                          bIsTicking;                                                   // 0x0000(0x0001)
    bool                                          bLastKnownTickState;                                          // 0x0001(0x0001)
};


// ScriptStruct  UMG.WidgetAnimationBinding
// Struct Size::0x002C
struct FWidgetAnimationBinding
{
    FName                                         WidgetName;                                                   // 0x0000(0x000C)
    FName                                         SlotWidgetName;                                               // 0x000C(0x000C)
    FGuid                                         AnimationGuid;                                                // 0x0018(0x0010)
    bool                                          bIsRootWidget;                                                // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
};


// ScriptStruct  UMG.BlueprintWidgetAnimationDelegateBinding
// Struct Size::0x0028
struct FBlueprintWidgetAnimationDelegateBinding
{
    enum class EWidgetAnimationEvent              Action;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         AnimationToBind;                                              // 0x0004(0x000C)
    FName                                         FunctionNameToBind;                                           // 0x0010(0x000C)
    FName                                         UserTag;                                                      // 0x001C(0x000C)
};


// ScriptStruct  UMG.DelegateRuntimeBinding
// Struct Size::0x0058
struct FDelegateRuntimeBinding
{
    FString                                       ObjectName;                                                   // 0x0000(0x0010)
    FName                                         PropertyName;                                                 // 0x0010(0x000C)
    FName                                         FunctionName;                                                 // 0x001C(0x000C)
    FDynamicPropertyPath                          SourcePath;                                                   // 0x0028(0x0028)
    enum class EBindingKind                       Kind;                                                         // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
};


// ScriptStruct  Engine.SceneComponentInstanceData
// Struct Size::0x00B8
struct FSceneComponentInstanceData : public FActorComponentInstanceData
{
    TMap<USceneComponent*,FTransform>             AttachedInstanceComponents;                                   // 0x0068(0x0050)
};


// ScriptStruct  UMG.WidgetComponentInstanceData
// Struct Size::0x00C8
struct FWidgetComponentInstanceData : public FSceneComponentInstanceData
{
    char                                          pa_00B8[0x0010]                                               // 0x00B8(0x0010)
};


// ScriptStruct  UMG.WidgetNavigationData
// Struct Size::0x002C
struct FWidgetNavigationData
{
    enum class EUINavigationRule                  Rule;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         WidgetToFocus;                                                // 0x0004(0x000C)
    TWeakObjectPtr<FWidget>                       Widget;                                                       // 0x0010(0x0008)
    FDelegate                                     CustomDelegate;                                               // 0x0018(0x0014)
};


// ScriptStruct  CinematicCamera.CameraLookatTrackingSettings
// Struct Size::0x0058
struct FCameraLookatTrackingSettings
{
    char                                          bEnableLookAtTracking;                                        // 0x0000(0x0001)
    char                                          bDrawDebugLookAtTrackingPosition;                             // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         LookAtTrackingInterpSpeed;                                    // 0x0004(0x0004)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
    TSoftObjectPtr<AActor>                        ActorToTrack;                                                 // 0x0018(0x0030)
    FVector                                       RelativeOffset;                                               // 0x0048(0x000C)
    char                                          bAllowRoll;                                                   // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
};


// ScriptStruct  CinematicCamera.CameraFocusSettings
// Struct Size::0x0060
struct FCameraFocusSettings
{
    enum class ECameraFocusMethod                 FocusMethod;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ManualFocusDistance;                                          // 0x0004(0x0004)
    FCameraTrackingFocusSettings                  TrackingFocusSettings;                                        // 0x0008(0x0040)
    char                                          bDrawDebugFocusPlane;                                         // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    FColor                                        DebugFocusPlaneColor;                                         // 0x004C(0x0004)
    char                                          bSmoothFocusChanges;                                          // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    float                                         FocusSmoothingInterpSpeed;                                    // 0x0054(0x0004)
    float                                         FocusOffset;                                                  // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  CinematicCamera.CameraTrackingFocusSettings
// Struct Size::0x0040
struct FCameraTrackingFocusSettings
{
    TSoftObjectPtr<AActor>                        ActorToTrack;                                                 // 0x0000(0x0030)
    FVector                                       RelativeOffset;                                               // 0x0030(0x000C)
    char                                          bDrawDebugTrackingFocusPoint;                                 // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  CinematicCamera.NamedLensPreset
// Struct Size::0x0028
struct FNamedLensPreset
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FCameraLensSettings                           LensSettings;                                                 // 0x0010(0x0018)
};


// ScriptStruct  CinematicCamera.CameraLensSettings
// Struct Size::0x0018
struct FCameraLensSettings
{
    float                                         MinFocalLength;                                               // 0x0000(0x0004)
    float                                         MaxFocalLength;                                               // 0x0004(0x0004)
    float                                         MinFStop;                                                     // 0x0008(0x0004)
    float                                         MaxFStop;                                                     // 0x000C(0x0004)
    float                                         MinimumFocusDistance;                                         // 0x0010(0x0004)
    int32_t                                       DiaphragmBladeCount;                                          // 0x0014(0x0004)
};


// ScriptStruct  CinematicCamera.NamedFilmbackPreset
// Struct Size::0x0020
struct FNamedFilmbackPreset
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FCameraFilmbackSettings                       FilmbackSettings;                                             // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  CinematicCamera.CameraFilmbackSettings
// Struct Size::0x000C
struct FCameraFilmbackSettings
{
    float                                         SensorWidth;                                                  // 0x0000(0x0004)
    float                                         SensorHeight;                                                 // 0x0004(0x0004)
    float                                         SensorAspectRatio;                                            // 0x0008(0x0004)
};


// ScriptStruct  AudioPlatformConfiguration.PlatformRuntimeAudioCompressionOverrides
// Struct Size::0x0010
struct FPlatformRuntimeAudioCompressionOverrides
{
    bool                                          bOverrideCompressionTimes;                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DurationThreshold;                                            // 0x0004(0x0004)
    int32_t                                       MaxNumRandomBranches;                                         // 0x0008(0x0004)
    int32_t                                       SoundCueQualityIndex;                                         // 0x000C(0x0004)
};


// ScriptStruct  AudioMixer.SubmixEffectDynamicsProcessorSettings
// Struct Size::0x0060
struct FSubmixEffectDynamicsProcessorSettings
{
    enum class ESubmixEffectDynamicsProcessorType DynamicsProcessorType;                                        // 0x0000(0x0001)
    enum class ESubmixEffectDynamicsPeakMode      PeakMode;                                                     // 0x0001(0x0001)
    enum class ESubmixEffectDynamicsChannelLinkModeLinkMode;                                                    // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         InputGainDb;                                                  // 0x0004(0x0004)
    float                                         ThresholdDb;                                                  // 0x0008(0x0004)
    float                                         Ratio;                                                        // 0x000C(0x0004)
    float                                         KneeBandwidthDb;                                              // 0x0010(0x0004)
    float                                         LookAheadMsec;                                                // 0x0014(0x0004)
    float                                         AttackTimeMsec;                                               // 0x0018(0x0004)
    float                                         ReleaseTimeMsec;                                              // 0x001C(0x0004)
    enum class ESubmixEffectDynamicsKeySource     KeySource;                                                    // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    FAudioBus*                                    ExternalAudioBus;                                             // 0x0028(0x0008)
    FSoundSubmix*                                 ExternalSubmix;                                               // 0x0030(0x0008)
    char                                          bChannelLinked;                                               // 0x0038(0x0001)
    char                                          bAnalogMode;                                                  // 0x0038(0x0001)
    char                                          bBypass;                                                      // 0x0038(0x0001)
    char                                          bKeyAudition;                                                 // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    float                                         KeyGainDb;                                                    // 0x003C(0x0004)
    float                                         OutputGainDb;                                                 // 0x0040(0x0004)
    FSubmixEffectDynamicProcessorFilterSettings   KeyHighshelf;                                                 // 0x0044(0x000C)
    FSubmixEffectDynamicProcessorFilterSettings   KeyLowshelf;                                                  // 0x0050(0x000C)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  AudioMixer.SubmixEffectDynamicProcessorFilterSettings
// Struct Size::0x000C
struct FSubmixEffectDynamicProcessorFilterSettings
{
    char                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Cutoff;                                                       // 0x0004(0x0004)
    float                                         GainDb;                                                       // 0x0008(0x0004)
};


// ScriptStruct  AudioMixer.SubmixEffectSubmixEQSettings
// Struct Size::0x0010
struct FSubmixEffectSubmixEQSettings
{
    TArray<FSubmixEffectEQBand>                   EQBands;                                                      // 0x0000(0x0010)
};


// ScriptStruct  AudioMixer.SubmixEffectEQBand
// Struct Size::0x0010
struct FSubmixEffectEQBand
{
    float                                         Frequency;                                                    // 0x0000(0x0004)
    float                                         Bandwidth;                                                    // 0x0004(0x0004)
    float                                         GainDb;                                                       // 0x0008(0x0004)
    char                                          bEnabled;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  AudioMixer.SubmixEffectReverbSettings
// Struct Size::0x0040
struct FSubmixEffectReverbSettings
{
    bool                                          bBypassEarlyReflections;                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ReflectionsDelay;                                             // 0x0004(0x0004)
    float                                         GainHF;                                                       // 0x0008(0x0004)
    float                                         ReflectionsGain;                                              // 0x000C(0x0004)
    bool                                          bBypassLateReflections;                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LateDelay;                                                    // 0x0014(0x0004)
    float                                         DecayTime;                                                    // 0x0018(0x0004)
    float                                         Density;                                                      // 0x001C(0x0004)
    float                                         Diffusion;                                                    // 0x0020(0x0004)
    float                                         AirAbsorptionGainHF;                                          // 0x0024(0x0004)
    float                                         DecayHFRatio;                                                 // 0x0028(0x0004)
    float                                         LateGain;                                                     // 0x002C(0x0004)
    float                                         Gain;                                                         // 0x0030(0x0004)
    float                                         WetLevel;                                                     // 0x0034(0x0004)
    float                                         DryLevel;                                                     // 0x0038(0x0004)
    bool                                          bBypass;                                                      // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  NetCore.NetAnalyticsDataConfig
// Struct Size::0x0010
struct FNetAnalyticsDataConfig
{
    FName                                         DataName;                                                     // 0x0000(0x000C)
    bool                                          bEnabled;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  AssetRegistry.TagAndValue
// Struct Size::0x0020
struct FTagAndValue
{
    FName                                         Tag;                                                          // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  AssetRegistry.AssetRegistryDependencyOptions
// Struct Size::0x0005
struct FAssetRegistryDependencyOptions
{
    bool                                          bIncludeSoftPackageReferences;                                // 0x0000(0x0001)
    bool                                          bIncludeHardPackageReferences;                                // 0x0001(0x0001)
    bool                                          bIncludeSearchableNames;                                      // 0x0002(0x0001)
    bool                                          bIncludeSoftManagementReferences;                             // 0x0003(0x0001)
    bool                                          bIncludeHardManagementReferences;                             // 0x0004(0x0001)
};


// ScriptStruct  EngineMessages.EngineServiceNotification
// Struct Size::0x0018
struct FEngineServiceNotification
{
    FString                                       Text;                                                         // 0x0000(0x0010)
    double                                        TimeSeconds;                                                  // 0x0010(0x0008)
};


// ScriptStruct  EngineMessages.EngineServiceTerminate
// Struct Size::0x0010
struct FEngineServiceTerminate
{
    FString                                       UserName;                                                     // 0x0000(0x0010)
};


// ScriptStruct  EngineMessages.EngineServiceExecuteCommand
// Struct Size::0x0020
struct FEngineServiceExecuteCommand
{
    FString                                       Command;                                                      // 0x0000(0x0010)
    FString                                       UserName;                                                     // 0x0010(0x0010)
};


// ScriptStruct  EngineMessages.EngineServiceAuthGrant
// Struct Size::0x0020
struct FEngineServiceAuthGrant
{
    FString                                       UserName;                                                     // 0x0000(0x0010)
    FString                                       UserToGrant;                                                  // 0x0010(0x0010)
};


// ScriptStruct  EngineMessages.EngineServiceAuthDeny
// Struct Size::0x0020
struct FEngineServiceAuthDeny
{
    FString                                       UserName;                                                     // 0x0000(0x0010)
    FString                                       UserToDeny;                                                   // 0x0010(0x0010)
};


// ScriptStruct  EngineMessages.EngineServicePong
// Struct Size::0x0050
struct FEngineServicePong
{
    FString                                       CurrentLevel;                                                 // 0x0000(0x0010)
    int32_t                                       EngineVersion;                                                // 0x0010(0x0004)
    bool                                          HasBegunPlay;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FGuid                                         InstanceId;                                                   // 0x0018(0x0010)
    FString                                       InstanceType;                                                 // 0x0028(0x0010)
    FGuid                                         SessionId;                                                    // 0x0038(0x0010)
    float                                         WorldTimeSeconds;                                             // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  EngineMessages.EngineServicePing
// Struct Size::0x0001
struct FEngineServicePing
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  GameplayTags.GameplayTagCreationWidgetHelper
// Struct Size::0x0001
struct FGameplayTagCreationWidgetHelper
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  GameplayTags.GameplayTagReferenceHelper
// Struct Size::0x0010
struct FGameplayTagReferenceHelper
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GameplayTags.GameplayTagRedirect
// Struct Size::0x0018
struct FGameplayTagRedirect
{
    FName                                         OldTagName;                                                   // 0x0000(0x000C)
    FName                                         NewTagName;                                                   // 0x000C(0x000C)
};


// ScriptStruct  GameplayTags.GameplayTagNode
// Struct Size::0x0058
struct FGameplayTagNode
{
    char                                          pa_0000[0x0058]                                               // 0x0000(0x0058)
};


// ScriptStruct  GameplayTags.GameplayTagSource
// Struct Size::0x0020
struct FGameplayTagSource
{
    FName                                         SourceName;                                                   // 0x0000(0x000C)
    enum class EGameplayTagSourceType             SourceType;                                                   // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FGameplayTagsList*                            SourceTagList;                                                // 0x0010(0x0008)
    FRestrictedGameplayTagsList*                  SourceRestrictedTagList;                                      // 0x0018(0x0008)
};


// ScriptStruct  GameplayTags.GameplayTagTableRow
// Struct Size::0x0028
struct FGameplayTagTableRow : public FTableRowBase
{
    FName                                         Tag;                                                          // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       DevComment;                                                   // 0x0018(0x0010)
};


// ScriptStruct  GameplayTags.RestrictedGameplayTagTableRow
// Struct Size::0x0030
struct FRestrictedGameplayTagTableRow : public FGameplayTagTableRow
{
    bool                                          bAllowNonRestrictedChildren;                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  GameplayTags.RestrictedConfigInfo
// Struct Size::0x0020
struct FRestrictedConfigInfo
{
    FString                                       RestrictedConfigName;                                         // 0x0000(0x0010)
    TArray<FString>                               Owners;                                                       // 0x0010(0x0010)
};


// ScriptStruct  GameplayTags.GameplayTagCategoryRemap
// Struct Size::0x0020
struct FGameplayTagCategoryRemap
{
    FString                                       BaseCategory;                                                 // 0x0000(0x0010)
    TArray<FString>                               RemapCategories;                                              // 0x0010(0x0010)
};


// ScriptStruct  StaticMeshDescription.UVMapSettings
// Struct Size::0x0038
struct FUVMapSettings
{
    FVector                                       Size;                                                         // 0x0000(0x000C)
    FVector2D                                     UVTile;                                                       // 0x000C(0x0008)
    FVector                                       Position;                                                     // 0x0014(0x000C)
    FRotator                                      Rotation;                                                     // 0x0020(0x000C)
    FVector                                       Scale;                                                        // 0x002C(0x000C)
};


// ScriptStruct  JsonUtilities.JsonObjectWrapper
// Struct Size::0x0020
struct FJsonObjectWrapper
{
    FString                                       JsonString;                                                   // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  PakFile.PakFaultSentinelContent
// Struct Size::0x0030
struct FPakFaultSentinelContent
{
    FString                                       BuildVersion;                                                 // 0x0000(0x0010)
    TArray<FString>                               FaultedPakFiles;                                              // 0x0010(0x0010)
    int64_t                                       Time;                                                         // 0x0020(0x0008)
    bool                                          FullScanExecuted;                                             // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  PropertyAccess.PropertyAccessLibrary
// Struct Size::0x00C8
struct FPropertyAccessLibrary
{
    TArray<FPropertyAccessSegment>                PathSegments;                                                 // 0x0000(0x0010)
    TArray<FPropertyAccessPath>                   SrcPaths;                                                     // 0x0010(0x0010)
    TArray<FPropertyAccessPath>                   DestPaths;                                                    // 0x0020(0x0010)
    FPropertyAccessCopyBatch                      CopyBatches;                                                  // 0x0030(0x0010)
    char                                          pa_0040[0x0030]                                               // 0x0040(0x0030)
    TArray<FPropertyAccessIndirectionChain>       SrcAccesses;                                                  // 0x0070(0x0010)
    TArray<FPropertyAccessIndirectionChain>       DestAccesses;                                                 // 0x0080(0x0010)
    TArray<FPropertyAccessIndirection>            Indirections;                                                 // 0x0090(0x0010)
    TArray<int32_t>                               EventAccessIndices;                                           // 0x00A0(0x0010)
    char                                          pa_00B0[0x0018]                                               // 0x00B0(0x0018)
};


// ScriptStruct  PropertyAccess.PropertyAccessIndirection
// Struct Size::0x0040
struct FPropertyAccessIndirection
{
    ArrayProperty                                 ArrayProperty;                                                // 0x0000(0x0020)
    FFunction*                                    Function;                                                     // 0x0020(0x0008)
    int32_t                                       ReturnBufferSize;                                             // 0x0028(0x0004)
    int32_t                                       ReturnBufferAlignment;                                        // 0x002C(0x0004)
    int32_t                                       ArrayIndex;                                                   // 0x0030(0x0004)
    uint32_t                                      Offset;                                                       // 0x0034(0x0004)
    enum class EPropertyAccessObjectType          ObjectType;                                                   // 0x0038(0x0001)
    enum class EPropertyAccessIndirectionType     Type;                                                         // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
};


// ScriptStruct  PropertyAccess.PropertyAccessIndirectionChain
// Struct Size::0x0030
struct FPropertyAccessIndirectionChain
{
    Property                                      Property;                                                     // 0x0000(0x0020)
    int32_t                                       IndirectionStartIndex;                                        // 0x0020(0x0004)
    int32_t                                       IndirectionEndIndex;                                          // 0x0024(0x0004)
    int32_t                                       EventId;                                                      // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  PropertyAccess.PropertyAccessCopyBatch
// Struct Size::0x0010
struct FPropertyAccessCopyBatch
{
    TArray<FPropertyAccessCopy>                   Copies;                                                       // 0x0000(0x0010)
};


// ScriptStruct  PropertyAccess.PropertyAccessCopy
// Struct Size::0x0010
struct FPropertyAccessCopy
{
    int32_t                                       AccessIndex;                                                  // 0x0000(0x0004)
    int32_t                                       DestAccessStartIndex;                                         // 0x0004(0x0004)
    int32_t                                       DestAccessEndIndex;                                           // 0x0008(0x0004)
    enum class EPropertyAccessCopyType            Type;                                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  PropertyAccess.PropertyAccessPath
// Struct Size::0x000C
struct FPropertyAccessPath
{
    int32_t                                       PathSegmentStartIndex;                                        // 0x0000(0x0004)
    int32_t                                       PathSegmentCount;                                             // 0x0004(0x0004)
    char                                          bHasEvents;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  PropertyAccess.PropertyAccessSegment
// Struct Size::0x0048
struct FPropertyAccessSegment
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FStruct*                                      Struct;                                                       // 0x0010(0x0008)
    Property                                      Property;                                                     // 0x0018(0x0020)
    FFunction*                                    Function;                                                     // 0x0038(0x0008)
    int32_t                                       ArrayIndex;                                                   // 0x0040(0x0004)
    uint16_t                                      Flags;                                                        // 0x0044(0x0002)
    char                                          pa_0046[0x0002]                                               // 0x0046(0x0002)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionData
// Struct Size::0x0040
struct FClothCollisionData
{
    TArray<FClothCollisionPrim>                   Spheres;                                                      // 0x0000(0x0010)
    TArray<FClothCollisionPrim>                   SphereConnections;                                            // 0x0010(0x0010)
    TArray<FClothCollisionPrim>                   Convexes;                                                     // 0x0020(0x0010)
    TArray<FClothCollisionPrim>                   Boxes;                                                        // 0x0030(0x0010)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim
// Struct Size::0x0030
struct FClothCollisionPrim
{
    FVector                                       LocalPosition;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         LocalRotation;                                                // 0x0010(0x0010)
    FVector                                       HalfExtents;                                                  // 0x0020(0x000C)
    int32_t                                       BoneIndex;                                                    // 0x002C(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim
// Struct Size::0x0028
struct FClothCollisionPrim
{
    TArray<FClothCollisionPrim>                   Faces;                                                        // 0x0000(0x0010)
    TArray<FVector>                               SurfacePoints;                                                // 0x0010(0x0010)
    int32_t                                       BoneIndex;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim
// Struct Size::0x0020
struct FClothCollisionPrim
{
    FPlane                                        Plane;                                                        // 0x0000(0x0010)
    TArray<int32_t>                               Indices;                                                      // 0x0010(0x0010)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim
// Struct Size::0x0008
struct FClothCollisionPrim
{
    int32_t                                       SphereIndices;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim
// Struct Size::0x0014
struct FClothCollisionPrim
{
    int32_t                                       BoneIndex;                                                    // 0x0000(0x0004)
    float                                         Radius;                                                       // 0x0004(0x0004)
    FVector                                       LocalPosition;                                                // 0x0008(0x000C)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothVertBoneData
// Struct Size::0x004C
struct FClothVertBoneData
{
    int32_t                                       NumInfluences;                                                // 0x0000(0x0004)
    uint16_t                                      BoneIndices;                                                  // 0x0004(0x0002)
    char                                          pa_0006[0x0016]                                               // 0x0006(0x0016)
    float                                         BoneWeights;                                                  // 0x001C(0x0004)
    char                                          pa_0020[0x002C]                                               // 0x0020(0x002C)
};


// ScriptStruct  MediaUtils.MediaPlayerOptions
// Struct Size::0x0030
struct FMediaPlayerOptions
{
    FMediaPlayerTrackOptions                      Tracks;                                                       // 0x0000(0x001C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FTimespan                                     SeekTime;                                                     // 0x0020(0x0008)
    enum class EMediaPlayerOptionBooleanOverride  PlayOnOpen;                                                   // 0x0028(0x0001)
    enum class EMediaPlayerOptionBooleanOverride  Loop;                                                         // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
};


// ScriptStruct  MediaUtils.MediaPlayerTrackOptions
// Struct Size::0x001C
struct FMediaPlayerTrackOptions
{
    int32_t                                       Audio;                                                        // 0x0000(0x0004)
    int32_t                                       Caption;                                                      // 0x0004(0x0004)
    int32_t                                       Metadata;                                                     // 0x0008(0x0004)
    int32_t                                       Script;                                                       // 0x000C(0x0004)
    int32_t                                       Subtitle;                                                     // 0x0010(0x0004)
    int32_t                                       Text;                                                         // 0x0014(0x0004)
    int32_t                                       Video;                                                        // 0x0018(0x0004)
};


// ScriptStruct  MediaAssets.MediaCaptureDevice
// Struct Size::0x0028
struct FMediaCaptureDevice
{
    FText                                         DisplayName;                                                  // 0x0000(0x0018)
    FString                                       Url;                                                          // 0x0018(0x0010)
};


// ScriptStruct  MediaAssets.MediaSoundComponentSpectralData
// Struct Size::0x0008
struct FMediaSoundComponentSpectralData
{
    float                                         FrequencyHz;                                                  // 0x0000(0x0004)
    float                                         Magnitude;                                                    // 0x0004(0x0004)
};


// ScriptStruct  Engine.RepAttachment
// Struct Size::0x0040
struct FRepAttachment
{
    AActor*                                       AttachParent;                                                 // 0x0000(0x0008)
    FVector                                       LocationOffset;                                               // 0x0008(0x000C)
    FVector                                       RelativeScale3D;                                              // 0x0014(0x000C)
    FRotator                                      RotationOffset;                                               // 0x0020(0x000C)
    FName                                         AttachSocket;                                                 // 0x002C(0x000C)
    USceneComponent*                              AttachComponent;                                              // 0x0038(0x0008)
};


// ScriptStruct  Engine.RepMovement
// Struct Size::0x0048
struct FRepMovement
{
    FVector                                       LinearVelocity;                                               // 0x0000(0x000C)
    FVector                                       Acceleration;                                                 // 0x000C(0x000C)
    FVector                                       AngularVelocity;                                              // 0x0018(0x000C)
    char                                          bHasRequestedVelocity;                                        // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FVector                                       Location;                                                     // 0x0028(0x000C)
    FRotator                                      Rotation;                                                     // 0x0034(0x000C)
    char                                          bSimulatedPhysicSleep;                                        // 0x0040(0x0001)
    char                                          bRepPhysics;                                                  // 0x0040(0x0001)
    enum class EVectorQuantization                LocationQuantizationLevel;                                    // 0x0041(0x0001)
    enum class EVectorQuantization                VelocityQuantizationLevel;                                    // 0x0042(0x0001)
    enum class EVectorQuantization                AccelerationQuantizationLevel;                                // 0x0043(0x0001)
    enum class ERotatorQuantization               RotationQuantizationLevel;                                    // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
};


// ScriptStruct  Engine.ActorTickFunction
// Struct Size::0x0030
struct FActorTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  LevelSequence.LevelSequenceCameraSettings
// Struct Size::0x0002
struct FLevelSequenceCameraSettings
{
    bool                                          bOverrideAspectRatioAxisConstraint;                           // 0x0000(0x0001)
    enum class EAspectRatioAxisConstraint         AspectRatioAxisConstraint;                                    // 0x0001(0x0001)
};


// ScriptStruct  LevelSequence.BoundActorProxy
// Struct Size::0x0001
struct FBoundActorProxy
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  LevelSequence.LevelSequenceAnimSequenceLinkItem
// Struct Size::0x0038
struct FLevelSequenceAnimSequenceLinkItem
{
    FGuid                                         SkelTrackGuid;                                                // 0x0000(0x0010)
    FSoftObjectPath                               PathToAnimSequence;                                           // 0x0010(0x0020)
    bool                                          bExportTransforms;                                            // 0x0030(0x0001)
    bool                                          bExportCurves;                                                // 0x0031(0x0001)
    bool                                          bRecordInWorldSpace;                                          // 0x0032(0x0001)
    char                                          pa_0033[0x0005]                                               // 0x0033(0x0005)
};


// ScriptStruct  LevelSequence.LevelSequenceBindingReferences
// Struct Size::0x00A0
struct FLevelSequenceBindingReferences
{
    TMap<FGuid,FLevelSequenceBindingReferenceArray>BindingIdToReferences;                                       // 0x0000(0x0050)
    TSet<FGuid>                                   AnimSequenceInstances;                                        // 0x0050(0x0050)
};


// ScriptStruct  LevelSequence.LevelSequenceBindingReferenceArray
// Struct Size::0x0010
struct FLevelSequenceBindingReferenceArray
{
    TArray<FLevelSequenceBindingReference>        References;                                                   // 0x0000(0x0010)
};


// ScriptStruct  LevelSequence.LevelSequenceBindingReference
// Struct Size::0x0040
struct FLevelSequenceBindingReference
{
    FString                                       PackageName;                                                  // 0x0000(0x0010)
    FSoftObjectPath                               ExternalObjectPath;                                           // 0x0010(0x0020)
    FString                                       ObjectPath;                                                   // 0x0030(0x0010)
};


// ScriptStruct  LevelSequence.LevelSequenceObjectReferenceMap
// Struct Size::0x0050
struct FLevelSequenceObjectReferenceMap
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  LevelSequence.LevelSequenceLegacyObjectReference
// Struct Size::0x0020
struct FLevelSequenceLegacyObjectReference
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  LevelSequence.LevelSequenceObject
// Struct Size::0x0038
struct FLevelSequenceObject
{
    UObject*                                      ObjectOrOwner;                                                // 0x0000(0x001C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       ComponentName;                                                // 0x0020(0x0010)
    TWeakObjectPtr<UObject>                       CachedComponent;                                              // 0x0030(0x0008)
};


// ScriptStruct  LevelSequence.LevelSequencePlayerSnapshot
// Struct Size::0x00C0
struct FLevelSequencePlayerSnapshot
{
    FString                                       MasterName;                                                   // 0x0000(0x0010)
    FQualifiedFrameTime                           MasterTime;                                                   // 0x0010(0x0010)
    FQualifiedFrameTime                           SourceTime;                                                   // 0x0020(0x0010)
    FString                                       CurrentShotName;                                              // 0x0030(0x0010)
    FQualifiedFrameTime                           CurrentShotLocalTime;                                         // 0x0040(0x0010)
    FQualifiedFrameTime                           CurrentShotSourceTime;                                        // 0x0050(0x0010)
    FString                                       SourceTimecode;                                               // 0x0060(0x0010)
    TSoftObjectPtr<FCameraComponent>              CameraComponent;                                              // 0x0070(0x0030)
    FLevelSequenceSnapshotSettings                Settings;                                                     // 0x00A0(0x000C)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
    FLevelSequence*                               ActiveShot;                                                   // 0x00B0(0x0008)
    FMovieSceneSequenceID                         ShotID;                                                       // 0x00B8(0x0004)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
};


// ScriptStruct  LevelSequence.LevelSequenceSnapshotSettings
// Struct Size::0x000C
struct FLevelSequenceSnapshotSettings
{
    char                                          ZeroPadAmount;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FFrameRate                                    FrameRate;                                                    // 0x0004(0x0008)
};


// ScriptStruct  MovieSceneCapture.CompositionGraphCapturePasses
// Struct Size::0x0010
struct FCompositionGraphCapturePasses
{
    TArray<FString>                               Value;                                                        // 0x0000(0x0010)
};


// ScriptStruct  MovieSceneCapture.FrameMetrics
// Struct Size::0x0010
struct FFrameMetrics
{
    float                                         TotalElapsedTime;                                             // 0x0000(0x0004)
    float                                         FrameDelta;                                                   // 0x0004(0x0004)
    int32_t                                       FrameNumber;                                                  // 0x0008(0x0004)
    int32_t                                       NumDroppedFrames;                                             // 0x000C(0x0004)
};


// ScriptStruct  MovieSceneCapture.MovieSceneCaptureSettings
// Struct Size::0x0070
struct FMovieSceneCaptureSettings
{
    FDirectoryPath                                OutputDirectory;                                              // 0x0000(0x0010)
    FGameModeBase*                                GameModeOverride;                                             // 0x0010(0x0008)
    FString                                       OutputFormat;                                                 // 0x0018(0x0010)
    bool                                          bOverwriteExisting;                                           // 0x0028(0x0001)
    bool                                          bUseRelativeFrameNumbers;                                     // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    int32_t                                       HandleFrames;                                                 // 0x002C(0x0004)
    FString                                       MovieExtension;                                               // 0x0030(0x0010)
    char                                          ZeroPadFrameNumbers;                                          // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    FFrameRate                                    FrameRate;                                                    // 0x0044(0x0008)
    bool                                          bUseCustomFrameRate;                                          // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
    FFrameRate                                    CustomFrameRate;                                              // 0x0050(0x0008)
    FCaptureResolution                            Resolution;                                                   // 0x0058(0x0008)
    bool                                          bEnableTextureStreaming;                                      // 0x0060(0x0001)
    bool                                          bCinematicEngineScalability;                                  // 0x0061(0x0001)
    bool                                          bCinematicMode;                                               // 0x0062(0x0001)
    bool                                          bAllowMovement;                                               // 0x0063(0x0001)
    bool                                          bAllowTurning;                                                // 0x0064(0x0001)
    bool                                          bShowPlayer;                                                  // 0x0065(0x0001)
    bool                                          bShowHUD;                                                     // 0x0066(0x0001)
    bool                                          bUsePathTracer;                                               // 0x0067(0x0001)
    int32_t                                       PathTracerSamplePerPixel;                                     // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  MovieSceneCapture.CaptureResolution
// Struct Size::0x0008
struct FCaptureResolution
{
    int32_t                                       ResX;                                                         // 0x0000(0x0004)
    int32_t                                       ResY;                                                         // 0x0004(0x0004)
};


// ScriptStruct  Engine.DirectoryPath
// Struct Size::0x0010
struct FDirectoryPath
{
    FString                                       Path;                                                         // 0x0000(0x0010)
};


// ScriptStruct  MovieSceneCapture.CapturedPixels
// Struct Size::0x0010
struct FCapturedPixels
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  MovieSceneCapture.CapturedPixelsID
// Struct Size::0x0050
struct FCapturedPixelsID
{
    TMap<FName,FName>                             Identifiers;                                                  // 0x0000(0x0050)
};


// ScriptStruct  Engine.KAggregateGeom
// Struct Size::0x0058
struct FKAggregateGeom
{
    TArray<FKSphereElem>                          SphereElems;                                                  // 0x0000(0x0010)
    TArray<FKBoxElem>                             BoxElems;                                                     // 0x0010(0x0010)
    TArray<FKSphylElem>                           SphylElems;                                                   // 0x0020(0x0010)
    TArray<FKConvexElem>                          ConvexElems;                                                  // 0x0030(0x0010)
    TArray<FKTaperedCapsuleElem>                  TaperedCapsuleElems;                                          // 0x0040(0x0010)
    char                                          pa_0050[0x0008]                                               // 0x0050(0x0008)
};


// ScriptStruct  Engine.KShapeElem
// Struct Size::0x0030
struct FKShapeElem
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    float                                         RestOffset;                                                   // 0x0008(0x0004)
    FName                                         Name;                                                         // 0x000C(0x000C)
    char                                          pa_0018[0x0004]                                               // 0x0018(0x0004)
    char                                          bContributeToMass;                                            // 0x001C(0x0001)
    enum class ECollisionEnabled                  CollisionEnabled;                                             // 0x001D(0x0001)
    char                                          pa_001E[0x0012]                                               // 0x001E(0x0012)
};


// ScriptStruct  Engine.KTaperedCapsuleElem
// Struct Size::0x0058
struct FKTaperedCapsuleElem : public FKShapeElem
{
    FVector                                       Center;                                                       // 0x0030(0x000C)
    FRotator                                      Rotation;                                                     // 0x003C(0x000C)
    float                                         Radius0;                                                      // 0x0048(0x0004)
    float                                         Radius1;                                                      // 0x004C(0x0004)
    float                                         Length;                                                       // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  Engine.KConvexElem
// Struct Size::0x00B0
struct FKConvexElem : public FKShapeElem
{
    TArray<FVector>                               VertexData;                                                   // 0x0030(0x0010)
    TArray<int32_t>                               IndexData;                                                    // 0x0040(0x0010)
    FBox                                          ElemBox;                                                      // 0x0050(0x001C)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    char                                          pa_00A0[0x0010]                                               // 0x00A0(0x0010)
};


// ScriptStruct  Engine.KSphylElem
// Struct Size::0x0050
struct FKSphylElem : public FKShapeElem
{
    FVector                                       Center;                                                       // 0x0030(0x000C)
    FRotator                                      Rotation;                                                     // 0x003C(0x000C)
    float                                         Radius;                                                       // 0x0048(0x0004)
    float                                         Length;                                                       // 0x004C(0x0004)
};


// ScriptStruct  Engine.KBoxElem
// Struct Size::0x0058
struct FKBoxElem : public FKShapeElem
{
    FVector                                       Center;                                                       // 0x0030(0x000C)
    FRotator                                      Rotation;                                                     // 0x003C(0x000C)
    float                                         X;                                                            // 0x0048(0x0004)
    float                                         Y;                                                            // 0x004C(0x0004)
    float                                         Z;                                                            // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  Engine.KSphereElem
// Struct Size::0x0040
struct FKSphereElem : public FKShapeElem
{
    FVector                                       Center;                                                       // 0x0030(0x000C)
    float                                         Radius;                                                       // 0x003C(0x0004)
};


// ScriptStruct  Engine.AnimationGroupReference
// Struct Size::0x0010
struct FAnimationGroupReference
{
    FName                                         GroupName;                                                    // 0x0000(0x000C)
    enum class EAnimGroupRole                     GroupRole;                                                    // 0x000C(0x0001)
    enum class EAnimSyncGroupScope                GroupScope;                                                   // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  Engine.RootMotionMovementParams
// Struct Size::0x0040
struct FRootMotionMovementParams
{
    bool                                          bHasRootMotion;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         BlendWeight;                                                  // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    RootMotionTransform;                                          // 0x0010(0x0030)
};


// ScriptStruct  Engine.AnimGroupInstance
// Struct Size::0x0080
struct FAnimGroupInstance
{
    char                                          pa_0000[0x0080]                                               // 0x0000(0x0080)
};


// ScriptStruct  Engine.AnimTickRecord
// Struct Size::0x0058
struct FAnimTickRecord
{
    FAnimationAsset*                              SourceAsset;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0050]                                               // 0x0008(0x0050)
};


// ScriptStruct  Engine.MarkerSyncAnimPosition
// Struct Size::0x001C
struct FMarkerSyncAnimPosition
{
    FName                                         PreviousMarkerName;                                           // 0x0000(0x000C)
    FName                                         NextMarkerName;                                               // 0x000C(0x000C)
    float                                         PositionBetweenMarkers;                                       // 0x0018(0x0004)
};


// ScriptStruct  Engine.BlendFilter
// Struct Size::0x0078
struct FBlendFilter
{
    char                                          pa_0000[0x0078]                                               // 0x0000(0x0078)
};


// ScriptStruct  Engine.BlendSampleData
// Struct Size::0x0040
struct FBlendSampleData
{
    int32_t                                       SampleDataIndex;                                              // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FAnimSequence*                                Animation;                                                    // 0x0008(0x0008)
    float                                         TotalWeight;                                                  // 0x0010(0x0004)
    float                                         Time;                                                         // 0x0014(0x0004)
    float                                         PreviousTime;                                                 // 0x0018(0x0004)
    float                                         SamplePlayRate;                                               // 0x001C(0x0004)
    char                                          pa_0020[0x0020]                                               // 0x0020(0x0020)
};


// ScriptStruct  Engine.AnimationRecordingSettings
// Struct Size::0x0014
struct FAnimationRecordingSettings
{
    bool                                          bRecordInWorldSpace;                                          // 0x0000(0x0001)
    bool                                          bRemoveRootAnimation;                                         // 0x0001(0x0001)
    bool                                          bAutoSaveAsset;                                               // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         SampleRate;                                                   // 0x0004(0x0004)
    float                                         Length;                                                       // 0x0008(0x0004)
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x000C(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x000D(0x0001)
    char                                          pa_000E[0x0001]                                               // 0x000E(0x0001)
    bool                                          bRecordTransforms;                                            // 0x000F(0x0001)
    bool                                          bRecordCurves;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Engine.ComponentSpacePose
// Struct Size::0x0020
struct FComponentSpacePose
{
    TArray<FTransform>                            Transforms;                                                   // 0x0000(0x0010)
    TArray<FName>                                 Names;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.LocalSpacePose
// Struct Size::0x0020
struct FLocalSpacePose
{
    TArray<FTransform>                            Transforms;                                                   // 0x0000(0x0010)
    TArray<FName>                                 Names;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.NamedTransform
// Struct Size::0x0040
struct FNamedTransform
{
    FTransform                                    Value;                                                        // 0x0000(0x0030)
    FName                                         Name;                                                         // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Engine.NamedColor
// Struct Size::0x0010
struct FNamedColor
{
    FColor                                        Value;                                                        // 0x0000(0x0004)
    FName                                         Name;                                                         // 0x0004(0x000C)
};


// ScriptStruct  Engine.NamedVector
// Struct Size::0x0018
struct FNamedVector
{
    FVector                                       Value;                                                        // 0x0000(0x000C)
    FName                                         Name;                                                         // 0x000C(0x000C)
};


// ScriptStruct  Engine.NamedFloat
// Struct Size::0x0010
struct FNamedFloat
{
    float                                         Value;                                                        // 0x0000(0x0004)
    FName                                         Name;                                                         // 0x0004(0x000C)
};


// ScriptStruct  Engine.AnimTransitionGroup
// Struct Size::0x0010
struct FAnimTransitionGroup
{
    FName                                         GroupName;                                                    // 0x0000(0x000C)
    bool                                          bEnabled;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.AnimParentNodeAssetOverride
// Struct Size::0x0018
struct FAnimParentNodeAssetOverride
{
    FAnimationAsset*                              NewAsset;                                                     // 0x0000(0x0008)
    FGuid                                         ParentNodeGuid;                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.AnimGroupInfo
// Struct Size::0x001C
struct FAnimGroupInfo
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    FLinearColor                                  Color;                                                        // 0x000C(0x0010)
};


// ScriptStruct  Engine.AnimBlueprintDebugData
// Struct Size::0x0001
struct FAnimBlueprintDebugData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.AnimationFrameSnapshot
// Struct Size::0x0001
struct FAnimationFrameSnapshot
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.StateMachineDebugData
// Struct Size::0x00B0
struct FStateMachineDebugData
{
    char                                          pa_0000[0x00B0]                                               // 0x0000(0x00B0)
};


// ScriptStruct  Engine.StateMachineStateDebugData
// Struct Size::0x0010
struct FStateMachineStateDebugData
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimBlueprintFunctionData
// Struct Size::0x0040
struct FAnimBlueprintFunctionData
{
    OutputPoseNodeProperty                        OutputPoseNodeProperty;                                       // 0x0000(0x0020)
    TArray<InputPoseNodeProperties>               InputPoseNodeProperties;                                      // 0x0020(0x0010)
    TArray<InputProperties>                       InputProperties;                                              // 0x0030(0x0010)
};


// ScriptStruct  Engine.AnimGraphBlendOptions
// Struct Size::0x0008
struct FAnimGraphBlendOptions
{
    float                                         BlendInTime;                                                  // 0x0000(0x0004)
    float                                         BlendOutTime;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Engine.GraphAssetPlayerInformation
// Struct Size::0x0010
struct FGraphAssetPlayerInformation
{
    TArray<int32_t>                               PlayerNodeIndices;                                            // 0x0000(0x0010)
};


// ScriptStruct  Engine.CachedPoseIndices
// Struct Size::0x0010
struct FCachedPoseIndices
{
    TArray<int32_t>                               OrderedSavedPoseNodeIndices;                                  // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimBlueprintFunction
// Struct Size::0x0070
struct FAnimBlueprintFunction
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    FName                                         Group;                                                        // 0x000C(0x000C)
    int32_t                                       OutputPoseNodeIndex;                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FName>                                 InputPoseNames;                                               // 0x0020(0x0010)
    TArray<int32_t>                               InputPoseNodeIndices;                                         // 0x0030(0x0010)
    char                                          pa_0040[0x0028]                                               // 0x0040(0x0028)
    bool                                          bImplemented;                                                 // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
};


// ScriptStruct  Engine.AnimTrack
// Struct Size::0x0010
struct FAnimTrack
{
    TArray<FAnimSegment>                          AnimSegments;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimSegment
// Struct Size::0x0020
struct FAnimSegment
{
    FAnimSequenceBase*                            AnimReference;                                                // 0x0000(0x0008)
    float                                         StartPos;                                                     // 0x0008(0x0004)
    float                                         AnimStartTime;                                                // 0x000C(0x0004)
    float                                         AnimEndTime;                                                  // 0x0010(0x0004)
    float                                         AnimPlayRate;                                                 // 0x0014(0x0004)
    int32_t                                       LoopingCount;                                                 // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.RootMotionExtractionStep
// Struct Size::0x0010
struct FRootMotionExtractionStep
{
    FAnimSequence*                                AnimSequence;                                                 // 0x0000(0x0008)
    float                                         StartPosition;                                                // 0x0008(0x0004)
    float                                         EndPosition;                                                  // 0x000C(0x0004)
};


// ScriptStruct  Engine.AnimationErrorStats
// Struct Size::0x0010
struct FAnimationErrorStats
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.RawCurveTracks
// Struct Size::0x0010
struct FRawCurveTracks
{
    TArray<FFloatCurve>                           FloatCurves;                                                  // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimCurveBase
// Struct Size::0x0020
struct FAnimCurveBase
{
    FName                                         LastObservedName;                                             // 0x0000(0x000C)
    FSmartName                                    Name;                                                         // 0x000C(0x0010)
    int32_t                                       CurveTypeFlags;                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.SmartName
// Struct Size::0x0010
struct FSmartName
{
    FName                                         DisplayName;                                                  // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Engine.FloatCurve
// Struct Size::0x00A0
struct FFloatCurve : public FAnimCurveBase
{
    FRichCurve                                    FloatCurve;                                                   // 0x0020(0x0080)
};


// ScriptStruct  Engine.TransformCurve
// Struct Size::0x0500
struct FTransformCurve : public FAnimCurveBase
{
    FVectorCurve                                  TranslationCurve;                                             // 0x0020(0x01A0)
    FVectorCurve                                  RotationCurve;                                                // 0x01C0(0x01A0)
    FVectorCurve                                  ScaleCurve;                                                   // 0x0360(0x01A0)
};


// ScriptStruct  Engine.VectorCurve
// Struct Size::0x01A0
struct FVectorCurve : public FAnimCurveBase
{
    FRichCurve                                    FloatCurves;                                                  // 0x0020(0x0080)
    char                                          pa_00A0[0x0100]                                               // 0x00A0(0x0100)
};


// ScriptStruct  Engine.SlotEvaluationPose
// Struct Size::0x00E0
struct FSlotEvaluationPose
{
    enum class EAdditiveAnimationType             AdditiveType;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Weight;                                                       // 0x0004(0x0004)
    char                                          pa_0008[0x00D8]                                               // 0x0008(0x00D8)
};


// ScriptStruct  Engine.A2Pose
// Struct Size::0x0010
struct FA2Pose
{
    TArray<FTransform>                            Bones;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Engine.A2CSPose
// Struct Size::0x0028
struct FA2CSPose : public FA2Pose
{
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
    TArray<char>                                  ComponentSpaceFlags;                                          // 0x0018(0x0010)
};


// ScriptStruct  Engine.QueuedDrawDebugItem
// Struct Size::0x0068
struct FQueuedDrawDebugItem
{
    enum class EDrawDebugItemType                 ItemType;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       StartLoc;                                                     // 0x0004(0x000C)
    FVector                                       EndLoc;                                                       // 0x0010(0x000C)
    FVector                                       Center;                                                       // 0x001C(0x000C)
    FRotator                                      Rotation;                                                     // 0x0028(0x000C)
    float                                         Radius;                                                       // 0x0034(0x0004)
    float                                         Size;                                                         // 0x0038(0x0004)
    int32_t                                       Segments;                                                     // 0x003C(0x0004)
    FColor                                        Color;                                                        // 0x0040(0x0004)
    bool                                          bPersistentLines;                                             // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    float                                         LifeTime;                                                     // 0x0048(0x0004)
    float                                         Thickness;                                                    // 0x004C(0x0004)
    FString                                       Message;                                                      // 0x0050(0x0010)
    FVector2D                                     TextScale;                                                    // 0x0060(0x0008)
};


// ScriptStruct  Engine.AnimInstanceBlendSpaces
// Struct Size::0x0058
struct FAnimInstanceBlendSpaces
{
    int32_t                                       AnimInstanceNameHash;                                         // 0x0000(0x0004)
    int32_t                                       LastUpdateFrame;                                              // 0x0004(0x0004)
    TMap<int32_t,FAnimBlendSpaceInfo>             BlendSpaces;                                                  // 0x0008(0x0050)
};


// ScriptStruct  Engine.AnimInstanceSubsystemData
// Struct Size::0x0001
struct FAnimInstanceSubsystemData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.AnimLinkableElement
// Struct Size::0x0030
struct FAnimLinkableElement
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FAnimMontage*                                 LinkedMontage;                                                // 0x0008(0x0008)
    int32_t                                       SlotIndex;                                                    // 0x0010(0x0004)
    int32_t                                       SegmentIndex;                                                 // 0x0014(0x0004)
    enum class EAnimLinkMethod                    LinkMethod;                                                   // 0x0018(0x0001)
    enum class EAnimLinkMethod                    CachedLinkMethod;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         SegmentBeginTime;                                             // 0x001C(0x0004)
    float                                         SegmentLength;                                                // 0x0020(0x0004)
    float                                         LinkValue;                                                    // 0x0024(0x0004)
    FAnimSequenceBase*                            LinkedSequence;                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.AnimMontageInstance
// Struct Size::0x01B8
struct FAnimMontageInstance
{
    FAnimMontage*                                 Montage;                                                      // 0x0000(0x0008)
    char                                          pa_0008[0x0020]                                               // 0x0008(0x0020)
    bool                                          bPlaying;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         DefaultBlendTimeMultiplier;                                   // 0x002C(0x0004)
    char                                          pa_0030[0x00B8]                                               // 0x0030(0x00B8)
    TArray<int32_t>                               NextSections;                                                 // 0x00E8(0x0010)
    TArray<int32_t>                               PrevSections;                                                 // 0x00F8(0x0010)
    char                                          pa_0108[0x0010]                                               // 0x0108(0x0010)
    TArray<FAnimNotifyEvent>                      ActiveStateBranchingPoints;                                   // 0x0118(0x0010)
    float                                         Position;                                                     // 0x0128(0x0004)
    float                                         PlayRate;                                                     // 0x012C(0x0004)
    FAlphaBlend                                   Blend;                                                        // 0x0130(0x0030)
    char                                          pa_0160[0x0030]                                               // 0x0160(0x0030)
    int32_t                                       DisableRootMotionCount;                                       // 0x0190(0x0004)
    char                                          pa_0194[0x0024]                                               // 0x0194(0x0024)
};


// ScriptStruct  Engine.AnimNotifyEvent
// Struct Size::0x00C8
struct FAnimNotifyEvent : public FAnimLinkableElement
{
    float                                         DisplayTime;                                                  // 0x0030(0x0004)
    float                                         TriggerTimeOffset;                                            // 0x0034(0x0004)
    float                                         EndTriggerTimeOffset;                                         // 0x0038(0x0004)
    float                                         TriggerWeightThreshold;                                       // 0x003C(0x0004)
    FName                                         NotifyName;                                                   // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FAnimNotify*                                  Notify;                                                       // 0x0050(0x0008)
    FAnimNotifyState*                             NotifyStateClass;                                             // 0x0058(0x0008)
    float                                         Duration;                                                     // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FAnimLinkableElement                          EndLink;                                                      // 0x0068(0x0030)
    bool                                          bConvertedFromBranchingPoint;                                 // 0x0098(0x0001)
    enum class EMontageNotifyTickType             MontageTickType;                                              // 0x0099(0x0001)
    char                                          pa_009A[0x0002]                                               // 0x009A(0x0002)
    float                                         NotifyTriggerChance;                                          // 0x009C(0x0004)
    enum class ENotifyFilterType                  NotifyFilterType;                                             // 0x00A0(0x0001)
    char                                          pa_00A1[0x0003]                                               // 0x00A1(0x0003)
    int32_t                                       NotifyFilterLOD;                                              // 0x00A4(0x0004)
    bool                                          bTriggerOnDedicatedServer;                                    // 0x00A8(0x0001)
    bool                                          bTriggerOnFollower;                                           // 0x00A9(0x0001)
    char                                          pa_00AA[0x0002]                                               // 0x00AA(0x0002)
    int32_t                                       TrackIndex;                                                   // 0x00AC(0x0004)
    char                                          pa_00B0[0x0018]                                               // 0x00B0(0x0018)
};


// ScriptStruct  Engine.BranchingPointMarker
// Struct Size::0x000C
struct FBranchingPointMarker
{
    int32_t                                       NotifyIndex;                                                  // 0x0000(0x0004)
    float                                         TriggerTime;                                                  // 0x0004(0x0004)
    enum class EAnimNotifyEventType               NotifyEventType;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.BranchingPoint
// Struct Size::0x0048
struct FBranchingPoint : public FAnimLinkableElement
{
    FName                                         EventName;                                                    // 0x0030(0x000C)
    float                                         DisplayTime;                                                  // 0x003C(0x0004)
    float                                         TriggerTimeOffset;                                            // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Engine.SlotAnimationTrack
// Struct Size::0x0020
struct FSlotAnimationTrack
{
    FName                                         SlotName;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FAnimTrack                                    AnimTrack;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Engine.CompositeSection
// Struct Size::0x0060
struct FCompositeSection : public FAnimLinkableElement
{
    FName                                         SectionName;                                                  // 0x0030(0x000C)
    float                                         StartTime;                                                    // 0x003C(0x0004)
    FName                                         NextSectionName;                                              // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<FAnimMetaData*>                        MetaData;                                                     // 0x0050(0x0010)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x00D8
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Base;                                                         // 0x0010(0x0010)
    FPoseLink                                     Additive;                                                     // 0x0020(0x0010)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         Alpha;                                                        // 0x0034(0x0004)
    char                                          bAlphaBoolEnabled;                                            // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0040(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0088(0x000C)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0094(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x009C(0x0030)
    int32_t                                       LODThreshold;                                                 // 0x00CC(0x0004)
    char                                          pa_00D0[0x0008]                                               // 0x00D0(0x0008)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0070
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Source;                                                       // 0x0010(0x0010)
    char                                          pa_0020[0x0050]                                               // 0x0020(0x0050)
};


// ScriptStruct  Engine.InertializationPoseDiff
// Struct Size::0x0028
struct FInertializationPoseDiff
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  Engine.InertializationCurveDiff
// Struct Size::0x0008
struct FInertializationCurveDiff
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.InertializationBoneDiff
// Struct Size::0x003C
struct FInertializationBoneDiff
{
    char                                          pa_0000[0x003C]                                               // 0x0000(0x003C)
};


// ScriptStruct  Engine.InertializationPose
// Struct Size::0x00A0
struct FInertializationPose
{
    char                                          pa_0000[0x00A0]                                               // 0x0000(0x00A0)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x00A8
struct FAnimNode : public FAnimNode
{
    TArray<FPoseLink>                             InputPoses;                                                   // 0x0058(0x0010)
    TArray<FName>                                 InputPoseNames;                                               // 0x0068(0x0010)
    FAnimInstance*                                InstanceClass;                                                // 0x0078(0x0008)
    FName                                         Tag;                                                          // 0x0080(0x000C)
    char                                          pa_008C[0x0018]                                               // 0x008C(0x0018)
    char                                          bReceiveNotifiesFromLinkedInstances;                          // 0x00A4(0x0001)
    char                                          bPropagateNotifiesToLinkedInstances;                          // 0x00A4(0x0001)
    char                                          pa_00A5[0x0003]                                               // 0x00A5(0x0003)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x00C0
struct FAnimNode : public FAnimNode
{
    FAnimLayerInterface*                          Interface;                                                    // 0x00A8(0x0008)
    FName                                         Layer;                                                        // 0x00B0(0x000C)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0120
struct FAnimNode : public FAnimNode
{
    FName                                         Name;                                                         // 0x0010(0x000C)
    FName                                         Graph;                                                        // 0x001C(0x000C)
    FPoseLink                                     InputPose;                                                    // 0x0028(0x0010)
    char                                          pa_0038[0x00E8]                                               // 0x0038(0x00E8)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0158
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Pose;                                                         // 0x0010(0x0010)
    FName                                         CachePoseName;                                                // 0x0020(0x000C)
    char                                          pa_002C[0x012C]                                               // 0x002C(0x012C)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0080
struct FAnimNode : public FAnimNode
{
    FAnimSequenceBase*                            Sequence;                                                     // 0x0038(0x0008)
    float                                         PlayRateBasis;                                                // 0x0040(0x0004)
    float                                         PlayRate;                                                     // 0x0044(0x0004)
    FInputScaleBiasClamp                          PlayRateScaleBiasClamp;                                       // 0x0048(0x0030)
    float                                         StartPosition;                                                // 0x0078(0x0004)
    bool                                          bLoopAnimation;                                               // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x00E8
struct FAnimNode : public FAnimNode
{
    int32_t                                       StateMachineIndexInClass;                                     // 0x0010(0x0004)
    int32_t                                       MaxTransitionsPerFrame;                                       // 0x0014(0x0004)
    bool                                          bSkipFirstUpdateTransition;                                   // 0x0018(0x0001)
    bool                                          bReinitializeOnBecomingRelevant;                              // 0x0019(0x0001)
    char                                          pa_001A[0x00CE]                                               // 0x001A(0x00CE)
};


// ScriptStruct  Engine.AnimationPotentialTransition
// Struct Size::0x0030
struct FAnimationPotentialTransition
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  Engine.AnimationActiveTransitionEntry
// Struct Size::0x00C8
struct FAnimationActiveTransitionEntry
{
    char                                          pa_0000[0x00B8]                                               // 0x0000(0x00B8)
    FBlendProfile*                                BlendProfile;                                                 // 0x00B8(0x0008)
    char                                          pa_00C0[0x0008]                                               // 0x00C0(0x0008)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x00F8
struct FAnimNode : public FAnimNode
{
    char                                          pa_0010[0x00D8]                                               // 0x0010(0x00D8)
    int32_t                                       FramesToCachePose;                                            // 0x00E8(0x0004)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
    enum class EEvaluatorDataSource               DataSource;                                                   // 0x00F0(0x0001)
    enum class EEvaluatorMode                     EvaluatorMode;                                                // 0x00F1(0x0001)
    char                                          pa_00F2[0x0006]                                               // 0x00F2(0x0006)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0028
struct FAnimNode : public FAnimNode
{
    bool                                          bCanEnterTransition;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0017]                                               // 0x0011(0x0017)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0030
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     LinkToCachingNode;                                            // 0x0010(0x0010)
    FName                                         CachePoseName;                                                // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.ExposedValueHandler
// Struct Size::0x0058
struct FExposedValueHandler
{
    FName                                         BoundFunction;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FExposedValueCopyRecord>               CopyRecords;                                                  // 0x0010(0x0010)
    FFunction*                                    Function;                                                     // 0x0020(0x0008)
    ValueHandlerNodeProperty                      ValueHandlerNodeProperty;                                     // 0x0028(0x0020)
    char                                          pa_0048[0x0010]                                               // 0x0048(0x0010)
};


// ScriptStruct  Engine.ExposedValueCopyRecord
// Struct Size::0x0008
struct FExposedValueCopyRecord
{
    int32_t                                       CopyIndex;                                                    // 0x0000(0x0004)
    enum class EPostCopyOperation                 PostCopyOperation;                                            // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0020
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     LocalPose;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0020
struct FAnimNode : public FAnimNode
{
    FComponentSpacePoseLink                       ComponentPose;                                                // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimNotifyQueue
// Struct Size::0x0080
struct FAnimNotifyQueue
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    TArray<FAnimNotifyEventReference>             AnimNotifies;                                                 // 0x0020(0x0010)
    TMap<FName,FAnimNotifyArray>                  UnfilteredMontageAnimNotifies;                                // 0x0030(0x0050)
};


// ScriptStruct  Engine.AnimNotifyArray
// Struct Size::0x0010
struct FAnimNotifyArray
{
    TArray<FAnimNotifyEventReference>             Notifies;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimNotifyEventReference
// Struct Size::0x0010
struct FAnimNotifyEventReference
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UObject*                                      NotifySource;                                                 // 0x0008(0x0008)
};


// ScriptStruct  Engine.CompressedTrack
// Struct Size::0x0038
struct FCompressedTrack
{
    TArray<char>                                  ByteStream;                                                   // 0x0000(0x0010)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
    float                                         Mins;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0008]                                               // 0x0024(0x0008)
    float                                         Ranges;                                                       // 0x002C(0x0004)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  Engine.CurveTrack
// Struct Size::0x0020
struct FCurveTrack
{
    FName                                         CurveName;                                                    // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<float>                                 CurveWeights;                                                 // 0x0010(0x0010)
};


// ScriptStruct  Engine.ScaleTrack
// Struct Size::0x0020
struct FScaleTrack
{
    TArray<FVector>                               ScaleKeys;                                                    // 0x0000(0x0010)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.RotationTrack
// Struct Size::0x0020
struct FRotationTrack
{
    TArray<FQuat>                                 RotKeys;                                                      // 0x0000(0x0010)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.TranslationTrack
// Struct Size::0x0020
struct FTranslationTrack
{
    TArray<FVector>                               PosKeys;                                                      // 0x0000(0x0010)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimSequenceTrackContainer
// Struct Size::0x0020
struct FAnimSequenceTrackContainer
{
    TArray<FRawAnimSequenceTrack>                 AnimationTracks;                                              // 0x0000(0x0010)
    TArray<FName>                                 TrackNames;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Engine.RawAnimSequenceTrack
// Struct Size::0x0030
struct FRawAnimSequenceTrack
{
    TArray<FVector>                               PosKeys;                                                      // 0x0000(0x0010)
    TArray<FQuat>                                 RotKeys;                                                      // 0x0010(0x0010)
    TArray<FVector>                               ScaleKeys;                                                    // 0x0020(0x0010)
};


// ScriptStruct  Engine.AnimSetMeshLinkup
// Struct Size::0x0010
struct FAnimSetMeshLinkup
{
    TArray<int32_t>                               BoneToTrackTable;                                             // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimSingleNodeInstanceProxy
// Struct Size::0x08F0
struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_07A0[0x0150]                                               // 0x07A0(0x0150)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0038
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     SourcePose;                                                   // 0x0010(0x0010)
    char                                          pa_0020[0x0018]                                               // 0x0020(0x0018)
};


// ScriptStruct  Engine.BakedAnimationStateMachine
// Struct Size::0x0030
struct FBakedAnimationStateMachine
{
    FName                                         MachineName;                                                  // 0x0000(0x000C)
    int32_t                                       InitialState;                                                 // 0x000C(0x0004)
    TArray<FBakedAnimationState>                  States;                                                       // 0x0010(0x0010)
    TArray<FAnimationTransitionBetweenStates>     Transitions;                                                  // 0x0020(0x0010)
};


// ScriptStruct  Engine.AnimationStateBase
// Struct Size::0x000C
struct FAnimationStateBase
{
    FName                                         StateName;                                                    // 0x0000(0x000C)
};


// ScriptStruct  Engine.AnimationTransitionBetweenStates
// Struct Size::0x0040
struct FAnimationTransitionBetweenStates : public FAnimationStateBase
{
    int32_t                                       PreviousState;                                                // 0x000C(0x0004)
    int32_t                                       NextState;                                                    // 0x0010(0x0004)
    float                                         CrossfadeDuration;                                            // 0x0014(0x0004)
    int32_t                                       StartNotify;                                                  // 0x0018(0x0004)
    int32_t                                       EndNotify;                                                    // 0x001C(0x0004)
    int32_t                                       InterruptNotify;                                              // 0x0020(0x0004)
    enum class EAlphaBlendOption                  BlendMode;                                                    // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FCurveFloat*                                  CustomCurve;                                                  // 0x0028(0x0008)
    FBlendProfile*                                BlendProfile;                                                 // 0x0030(0x0008)
    enum class ETransitionLogicType               LogicType;                                                    // 0x0038(0x0001)
    bool                                          bTransitionDisabled;                                          // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
};


// ScriptStruct  Engine.BakedAnimationState
// Struct Size::0x0060
struct FBakedAnimationState
{
    FName                                         StateName;                                                    // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FBakedStateExitTransition>             Transitions;                                                  // 0x0010(0x0010)
    int32_t                                       StateRootNodeIndex;                                           // 0x0020(0x0004)
    int32_t                                       StartNotify;                                                  // 0x0024(0x0004)
    int32_t                                       EndNotify;                                                    // 0x0028(0x0004)
    int32_t                                       FullyBlendedNotify;                                           // 0x002C(0x0004)
    bool                                          bResetStateOnEnter;                                           // 0x0030(0x0001)
    bool                                          bIsAConduit;                                                  // 0x0031(0x0001)
    bool                                          bAnimStateDisabled;                                           // 0x0032(0x0001)
    char                                          pa_0033[0x0001]                                               // 0x0033(0x0001)
    int32_t                                       EntryRuleNodeIndex;                                           // 0x0034(0x0004)
    TArray<int32_t>                               PlayerNodeIndices;                                            // 0x0038(0x0010)
    TArray<int32_t>                               LayerNodeIndices;                                             // 0x0048(0x0010)
    bool                                          bAlwaysResetOnEntry;                                          // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
};


// ScriptStruct  Engine.BakedStateExitTransition
// Struct Size::0x0020
struct FBakedStateExitTransition
{
    int32_t                                       CanTakeDelegateIndex;                                         // 0x0000(0x0004)
    int32_t                                       CustomResultNodeIndex;                                        // 0x0004(0x0004)
    int32_t                                       TransitionIndex;                                              // 0x0008(0x0004)
    bool                                          bDesiredTransitionReturnValue;                                // 0x000C(0x0001)
    bool                                          bAutomaticRemainingTimeRule;                                  // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    TArray<int32_t>                               PoseEvaluatorLinks;                                           // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimationState
// Struct Size::0x0030
struct FAnimationState : public FAnimationStateBase
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FAnimationTransitionRule>              Transitions;                                                  // 0x0010(0x0010)
    int32_t                                       StateRootNodeIndex;                                           // 0x0020(0x0004)
    int32_t                                       StartNotify;                                                  // 0x0024(0x0004)
    int32_t                                       EndNotify;                                                    // 0x0028(0x0004)
    int32_t                                       FullyBlendedNotify;                                           // 0x002C(0x0004)
};


// ScriptStruct  Engine.AnimationTransitionRule
// Struct Size::0x0014
struct FAnimationTransitionRule
{
    FName                                         RuleToExecute;                                                // 0x0000(0x000C)
    bool                                          TransitionReturnVal;                                          // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       TransitionIndex;                                              // 0x0010(0x0004)
};


// ScriptStruct  Engine.TrackToSkeletonMap
// Struct Size::0x0004
struct FTrackToSkeletonMap
{
    int32_t                                       BoneTreeIndex;                                                // 0x0000(0x0004)
};


// ScriptStruct  Engine.MarkerSyncData
// Struct Size::0x0020
struct FMarkerSyncData
{
    TArray<FAnimSyncMarker>                       AuthoredSyncMarkers;                                          // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimSyncMarker
// Struct Size::0x0010
struct FAnimSyncMarker
{
    FName                                         MarkerName;                                                   // 0x0000(0x000C)
    float                                         Time;                                                         // 0x000C(0x0004)
};


// ScriptStruct  Engine.AnimNotifyTrack
// Struct Size::0x0040
struct FAnimNotifyTrack
{
    FName                                         TrackName;                                                    // 0x0000(0x000C)
    FLinearColor                                  TrackColor;                                                   // 0x000C(0x0010)
    char                                          pa_001C[0x0024]                                               // 0x001C(0x0024)
};


// ScriptStruct  Engine.PerBoneBlendWeights
// Struct Size::0x0010
struct FPerBoneBlendWeights
{
    TArray<FPerBoneBlendWeight>                   BoneBlendWeights;                                             // 0x0000(0x0010)
};


// ScriptStruct  Engine.AssetImportInfo
// Struct Size::0x0001
struct FAssetImportInfo
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.PrimaryAssetRulesCustomOverride
// Struct Size::0x0048
struct FPrimaryAssetRulesCustomOverride
{
    FPrimaryAssetType                             PrimaryAssetType;                                             // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FDirectoryPath                                FilterDirectory;                                              // 0x0010(0x0010)
    FString                                       FilterString;                                                 // 0x0020(0x0010)
    FPrimaryAssetRules                            Rules;                                                        // 0x0030(0x0014)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Engine.PrimaryAssetRules
// Struct Size::0x0014
struct FPrimaryAssetRules
{
    int32_t                                       Priority;                                                     // 0x0000(0x0004)
    int32_t                                       ChunkId;                                                      // 0x0004(0x0004)
    bool                                          bApplyRecursively;                                            // 0x0008(0x0001)
    enum class EPrimaryAssetCookRule              CookRule;                                                     // 0x0009(0x0001)
    bool                                          bCookForMobile;                                               // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
    uint32_t                                      CookPlatforms;                                                // 0x000C(0x0004)
    enum class EPrimaryAssetCookCategory          CookCategory;                                                 // 0x0010(0x0002)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
};


// ScriptStruct  Engine.PrimaryAssetRulesOverride
// Struct Size::0x002C
struct FPrimaryAssetRulesOverride
{
    FPrimaryAssetId                               PrimaryAssetId;                                               // 0x0000(0x0018)
    FPrimaryAssetRules                            Rules;                                                        // 0x0018(0x0014)
};


// ScriptStruct  Engine.AssetManagerRedirect
// Struct Size::0x0020
struct FAssetManagerRedirect
{
    FString                                       Old;                                                          // 0x0000(0x0010)
    FString                                       New;                                                          // 0x0010(0x0010)
};


// ScriptStruct  Engine.AssetManagerSearchRules
// Struct Size::0x0050
struct FAssetManagerSearchRules
{
    TArray<FString>                               AssetScanPaths;                                               // 0x0000(0x0010)
    TArray<FString>                               IncludePatterns;                                              // 0x0010(0x0010)
    TArray<FString>                               ExcludePatterns;                                              // 0x0020(0x0010)
    UObject*                                      AssetBaseClass;                                               // 0x0030(0x0008)
    bool                                          bHasBlueprintClasses;                                         // 0x0038(0x0001)
    bool                                          bForceSynchronousScan;                                        // 0x0039(0x0001)
    bool                                          bSkipVirtualPathExpansion;                                    // 0x003A(0x0001)
    bool                                          bSkipManagerIncludeCheck;                                     // 0x003B(0x0001)
    char                                          pa_003C[0x0014]                                               // 0x003C(0x0014)
};


// ScriptStruct  Engine.PrimaryAssetTypeInfo
// Struct Size::0x0088
struct FPrimaryAssetTypeInfo
{
    FName                                         PrimaryAssetType;                                             // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TSoftClassPtr<UObject>                        AssetBaseClass;                                               // 0x0010(0x0030)
    UObject*                                      AssetBaseClassLoaded;                                         // 0x0040(0x0008)
    bool                                          bHasBlueprintClasses;                                         // 0x0048(0x0001)
    bool                                          bIsEditorOnly;                                                // 0x0049(0x0001)
    char                                          pa_004A[0x0006]                                               // 0x004A(0x0006)
    TArray<FDirectoryPath>                        Directories;                                                  // 0x0050(0x0010)
    TArray<FSoftObjectPath>                       SpecificAssets;                                               // 0x0060(0x0010)
    TArray<FString>                               AssetScanPaths;                                               // 0x0070(0x0010)
    bool                                          bIsDynamicAsset;                                              // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    int32_t                                       NumberOfAssets;                                               // 0x0084(0x0004)
};


// ScriptStruct  Engine.AssetMapping
// Struct Size::0x0010
struct FAssetMapping
{
    FAnimationAsset*                              SourceAsset;                                                  // 0x0000(0x0008)
    FAnimationAsset*                              TargetAsset;                                                  // 0x0008(0x0008)
};


// ScriptStruct  Engine.AtmospherePrecomputeInstanceData
// Struct Size::0x0160
struct FAtmospherePrecomputeInstanceData : public FSceneComponentInstanceData
{
    char                                          pa_00B8[0x00A8]                                               // 0x00B8(0x00A8)
};


// ScriptStruct  Engine.AtmospherePrecomputeParameters
// Struct Size::0x002C
struct FAtmospherePrecomputeParameters
{
    float                                         DensityHeight;                                                // 0x0000(0x0004)
    float                                         DecayHeight;                                                  // 0x0004(0x0004)
    int32_t                                       MaxScatteringOrder;                                           // 0x0008(0x0004)
    int32_t                                       TransmittanceTexWidth;                                        // 0x000C(0x0004)
    int32_t                                       TransmittanceTexHeight;                                       // 0x0010(0x0004)
    int32_t                                       IrradianceTexWidth;                                           // 0x0014(0x0004)
    int32_t                                       IrradianceTexHeight;                                          // 0x0018(0x0004)
    int32_t                                       InscatterAltitudeSampleNum;                                   // 0x001C(0x0004)
    int32_t                                       InscatterMuNum;                                               // 0x0020(0x0004)
    int32_t                                       InscatterMuSNum;                                              // 0x0024(0x0004)
    int32_t                                       InscatterNuNum;                                               // 0x0028(0x0004)
};


// ScriptStruct  Engine.BaseAttenuationSettings
// Struct Size::0x00B0
struct FBaseAttenuationSettings
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    enum class EAttenuationDistanceModel          DistanceAlgorithm;                                            // 0x0008(0x0001)
    enum class EAttenuationShape                  AttenuationShape;                                             // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    float                                         dBAttenuationAtMax;                                           // 0x000C(0x0004)
    enum class ENaturalSoundFalloffMode           FalloffMode;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FVector                                       AttenuationShapeExtents;                                      // 0x0014(0x000C)
    float                                         ConeOffset;                                                   // 0x0020(0x0004)
    float                                         FalloffDistance;                                              // 0x0024(0x0004)
    FRuntimeFloatCurve                            CustomAttenuationCurve;                                       // 0x0028(0x0088)
};


// ScriptStruct  Engine.AudioComponentParam
// Struct Size::0x0020
struct FAudioComponentParam
{
    FName                                         ParamName;                                                    // 0x0000(0x000C)
    float                                         FloatParam;                                                   // 0x000C(0x0004)
    bool                                          BoolParam;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       IntParam;                                                     // 0x0014(0x0004)
    FSoundWave*                                   SoundWaveParam;                                               // 0x0018(0x0008)
};


// ScriptStruct  Engine.AddActiveSoundRecord
// Struct Size::0x0010
struct FAddActiveSoundRecord
{
    FString                                       SoundFile;                                                    // 0x0000(0x0010)
};


// ScriptStruct  Engine.AudioEffectParameters
// Struct Size::0x0008
struct FAudioEffectParameters
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.AudioReverbEffect
// Struct Size::0x0048
struct FAudioReverbEffect : public FAudioEffectParameters
{
    char                                          pa_0008[0x0040]                                               // 0x0008(0x0040)
};


// ScriptStruct  Engine.DefaultAudioBusSettings
// Struct Size::0x0020
struct FDefaultAudioBusSettings
{
    FSoftObjectPath                               AudioBus;                                                     // 0x0000(0x0020)
};


// ScriptStruct  Engine.SoundDebugEntry
// Struct Size::0x0030
struct FSoundDebugEntry
{
    FName                                         DebugName;                                                    // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FSoftObjectPath                               Sound;                                                        // 0x0010(0x0020)
};


// ScriptStruct  Engine.AudioQualitySettings
// Struct Size::0x0020
struct FAudioQualitySettings
{
    FText                                         DisplayName;                                                  // 0x0000(0x0018)
    int32_t                                       MaxChannels;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.InteriorSettings
// Struct Size::0x0024
struct FInteriorSettings
{
    bool                                          bIsWorldSettings;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ExteriorVolume;                                               // 0x0004(0x0004)
    float                                         ExteriorTime;                                                 // 0x0008(0x0004)
    float                                         ExteriorLPF;                                                  // 0x000C(0x0004)
    float                                         ExteriorLPFTime;                                              // 0x0010(0x0004)
    float                                         InteriorVolume;                                               // 0x0014(0x0004)
    float                                         InteriorTime;                                                 // 0x0018(0x0004)
    float                                         InteriorLPF;                                                  // 0x001C(0x0004)
    float                                         InteriorLPFTime;                                              // 0x0020(0x0004)
};


// ScriptStruct  Engine.AudioVolumeSubmixOverrideSettings
// Struct Size::0x0020
struct FAudioVolumeSubmixOverrideSettings
{
    FSoundSubmix*                                 Submix;                                                       // 0x0000(0x0008)
    TArray<FSoundEffectSubmixPreset*>             SubmixEffectChain;                                            // 0x0008(0x0010)
    float                                         CrossfadeTime;                                                // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.AudioVolumeSubmixSendSettings
// Struct Size::0x0018
struct FAudioVolumeSubmixSendSettings
{
    enum class EAudioVolumeLocationState          ListenerLocationState;                                        // 0x0000(0x0001)
    enum class EAudioVolumeLocationState          SourceLocationState;                                          // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<FSoundSubmixSendInfo>                  SubmixSends;                                                  // 0x0008(0x0010)
};


// ScriptStruct  Engine.SoundSubmixSendInfo
// Struct Size::0x00B0
struct FSoundSubmixSendInfo
{
    enum class ESendLevelControlMethod            SendLevelControlMethod;                                       // 0x0000(0x0001)
    enum class ESubmixSendStage                   SendStage;                                                    // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FSoundSubmixBase*                             SoundSubmix;                                                  // 0x0008(0x0008)
    float                                         SendLevel;                                                    // 0x0010(0x0004)
    float                                         MinSendLevel;                                                 // 0x0014(0x0004)
    float                                         MaxSendLevel;                                                 // 0x0018(0x0004)
    float                                         MinSendDistance;                                              // 0x001C(0x0004)
    float                                         MaxSendDistance;                                              // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FRuntimeFloatCurve                            CustomSendLevelCurve;                                         // 0x0028(0x0088)
};


// ScriptStruct  Engine.LaunchOnTestSettings
// Struct Size::0x0020
struct FLaunchOnTestSettings
{
    FFilePath                                     LaunchOnTestmap;                                              // 0x0000(0x0010)
    FString                                       DeviceID;                                                     // 0x0010(0x0010)
};


// ScriptStruct  Engine.EditorMapPerformanceTestDefinition
// Struct Size::0x0028
struct FEditorMapPerformanceTestDefinition
{
    FSoftObjectPath                               PerformanceTestmap;                                           // 0x0000(0x0020)
    int32_t                                       TestTimer;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.BuildPromotionTestSettings
// Struct Size::0x01F0
struct FBuildPromotionTestSettings
{
    FFilePath                                     DefaultStaticMeshAsset;                                       // 0x0000(0x0010)
    FBuildPromotionImportWorkflowSettings         ImportWorkflow;                                               // 0x0010(0x0150)
    FBuildPromotionOpenAssetSettings              OpenAssets;                                                   // 0x0160(0x0060)
    FBuildPromotionNewProjectSettings             NewProjectSettings;                                           // 0x01C0(0x0020)
    FFilePath                                     SourceControlMaterial;                                        // 0x01E0(0x0010)
};


// ScriptStruct  Engine.BuildPromotionNewProjectSettings
// Struct Size::0x0020
struct FBuildPromotionNewProjectSettings
{
    FDirectoryPath                                NewProjectFolderOverride;                                     // 0x0000(0x0010)
    FString                                       NewProjectNameOverride;                                       // 0x0010(0x0010)
};


// ScriptStruct  Engine.BuildPromotionOpenAssetSettings
// Struct Size::0x0060
struct FBuildPromotionOpenAssetSettings
{
    FFilePath                                     BlueprintAsset;                                               // 0x0000(0x0010)
    FFilePath                                     MaterialAsset;                                                // 0x0010(0x0010)
    FFilePath                                     ParticleSystemAsset;                                          // 0x0020(0x0010)
    FFilePath                                     SkeletalMeshAsset;                                            // 0x0030(0x0010)
    FFilePath                                     StaticMeshAsset;                                              // 0x0040(0x0010)
    FFilePath                                     TextureAsset;                                                 // 0x0050(0x0010)
};


// ScriptStruct  Engine.BuildPromotionImportWorkflowSettings
// Struct Size::0x0150
struct FBuildPromotionImportWorkflowSettings
{
    FEditorImportWorkflowDefinition               Diffuse;                                                      // 0x0000(0x0020)
    FEditorImportWorkflowDefinition               Normal;                                                       // 0x0020(0x0020)
    FEditorImportWorkflowDefinition               StaticMesh;                                                   // 0x0040(0x0020)
    FEditorImportWorkflowDefinition               ReimportStaticMesh;                                           // 0x0060(0x0020)
    FEditorImportWorkflowDefinition               BlendShapeMesh;                                               // 0x0080(0x0020)
    FEditorImportWorkflowDefinition               MorphMesh;                                                    // 0x00A0(0x0020)
    FEditorImportWorkflowDefinition               SkeletalMesh;                                                 // 0x00C0(0x0020)
    FEditorImportWorkflowDefinition               Animation;                                                    // 0x00E0(0x0020)
    FEditorImportWorkflowDefinition               Sound;                                                        // 0x0100(0x0020)
    FEditorImportWorkflowDefinition               SurroundSound;                                                // 0x0120(0x0020)
    TArray<FEditorImportWorkflowDefinition>       OtherAssetsToImport;                                          // 0x0140(0x0010)
};


// ScriptStruct  Engine.EditorImportWorkflowDefinition
// Struct Size::0x0020
struct FEditorImportWorkflowDefinition
{
    FFilePath                                     ImportFilePath;                                               // 0x0000(0x0010)
    TArray<FImportFactorySettingValues>           FactorySettings;                                              // 0x0010(0x0010)
};


// ScriptStruct  Engine.ImportFactorySettingValues
// Struct Size::0x0020
struct FImportFactorySettingValues
{
    FString                                       SettingName;                                                  // 0x0000(0x0010)
    FString                                       Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.BlueprintEditorPromotionSettings
// Struct Size::0x0030
struct FBlueprintEditorPromotionSettings
{
    FFilePath                                     FirstMeshPath;                                                // 0x0000(0x0010)
    FFilePath                                     SecondMeshPath;                                               // 0x0010(0x0010)
    FFilePath                                     DefaultParticleAsset;                                         // 0x0020(0x0010)
};


// ScriptStruct  Engine.ParticleEditorPromotionSettings
// Struct Size::0x0010
struct FParticleEditorPromotionSettings
{
    FFilePath                                     DefaultParticleAsset;                                         // 0x0000(0x0010)
};


// ScriptStruct  Engine.MaterialEditorPromotionSettings
// Struct Size::0x0030
struct FMaterialEditorPromotionSettings
{
    FFilePath                                     DefaultMaterialAsset;                                         // 0x0000(0x0010)
    FFilePath                                     DefaultDiffuseTexture;                                        // 0x0010(0x0010)
    FFilePath                                     DefaultNormalTexture;                                         // 0x0020(0x0010)
};


// ScriptStruct  Engine.EditorImportExportTestDefinition
// Struct Size::0x0038
struct FEditorImportExportTestDefinition
{
    FFilePath                                     ImportFilePath;                                               // 0x0000(0x0010)
    FString                                       ExportFileExtension;                                          // 0x0010(0x0010)
    bool                                          bSkipExport;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FImportFactorySettingValues>           FactorySettings;                                              // 0x0028(0x0010)
};


// ScriptStruct  Engine.ExternalToolDefinition
// Struct Size::0x0060
struct FExternalToolDefinition
{
    FString                                       ToolName;                                                     // 0x0000(0x0010)
    FFilePath                                     ExecutablePath;                                               // 0x0010(0x0010)
    FString                                       CommandLineOptions;                                           // 0x0020(0x0010)
    FDirectoryPath                                WorkingDirectory;                                             // 0x0030(0x0010)
    FString                                       ScriptExtension;                                              // 0x0040(0x0010)
    FDirectoryPath                                ScriptDirectory;                                              // 0x0050(0x0010)
};


// ScriptStruct  Engine.NavAvoidanceData
// Struct Size::0x003C
struct FNavAvoidanceData
{
    char                                          pa_0000[0x003C]                                               // 0x0000(0x003C)
};


// ScriptStruct  Engine.BandwidthTestGenerator
// Struct Size::0x0020
struct FBandwidthTestGenerator
{
    TArray<FBandwidthTestItem>                    ReplicatedBuffers;                                            // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.BandwidthTestItem
// Struct Size::0x0010
struct FBandwidthTestItem
{
    TArray<char>                                  Kilobyte;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Engine.BlendProfileBoneEntry
// Struct Size::0x0018
struct FBlendProfileBoneEntry
{
    FBoneReference                                BoneReference;                                                // 0x0000(0x0014)
    float                                         BlendScale;                                                   // 0x0014(0x0004)
};


// ScriptStruct  Engine.PerBoneInterpolation
// Struct Size::0x0018
struct FPerBoneInterpolation
{
    FBoneReference                                BoneReference;                                                // 0x0000(0x0014)
    float                                         InterpolationSpeedPerSec;                                     // 0x0014(0x0004)
};


// ScriptStruct  Engine.GridBlendSample
// Struct Size::0x001C
struct FGridBlendSample
{
    FEditorElement                                GridElement;                                                  // 0x0000(0x0018)
    float                                         BlendWeight;                                                  // 0x0018(0x0004)
};


// ScriptStruct  Engine.EditorElement
// Struct Size::0x0018
struct FEditorElement
{
    int32_t                                       Indices;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0008]                                               // 0x0004(0x0008)
    float                                         Weights;                                                      // 0x000C(0x0004)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.BlendSample
// Struct Size::0x0018
struct FBlendSample
{
    FAnimSequence*                                Animation;                                                    // 0x0000(0x0008)
    FVector                                       SampleValue;                                                  // 0x0008(0x000C)
    float                                         RateScale;                                                    // 0x0014(0x0004)
};


// ScriptStruct  Engine.BlendParameter
// Struct Size::0x0020
struct FBlendParameter
{
    FString                                       DisplayName;                                                  // 0x0000(0x0010)
    float                                         Min;                                                          // 0x0010(0x0004)
    float                                         Max;                                                          // 0x0014(0x0004)
    int32_t                                       GridNum;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.InterpolationParameter
// Struct Size::0x0008
struct FInterpolationParameter
{
    float                                         InterpolationTime;                                            // 0x0000(0x0004)
    enum class EFilterInterpolationType           InterpolationType;                                            // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.BPEditorBookmarkNode
// Struct Size::0x0038
struct FBPEditorBookmarkNode
{
    FGuid                                         NodeGuid;                                                     // 0x0000(0x0010)
    FGuid                                         ParentGuid;                                                   // 0x0010(0x0010)
    FText                                         DisplayName;                                                  // 0x0020(0x0018)
};


// ScriptStruct  Engine.EditedDocumentInfo
// Struct Size::0x0038
struct FEditedDocumentInfo
{
    FSoftObjectPath                               EditedObjectPath;                                             // 0x0000(0x0020)
    FVector2D                                     SavedViewOffset;                                              // 0x0020(0x0008)
    float                                         SavedZoomAmount;                                              // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    UObject*                                      EditedObject;                                                 // 0x0030(0x0008)
};


// ScriptStruct  Engine.BPInterfaceDescription
// Struct Size::0x0018
struct FBPInterfaceDescription
{
    FInterface*                                   Interface;                                                    // 0x0000(0x0008)
    TArray<FEdGraph*>                             Graphs;                                                       // 0x0008(0x0010)
};


// ScriptStruct  Engine.BPVariableDescription
// Struct Size::0x00F0
struct FBPVariableDescription
{
    FName                                         VarName;                                                      // 0x0000(0x000C)
    FGuid                                         VarGuid;                                                      // 0x000C(0x0010)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FEdGraphPinType                               VarType;                                                      // 0x0020(0x0070)
    FString                                       FriendlyName;                                                 // 0x0090(0x0010)
    FText                                         Category;                                                     // 0x00A0(0x0018)
    uint64_t                                      PropertyFlags;                                                // 0x00B8(0x0008)
    FName                                         RepNotifyFunc;                                                // 0x00C0(0x000C)
    enum class ELifetimeCondition                 ReplicationCondition;                                         // 0x00CC(0x0001)
    char                                          pa_00CD[0x0003]                                               // 0x00CD(0x0003)
    TArray<FBPVariableMetaDataEntry>              MetaDataArray;                                                // 0x00D0(0x0010)
    FString                                       DefaultValue;                                                 // 0x00E0(0x0010)
};


// ScriptStruct  Engine.BPVariableMetaDataEntry
// Struct Size::0x0020
struct FBPVariableMetaDataEntry
{
    FName                                         DataKey;                                                      // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       DataValue;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Engine.EdGraphPinType
// Struct Size::0x0070
struct FEdGraphPinType
{
    FName                                         PinCategory;                                                  // 0x0000(0x000C)
    FName                                         PinSubCategory;                                               // 0x000C(0x000C)
    TWeakObjectPtr<UObject>                       PinSubCategoryObject;                                         // 0x0018(0x0008)
    FSimpleMemberReference                        PinSubCategoryMemberReference;                                // 0x0020(0x0028)
    FEdGraphTerminalType                          PinValueType;                                                 // 0x0048(0x0024)
    enum class EPinContainerType                  ContainerType;                                                // 0x006C(0x0001)
    char                                          bIsArray;                                                     // 0x006D(0x0001)
    char                                          bIsReference;                                                 // 0x006D(0x0001)
    char                                          bIsConst;                                                     // 0x006D(0x0001)
    char                                          bIsWeakPointer;                                               // 0x006D(0x0001)
    char                                          bIsUObjectWrapper;                                            // 0x006D(0x0001)
    char                                          pa_006E[0x0002]                                               // 0x006E(0x0002)
};


// ScriptStruct  Engine.EdGraphTerminalType
// Struct Size::0x0024
struct FEdGraphTerminalType
{
    FName                                         TerminalCategory;                                             // 0x0000(0x000C)
    FName                                         TerminalSubCategory;                                          // 0x000C(0x000C)
    TWeakObjectPtr<UObject>                       TerminalSubCategoryObject;                                    // 0x0018(0x0008)
    bool                                          bTerminalIsConst;                                             // 0x0020(0x0001)
    bool                                          bTerminalIsWeakPointer;                                       // 0x0021(0x0001)
    bool                                          bTerminalIsUObjectWrapper;                                    // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
};


// ScriptStruct  Engine.BlueprintMacroCosmeticInfo
// Struct Size::0x0001
struct FBlueprintMacroCosmeticInfo
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.CompilerNativizationOptions
// Struct Size::0x0080
struct FCompilerNativizationOptions
{
    FName                                         PlatformName;                                                 // 0x0000(0x000C)
    bool                                          ServerOnlyPlatform;                                           // 0x000C(0x0001)
    bool                                          ClientOnlyPlatform;                                           // 0x000D(0x0001)
    bool                                          bExcludeMonolithicHeaders;                                    // 0x000E(0x0001)
    char                                          pa_000F[0x0001]                                               // 0x000F(0x0001)
    TArray<FName>                                 ExcludedModules;                                              // 0x0010(0x0010)
    TSet<FSoftObjectPath>                         ExcludedAssets;                                               // 0x0020(0x0050)
    TArray<FString>                               ExcludedFolderPaths;                                          // 0x0070(0x0010)
};


// ScriptStruct  Engine.BPComponentClassOverride
// Struct Size::0x0018
struct FBPComponentClassOverride
{
    FName                                         ComponentName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UObject*                                      ComponentClass;                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.BlueprintCookedComponentInstancingData
// Struct Size::0x0050
struct FBlueprintCookedComponentInstancingData
{
    TArray<FBlueprintComponentChangedPropertyInfo>ChangedPropertyList;                                          // 0x0000(0x0010)
    char                                          pa_0010[0x0019]                                               // 0x0010(0x0019)
    bool                                          bHasValidCookedData;                                          // 0x0029(0x0001)
    char                                          pa_002A[0x0026]                                               // 0x002A(0x0026)
};


// ScriptStruct  Engine.BlueprintComponentChangedPropertyInfo
// Struct Size::0x0018
struct FBlueprintComponentChangedPropertyInfo
{
    FName                                         PropertyName;                                                 // 0x0000(0x000C)
    int32_t                                       ArrayIndex;                                                   // 0x000C(0x0004)
    FStruct*                                      PropertyScope;                                                // 0x0010(0x0008)
};


// ScriptStruct  Engine.EventGraphFastCallPair
// Struct Size::0x0010
struct FEventGraphFastCallPair
{
    FFunction*                                    FunctionToPatch;                                              // 0x0000(0x0008)
    int32_t                                       EventGraphCallOffset;                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Engine.BlueprintDebugData
// Struct Size::0x0001
struct FBlueprintDebugData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.PointerToUberGraphFrame
// Struct Size::0x0008
struct FPointerToUberGraphFrame
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.DebuggingInfoForSingleFunction
// Struct Size::0x0190
struct FDebuggingInfoForSingleFunction
{
    char                                          pa_0000[0x0190]                                               // 0x0000(0x0190)
};


// ScriptStruct  Engine.NodeToCodeAssociation
// Struct Size::0x0014
struct FNodeToCodeAssociation
{
    char                                          pa_0000[0x0014]                                               // 0x0000(0x0014)
};


// ScriptStruct  Engine.AnimCurveType
// Struct Size::0x0002
struct FAnimCurveType
{
    char                                          pa_0000[0x0002]                                               // 0x0000(0x0002)
};


// ScriptStruct  Engine.BookmarkBaseJumpToSettings
// Struct Size::0x0001
struct FBookmarkBaseJumpToSettings
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.BookmarkJumpToSettings
// Struct Size::0x0001
struct FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
{
};


// ScriptStruct  Engine.Bookmark2DJumpToSettings
// Struct Size::0x0001
struct FBookmark2DJumpToSettings
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.GeomSelection
// Struct Size::0x000C
struct FGeomSelection
{
    int32_t                                       Type;                                                         // 0x0000(0x0004)
    int32_t                                       Index;                                                        // 0x0004(0x0004)
    int32_t                                       SelectionIndex;                                               // 0x0008(0x0004)
};


// ScriptStruct  Engine.BuilderPoly
// Struct Size::0x0028
struct FBuilderPoly
{
    TArray<int32_t>                               VertexIndices;                                                // 0x0000(0x0010)
    int32_t                                       Direction;                                                    // 0x0010(0x0004)
    FName                                         ItemName;                                                     // 0x0014(0x000C)
    int32_t                                       PolyFlags;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.CachedAnimTransitionData
// Struct Size::0x0030
struct FCachedAnimTransitionData
{
    FName                                         StateMachineName;                                             // 0x0000(0x000C)
    FName                                         FromStateName;                                                // 0x000C(0x000C)
    FName                                         ToStateName;                                                  // 0x0018(0x000C)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
};


// ScriptStruct  Engine.CachedAnimRelevancyData
// Struct Size::0x0024
struct FCachedAnimRelevancyData
{
    FName                                         StateMachineName;                                             // 0x0000(0x000C)
    FName                                         StateName;                                                    // 0x000C(0x000C)
    char                                          pa_0018[0x000C]                                               // 0x0018(0x000C)
};


// ScriptStruct  Engine.CachedAnimAssetPlayerData
// Struct Size::0x0020
struct FCachedAnimAssetPlayerData
{
    FName                                         StateMachineName;                                             // 0x0000(0x000C)
    FName                                         StateName;                                                    // 0x000C(0x000C)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
};


// ScriptStruct  Engine.CachedAnimStateArray
// Struct Size::0x0018
struct FCachedAnimStateArray
{
    TArray<FCachedAnimStateData>                  States;                                                       // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.CachedAnimStateData
// Struct Size::0x0024
struct FCachedAnimStateData
{
    FName                                         StateMachineName;                                             // 0x0000(0x000C)
    FName                                         StateName;                                                    // 0x000C(0x000C)
    char                                          pa_0018[0x000C]                                               // 0x0018(0x000C)
};


// ScriptStruct  Engine.ActiveCameraShakeInfo
// Struct Size::0x0018
struct FActiveCameraShakeInfo
{
    FCameraShakeBase*                             ShakeInstance;                                                // 0x0000(0x0008)
    TWeakObjectPtr<FCameraShakeSourceComponent>   ShakeSource;                                                  // 0x0008(0x0008)
    bool                                          bIsCustomInitialized;                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Engine.PooledCameraShakes
// Struct Size::0x0010
struct FPooledCameraShakes
{
    TArray<FCameraShakeBase*>                     PooledShakes;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Engine.CameraShakeInfo
// Struct Size::0x0010
struct FCameraShakeInfo
{
    FCameraShakeDuration                          Duration;                                                     // 0x0000(0x0008)
    float                                         BlendIn;                                                      // 0x0008(0x0004)
    float                                         BlendOut;                                                     // 0x000C(0x0004)
};


// ScriptStruct  Engine.CameraShakeDuration
// Struct Size::0x0008
struct FCameraShakeDuration
{
    float                                         Duration;                                                     // 0x0000(0x0004)
    enum class ECameraShakeDurationType           Type;                                                         // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.CameraShakeStopParams
// Struct Size::0x0001
struct FCameraShakeStopParams
{
    bool                                          bImmediately;                                                 // 0x0000(0x0001)
};


// ScriptStruct  Engine.CameraShakeUpdateResult
// Struct Size::0x0640
struct FCameraShakeUpdateResult
{
    char                                          pa_0000[0x0640]                                               // 0x0000(0x0640)
};


// ScriptStruct  Engine.CameraShakeScrubParams
// Struct Size::0x06B0
struct FCameraShakeScrubParams
{
    float                                         AbsoluteTime;                                                 // 0x0000(0x0004)
    float                                         ShakeScale;                                                   // 0x0004(0x0004)
    float                                         DynamicScale;                                                 // 0x0008(0x0004)
    float                                         BlendingWeight;                                               // 0x000C(0x0004)
    FMinimalViewInfo                              POV;                                                          // 0x0010(0x06A0)
};


// ScriptStruct  Engine.MinimalViewInfo
// Struct Size::0x06A0
struct FMinimalViewInfo
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
    float                                         FOV;                                                          // 0x0018(0x0004)
    float                                         DesiredFOV;                                                   // 0x001C(0x0004)
    float                                         OrthoWidth;                                                   // 0x0020(0x0004)
    float                                         OrthoNearClipPlane;                                           // 0x0024(0x0004)
    float                                         OrthoFarClipPlane;                                            // 0x0028(0x0004)
    float                                         AspectRatio;                                                  // 0x002C(0x0004)
    char                                          bConstrainAspectRatio;                                        // 0x0030(0x0001)
    char                                          bUseFieldOfViewForLOD;                                        // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    enum class ECameraProjectionMode              ProjectionMode;                                               // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    float                                         PostProcessBlendWeight;                                       // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FPostProcessSettings                          PostProcessSettings;                                          // 0x0040(0x0610)
    FVector2D                                     OffCenterProjectionOffset;                                    // 0x0650(0x0008)
    char                                          pa_0658[0x0048]                                               // 0x0658(0x0048)
};


// ScriptStruct  Engine.PostProcessSettings
// Struct Size::0x0610
struct FPostProcessSettings
{
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          pa_000F[0x0001]                                               // 0x000F(0x0001)
    char                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0015(0x0001)
    char                                          bOverride;                                                    // 0x0015(0x0001)
    char                                          bOverride;                                                    // 0x0015(0x0001)
    char                                          bOverride;                                                    // 0x0015(0x0001)
    char                                          bOverride;                                                    // 0x0015(0x0001)
    char                                          bOverride;                                                    // 0x0015(0x0001)
    char                                          bOverride;                                                    // 0x0015(0x0001)
    char                                          bOverride;                                                    // 0x0015(0x0001)
    char                                          bOverride;                                                    // 0x0016(0x0001)
    char                                          bOverride;                                                    // 0x0016(0x0001)
    char                                          bOverride;                                                    // 0x0016(0x0001)
    char                                          bOverride;                                                    // 0x0016(0x0001)
    char                                          bOverride;                                                    // 0x0016(0x0001)
    char                                          bOverride;                                                    // 0x0016(0x0001)
    char                                          bOverride;                                                    // 0x0016(0x0001)
    char                                          bOverride;                                                    // 0x0016(0x0001)
    char                                          bOverride;                                                    // 0x0017(0x0001)
    char                                          bOverride;                                                    // 0x0017(0x0001)
    char                                          bOverride;                                                    // 0x0017(0x0001)
    char                                          bOverride;                                                    // 0x0017(0x0001)
    char                                          bOverride;                                                    // 0x0017(0x0001)
    char                                          bOverride;                                                    // 0x0017(0x0001)
    char                                          bOverride;                                                    // 0x0017(0x0001)
    char                                          bOverride;                                                    // 0x0017(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    char                                          bMobileHQGaussian;                                            // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          bOverride;                                                    // 0x0025(0x0001)
    char                                          bOverride;                                                    // 0x0025(0x0001)
    char                                          bOverride;                                                    // 0x0025(0x0001)
    char                                          bOverride;                                                    // 0x0025(0x0001)
    char                                          bOverride;                                                    // 0x0025(0x0001)
    char                                          bOverride;                                                    // 0x0025(0x0001)
    char                                          bOverride;                                                    // 0x0025(0x0001)
    char                                          bOverride;                                                    // 0x0025(0x0001)
    char                                          bOverride;                                                    // 0x0026(0x0001)
    char                                          bOverride;                                                    // 0x0026(0x0001)
    char                                          bOverride;                                                    // 0x0026(0x0001)
    char                                          bOverride;                                                    // 0x0026(0x0001)
    char                                          bOverride;                                                    // 0x0026(0x0001)
    char                                          bOverride;                                                    // 0x0026(0x0001)
    char                                          bOverride;                                                    // 0x0026(0x0001)
    char                                          bOverride;                                                    // 0x0026(0x0001)
    char                                          bOverride;                                                    // 0x0027(0x0001)
    char                                          bOverride;                                                    // 0x0027(0x0001)
    char                                          bOverride;                                                    // 0x0027(0x0001)
    char                                          bOverride;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    char                                          bOverride;                                                    // 0x002C(0x0001)
    char                                          bAresAdaptiveSharpenEnable;                                   // 0x002C(0x0001)
    char                                          bAresClarityEnable;                                           // 0x002C(0x0001)
    char                                          bAresClarityViewBlendIfMask;                                  // 0x002C(0x0001)
    char                                          bAresClarityViewMask;                                         // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    enum class EBloomMethod                       BloomMethod;                                                  // 0x0030(0x0001)
    enum class EAutoExposureMethod                AutoExposureMethod;                                           // 0x0031(0x0001)
    enum class ETemperatureMethod                 TemperatureType;                                              // 0x0032(0x0001)
    char                                          pa_0033[0x0001]                                               // 0x0033(0x0001)
    float                                         WhiteTemp;                                                    // 0x0034(0x0004)
    float                                         WhiteTint;                                                    // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FVector4                                      ColorSaturation;                                              // 0x0040(0x0010)
    FVector4                                      ColorContrast;                                                // 0x0050(0x0010)
    FVector4                                      ColorGamma;                                                   // 0x0060(0x0010)
    FVector4                                      ColorGain;                                                    // 0x0070(0x0010)
    FVector4                                      ColorOffset;                                                  // 0x0080(0x0010)
    FVector4                                      ColorSaturationShadows;                                       // 0x0090(0x0010)
    FVector4                                      ColorContrastShadows;                                         // 0x00A0(0x0010)
    FVector4                                      ColorGammaShadows;                                            // 0x00B0(0x0010)
    FVector4                                      ColorGainShadows;                                             // 0x00C0(0x0010)
    FVector4                                      ColorOffsetShadows;                                           // 0x00D0(0x0010)
    FVector4                                      ColorSaturationMidtones;                                      // 0x00E0(0x0010)
    FVector4                                      ColorContrastMidtones;                                        // 0x00F0(0x0010)
    FVector4                                      ColorGammaMidtones;                                           // 0x0100(0x0010)
    FVector4                                      ColorGainMidtones;                                            // 0x0110(0x0010)
    FVector4                                      ColorOffsetMidtones;                                          // 0x0120(0x0010)
    FVector4                                      ColorSaturationHighlights;                                    // 0x0130(0x0010)
    FVector4                                      ColorContrastHighlights;                                      // 0x0140(0x0010)
    FVector4                                      ColorGammaHighlights;                                         // 0x0150(0x0010)
    FVector4                                      ColorGainHighlights;                                          // 0x0160(0x0010)
    FVector4                                      ColorOffsetHighlights;                                        // 0x0170(0x0010)
    float                                         ColorCorrectionHighlightsMin;                                 // 0x0180(0x0004)
    float                                         ColorCorrectionShadowsMax;                                    // 0x0184(0x0004)
    float                                         BlueCorrection;                                               // 0x0188(0x0004)
    float                                         ExpandGamut;                                                  // 0x018C(0x0004)
    float                                         ToneCurveAmount;                                              // 0x0190(0x0004)
    float                                         FilmSlope;                                                    // 0x0194(0x0004)
    float                                         FilmToe;                                                      // 0x0198(0x0004)
    float                                         FilmShoulder;                                                 // 0x019C(0x0004)
    float                                         FilmBlackClip;                                                // 0x01A0(0x0004)
    float                                         FilmWhiteClip;                                                // 0x01A4(0x0004)
    FLinearColor                                  FilmWhitePoint;                                               // 0x01A8(0x0010)
    FLinearColor                                  FilmShadowTint;                                               // 0x01B8(0x0010)
    float                                         FilmShadowTintBlend;                                          // 0x01C8(0x0004)
    float                                         FilmShadowTintAmount;                                         // 0x01CC(0x0004)
    float                                         FilmSaturation;                                               // 0x01D0(0x0004)
    FLinearColor                                  FilmChannelMixerRed;                                          // 0x01D4(0x0010)
    FLinearColor                                  FilmChannelMixerGreen;                                        // 0x01E4(0x0010)
    FLinearColor                                  FilmChannelMixerBlue;                                         // 0x01F4(0x0010)
    float                                         FilmContrast;                                                 // 0x0204(0x0004)
    float                                         FilmToeAmount;                                                // 0x0208(0x0004)
    float                                         FilmHealAmount;                                               // 0x020C(0x0004)
    float                                         FilmDynamicRange;                                             // 0x0210(0x0004)
    FLinearColor                                  SceneColorTint;                                               // 0x0214(0x0010)
    float                                         SceneFringeIntensity;                                         // 0x0224(0x0004)
    float                                         ChromaticAberrationStartOffset;                               // 0x0228(0x0004)
    float                                         BloomIntensity;                                               // 0x022C(0x0004)
    float                                         BloomThreshold;                                               // 0x0230(0x0004)
    float                                         BloomSizeScale;                                               // 0x0234(0x0004)
    float                                         Bloom1Size;                                                   // 0x0238(0x0004)
    float                                         Bloom2Size;                                                   // 0x023C(0x0004)
    float                                         Bloom3Size;                                                   // 0x0240(0x0004)
    float                                         Bloom4Size;                                                   // 0x0244(0x0004)
    float                                         Bloom5Size;                                                   // 0x0248(0x0004)
    float                                         Bloom6Size;                                                   // 0x024C(0x0004)
    FLinearColor                                  Bloom1Tint;                                                   // 0x0250(0x0010)
    FLinearColor                                  Bloom2Tint;                                                   // 0x0260(0x0010)
    FLinearColor                                  Bloom3Tint;                                                   // 0x0270(0x0010)
    FLinearColor                                  Bloom4Tint;                                                   // 0x0280(0x0010)
    FLinearColor                                  Bloom5Tint;                                                   // 0x0290(0x0010)
    FLinearColor                                  Bloom6Tint;                                                   // 0x02A0(0x0010)
    float                                         BloomConvolutionSize;                                         // 0x02B0(0x0004)
    char                                          pa_02B4[0x0004]                                               // 0x02B4(0x0004)
    FTexture2D*                                   BloomConvolutionTexture;                                      // 0x02B8(0x0008)
    FVector2D                                     BloomConvolutionCenterUV;                                     // 0x02C0(0x0008)
    float                                         BloomConvolutionPreFilterMin;                                 // 0x02C8(0x0004)
    float                                         BloomConvolutionPreFilterMax;                                 // 0x02CC(0x0004)
    float                                         BloomConvolutionPreFilterMult;                                // 0x02D0(0x0004)
    float                                         BloomConvolutionBufferScale;                                  // 0x02D4(0x0004)
    FTexture*                                     BloomDirtMask;                                                // 0x02D8(0x0008)
    float                                         BloomDirtMaskIntensity;                                       // 0x02E0(0x0004)
    FLinearColor                                  BloomDirtMaskTint;                                            // 0x02E4(0x0010)
    FLinearColor                                  AmbientCubemapTint;                                           // 0x02F4(0x0010)
    float                                         AmbientCubemapIntensity;                                      // 0x0304(0x0004)
    FTextureCube*                                 AmbientCubemap;                                               // 0x0308(0x0008)
    float                                         CameraShutterSpeed;                                           // 0x0310(0x0004)
    float                                         CameraISO;                                                    // 0x0314(0x0004)
    float                                         DepthOfFieldFstop;                                            // 0x0318(0x0004)
    float                                         DepthOfFieldMinFstop;                                         // 0x031C(0x0004)
    int32_t                                       DepthOfFieldBladeCount;                                       // 0x0320(0x0004)
    float                                         AutoExposureBias;                                             // 0x0324(0x0004)
    float                                         AutoExposureBiasBackup;                                       // 0x0328(0x0004)
    char                                          bOverride;                                                    // 0x032C(0x0001)
    char                                          pa_032D[0x0003]                                               // 0x032D(0x0003)
    char                                          AutoExposureApplyPhysicalCameraExposure;                      // 0x0330(0x0001)
    char                                          pa_0331[0x0007]                                               // 0x0331(0x0007)
    FCurveFloat*                                  AutoExposureBiasCurve;                                        // 0x0338(0x0008)
    FTexture*                                     AutoExposureMeterMask;                                        // 0x0340(0x0008)
    float                                         AutoExposureLowPercent;                                       // 0x0348(0x0004)
    float                                         AutoExposureHighPercent;                                      // 0x034C(0x0004)
    float                                         AutoExposureMinBrightness;                                    // 0x0350(0x0004)
    float                                         AutoExposureMaxBrightness;                                    // 0x0354(0x0004)
    float                                         AutoExposureSpeedUp;                                          // 0x0358(0x0004)
    float                                         AutoExposureSpeedDown;                                        // 0x035C(0x0004)
    float                                         HistogramLogMin;                                              // 0x0360(0x0004)
    float                                         HistogramLogMax;                                              // 0x0364(0x0004)
    float                                         AutoExposureCalibrationConstant;                              // 0x0368(0x0004)
    float                                         LensFlareIntensity;                                           // 0x036C(0x0004)
    FLinearColor                                  LensFlareTint;                                                // 0x0370(0x0010)
    float                                         LensFlareBokehSize;                                           // 0x0380(0x0004)
    float                                         LensFlareThreshold;                                           // 0x0384(0x0004)
    FTexture*                                     LensFlareBokehShape;                                          // 0x0388(0x0008)
    FLinearColor                                  LensFlareTints;                                               // 0x0390(0x0010)
    char                                          pa_03A0[0x0070]                                               // 0x03A0(0x0070)
    float                                         VignetteIntensity;                                            // 0x0410(0x0004)
    float                                         AresVignetteIntensity;                                        // 0x0414(0x0004)
    float                                         AresVignetteSize;                                             // 0x0418(0x0004)
    float                                         AresVignetteCurve;                                            // 0x041C(0x0004)
    float                                         GrainJitter;                                                  // 0x0420(0x0004)
    float                                         GrainIntensity;                                               // 0x0424(0x0004)
    float                                         AmbientOcclusionIntensity;                                    // 0x0428(0x0004)
    float                                         AmbientOcclusionStaticFraction;                               // 0x042C(0x0004)
    float                                         AmbientOcclusionRadius;                                       // 0x0430(0x0004)
    char                                          AmbientOcclusionRadiusInWS;                                   // 0x0434(0x0001)
    char                                          pa_0435[0x0003]                                               // 0x0435(0x0003)
    float                                         AmbientOcclusionFadeDistance;                                 // 0x0438(0x0004)
    float                                         AmbientOcclusionFadeRadius;                                   // 0x043C(0x0004)
    float                                         AmbientOcclusionDistance;                                     // 0x0440(0x0004)
    float                                         AmbientOcclusionPower;                                        // 0x0444(0x0004)
    float                                         AmbientOcclusionBias;                                         // 0x0448(0x0004)
    float                                         AmbientOcclusionQuality;                                      // 0x044C(0x0004)
    float                                         AmbientOcclusionMipBlend;                                     // 0x0450(0x0004)
    float                                         AmbientOcclusionMipScale;                                     // 0x0454(0x0004)
    float                                         AmbientOcclusionMipThreshold;                                 // 0x0458(0x0004)
    float                                         AmbientOcclusionTemporalBlendWeight;                          // 0x045C(0x0004)
    char                                          RayTracingAO;                                                 // 0x0460(0x0001)
    char                                          pa_0461[0x0003]                                               // 0x0461(0x0003)
    int32_t                                       RayTracingAOSamplesPerPixel;                                  // 0x0464(0x0004)
    float                                         RayTracingAOIntensity;                                        // 0x0468(0x0004)
    float                                         RayTracingAORadius;                                           // 0x046C(0x0004)
    FLinearColor                                  IndirectLightingColor;                                        // 0x0470(0x0010)
    float                                         IndirectLightingIntensity;                                    // 0x0480(0x0004)
    enum class ERayTracingGlobalIlluminationType  RayTracingGIType;                                             // 0x0484(0x0001)
    char                                          pa_0485[0x0003]                                               // 0x0485(0x0003)
    int32_t                                       RayTracingGIMaxBounces;                                       // 0x0488(0x0004)
    int32_t                                       RayTracingGISamplesPerPixel;                                  // 0x048C(0x0004)
    float                                         ColorGradingIntensity;                                        // 0x0490(0x0004)
    char                                          pa_0494[0x0004]                                               // 0x0494(0x0004)
    FTexture*                                     ColorGradingLUT;                                              // 0x0498(0x0008)
    float                                         DepthOfFieldSensorWidth;                                      // 0x04A0(0x0004)
    float                                         DepthOfFieldFocalDistance;                                    // 0x04A4(0x0004)
    float                                         DepthOfFieldDepthBlurAmount;                                  // 0x04A8(0x0004)
    float                                         DepthOfFieldDepthBlurRadius;                                  // 0x04AC(0x0004)
    float                                         DepthOfFieldFocalRegion;                                      // 0x04B0(0x0004)
    float                                         DepthOfFieldNearTransitionRegion;                             // 0x04B4(0x0004)
    float                                         DepthOfFieldFarTransitionRegion;                              // 0x04B8(0x0004)
    float                                         DepthOfFieldScale;                                            // 0x04BC(0x0004)
    float                                         DepthOfFieldNearBlurSize;                                     // 0x04C0(0x0004)
    float                                         DepthOfFieldFarBlurSize;                                      // 0x04C4(0x0004)
    float                                         DepthOfFieldOcclusion;                                        // 0x04C8(0x0004)
    float                                         DepthOfFieldSkyFocusDistance;                                 // 0x04CC(0x0004)
    float                                         DepthOfFieldVignetteSize;                                     // 0x04D0(0x0004)
    float                                         MotionBlurAmount;                                             // 0x04D4(0x0004)
    float                                         MotionBlurMax;                                                // 0x04D8(0x0004)
    int32_t                                       MotionBlurTargetFPS;                                          // 0x04DC(0x0004)
    float                                         MotionBlurPerObjectSize;                                      // 0x04E0(0x0004)
    float                                         LPVIntensity;                                                 // 0x04E4(0x0004)
    float                                         LPVVplInjectionBias;                                          // 0x04E8(0x0004)
    float                                         LPVSize;                                                      // 0x04EC(0x0004)
    float                                         LPVSecondaryOcclusionIntensity;                               // 0x04F0(0x0004)
    float                                         LPVSecondaryBounceIntensity;                                  // 0x04F4(0x0004)
    float                                         LPVGeometryVolumeBias;                                        // 0x04F8(0x0004)
    float                                         LPVEmissiveInjectionIntensity;                                // 0x04FC(0x0004)
    float                                         LPVDirectionalOcclusionIntensity;                             // 0x0500(0x0004)
    float                                         LPVDirectionalOcclusionRadius;                                // 0x0504(0x0004)
    float                                         LPVDiffuseOcclusionExponent;                                  // 0x0508(0x0004)
    float                                         LPVSpecularOcclusionExponent;                                 // 0x050C(0x0004)
    float                                         LPVDiffuseOcclusionIntensity;                                 // 0x0510(0x0004)
    float                                         LPVSpecularOcclusionIntensity;                                // 0x0514(0x0004)
    enum class EReflectionsType                   ReflectionsType;                                              // 0x0518(0x0001)
    char                                          pa_0519[0x0003]                                               // 0x0519(0x0003)
    float                                         ScreenSpaceReflectionIntensity;                               // 0x051C(0x0004)
    float                                         ScreenSpaceReflectionQuality;                                 // 0x0520(0x0004)
    float                                         ScreenSpaceReflectionMaxRoughness;                            // 0x0524(0x0004)
    float                                         RayTracingReflectionsMaxRoughness;                            // 0x0528(0x0004)
    int32_t                                       RayTracingReflectionsMaxBounces;                              // 0x052C(0x0004)
    int32_t                                       RayTracingReflectionsSamplesPerPixel;                         // 0x0530(0x0004)
    enum class EReflectedAndRefractedRayTracedShadowsRayTracingReflectionsShadows;                              // 0x0534(0x0001)
    char                                          RayTracingReflectionsTranslucency;                            // 0x0535(0x0001)
    enum class ETranslucencyType                  TranslucencyType;                                             // 0x0536(0x0001)
    char                                          pa_0537[0x0001]                                               // 0x0537(0x0001)
    float                                         RayTracingTranslucencyMaxRoughness;                           // 0x0538(0x0004)
    int32_t                                       RayTracingTranslucencyRefractionRays;                         // 0x053C(0x0004)
    int32_t                                       RayTracingTranslucencySamplesPerPixel;                        // 0x0540(0x0004)
    enum class EReflectedAndRefractedRayTracedShadowsRayTracingTranslucencyShadows;                             // 0x0544(0x0001)
    char                                          RayTracingTranslucencyRefraction;                             // 0x0545(0x0001)
    char                                          pa_0546[0x0002]                                               // 0x0546(0x0002)
    int32_t                                       PathTracingMaxBounces;                                        // 0x0548(0x0004)
    int32_t                                       PathTracingSamplesPerPixel;                                   // 0x054C(0x0004)
    float                                         PathTracingFilterWidth;                                       // 0x0550(0x0004)
    char                                          PathTracingEnableEmissive;                                    // 0x0554(0x0001)
    char                                          pa_0555[0x0003]                                               // 0x0555(0x0003)
    float                                         PathTracingMaxPathExposure;                                   // 0x0558(0x0004)
    char                                          PathTracingEnableDenoiser;                                    // 0x055C(0x0001)
    char                                          pa_055D[0x0003]                                               // 0x055D(0x0003)
    float                                         LPVFadeRange;                                                 // 0x0560(0x0004)
    float                                         LPVDirectionalOcclusionFadeRange;                             // 0x0564(0x0004)
    float                                         ScreenPercentage;                                             // 0x0568(0x0004)
    char                                          pa_056C[0x0004]                                               // 0x056C(0x0004)
    FWeightedBlendables                           WeightedBlendables;                                           // 0x0570(0x0010)
    FLinearColor                                  AmbientOcclusionTintColor;                                    // 0x0580(0x0010)
    float                                         AresAdaptiveSharpenCurveSlope;                                // 0x0590(0x0004)
    float                                         AresAdaptiveSharpenDarkCompressionHigh;                       // 0x0594(0x0004)
    float                                         AresAdaptiveSharpenDarkCompressionLow;                        // 0x0598(0x0004)
    float                                         AresAdaptiveSharpenDarkOvershoot;                             // 0x059C(0x0004)
    float                                         AresAdaptiveSharpenLightCompressionHigh;                      // 0x05A0(0x0004)
    float                                         AresAdaptiveSharpenLightCompressionLow;                       // 0x05A4(0x0004)
    float                                         AresAdaptiveSharpenLightOvershoot;                            // 0x05A8(0x0004)
    float                                         AresAdaptiveSharpenPowerMeanPValue;                           // 0x05AC(0x0004)
    float                                         AresAdaptiveSharpenScaleCompressionSlope;                     // 0x05B0(0x0004)
    float                                         AresAdaptiveSharpenScaleLim;                                  // 0x05B4(0x0004)
    float                                         AresAdaptiveSharpenStrength;                                  // 0x05B8(0x0004)
    float                                         AresCharacterOutlinesBlurDistance;                            // 0x05BC(0x0004)
    FLinearColor                                  AresCharacterOutlinesColor;                                   // 0x05C0(0x0010)
    FLinearColor                                  AresCharacterOutlinesOverlayColor;                            // 0x05D0(0x0010)
    int32_t                                       AresCharacterOutlinesPixelOffset;                             // 0x05E0(0x0004)
    int32_t                                       AresClarityBlendIfDark;                                       // 0x05E4(0x0004)
    int32_t                                       AresClarityBlendIfLight;                                      // 0x05E8(0x0004)
    enum class EAresClarityBlendMode              AresClarityBlendMode;                                         // 0x05EC(0x0001)
    char                                          pa_05ED[0x0003]                                               // 0x05ED(0x0003)
    float                                         AresClarityDarkIntensity;                                     // 0x05F0(0x0004)
    float                                         AresClarityLightIntensity;                                    // 0x05F4(0x0004)
    float                                         AresClarityOffset;                                            // 0x05F8(0x0004)
    int32_t                                       AresClarityRadius;                                            // 0x05FC(0x0004)
    float                                         AresClarityStrength;                                          // 0x0600(0x0004)
    char                                          pa_0604[0x0004]                                               // 0x0604(0x0004)
    FCurveFloat*                                  IndirectLightingScaleCurve;                                   // 0x0608(0x0008)
};


// ScriptStruct  Engine.WeightedBlendables
// Struct Size::0x0010
struct FWeightedBlendables
{
    TArray<FWeightedBlendable>                    Array;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Engine.WeightedBlendable
// Struct Size::0x0010
struct FWeightedBlendable
{
    float                                         Weight;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UObject*                                      Object;                                                       // 0x0008(0x0008)
};


// ScriptStruct  Engine.CameraShakeUpdateParams
// Struct Size::0x06B0
struct FCameraShakeUpdateParams
{
    float                                         DeltaTime;                                                    // 0x0000(0x0004)
    float                                         ShakeScale;                                                   // 0x0004(0x0004)
    float                                         DynamicScale;                                                 // 0x0008(0x0004)
    float                                         BlendingWeight;                                               // 0x000C(0x0004)
    FMinimalViewInfo                              POV;                                                          // 0x0010(0x06A0)
};


// ScriptStruct  Engine.CameraShakeStartParams
// Struct Size::0x0001
struct FCameraShakeStartParams
{
    bool                                          bIsRestarting;                                                // 0x0000(0x0001)
};


// ScriptStruct  Engine.DummySpacerCameraTypes
// Struct Size::0x0001
struct FDummySpacerCameraTypes
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.WrappedStringElement
// Struct Size::0x0018
struct FWrappedStringElement
{
    FString                                       Value;                                                        // 0x0000(0x0010)
    FVector2D                                     LineExtent;                                                   // 0x0010(0x0008)
};


// ScriptStruct  Engine.TextSizingParameters
// Struct Size::0x0028
struct FTextSizingParameters
{
    float                                         DrawX;                                                        // 0x0000(0x0004)
    float                                         DrawY;                                                        // 0x0004(0x0004)
    float                                         DrawXL;                                                       // 0x0008(0x0004)
    float                                         DrawYL;                                                       // 0x000C(0x0004)
    FVector2D                                     Scaling;                                                      // 0x0010(0x0008)
    FFont*                                        DrawFont;                                                     // 0x0018(0x0008)
    FVector2D                                     SpacingAdjust;                                                // 0x0020(0x0008)
};


// ScriptStruct  Engine.BasedMovementInfo
// Struct Size::0x0030
struct FBasedMovementInfo
{
    UPrimitiveComponent*                          MovementBase;                                                 // 0x0000(0x0008)
    FName                                         BoneName;                                                     // 0x0008(0x000C)
    FVector                                       Location;                                                     // 0x0014(0x000C)
    FRotator                                      Rotation;                                                     // 0x0020(0x000C)
    bool                                          bServerHasBaseComponent;                                      // 0x002C(0x0001)
    bool                                          bRelativeRotation;                                            // 0x002D(0x0001)
    bool                                          bServerHasVelocity;                                           // 0x002E(0x0001)
    char                                          pa_002F[0x0001]                                               // 0x002F(0x0001)
};


// ScriptStruct  Engine.SimulatedRootMotionReplicatedMove
// Struct Size::0x00A0
struct FSimulatedRootMotionReplicatedMove
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FRepRootMotionMontage                         RootMotion;                                                   // 0x0008(0x0098)
};


// ScriptStruct  Engine.RepRootMotionMontage
// Struct Size::0x0098
struct FRepRootMotionMontage
{
    bool                                          bIsActive;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FAnimMontage*                                 AnimMontage;                                                  // 0x0008(0x0008)
    float                                         Position;                                                     // 0x0010(0x0004)
    FVector                                       Location;                                                     // 0x0014(0x000C)
    FRotator                                      Rotation;                                                     // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    UPrimitiveComponent*                          MovementBase;                                                 // 0x0030(0x0008)
    FName                                         MovementBaseBoneName;                                         // 0x0038(0x000C)
    bool                                          bRelativePosition;                                            // 0x0044(0x0001)
    bool                                          bRelativeRotation;                                            // 0x0045(0x0001)
    char                                          pa_0046[0x0002]                                               // 0x0046(0x0002)
    FRootMotionSourceGroup                        AuthoritativeRootMotion;                                      // 0x0048(0x0038)
    FVector                                       Acceleration;                                                 // 0x0080(0x000C)
    FVector                                       LinearVelocity;                                               // 0x008C(0x000C)
};


// ScriptStruct  Engine.RootMotionSourceGroup
// Struct Size::0x0038
struct FRootMotionSourceGroup
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
    char                                          bHasAdditiveSources;                                          // 0x0028(0x0001)
    char                                          bHasOverrideSources;                                          // 0x0028(0x0001)
    char                                          bHasOverrideSourcesWithIgnoreZAccumulate;                     // 0x0028(0x0001)
    char                                          bIsAdditiveVelocityApplied;                                   // 0x0028(0x0001)
    FRootMotionSourceSettings                     LastAccumulatedSettings;                                      // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    FVector                                       LastPreAdditiveVelocity;                                      // 0x002C(0x000C)
};


// ScriptStruct  Engine.RootMotionSourceSettings
// Struct Size::0x0001
struct FRootMotionSourceSettings
{
    char                                          Flags;                                                        // 0x0000(0x0001)
};


// ScriptStruct  Engine.CharacterMovementComponentPostPhysicsTickFunction
// Struct Size::0x0030
struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.FindFloorResult
// Struct Size::0x009C
struct FFindFloorResult
{
    char                                          bBlockingHit;                                                 // 0x0000(0x0001)
    char                                          bWalkableFloor;                                               // 0x0000(0x0001)
    char                                          bLineTrace;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FloorDist;                                                    // 0x0004(0x0004)
    float                                         LineDist;                                                     // 0x0008(0x0004)
    FHitResult                                    HitResult;                                                    // 0x000C(0x0090)
};


// ScriptStruct  Engine.CharacterNetworkSerializationPackedBits
// Struct Size::0x0098
struct FCharacterNetworkSerializationPackedBits
{
    char                                          pa_0000[0x0098]                                               // 0x0000(0x0098)
};


// ScriptStruct  Engine.CharacterMoveResponsePackedBits
// Struct Size::0x0098
struct FCharacterMoveResponsePackedBits : public FCharacterNetworkSerializationPackedBits
{
};


// ScriptStruct  Engine.ClientAdjustmentDebugInfo
// Struct Size::0x0008
struct FClientAdjustmentDebugInfo
{
    enum class ECorrectionReason                  CorrectionReason;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    uint32_t                                      CorrectionId;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Engine.JumpVariables
// Struct Size::0x0034
struct FJumpVariables
{
    int32_t                                       MostRecentJump;                                               // 0x0000(0x0004)
    FJumpTimeInfo                                 JumpTimeHistory;                                              // 0x0004(0x0008)
    char                                          pa_000C[0x0010]                                               // 0x000C(0x0010)
    float                                         JumpLandFallDistance;                                         // 0x001C(0x0004)
    float                                         JumpLandRiseDistance;                                         // 0x0020(0x0004)
    float                                         JumpStartHeight;                                              // 0x0024(0x0004)
    float                                         JumpHighestHeight;                                            // 0x0028(0x0004)
    float                                         JumpLandHeight;                                               // 0x002C(0x0004)
    float                                         JumpLandSpeed;                                                // 0x0030(0x0004)
};


// ScriptStruct  Engine.JumpTimeInfo
// Struct Size::0x0008
struct FJumpTimeInfo
{
    float                                         StartNetTime;                                                 // 0x0000(0x0004)
    float                                         LandNetTime;                                                  // 0x0004(0x0004)
};


// ScriptStruct  Engine.ChildActorComponentInstanceData
// Struct Size::0x00F0
struct FChildActorComponentInstanceData : public FSceneComponentInstanceData
{
    AActor*                                       ChildActorClass;                                              // 0x00B8(0x0008)
    FName                                         ChildActorName;                                               // 0x00C0(0x000C)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    TArray<FChildActorAttachedActorInfo>          AttachedActors;                                               // 0x00D0(0x0010)
    char                                          pa_00E0[0x0010]                                               // 0x00E0(0x0010)
};


// ScriptStruct  Engine.ChildActorAttachedActorInfo
// Struct Size::0x0050
struct FChildActorAttachedActorInfo
{
    TWeakObjectPtr<AActor>                        Actor;                                                        // 0x0000(0x0008)
    FName                                         SocketName;                                                   // 0x0008(0x000C)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FTransform                                    RelativeTransform;                                            // 0x0020(0x0030)
};


// ScriptStruct  Engine.CustomProfile
// Struct Size::0x0020
struct FCustomProfile
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FResponseChannel>                      CustomResponses;                                              // 0x0010(0x0010)
};


// ScriptStruct  Engine.CustomChannelSetup
// Struct Size::0x0010
struct FCustomChannelSetup
{
    enum class ECollisionChannel                  Channel;                                                      // 0x0000(0x0001)
    enum class ECollisionResponse                 DefaultResponse;                                              // 0x0001(0x0001)
    bool                                          bTraceType;                                                   // 0x0002(0x0001)
    bool                                          bStaticObject;                                                // 0x0003(0x0001)
    FName                                         Name;                                                         // 0x0004(0x000C)
};


// ScriptStruct  Engine.CollisionResponseTemplate
// Struct Size::0x0050
struct FCollisionResponseTemplate
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    enum class ECollisionEnabled                  CollisionEnabled;                                             // 0x000C(0x0001)
    char                                          pa_000D[0x0001]                                               // 0x000D(0x0001)
    bool                                          bCanModify;                                                   // 0x000E(0x0001)
    char                                          pa_000F[0x0021]                                               // 0x000F(0x0021)
    FName                                         ObjectTypeName;                                               // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<FResponseChannel>                      CustomResponses;                                              // 0x0040(0x0010)
};


// ScriptStruct  Engine.BlueprintComponentDelegateBinding
// Struct Size::0x0024
struct FBlueprintComponentDelegateBinding
{
    FName                                         ComponentPropertyName;                                        // 0x0000(0x000C)
    FName                                         DelegatePropertyName;                                         // 0x000C(0x000C)
    FName                                         FunctionNameToBind;                                           // 0x0018(0x000C)
};


// ScriptStruct  Engine.MeshUVChannelInfo
// Struct Size::0x0014
struct FMeshUVChannelInfo
{
    bool                                          bInitialized;                                                 // 0x0000(0x0001)
    bool                                          bOverrideDensities;                                           // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         LocalUVDensities;                                             // 0x0004(0x0004)
    char                                          pa_0008[0x000C]                                               // 0x0008(0x000C)
};


// ScriptStruct  Engine.AutoCompleteNode
// Struct Size::0x0028
struct FAutoCompleteNode
{
    int32_t                                       IndexChar;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               AutoCompleteListIndices;                                      // 0x0008(0x0010)
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
};


// ScriptStruct  Engine.AngularDriveConstraint
// Struct Size::0x004C
struct FAngularDriveConstraint
{
    FConstraintDrive                              TwistDrive;                                                   // 0x0000(0x0010)
    FConstraintDrive                              SwingDrive;                                                   // 0x0010(0x0010)
    FConstraintDrive                              SlerpDrive;                                                   // 0x0020(0x0010)
    FRotator                                      OrientationTarget;                                            // 0x0030(0x000C)
    FVector                                       AngularVelocityTarget;                                        // 0x003C(0x000C)
    enum class EAngularDriveMode                  AngularDriveMode;                                             // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
};


// ScriptStruct  Engine.ConstraintDrive
// Struct Size::0x0010
struct FConstraintDrive
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         Damping;                                                      // 0x0004(0x0004)
    float                                         MaxForce;                                                     // 0x0008(0x0004)
    char                                          bEnablePositionDrive;                                         // 0x000C(0x0001)
    char                                          bEnableVelocityDrive;                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.LinearDriveConstraint
// Struct Size::0x004C
struct FLinearDriveConstraint
{
    FVector                                       PositionTarget;                                               // 0x0000(0x000C)
    FVector                                       VelocityTarget;                                               // 0x000C(0x000C)
    FConstraintDrive                              XDrive;                                                       // 0x0018(0x0010)
    FConstraintDrive                              YDrive;                                                       // 0x0028(0x0010)
    FConstraintDrive                              ZDrive;                                                       // 0x0038(0x0010)
    char                                          bEnablePositionDrive;                                         // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
};


// ScriptStruct  Engine.ConstraintInstanceBase
// Struct Size::0x0018
struct FConstraintInstanceBase
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Engine.ConstraintInstance
// Struct Size::0x01D8
struct FConstraintInstance : public FConstraintInstanceBase
{
    FName                                         JointName;                                                    // 0x0018(0x000C)
    FName                                         ConstraintBone1;                                              // 0x0024(0x000C)
    FName                                         ConstraintBone2;                                              // 0x0030(0x000C)
    FVector                                       Pos1;                                                         // 0x003C(0x000C)
    FVector                                       PriAxis1;                                                     // 0x0048(0x000C)
    FVector                                       SecAxis1;                                                     // 0x0054(0x000C)
    FVector                                       Pos2;                                                         // 0x0060(0x000C)
    FVector                                       PriAxis2;                                                     // 0x006C(0x000C)
    FVector                                       SecAxis2;                                                     // 0x0078(0x000C)
    FRotator                                      AngularRotationOffset;                                        // 0x0084(0x000C)
    char                                          bScaleLinearLimits;                                           // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
    FConstraintProfileProperties                  ProfileInstance;                                              // 0x0098(0x0114)
    char                                          pa_01AC[0x002C]                                               // 0x01AC(0x002C)
};


// ScriptStruct  Engine.ConstraintProfileProperties
// Struct Size::0x0114
struct FConstraintProfileProperties
{
    float                                         ProjectionLinearTolerance;                                    // 0x0000(0x0004)
    float                                         ProjectionAngularTolerance;                                   // 0x0004(0x0004)
    float                                         ProjectionLinearAlpha;                                        // 0x0008(0x0004)
    float                                         ProjectionAngularAlpha;                                       // 0x000C(0x0004)
    float                                         LinearBreakThreshold;                                         // 0x0010(0x0004)
    float                                         LinearPlasticityThreshold;                                    // 0x0014(0x0004)
    float                                         AngularBreakThreshold;                                        // 0x0018(0x0004)
    float                                         AngularPlasticityThreshold;                                   // 0x001C(0x0004)
    FLinearConstraint                             LinearLimit;                                                  // 0x0020(0x001C)
    FConeConstraint                               ConeLimit;                                                    // 0x003C(0x0020)
    FTwistConstraint                              TwistLimit;                                                   // 0x005C(0x001C)
    FLinearDriveConstraint                        LinearDrive;                                                  // 0x0078(0x004C)
    FAngularDriveConstraint                       AngularDrive;                                                 // 0x00C4(0x004C)
    char                                          bDisableCollision;                                            // 0x0110(0x0001)
    char                                          bParentDominates;                                             // 0x0110(0x0001)
    char                                          bEnableProjection;                                            // 0x0110(0x0001)
    char                                          bEnableSoftProjection;                                        // 0x0110(0x0001)
    char                                          bAngularBreakable;                                            // 0x0110(0x0001)
    char                                          bAngularPlasticity;                                           // 0x0110(0x0001)
    char                                          bLinearBreakable;                                             // 0x0110(0x0001)
    char                                          bLinearPlasticity;                                            // 0x0110(0x0001)
    char                                          pa_0111[0x0003]                                               // 0x0111(0x0003)
};


// ScriptStruct  Engine.ConstraintBaseParams
// Struct Size::0x0014
struct FConstraintBaseParams
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         Damping;                                                      // 0x0004(0x0004)
    float                                         Restitution;                                                  // 0x0008(0x0004)
    float                                         ContactDistance;                                              // 0x000C(0x0004)
    char                                          bSoftConstraint;                                              // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Engine.TwistConstraint
// Struct Size::0x001C
struct FTwistConstraint : public FConstraintBaseParams
{
    float                                         TwistLimitDegrees;                                            // 0x0014(0x0004)
    enum class EAngularConstraintMotion           TwistMotion;                                                  // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  Engine.ConeConstraint
// Struct Size::0x0020
struct FConeConstraint : public FConstraintBaseParams
{
    float                                         Swing1LimitDegrees;                                           // 0x0014(0x0004)
    float                                         Swing2LimitDegrees;                                           // 0x0018(0x0004)
    enum class EAngularConstraintMotion           Swing1Motion;                                                 // 0x001C(0x0001)
    enum class EAngularConstraintMotion           Swing2Motion;                                                 // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
};


// ScriptStruct  Engine.LinearConstraint
// Struct Size::0x001C
struct FLinearConstraint : public FConstraintBaseParams
{
    float                                         Limit;                                                        // 0x0014(0x0004)
    enum class ELinearConstraintMotion            XMotion;                                                      // 0x0018(0x0001)
    enum class ELinearConstraintMotion            YMotion;                                                      // 0x0019(0x0001)
    enum class ELinearConstraintMotion            ZMotion;                                                      // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
};


// ScriptStruct  Engine.ContentVersionDef
// Struct Size::0x0030
struct FContentVersionDef
{
    FString                                       ContentVersionName;                                           // 0x0000(0x0010)
    TArray<FString>                               IncludedLayers;                                               // 0x0010(0x0010)
    TArray<FString>                               IncludedContentVersions;                                      // 0x0020(0x0010)
};


// ScriptStruct  Engine.CullDistanceSizePair
// Struct Size::0x0008
struct FCullDistanceSizePair
{
    float                                         Size;                                                         // 0x0000(0x0004)
    float                                         CullDistance;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Engine.RuntimeCurveLinearColor
// Struct Size::0x0210
struct FRuntimeCurveLinearColor
{
    FRichCurve                                    ColorCurves;                                                  // 0x0000(0x0080)
    char                                          pa_0080[0x0180]                                               // 0x0080(0x0180)
    FCurveLinearColor*                            ExternalCurve;                                                // 0x0200(0x0008)
    bool                                          bDisplayAsLinear;                                             // 0x0208(0x0001)
    char                                          pa_0209[0x0007]                                               // 0x0209(0x0007)
};


// ScriptStruct  Engine.CurveAtlasColorAdjustments
// Struct Size::0x0024
struct FCurveAtlasColorAdjustments
{
    char                                          bChromaKeyTexture;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         AdjustBrightness;                                             // 0x0004(0x0004)
    float                                         AdjustBrightnessCurve;                                        // 0x0008(0x0004)
    float                                         AdjustVibrance;                                               // 0x000C(0x0004)
    float                                         AdjustSaturation;                                             // 0x0010(0x0004)
    float                                         AdjustRGBCurve;                                               // 0x0014(0x0004)
    float                                         AdjustHue;                                                    // 0x0018(0x0004)
    float                                         AdjustMinAlpha;                                               // 0x001C(0x0004)
    float                                         AdjustMaxAlpha;                                               // 0x0020(0x0004)
};


// ScriptStruct  Engine.NamedCurveValue
// Struct Size::0x0010
struct FNamedCurveValue
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    float                                         Value;                                                        // 0x000C(0x0004)
};


// ScriptStruct  Engine.BakedCustomAttributePerBoneData
// Struct Size::0x0038
struct FBakedCustomAttributePerBoneData
{
    int32_t                                       BoneTreeIndex;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FBakedStringCustomAttribute>           StringAttributes;                                             // 0x0008(0x0010)
    TArray<FBakedIntegerCustomAttribute>          IntAttributes;                                                // 0x0018(0x0010)
    TArray<FBakedFloatCustomAttribute>            FloatAttributes;                                              // 0x0028(0x0010)
};


// ScriptStruct  Engine.BakedFloatCustomAttribute
// Struct Size::0x0098
struct FBakedFloatCustomAttribute
{
    FName                                         AttributeName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FSimpleCurve                                  FloatCurve;                                                   // 0x0010(0x0088)
};


// ScriptStruct  Engine.SimpleCurve
// Struct Size::0x0088
struct FSimpleCurve : public FRealCurve
{
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
    TArray<FSimpleCurveKey>                       Keys;                                                         // 0x0078(0x0010)
};


// ScriptStruct  Engine.SimpleCurveKey
// Struct Size::0x0008
struct FSimpleCurveKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    float                                         Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Engine.BakedIntegerCustomAttribute
// Struct Size::0x0090
struct FBakedIntegerCustomAttribute
{
    FName                                         AttributeName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FIntegralCurve                                IntCurve;                                                     // 0x0010(0x0080)
};


// ScriptStruct  Engine.IntegralCurve
// Struct Size::0x0080
struct FIntegralCurve : public FIndexedCurve
{
    TArray<FIntegralKey>                          Keys;                                                         // 0x0068(0x0010)
    int32_t                                       DefaultValue;                                                 // 0x0078(0x0004)
    bool                                          bUseDefaultValueBeforeFirstKey;                               // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
};


// ScriptStruct  Engine.IntegralKey
// Struct Size::0x0008
struct FIntegralKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    int32_t                                       Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Engine.BakedStringCustomAttribute
// Struct Size::0x0098
struct FBakedStringCustomAttribute
{
    FName                                         AttributeName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FStringCurve                                  StringCurve;                                                  // 0x0010(0x0088)
};


// ScriptStruct  Engine.StringCurve
// Struct Size::0x0088
struct FStringCurve : public FIndexedCurve
{
    FString                                       DefaultValue;                                                 // 0x0068(0x0010)
    TArray<FStringCurveKey>                       Keys;                                                         // 0x0078(0x0010)
};


// ScriptStruct  Engine.StringCurveKey
// Struct Size::0x0018
struct FStringCurveKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Value;                                                        // 0x0008(0x0010)
};


// ScriptStruct  Engine.CustomAttributePerBoneData
// Struct Size::0x0018
struct FCustomAttributePerBoneData
{
    int32_t                                       BoneTreeIndex;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FCustomAttribute>                      Attributes;                                                   // 0x0008(0x0010)
};


// ScriptStruct  Engine.CustomAttribute
// Struct Size::0x0030
struct FCustomAttribute
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    int32_t                                       VariantType;                                                  // 0x000C(0x0004)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
    char                                          pa_0020[0x0010]                                               // 0x0020(0x0010)
};


// ScriptStruct  Engine.CustomAttributeSetting
// Struct Size::0x0020
struct FCustomAttributeSetting
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Meaning;                                                      // 0x0010(0x0010)
};


// ScriptStruct  Engine.DataDrivenConsoleVariable
// Struct Size::0x0050
struct FDataDrivenConsoleVariable
{
    enum class FDataDrivenCVarType                Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Name;                                                         // 0x0008(0x0010)
    FString                                       ToolTip;                                                      // 0x0018(0x0010)
    float                                         DefaultValueFloat;                                            // 0x0028(0x0004)
    int32_t                                       DefaultValueInt;                                              // 0x002C(0x0004)
    bool                                          DefaultValueBool;                                             // 0x0030(0x0001)
    char                                          pa_0031[0x001F]                                               // 0x0031(0x001F)
};


// ScriptStruct  Engine.DataTableCategoryHandle
// Struct Size::0x0020
struct FDataTableCategoryHandle
{
    FDataTable*                                   DataTable;                                                    // 0x0000(0x0008)
    FName                                         ColumnName;                                                   // 0x0008(0x000C)
    FName                                         RowContents;                                                  // 0x0014(0x000C)
};


// ScriptStruct  Engine.DebugCameraControllerSettingsViewModeIndex
// Struct Size::0x0010
struct FDebugCameraControllerSettingsViewModeIndex
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    enum class EViewModeIndex                     ViewModeIndex;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Engine.DebugDisplayProperty
// Struct Size::0x0020
struct FDebugDisplayProperty
{
    UObject*                                      Obj;                                                          // 0x0000(0x0008)
    UObject*                                      WithinClass;                                                  // 0x0008(0x0008)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.DebugTextInfo
// Struct Size::0x0060
struct FDebugTextInfo
{
    AActor*                                       SrcActor;                                                     // 0x0000(0x0008)
    FVector                                       SrcActorOffset;                                               // 0x0008(0x000C)
    FVector                                       SrcActorDesiredOffset;                                        // 0x0014(0x000C)
    FString                                       DebugText;                                                    // 0x0020(0x0010)
    float                                         TimeRemaining;                                                // 0x0030(0x0004)
    float                                         Duration;                                                     // 0x0034(0x0004)
    FColor                                        TextColor;                                                    // 0x0038(0x0004)
    char                                          bAbsoluteLocation;                                            // 0x003C(0x0001)
    char                                          bKeepAttachedToActor;                                         // 0x003C(0x0001)
    char                                          bDrawShadow;                                                  // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    FVector                                       OrigActorLocation;                                            // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FFont*                                        Font;                                                         // 0x0050(0x0008)
    float                                         FontScale;                                                    // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Engine.MulticastRecordOptions
// Struct Size::0x0018
struct FMulticastRecordOptions
{
    FString                                       FuncPathName;                                                 // 0x0000(0x0010)
    bool                                          bServerSkip;                                                  // 0x0010(0x0001)
    bool                                          bClientSkip;                                                  // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  Engine.RollbackNetStartupActorInfo
// Struct Size::0x00B8
struct FRollbackNetStartupActorInfo
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    UObject*                                      Archetype;                                                    // 0x0010(0x0008)
    char                                          pa_0018[0x0028]                                               // 0x0018(0x0028)
    FLevel*                                       Level;                                                        // 0x0040(0x0008)
    char                                          pa_0048[0x0060]                                               // 0x0048(0x0060)
    TArray<UObject*>                              ObjReferences;                                                // 0x00A8(0x0010)
};


// ScriptStruct  Engine.DialogueWaveParameter
// Struct Size::0x0020
struct FDialogueWaveParameter
{
    FDialogueWave*                                DialogueWave;                                                 // 0x0000(0x0008)
    FDialogueContext                              Context;                                                      // 0x0008(0x0018)
};


// ScriptStruct  Engine.DialogueContext
// Struct Size::0x0018
struct FDialogueContext
{
    FDialogueVoice*                               Speaker;                                                      // 0x0000(0x0008)
    TArray<FDialogueVoice*>                       Targets;                                                      // 0x0008(0x0010)
};


// ScriptStruct  Engine.DialogueContextMapping
// Struct Size::0x0038
struct FDialogueContextMapping
{
    FDialogueContext                              Context;                                                      // 0x0000(0x0018)
    FSoundWave*                                   SoundWave;                                                    // 0x0018(0x0008)
    FString                                       LocalizationKeyFormat;                                        // 0x0020(0x0010)
    FDialogueSoundWaveProxy*                      Proxy;                                                        // 0x0030(0x0008)
};


// ScriptStruct  Engine.RawDistributionFloat
// Struct Size::0x0030
struct FRawDistributionFloat : public FRawDistribution
{
    float                                         MinValue;                                                     // 0x0020(0x0004)
    float                                         MaxValue;                                                     // 0x0024(0x0004)
    FDistributionFloat*                           Distribution;                                                 // 0x0028(0x0008)
};


// ScriptStruct  Engine.RawDistributionVector
// Struct Size::0x0048
struct FRawDistributionVector : public FRawDistribution
{
    float                                         MinValue;                                                     // 0x0020(0x0004)
    float                                         MaxValue;                                                     // 0x0024(0x0004)
    FVector                                       MinValueVec;                                                  // 0x0028(0x000C)
    FVector                                       MaxValueVec;                                                  // 0x0034(0x000C)
    FDistributionVector*                          Distribution;                                                 // 0x0040(0x0008)
};


// ScriptStruct  Engine.GraphReference
// Struct Size::0x0020
struct FGraphReference
{
    FEdGraph*                                     MacroGraph;                                                   // 0x0000(0x0008)
    FBlueprint*                                   GraphBlueprint;                                               // 0x0008(0x0008)
    FGuid                                         GraphGuid;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Engine.EdGraphPinReference
// Struct Size::0x0018
struct FEdGraphPinReference
{
    TWeakObjectPtr<FEdGraphNode>                  OwningNode;                                                   // 0x0000(0x0008)
    FGuid                                         PinId;                                                        // 0x0008(0x0010)
};


// ScriptStruct  Engine.EdGraphSchemaAction
// Struct Size::0x0100
struct FEdGraphSchemaAction
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FText                                         MenuDescription;                                              // 0x0008(0x0018)
    FText                                         TooltipDescription;                                           // 0x0020(0x0018)
    FText                                         Category;                                                     // 0x0038(0x0018)
    FText                                         Keywords;                                                     // 0x0050(0x0018)
    int32_t                                       Grouping;                                                     // 0x0068(0x0004)
    int32_t                                       SectionID;                                                    // 0x006C(0x0004)
    TArray<FString>                               MenuDescriptionArray;                                         // 0x0070(0x0010)
    TArray<FString>                               FullSearchTitlesArray;                                        // 0x0080(0x0010)
    TArray<FString>                               FullSearchKeywordsArray;                                      // 0x0090(0x0010)
    TArray<FString>                               FullSearchCategoryArray;                                      // 0x00A0(0x0010)
    TArray<FString>                               LocalizedMenuDescriptionArray;                                // 0x00B0(0x0010)
    TArray<FString>                               LocalizedFullSearchTitlesArray;                               // 0x00C0(0x0010)
    TArray<FString>                               LocalizedFullSearchKeywordsArray;                             // 0x00D0(0x0010)
    TArray<FString>                               LocalizedFullSearchCategoryArray;                             // 0x00E0(0x0010)
    FString                                       SearchText;                                                   // 0x00F0(0x0010)
};


// ScriptStruct  Engine.EdGraphSchemaAction
// Struct Size::0x0108
struct FEdGraphSchemaAction : public FEdGraphSchemaAction
{
    FEdGraphNode*                                 NodeTemplate;                                                 // 0x0100(0x0008)
};


// ScriptStruct  Engine.PluginRedirect
// Struct Size::0x0020
struct FPluginRedirect
{
    FString                                       OldPluginName;                                                // 0x0000(0x0010)
    FString                                       NewPluginName;                                                // 0x0010(0x0010)
};


// ScriptStruct  Engine.StructRedirect
// Struct Size::0x0018
struct FStructRedirect
{
    FName                                         OldStructName;                                                // 0x0000(0x000C)
    FName                                         NewStructName;                                                // 0x000C(0x000C)
};


// ScriptStruct  Engine.ClassRedirect
// Struct Size::0x0058
struct FClassRedirect
{
    FName                                         ObjectName;                                                   // 0x0000(0x000C)
    FName                                         OldClassName;                                                 // 0x000C(0x000C)
    FName                                         NewClassName;                                                 // 0x0018(0x000C)
    FName                                         OldSubobjName;                                                // 0x0024(0x000C)
    FName                                         NewSubobjName;                                                // 0x0030(0x000C)
    FName                                         NewClassClass;                                                // 0x003C(0x000C)
    FName                                         NewClassPackage;                                              // 0x0048(0x000C)
    bool                                          InstanceOnly;                                                 // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
};


// ScriptStruct  Engine.GameNameRedirect
// Struct Size::0x0018
struct FGameNameRedirect
{
    FName                                         OldGameName;                                                  // 0x0000(0x000C)
    FName                                         NewGameName;                                                  // 0x000C(0x000C)
};


// ScriptStruct  Engine.ScreenMessageString
// Struct Size::0x0030
struct FScreenMessageString
{
    uint64_t                                      Key;                                                          // 0x0000(0x0008)
    FString                                       ScreenMessage;                                                // 0x0008(0x0010)
    FColor                                        DisplayColor;                                                 // 0x0018(0x0004)
    float                                         TimeToDisplay;                                                // 0x001C(0x0004)
    float                                         CurrentTimeDisplayed;                                         // 0x0020(0x0004)
    FVector2D                                     TextScale;                                                    // 0x0024(0x0008)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.DropNoteInfo
// Struct Size::0x0028
struct FDropNoteInfo
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
    FString                                       Comment;                                                      // 0x0018(0x0010)
};


// ScriptStruct  Engine.StatColorMapping
// Struct Size::0x0028
struct FStatColorMapping
{
    FString                                       StatName;                                                     // 0x0000(0x0010)
    TArray<FStatColorMapEntry>                    ColorMap;                                                     // 0x0010(0x0010)
    char                                          DisableBlend;                                                 // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Engine.StatColorMapEntry
// Struct Size::0x0008
struct FStatColorMapEntry
{
    float                                         In;                                                           // 0x0000(0x0004)
    FColor                                        Out;                                                          // 0x0004(0x0004)
};


// ScriptStruct  Engine.WorldContext
// Struct Size::0x0290
struct FWorldContext
{
    char                                          pa_0000[0x00D8]                                               // 0x0000(0x00D8)
    FURL                                          LastURL;                                                      // 0x00D8(0x0068)
    FURL                                          LastRemoteURL;                                                // 0x0140(0x0068)
    FPendingNetGame*                              PendingNetGame;                                               // 0x01A8(0x0008)
    TArray<FFullyLoadedPackagesInfo>              PackagesToFullyLoad;                                          // 0x01B0(0x0010)
    char                                          pa_01C0[0x0010]                                               // 0x01C0(0x0010)
    TArray<FLevel*>                               LoadedLevelsForPendingMapChange;                              // 0x01D0(0x0010)
    char                                          pa_01E0[0x0018]                                               // 0x01E0(0x0018)
    TArray<FObjectReferencer*>                    ObjectReferencers;                                            // 0x01F8(0x0010)
    TArray<FLevelStreamingStatus>                 PendingLevelStreamingStatusUpdates;                           // 0x0208(0x0010)
    FGameViewportClient*                          GameViewport;                                                 // 0x0218(0x0008)
    FGameInstance*                                OwningGameInstance;                                           // 0x0220(0x0008)
    TArray<FNamedNetDriver>                       ActiveNetDrivers;                                             // 0x0228(0x0010)
    char                                          pa_0238[0x0058]                                               // 0x0238(0x0058)
};


// ScriptStruct  Engine.NamedNetDriver
// Struct Size::0x0010
struct FNamedNetDriver
{
    FNetDriver*                                   NetDriver;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  Engine.LevelStreamingStatus
// Struct Size::0x0014
struct FLevelStreamingStatus
{
    FName                                         PackageName;                                                  // 0x0000(0x000C)
    char                                          bShouldBeLoaded;                                              // 0x000C(0x0001)
    char                                          bShouldBeVisible;                                             // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    uint32_t                                      LODIndex;                                                     // 0x0010(0x0004)
};


// ScriptStruct  Engine.FullyLoadedPackagesInfo
// Struct Size::0x0038
struct FFullyLoadedPackagesInfo
{
    enum class EFullyLoadPackageType              FullyLoadType;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Tag;                                                          // 0x0008(0x0010)
    TArray<FName>                                 PackagesToLoad;                                               // 0x0018(0x0010)
    TArray<UObject*>                              LoadedObjects;                                                // 0x0028(0x0010)
};


// ScriptStruct  Engine.URL
// Struct Size::0x0068
struct FURL
{
    FString                                       Protocol;                                                     // 0x0000(0x0010)
    FString                                       Host;                                                         // 0x0010(0x0010)
    int32_t                                       Port;                                                         // 0x0020(0x0004)
    int32_t                                       Valid;                                                        // 0x0024(0x0004)
    FString                                       Map;                                                          // 0x0028(0x0010)
    FString                                       RedirectURL;                                                  // 0x0038(0x0010)
    TArray<FString>                               Op;                                                           // 0x0048(0x0010)
    FString                                       Portal;                                                       // 0x0058(0x0010)
};


// ScriptStruct  Engine.NetDriverDefinition
// Struct Size::0x0024
struct FNetDriverDefinition
{
    FName                                         DefName;                                                      // 0x0000(0x000C)
    FName                                         DriverClassName;                                              // 0x000C(0x000C)
    FName                                         DriverClassNameFallback;                                      // 0x0018(0x000C)
};


// ScriptStruct  Engine.ExposureSettings
// Struct Size::0x0008
struct FExposureSettings
{
    float                                         FixedEV100;                                                   // 0x0000(0x0004)
    bool                                          bFixed;                                                       // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.TickPrerequisite
// Struct Size::0x0010
struct FTickPrerequisite
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.DefaultTextureSettings
// Struct Size::0x0008
struct FDefaultTextureSettings
{
    int32_t                                       MaxTextureSize;                                               // 0x0000(0x0004)
    int32_t                                       MaxMobileTextureSize;                                         // 0x0004(0x0004)
};


// ScriptStruct  Engine.RiotPlatformInitSettings
// Struct Size::0x0048
struct FRiotPlatformInitSettings
{
    bool                                          bInitialized;                                                 // 0x0000(0x0001)
    bool                                          bLaunchClient;                                                // 0x0001(0x0001)
    bool                                          bHeadless;                                                    // 0x0002(0x0001)
    char                                          pa_0003[0x0005]                                               // 0x0003(0x0005)
    FString                                       RiotClientInstallPath;                                        // 0x0008(0x0010)
    FString                                       RiotClientLogPath;                                            // 0x0018(0x0010)
    FString                                       ServerVersion;                                                // 0x0028(0x0010)
    TArray<FRiotPlatformClientSettings>           ClientSettings;                                               // 0x0038(0x0010)
};


// ScriptStruct  Engine.CanvasUVTri
// Struct Size::0x0060
struct FCanvasUVTri
{
    FVector2D                                     V0;                                                           // 0x0000(0x0008)
    FVector2D                                     V0;                                                           // 0x0008(0x0008)
    FLinearColor                                  V0;                                                           // 0x0010(0x0010)
    FVector2D                                     V1;                                                           // 0x0020(0x0008)
    FVector2D                                     V1;                                                           // 0x0028(0x0008)
    FLinearColor                                  V1;                                                           // 0x0030(0x0010)
    FVector2D                                     V2;                                                           // 0x0040(0x0008)
    FVector2D                                     V2;                                                           // 0x0048(0x0008)
    FLinearColor                                  V2;                                                           // 0x0050(0x0010)
};


// ScriptStruct  Engine.FontRenderInfo
// Struct Size::0x0028
struct FFontRenderInfo
{
    char                                          bClipText;                                                    // 0x0000(0x0001)
    char                                          bEnableShadow;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FDepthFieldGlowInfo                           GlowInfo;                                                     // 0x0004(0x0024)
};


// ScriptStruct  Engine.DepthFieldGlowInfo
// Struct Size::0x0024
struct FDepthFieldGlowInfo
{
    char                                          bEnableGlow;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FLinearColor                                  GlowColor;                                                    // 0x0004(0x0010)
    FVector2D                                     GlowOuterRadius;                                              // 0x0014(0x0008)
    FVector2D                                     GlowInnerRadius;                                              // 0x001C(0x0008)
};


// ScriptStruct  Engine.Redirector
// Struct Size::0x0018
struct FRedirector
{
    FName                                         OldName;                                                      // 0x0000(0x000C)
    FName                                         NewName;                                                      // 0x000C(0x000C)
};


// ScriptStruct  Engine.CollectionReference
// Struct Size::0x000C
struct FCollectionReference
{
    FName                                         CollectionName;                                               // 0x0000(0x000C)
};


// ScriptStruct  Engine.ConstrainComponentPropName
// Struct Size::0x000C
struct FConstrainComponentPropName
{
    FName                                         ComponentName;                                                // 0x0000(0x000C)
};


// ScriptStruct  Engine.SkeletalMeshBuildSettings
// Struct Size::0x0014
struct FSkeletalMeshBuildSettings
{
    char                                          bRecomputeNormals;                                            // 0x0000(0x0001)
    char                                          bRecomputeTangents;                                           // 0x0000(0x0001)
    char                                          bUseMikkTSpace;                                               // 0x0000(0x0001)
    char                                          bComputeWeightedNormals;                                      // 0x0000(0x0001)
    char                                          bRemoveDegenerates;                                           // 0x0000(0x0001)
    char                                          bUseHighPrecisionTangentBasis;                                // 0x0000(0x0001)
    char                                          bUseFullPrecisionUVs;                                         // 0x0000(0x0001)
    char                                          bUseFullPrecisionPositions;                                   // 0x0000(0x0001)
    char                                          bBuildAdjacencyBuffer;                                        // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         ThresholdPosition;                                            // 0x0004(0x0004)
    float                                         ThresholdTangentNormal;                                       // 0x0008(0x0004)
    float                                         ThresholdUV;                                                  // 0x000C(0x0004)
    float                                         MorphThresholdPosition;                                       // 0x0010(0x0004)
};


// ScriptStruct  Engine.MeshBuildSettings
// Struct Size::0x0030
struct FMeshBuildSettings
{
    char                                          bUseMikkTSpace;                                               // 0x0000(0x0001)
    char                                          bRecomputeNormals;                                            // 0x0000(0x0001)
    char                                          bRecomputeTangents;                                           // 0x0000(0x0001)
    char                                          bComputeWeightedNormals;                                      // 0x0000(0x0001)
    char                                          bRemoveDegenerates;                                           // 0x0000(0x0001)
    char                                          bBuildAdjacencyBuffer;                                        // 0x0000(0x0001)
    char                                          bBuildReversedIndexBuffer;                                    // 0x0000(0x0001)
    char                                          bUseHighPrecisionTangentBasis;                                // 0x0000(0x0001)
    char                                          bUseFullPrecisionUVs;                                         // 0x0001(0x0001)
    char                                          bUseFullPrecisionPositions;                                   // 0x0001(0x0001)
    char                                          bGenerateLightmapUVs;                                         // 0x0001(0x0001)
    char                                          bGenerateDistanceFieldAsIfTwoSided;                           // 0x0001(0x0001)
    char                                          bSupportFaceRemap;                                            // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       MinLightmapResolution;                                        // 0x0004(0x0004)
    int32_t                                       SrcLightmapIndex;                                             // 0x0008(0x0004)
    int32_t                                       DstLightmapIndex;                                             // 0x000C(0x0004)
    float                                         BuildScale;                                                   // 0x0010(0x0004)
    FVector                                       BuildScale3D;                                                 // 0x0014(0x000C)
    float                                         DistanceFieldResolutionScale;                                 // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FStaticMesh*                                  DistanceFieldReplacementMesh;                                 // 0x0028(0x0008)
};


// ScriptStruct  Engine.POV
// Struct Size::0x001C
struct FPOV
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
    float                                         FOV;                                                          // 0x0018(0x0004)
};


// ScriptStruct  Engine.AnimUpdateRateParameters
// Struct Size::0x00B0
struct FAnimUpdateRateParameters
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
    enum class EUpdateRateShiftBucket             ShiftBucket;                                                  // 0x0001(0x0001)
    char                                          bInterpolateSkippedFrames;                                    // 0x0002(0x0001)
    char                                          bShouldUseLodMap;                                             // 0x0002(0x0001)
    char                                          bShouldUseMinLod;                                             // 0x0002(0x0001)
    char                                          bSkipUpdate;                                                  // 0x0002(0x0001)
    char                                          bSkipEvaluation;                                              // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    int32_t                                       UpdateRate;                                                   // 0x0004(0x0004)
    int32_t                                       EvaluationRate;                                               // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<float>                                 TickedPoseOffsetTimes;                                        // 0x0010(0x0010)
    int32_t                                       CurrentMeshIndex;                                             // 0x0020(0x0004)
    float                                         AdditionalTime;                                               // 0x0024(0x0004)
    char                                          pa_0028[0x0004]                                               // 0x0028(0x0004)
    int32_t                                       BaseNonRenderedUpdateRate;                                    // 0x002C(0x0004)
    int32_t                                       BaseServerAnimUpdateRate;                                     // 0x0030(0x0004)
    int32_t                                       MaxEvalRateForInterpolation;                                  // 0x0034(0x0004)
    TArray<float>                                 BaseVisibleDistanceFactorThesholds;                           // 0x0038(0x0010)
    TArray<float>                                 BaseVisibleAngleFromScreenCenterThresholds;                   // 0x0048(0x0010)
    TMap<int32_t,int32_t>                         LODToFrameSkipMap;                                            // 0x0058(0x0050)
    int32_t                                       SkippedUpdateFrames;                                          // 0x00A8(0x0004)
    int32_t                                       SkippedEvalFrames;                                            // 0x00AC(0x0004)
};


// ScriptStruct  Engine.AnimSlotDesc
// Struct Size::0x0010
struct FAnimSlotDesc
{
    FName                                         SlotName;                                                     // 0x0000(0x000C)
    int32_t                                       NumChannels;                                                  // 0x000C(0x0004)
};


// ScriptStruct  Engine.AnimSlotInfo
// Struct Size::0x0020
struct FAnimSlotInfo
{
    FName                                         SlotName;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<float>                                 ChannelWeights;                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.MTDResult
// Struct Size::0x0010
struct FMTDResult
{
    FVector                                       Direction;                                                    // 0x0000(0x000C)
    float                                         Distance;                                                     // 0x000C(0x0004)
};


// ScriptStruct  Engine.OverlapResult
// Struct Size::0x0018
struct FOverlapResult
{
    TWeakObjectPtr<AActor>                        Actor;                                                        // 0x0000(0x0008)
    TWeakObjectPtr<UPrimitiveComponent>           Component;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x0004]                                               // 0x0010(0x0004)
    char                                          bBlockingHit;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  Engine.PrimitiveMaterialRef
// Struct Size::0x0018
struct FPrimitiveMaterialRef
{
    UPrimitiveComponent*                          Primitive;                                                    // 0x0000(0x0008)
    FDecalComponent*                              Decal;                                                        // 0x0008(0x0008)
    int32_t                                       ElementIndex;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.SwarmDebugOptions
// Struct Size::0x0004
struct FSwarmDebugOptions
{
    char                                          bDistributionEnabled;                                         // 0x0000(0x0001)
    char                                          bForceContentExport;                                          // 0x0000(0x0001)
    char                                          bInitialized;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  Engine.LightmassDebugOptions
// Struct Size::0x0010
struct FLightmassDebugOptions
{
    char                                          bDebugMode;                                                   // 0x0000(0x0001)
    char                                          bStatsEnabled;                                                // 0x0000(0x0001)
    char                                          bGatherBSPSurfacesAcrossComponents;                           // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         CoplanarTolerance;                                            // 0x0004(0x0004)
    char                                          bUseImmediateImport;                                          // 0x0008(0x0001)
    char                                          bImmediateProcessMappings;                                    // 0x0008(0x0001)
    char                                          bSortMappings;                                                // 0x0008(0x0001)
    char                                          bDumpBinaryFiles;                                             // 0x0008(0x0001)
    char                                          bDebugMaterials;                                              // 0x0008(0x0001)
    char                                          bPadMappings;                                                 // 0x0008(0x0001)
    char                                          bDebugPaddings;                                               // 0x0008(0x0001)
    char                                          bOnlyCalcDebugTexelMappings;                                  // 0x0008(0x0001)
    char                                          bUseRandomColors;                                             // 0x0009(0x0001)
    char                                          bColorBordersGreen;                                           // 0x0009(0x0001)
    char                                          bColorByExecutionTime;                                        // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    float                                         ExecutionTimeDivisor;                                         // 0x000C(0x0004)
};


// ScriptStruct  Engine.LightmassPrimitiveSettings
// Struct Size::0x001C
struct FLightmassPrimitiveSettings
{
    char                                          bUseTwoSidedLighting;                                         // 0x0000(0x0001)
    char                                          bShadowIndirectOnly;                                          // 0x0000(0x0001)
    char                                          bUseEmissiveForStaticLighting;                                // 0x0000(0x0001)
    char                                          bUseVertexNormalForHemisphereGather;                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         EmissiveLightFalloffExponent;                                 // 0x0004(0x0004)
    float                                         EmissiveLightExplicitInfluenceRadius;                         // 0x0008(0x0004)
    float                                         EmissiveBoost;                                                // 0x000C(0x0004)
    float                                         DiffuseBoost;                                                 // 0x0010(0x0004)
    float                                         FullyOccludedSamplesFraction;                                 // 0x0014(0x0004)
    char                                          bLightAsBackFace;                                             // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  Engine.LightmassLightSettings
// Struct Size::0x000C
struct FLightmassLightSettings
{
    float                                         IndirectLightingSaturation;                                   // 0x0000(0x0004)
    float                                         ShadowExponent;                                               // 0x0004(0x0004)
    bool                                          bUseAreaShadowsForStationaryLight;                            // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.LightmassDirectionalLightSettings
// Struct Size::0x0010
struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
{
    float                                         LightSourceAngle;                                             // 0x000C(0x0004)
};


// ScriptStruct  Engine.LightmassPointLightSettings
// Struct Size::0x000C
struct FLightmassPointLightSettings : public FLightmassLightSettings
{
};


// ScriptStruct  Engine.BasedPosition
// Struct Size::0x0038
struct FBasedPosition
{
    AActor*                                       Base;                                                         // 0x0000(0x0008)
    FVector                                       Position;                                                     // 0x0008(0x000C)
    FVector                                       CachedBaseLocation;                                           // 0x0014(0x000C)
    FRotator                                      CachedBaseRotation;                                           // 0x0020(0x000C)
    FVector                                       CachedTransPosition;                                          // 0x002C(0x000C)
};


// ScriptStruct  Engine.FractureEffect
// Struct Size::0x0010
struct FFractureEffect
{
    FParticleSystem*                              ParticleSystem;                                               // 0x0000(0x0008)
    FSoundBase*                                   Sound;                                                        // 0x0008(0x0008)
};


// ScriptStruct  Engine.CollisionImpactData
// Struct Size::0x0030
struct FCollisionImpactData
{
    TArray<FRigidBodyContactInfo>                 ContactInfos;                                                 // 0x0000(0x0010)
    FVector                                       TotalNormalImpulse;                                           // 0x0010(0x000C)
    FVector                                       TotalFrictionImpulse;                                         // 0x001C(0x000C)
    bool                                          bIsVelocityDeltaUnderThreshold;                               // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  Engine.RigidBodyContactInfo
// Struct Size::0x0030
struct FRigidBodyContactInfo
{
    FVector                                       ContactPosition;                                              // 0x0000(0x000C)
    FVector                                       ContactNormal;                                                // 0x000C(0x000C)
    float                                         ContactPenetration;                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FPhysicalMaterial*                            PhysMaterial;                                                 // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.RigidBodyErrorCorrection
// Struct Size::0x0034
struct FRigidBodyErrorCorrection
{
    float                                         PingExtrapolation;                                            // 0x0000(0x0004)
    float                                         PingLimit;                                                    // 0x0004(0x0004)
    float                                         ErrorPerLinearDifference;                                     // 0x0008(0x0004)
    float                                         ErrorPerAngularDifference;                                    // 0x000C(0x0004)
    float                                         MaxRestoredStateError;                                        // 0x0010(0x0004)
    float                                         MaxLinearHardSnapDistance;                                    // 0x0014(0x0004)
    float                                         PositionLerp;                                                 // 0x0018(0x0004)
    float                                         AngleLerp;                                                    // 0x001C(0x0004)
    float                                         LinearVelocityCoefficient;                                    // 0x0020(0x0004)
    float                                         AngularVelocityCoefficient;                                   // 0x0024(0x0004)
    float                                         ErrorAccumulationSeconds;                                     // 0x0028(0x0004)
    float                                         ErrorAccumulationDistanceSq;                                  // 0x002C(0x0004)
    float                                         ErrorAccumulationSimilarity;                                  // 0x0030(0x0004)
};


// ScriptStruct  Engine.RigidBodyState
// Struct Size::0x0040
struct FRigidBodyState
{
    FVector                                       Position;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         Quaternion;                                                   // 0x0010(0x0010)
    FVector                                       LinVel;                                                       // 0x0020(0x000C)
    FVector                                       AngVel;                                                       // 0x002C(0x000C)
    char                                          Flags;                                                        // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Engine.MaterialShadingModelField
// Struct Size::0x0002
struct FMaterialShadingModelField
{
    uint16_t                                      ShadingModelField;                                            // 0x0000(0x0002)
};


// ScriptStruct  Engine.ExponentialHeightFogData
// Struct Size::0x000C
struct FExponentialHeightFogData
{
    float                                         FogDensity;                                                   // 0x0000(0x0004)
    float                                         FogHeightFalloff;                                             // 0x0004(0x0004)
    float                                         FogHeightOffset;                                              // 0x0008(0x0004)
};


// ScriptStruct  Engine.FontCharacter
// Struct Size::0x0018
struct FFontCharacter
{
    int32_t                                       StartU;                                                       // 0x0000(0x0004)
    int32_t                                       StartV;                                                       // 0x0004(0x0004)
    int32_t                                       USize;                                                        // 0x0008(0x0004)
    int32_t                                       VSize;                                                        // 0x000C(0x0004)
    char                                          TextureIndex;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       VerticalOffset;                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.FontImportOptionsData
// Struct Size::0x00B0
struct FFontImportOptionsData
{
    FString                                       FontName;                                                     // 0x0000(0x0010)
    float                                         Height;                                                       // 0x0010(0x0004)
    char                                          bEnableAntialiasing;                                          // 0x0014(0x0001)
    char                                          bEnableBold;                                                  // 0x0014(0x0001)
    char                                          bEnableItalic;                                                // 0x0014(0x0001)
    char                                          bEnableUnderline;                                             // 0x0014(0x0001)
    char                                          bAlphaOnly;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    enum class EFontImportCharacterSet            CharacterSet;                                                 // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FString                                       Chars;                                                        // 0x0020(0x0010)
    FString                                       UnicodeRange;                                                 // 0x0030(0x0010)
    FString                                       CharsFilePath;                                                // 0x0040(0x0010)
    FString                                       CharsFileWildcard;                                            // 0x0050(0x0010)
    char                                          bCreatePrintableOnly;                                         // 0x0060(0x0001)
    char                                          bIncludeASCIIRange;                                           // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    FLinearColor                                  ForegroundColor;                                              // 0x0064(0x0010)
    char                                          bEnableDropShadow;                                            // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
    int32_t                                       TexturePageWidth;                                             // 0x0078(0x0004)
    int32_t                                       TexturePageMaxHeight;                                         // 0x007C(0x0004)
    int32_t                                       XPadding;                                                     // 0x0080(0x0004)
    int32_t                                       YPadding;                                                     // 0x0084(0x0004)
    int32_t                                       ExtendBoxTop;                                                 // 0x0088(0x0004)
    int32_t                                       ExtendBoxBottom;                                              // 0x008C(0x0004)
    int32_t                                       ExtendBoxRight;                                               // 0x0090(0x0004)
    int32_t                                       ExtendBoxLeft;                                                // 0x0094(0x0004)
    char                                          bEnableLegacyMode;                                            // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    int32_t                                       Kerning;                                                      // 0x009C(0x0004)
    char                                          bUseDistanceFieldAlpha;                                       // 0x00A0(0x0001)
    char                                          pa_00A1[0x0003]                                               // 0x00A1(0x0003)
    int32_t                                       DistanceFieldScaleFactor;                                     // 0x00A4(0x0004)
    float                                         DistanceFieldScanRadiusScale;                                 // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  Engine.ForceFeedbackAttenuationSettings
// Struct Size::0x00B0
struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
{
};


// ScriptStruct  Engine.ActiveForceFeedbackEffect
// Struct Size::0x0020
struct FActiveForceFeedbackEffect
{
    FForceFeedbackEffect*                         ForceFeedbackEffect;                                          // 0x0000(0x0008)
    char                                          pa_0008[0x0018]                                               // 0x0008(0x0018)
};


// ScriptStruct  Engine.ForceFeedbackParameters
// Struct Size::0x0010
struct FForceFeedbackParameters
{
    FName                                         Tag;                                                          // 0x0000(0x000C)
    bool                                          bLooping;                                                     // 0x000C(0x0001)
    bool                                          bIgnoreTimeDilation;                                          // 0x000D(0x0001)
    bool                                          bPlayWhilePaused;                                             // 0x000E(0x0001)
    char                                          pa_000F[0x0001]                                               // 0x000F(0x0001)
};


// ScriptStruct  Engine.ForceFeedbackChannelDetails
// Struct Size::0x0090
struct FForceFeedbackChannelDetails
{
    char                                          bAffectsLeftLarge;                                            // 0x0000(0x0001)
    char                                          bAffectsLeftSmall;                                            // 0x0000(0x0001)
    char                                          bAffectsRightLarge;                                           // 0x0000(0x0001)
    char                                          bAffectsRightSmall;                                           // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FRuntimeFloatCurve                            Curve;                                                        // 0x0008(0x0088)
};


// ScriptStruct  Engine.GameCycleTimer
// Struct Size::0x0020
struct FGameCycleTimer
{
    uint32_t                                      TimingsNum;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FGameCycleTime>                        Timings;                                                      // 0x0008(0x0010)
    int32_t                                       NextWriteIndex;                                               // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.GameCycleTime
// Struct Size::0x0010
struct FGameCycleTime
{
    uint64_t                                      Elapsed;                                                      // 0x0000(0x0008)
    uint64_t                                      TimeStamp;                                                    // 0x0008(0x0008)
};


// ScriptStruct  Engine.PredictProjectilePathResult
// Struct Size::0x00C0
struct FPredictProjectilePathResult
{
    TArray<FPredictProjectilePathPointData>       PathData;                                                     // 0x0000(0x0010)
    FPredictProjectilePathPointData               LastTraceDestination;                                         // 0x0010(0x001C)
    FHitResult                                    HitResult;                                                    // 0x002C(0x0090)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
};


// ScriptStruct  Engine.PredictProjectilePathPointData
// Struct Size::0x001C
struct FPredictProjectilePathPointData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    float                                         Time;                                                         // 0x0018(0x0004)
};


// ScriptStruct  Engine.PredictProjectilePathParams
// Struct Size::0x0060
struct FPredictProjectilePathParams
{
    FVector                                       StartLocation;                                                // 0x0000(0x000C)
    FVector                                       LaunchVelocity;                                               // 0x000C(0x000C)
    bool                                          bTraceWithCollision;                                          // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         ProjectileRadius;                                             // 0x001C(0x0004)
    float                                         MaxSimTime;                                                   // 0x0020(0x0004)
    bool                                          bTraceWithChannel;                                            // 0x0024(0x0001)
    enum class ECollisionChannel                  TraceChannel;                                                 // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
    TArray<enum class EObjectTypeQuery>           ObjectTypes;                                                  // 0x0028(0x0010)
    TArray<AActor*>                               ActorsToIgnore;                                               // 0x0038(0x0010)
    float                                         SimFrequency;                                                 // 0x0048(0x0004)
    float                                         OverrideGravityZ;                                             // 0x004C(0x0004)
    enum class EDrawDebugTrace                    DrawDebugType;                                                // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    float                                         DrawDebugTime;                                                // 0x0054(0x0004)
    bool                                          bTraceComplex;                                                // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
};


// ScriptStruct  Engine.ActiveHapticFeedbackEffect
// Struct Size::0x0018
struct FActiveHapticFeedbackEffect
{
    FHapticFeedbackEffect*                        HapticEffect;                                                 // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.HapticFeedbackDetails
// Struct Size::0x0110
struct FHapticFeedbackDetails
{
    FRuntimeFloatCurve                            Frequency;                                                    // 0x0000(0x0088)
    FRuntimeFloatCurve                            Amplitude;                                                    // 0x0088(0x0088)
};


// ScriptStruct  Engine.ClusterNode
// Struct Size::0x0040
struct FClusterNode
{
    FVector                                       BoundMin;                                                     // 0x0000(0x000C)
    int32_t                                       FirstChild;                                                   // 0x000C(0x0004)
    FVector                                       BoundMax;                                                     // 0x0010(0x000C)
    int32_t                                       LastChild;                                                    // 0x001C(0x0004)
    int32_t                                       FirstInstance;                                                // 0x0020(0x0004)
    int32_t                                       LastInstance;                                                 // 0x0024(0x0004)
    FVector                                       MinInstanceScale;                                             // 0x0028(0x000C)
    FVector                                       MaxInstanceScale;                                             // 0x0034(0x000C)
};


// ScriptStruct  Engine.ClusterNode
// Struct Size::0x0028
struct FClusterNode
{
    FVector                                       BoundMin;                                                     // 0x0000(0x000C)
    int32_t                                       FirstChild;                                                   // 0x000C(0x0004)
    FVector                                       BoundMax;                                                     // 0x0010(0x000C)
    int32_t                                       LastChild;                                                    // 0x001C(0x0004)
    int32_t                                       FirstInstance;                                                // 0x0020(0x0004)
    int32_t                                       LastInstance;                                                 // 0x0024(0x0004)
};


// ScriptStruct  Engine.HLODISMComponentDesc
// Struct Size::0x0020
struct FHLODISMComponentDesc
{
    FStaticMesh*                                  StaticMesh;                                                   // 0x0000(0x0008)
    FMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
    TArray<FTransform>                            Instances;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Engine.HLODProxyMesh
// Struct Size::0x0038
struct FHLODProxyMesh
{
    FLODActor*                                    LODActor;                                                     // 0x0000(0x001C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FStaticMesh*                                  StaticMesh;                                                   // 0x0020(0x0008)
    FName                                         Key;                                                          // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.ImportanceTexture
// Struct Size::0x0050
struct FImportanceTexture
{
    FIntPoint                                     Size;                                                         // 0x0000(0x0008)
    int32_t                                       NumMips;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<float>                                 MarginalCDF;                                                  // 0x0010(0x0010)
    TArray<float>                                 ConditionalCDF;                                               // 0x0020(0x0010)
    TArray<FColor>                                TextureData;                                                  // 0x0030(0x0010)
    TWeakObjectPtr<FTexture2D>                    Texture;                                                      // 0x0040(0x0008)
    enum class EImportanceWeight                  Weighting;                                                    // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  Engine.ComponentOverrideRecord
// Struct Size::0x0088
struct FComponentOverrideRecord
{
    UObject*                                      ComponentClass;                                               // 0x0000(0x0008)
    UActorComponent*                              ComponentTemplate;                                            // 0x0008(0x0008)
    FComponentKey                                 ComponentKey;                                                 // 0x0010(0x0028)
    FBlueprintCookedComponentInstancingData       CookedComponentInstancingData;                                // 0x0038(0x0050)
};


// ScriptStruct  Engine.ComponentKey
// Struct Size::0x0028
struct FComponentKey
{
    UObject*                                      OwnerClass;                                                   // 0x0000(0x0008)
    FName                                         SCSVariableName;                                              // 0x0008(0x000C)
    FGuid                                         AssociatedGuid;                                               // 0x0014(0x0010)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.BlueprintInputDelegateBinding
// Struct Size::0x0004
struct FBlueprintInputDelegateBinding
{
    char                                          bConsumeInput;                                                // 0x0000(0x0001)
    char                                          bExecuteWhenPaused;                                           // 0x0000(0x0001)
    char                                          bOverrideParentBinding;                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  Engine.BlueprintInputActionDelegateBinding
// Struct Size::0x0020
struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
{
    FName                                         InputActionName;                                              // 0x0004(0x000C)
    enum class EInputEvent                        InputKeyEvent;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FName                                         FunctionNameToBind;                                           // 0x0014(0x000C)
};


// ScriptStruct  Engine.BlueprintInputAxisDelegateBinding
// Struct Size::0x001C
struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
{
    FName                                         InputAxisName;                                                // 0x0004(0x000C)
    FName                                         FunctionNameToBind;                                           // 0x0010(0x000C)
};


// ScriptStruct  Engine.BlueprintInputAxisKeyDelegateBinding
// Struct Size::0x0038
struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
{
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FKey                                          AxisKey;                                                      // 0x0008(0x0020)
    FName                                         FunctionNameToBind;                                           // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.ManualActionInvocation
// Struct Size::0x0050
struct FManualActionInvocation
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  Engine.CachedKeyToActionInfo
// Struct Size::0x00C0
struct FCachedKeyToActionInfo
{
    FPlayerInput*                                 PlayerInput;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x00B8]                                               // 0x0008(0x00B8)
};


// ScriptStruct  Engine.BlueprintInputKeyDelegateBinding
// Struct Size::0x0040
struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
{
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FInputChord                                   InputChord;                                                   // 0x0008(0x0028)
    enum class EInputEvent                        InputKeyEvent;                                                // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    FName                                         FunctionNameToBind;                                           // 0x0034(0x000C)
};


// ScriptStruct  Engine.BlueprintInputTouchDelegateBinding
// Struct Size::0x0014
struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
{
    enum class EInputEvent                        InputKeyEvent;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FName                                         FunctionNameToBind;                                           // 0x0008(0x000C)
};


// ScriptStruct  Engine.InstancedStaticMeshComponentInstanceData
// Struct Size::0x0150
struct FInstancedStaticMeshComponentInstanceData : public FSceneComponentInstanceData
{
    FStaticMesh*                                  StaticMesh;                                                   // 0x00B8(0x0008)
    FInstancedStaticMeshLightMapInstanceData      CachedStaticLighting;                                         // 0x00C0(0x0040)
    TArray<FInstancedStaticMeshInstanceData>      PerInstanceSMData;                                            // 0x0100(0x0010)
    TArray<float>                                 PerInstanceSMCustomData;                                      // 0x0110(0x0010)
    char                                          pa_0120[0x0020]                                               // 0x0120(0x0020)
    int32_t                                       InstancingRandomSeed;                                         // 0x0140(0x0004)
    char                                          pa_0144[0x000C]                                               // 0x0144(0x000C)
};


// ScriptStruct  Engine.InstancedStaticMeshInstanceData
// Struct Size::0x0040
struct FInstancedStaticMeshInstanceData
{
    FMatrix                                       Transform;                                                    // 0x0000(0x0040)
};


// ScriptStruct  Engine.InstancedStaticMeshLightMapInstanceData
// Struct Size::0x0040
struct FInstancedStaticMeshLightMapInstanceData
{
    FTransform                                    Transform;                                                    // 0x0000(0x0030)
    TArray<FGuid>                                 MapBuildDataIds;                                              // 0x0030(0x0010)
};


// ScriptStruct  Engine.InstancedStaticMeshMappingInfo
// Struct Size::0x0008
struct FInstancedStaticMeshMappingInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.CurveEdTab
// Struct Size::0x0030
struct FCurveEdTab
{
    FString                                       TabName;                                                      // 0x0000(0x0010)
    TArray<FCurveEdEntry>                         Curves;                                                       // 0x0010(0x0010)
    float                                         ViewStartInput;                                               // 0x0020(0x0004)
    float                                         ViewEndInput;                                                 // 0x0024(0x0004)
    float                                         ViewStartOutput;                                              // 0x0028(0x0004)
    float                                         ViewEndOutput;                                                // 0x002C(0x0004)
};


// ScriptStruct  Engine.CurveEdEntry
// Struct Size::0x0038
struct FCurveEdEntry
{
    UObject*                                      CurveObject;                                                  // 0x0000(0x0008)
    FColor                                        CurveColor;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       CurveName;                                                    // 0x0010(0x0010)
    int32_t                                       bHideCurve;                                                   // 0x0020(0x0004)
    int32_t                                       bColorCurve;                                                  // 0x0024(0x0004)
    int32_t                                       bFloatingPointColorCurve;                                     // 0x0028(0x0004)
    int32_t                                       bClamp;                                                       // 0x002C(0x0004)
    float                                         ClampLow;                                                     // 0x0030(0x0004)
    float                                         ClampHigh;                                                    // 0x0034(0x0004)
};


// ScriptStruct  Engine.InterpEdSelKey
// Struct Size::0x0018
struct FInterpEdSelKey
{
    FInterpGroup*                                 Group;                                                        // 0x0000(0x0008)
    FInterpTrack*                                 Track;                                                        // 0x0008(0x0008)
    int32_t                                       KeyIndex;                                                     // 0x0010(0x0004)
    float                                         UnsnappedPosition;                                            // 0x0014(0x0004)
};


// ScriptStruct  Engine.CameraPreviewInfo
// Struct Size::0x0030
struct FCameraPreviewInfo
{
    FPawn*                                        PawnClass;                                                    // 0x0000(0x0008)
    FAnimSequence*                                AnimSeq;                                                      // 0x0008(0x0008)
    FVector                                       Location;                                                     // 0x0010(0x000C)
    FRotator                                      Rotation;                                                     // 0x001C(0x000C)
    FPawn*                                        PawnInst;                                                     // 0x0028(0x0008)
};


// ScriptStruct  Engine.SubTrackGroup
// Struct Size::0x0028
struct FSubTrackGroup
{
    FString                                       GroupName;                                                    // 0x0000(0x0010)
    TArray<int32_t>                               TrackIndices;                                                 // 0x0010(0x0010)
    char                                          bIsCollapsed;                                                 // 0x0020(0x0001)
    char                                          bIsSelected;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Engine.SupportedSubTrackInfo
// Struct Size::0x0020
struct FSupportedSubTrackInfo
{
    FInterpTrack*                                 SupportedClass;                                               // 0x0000(0x0008)
    FString                                       SubTrackName;                                                 // 0x0008(0x0010)
    int32_t                                       GroupIndex;                                                   // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.AnimControlTrackKey
// Struct Size::0x0020
struct FAnimControlTrackKey
{
    float                                         StartTime;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FAnimSequence*                                AnimSeq;                                                      // 0x0008(0x0008)
    float                                         AnimStartOffset;                                              // 0x0010(0x0004)
    float                                         AnimEndOffset;                                                // 0x0014(0x0004)
    float                                         AnimPlayRate;                                                 // 0x0018(0x0004)
    char                                          bLooping;                                                     // 0x001C(0x0001)
    char                                          bReverse;                                                     // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.BoolTrackKey
// Struct Size::0x0008
struct FBoolTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          Value;                                                        // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.DirectorTrackCut
// Struct Size::0x0018
struct FDirectorTrackCut
{
    float                                         Time;                                                         // 0x0000(0x0004)
    float                                         TransitionTime;                                               // 0x0004(0x0004)
    FName                                         TargetCamGroup;                                               // 0x0008(0x000C)
    int32_t                                       ShotNumber;                                                   // 0x0014(0x0004)
};


// ScriptStruct  Engine.EventTrackKey
// Struct Size::0x0010
struct FEventTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    FName                                         EventName;                                                    // 0x0004(0x000C)
};


// ScriptStruct  Engine.InterpLookupTrack
// Struct Size::0x0010
struct FInterpLookupTrack
{
    TArray<FInterpLookupPoint>                    Points;                                                       // 0x0000(0x0010)
};


// ScriptStruct  Engine.InterpLookupPoint
// Struct Size::0x0010
struct FInterpLookupPoint
{
    FName                                         GroupName;                                                    // 0x0000(0x000C)
    float                                         Time;                                                         // 0x000C(0x0004)
};


// ScriptStruct  Engine.ParticleReplayTrackKey
// Struct Size::0x000C
struct FParticleReplayTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    float                                         Duration;                                                     // 0x0004(0x0004)
    int32_t                                       ClipIDNumber;                                                 // 0x0008(0x0004)
};


// ScriptStruct  Engine.SoundTrackKey
// Struct Size::0x0018
struct FSoundTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    float                                         Volume;                                                       // 0x0004(0x0004)
    float                                         Pitch;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FSoundBase*                                   Sound;                                                        // 0x0010(0x0008)
};


// ScriptStruct  Engine.ToggleTrackKey
// Struct Size::0x0008
struct FToggleTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    enum class ETrackToggleAction                 ToggleAction;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.VisibilityTrackKey
// Struct Size::0x0008
struct FVisibilityTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    enum class EVisibilityTrackAction             Action;                                                       // 0x0004(0x0001)
    enum class EVisibilityTrackCondition          ActiveCondition;                                              // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
};


// ScriptStruct  Engine.VectorSpringState
// Struct Size::0x0018
struct FVectorSpringState
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Engine.FloatSpringState
// Struct Size::0x0008
struct FFloatSpringState
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.DrawToRenderTargetContext
// Struct Size::0x0010
struct FDrawToRenderTargetContext
{
    FTextureRenderTarget2D*                       RenderTarget;                                                 // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  Engine.LatentActionManager
// Struct Size::0x0060
struct FLatentActionManager
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  Engine.LayerActorStats
// Struct Size::0x0010
struct FLayerActorStats
{
    UObject*                                      Type;                                                         // 0x0000(0x0008)
    int32_t                                       Total;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Engine.ReplicatedStaticActorDestructionInfo
// Struct Size::0x0040
struct FReplicatedStaticActorDestructionInfo
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
    UObject*                                      ObjClass;                                                     // 0x0038(0x0008)
};


// ScriptStruct  Engine.LevelSimplificationDetails
// Struct Size::0x012C
struct FLevelSimplificationDetails
{
    bool                                          bCreatePackagePerAsset;                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DetailsPercentage;                                            // 0x0004(0x0004)
    FMaterialProxySettings                        StaticMeshMaterialSettings;                                   // 0x0008(0x0088)
    bool                                          bOverrideLandscapeExportLOD;                                  // 0x0090(0x0001)
    char                                          pa_0091[0x0003]                                               // 0x0091(0x0003)
    int32_t                                       LandscapeExportLOD;                                           // 0x0094(0x0004)
    FMaterialProxySettings                        LandscapeMaterialSettings;                                    // 0x0098(0x0088)
    bool                                          bBakeFoliageToLandscape;                                      // 0x0120(0x0001)
    bool                                          bBakeGrassToLandscape;                                        // 0x0121(0x0001)
    bool                                          bGenerateMeshNormalMap;                                       // 0x0122(0x0001)
    bool                                          bGenerateMeshMetallicMap;                                     // 0x0123(0x0001)
    bool                                          bGenerateMeshRoughnessMap;                                    // 0x0124(0x0001)
    bool                                          bGenerateMeshSpecularMap;                                     // 0x0125(0x0001)
    bool                                          bGenerateLandscapeNormalMap;                                  // 0x0126(0x0001)
    bool                                          bGenerateLandscapeMetallicMap;                                // 0x0127(0x0001)
    bool                                          bGenerateLandscapeRoughnessMap;                               // 0x0128(0x0001)
    bool                                          bGenerateLandscapeSpecularMap;                                // 0x0129(0x0001)
    char                                          pa_012A[0x0002]                                               // 0x012A(0x0002)
};


// ScriptStruct  Engine.MaterialProxySettings
// Struct Size::0x0088
struct FMaterialProxySettings
{
    FIntPoint                                     TextureSize;                                                  // 0x0000(0x0008)
    float                                         GutterSpace;                                                  // 0x0008(0x0004)
    float                                         MetallicConstant;                                             // 0x000C(0x0004)
    float                                         RoughnessConstant;                                            // 0x0010(0x0004)
    float                                         AnisotropyConstant;                                           // 0x0014(0x0004)
    float                                         SpecularConstant;                                             // 0x0018(0x0004)
    float                                         OpacityConstant;                                              // 0x001C(0x0004)
    float                                         OpacityMaskConstant;                                          // 0x0020(0x0004)
    float                                         AmbientOcclusionConstant;                                     // 0x0024(0x0004)
    enum class ETextureSizingType                 TextureSizingType;                                            // 0x0028(0x0001)
    enum class EMaterialMergeType                 MaterialMergeType;                                            // 0x0029(0x0001)
    enum class EBlendMode                         BlendMode;                                                    // 0x002A(0x0001)
    char                                          bAllowTwoSidedMaterial;                                       // 0x002B(0x0001)
    char                                          bNormalMap;                                                   // 0x002B(0x0001)
    char                                          bTangentMap;                                                  // 0x002B(0x0001)
    char                                          bMetallicMap;                                                 // 0x002B(0x0001)
    char                                          bRoughnessMap;                                                // 0x002B(0x0001)
    char                                          bAnisotropyMap;                                               // 0x002B(0x0001)
    char                                          bSpecularMap;                                                 // 0x002B(0x0001)
    char                                          bEmissiveMap;                                                 // 0x002B(0x0001)
    char                                          bOpacityMap;                                                  // 0x002C(0x0001)
    char                                          bOpacityMaskMap;                                              // 0x002C(0x0001)
    char                                          bAmbientOcclusionMap;                                         // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    FIntPoint                                     DiffuseTextureSize;                                           // 0x0030(0x0008)
    FIntPoint                                     NormalTextureSize;                                            // 0x0038(0x0008)
    FIntPoint                                     TangentTextureSize;                                           // 0x0040(0x0008)
    FIntPoint                                     MetallicTextureSize;                                          // 0x0048(0x0008)
    FIntPoint                                     RoughnessTextureSize;                                         // 0x0050(0x0008)
    FIntPoint                                     AnisotropyTextureSize;                                        // 0x0058(0x0008)
    FIntPoint                                     SpecularTextureSize;                                          // 0x0060(0x0008)
    FIntPoint                                     EmissiveTextureSize;                                          // 0x0068(0x0008)
    FIntPoint                                     OpacityTextureSize;                                           // 0x0070(0x0008)
    FIntPoint                                     OpacityMaskTextureSize;                                       // 0x0078(0x0008)
    FIntPoint                                     AmbientOcclusionTextureSize;                                  // 0x0080(0x0008)
};


// ScriptStruct  Engine.StreamableTextureInstance
// Struct Size::0x0028
struct FStreamableTextureInstance
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  Engine.DynamicTextureInstance
// Struct Size::0x0038
struct FDynamicTextureInstance : public FStreamableTextureInstance
{
    FTexture2D*                                   Texture;                                                      // 0x0028(0x0008)
    bool                                          bAttached;                                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         OriginalRadius;                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.PrecomputedLightInstanceData
// Struct Size::0x0110
struct FPrecomputedLightInstanceData : public FSceneComponentInstanceData
{
    char                                          pa_00B8[0x0008]                                               // 0x00B8(0x0008)
    FTransform                                    Transform;                                                    // 0x00C0(0x0030)
    FGuid                                         LightGuid;                                                    // 0x00F0(0x0010)
    int32_t                                       PreviewShadowMapChannel;                                      // 0x0100(0x0004)
    char                                          pa_0104[0x000C]                                               // 0x0104(0x000C)
};


// ScriptStruct  Engine.BatchedPoint
// Struct Size::0x0028
struct FBatchedPoint
{
    FVector                                       Position;                                                     // 0x0000(0x000C)
    FLinearColor                                  Color;                                                        // 0x000C(0x0010)
    float                                         PointSize;                                                    // 0x001C(0x0004)
    float                                         RemainingLifeTime;                                            // 0x0020(0x0004)
    char                                          DepthPriority;                                                // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  Engine.BatchedLine
// Struct Size::0x0034
struct FBatchedLine
{
    FVector                                       Start;                                                        // 0x0000(0x000C)
    FVector                                       End;                                                          // 0x000C(0x000C)
    FLinearColor                                  Color;                                                        // 0x0018(0x0010)
    float                                         Thickness;                                                    // 0x0028(0x0004)
    float                                         RemainingLifeTime;                                            // 0x002C(0x0004)
    char                                          DepthPriority;                                                // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
};


// ScriptStruct  Engine.ClientReceiveData
// Struct Size::0x0040
struct FClientReceiveData
{
    FPlayerController*                            LocalPC;                                                      // 0x0000(0x0008)
    FName                                         MessageType;                                                  // 0x0008(0x000C)
    int32_t                                       MessageIndex;                                                 // 0x0014(0x0004)
    FString                                       MessageString;                                                // 0x0018(0x0010)
    FPlayerState*                                 RelatedPlayerState;                                           // 0x0028(0x0008)
    FPlayerState*                                 RelatedPlayerState;                                           // 0x0030(0x0008)
    UObject*                                      OptionalObject;                                               // 0x0038(0x0008)
};


// ScriptStruct  Engine.HLODInstancingKey
// Struct Size::0x0010
struct FHLODInstancingKey
{
    FStaticMesh*                                  StaticMesh;                                                   // 0x0000(0x0008)
    FMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Engine.ComponentSync
// Struct Size::0x0010
struct FComponentSync
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    enum class ESyncOption                        SyncOption;                                                   // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.LODMappingData
// Struct Size::0x0020
struct FLODMappingData
{
    TArray<int32_t>                               Mapping;                                                      // 0x0000(0x0010)
    TArray<int32_t>                               InverseMapping;                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.ParameterGroupData
// Struct Size::0x0018
struct FParameterGroupData
{
    FString                                       GroupName;                                                    // 0x0000(0x0010)
    int32_t                                       GroupSortPriority;                                            // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.MaterialSpriteElement
// Struct Size::0x0028
struct FMaterialSpriteElement
{
    FMaterialInterface*                           Material;                                                     // 0x0000(0x0008)
    FCurveFloat*                                  DistanceToOpacityCurve;                                       // 0x0008(0x0008)
    char                                          bSizeIsInScreenSpace;                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         BaseSizeX;                                                    // 0x0014(0x0004)
    float                                         BaseSizeY;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FCurveFloat*                                  DistanceToSizeCurve;                                          // 0x0020(0x0008)
};


// ScriptStruct  Engine.MaterialCachedExpressionData
// Struct Size::0x01D8
struct FMaterialCachedExpressionData
{
    FMaterialCachedParameters                     Parameters;                                                   // 0x0000(0x0150)
    TArray<UObject*>                              ReferencedTextures;                                           // 0x0150(0x0010)
    TArray<FMaterialFunctionInfo>                 FunctionInfos;                                                // 0x0160(0x0010)
    TArray<FMaterialParameterCollectionInfo>      ParameterCollectionInfos;                                     // 0x0170(0x0010)
    TArray<FMaterialFunctionInterface*>           DefaultLayers;                                                // 0x0180(0x0010)
    TArray<FMaterialFunctionInterface*>           DefaultLayerBlends;                                           // 0x0190(0x0010)
    TArray<FLandscapeGrassType*>                  GrassTypes;                                                   // 0x01A0(0x0010)
    TArray<FName>                                 DynamicParameterNames;                                        // 0x01B0(0x0010)
    TArray<bool>                                  QualityLevelsUsed;                                            // 0x01C0(0x0010)
    char                                          bHasRuntimeVirtualTextureOutput;                              // 0x01D0(0x0001)
    char                                          bHasSceneColor;                                               // 0x01D0(0x0001)
    char                                          pa_01D1[0x0007]                                               // 0x01D1(0x0007)
};


// ScriptStruct  Engine.MaterialParameterCollectionInfo
// Struct Size::0x0018
struct FMaterialParameterCollectionInfo
{
    FGuid                                         StateId;                                                      // 0x0000(0x0010)
    FMaterialParameterCollection*                 ParameterCollection;                                          // 0x0010(0x0008)
};


// ScriptStruct  Engine.MaterialFunctionInfo
// Struct Size::0x0018
struct FMaterialFunctionInfo
{
    FGuid                                         StateId;                                                      // 0x0000(0x0010)
    FMaterialFunctionInterface*                   Function;                                                     // 0x0010(0x0008)
};


// ScriptStruct  Engine.MaterialCachedParameters
// Struct Size::0x0150
struct FMaterialCachedParameters
{
    FMaterialCachedParameterEntry                 RuntimeEntries;                                               // 0x0000(0x0030)
    char                                          pa_0030[0x00C0]                                               // 0x0030(0x00C0)
    TArray<float>                                 ScalarValues;                                                 // 0x00F0(0x0010)
    TArray<FLinearColor>                          VectorValues;                                                 // 0x0100(0x0010)
    TArray<FTexture*>                             TextureValues;                                                // 0x0110(0x0010)
    TArray<FFont*>                                FontValues;                                                   // 0x0120(0x0010)
    TArray<int32_t>                               FontPageValues;                                               // 0x0130(0x0010)
    TArray<FRuntimeVirtualTexture*>               RuntimeVirtualTextureValues;                                  // 0x0140(0x0010)
};


// ScriptStruct  Engine.MaterialCachedParameterEntry
// Struct Size::0x0030
struct FMaterialCachedParameterEntry
{
    TArray<uint64_t>                              NameHashes;                                                   // 0x0000(0x0010)
    TArray<FMaterialParameterInfo>                ParameterInfos;                                               // 0x0010(0x0010)
    TArray<FGuid>                                 ExpressionGuids;                                              // 0x0020(0x0010)
};


// ScriptStruct  Engine.MaterialParameterInfo
// Struct Size::0x0014
struct FMaterialParameterInfo
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    enum class EMaterialParameterAssociation      Association;                                                  // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       Index;                                                        // 0x0010(0x0004)
};


// ScriptStruct  Engine.StaticComponentMaskValue
// Struct Size::0x0004
struct FStaticComponentMaskValue
{
    bool                                          R;                                                            // 0x0000(0x0001)
    bool                                          G;                                                            // 0x0001(0x0001)
    bool                                          B;                                                            // 0x0002(0x0001)
    bool                                          A;                                                            // 0x0003(0x0001)
};


// ScriptStruct  Engine.ParameterChannelNames
// Struct Size::0x0060
struct FParameterChannelNames
{
    FText                                         R;                                                            // 0x0000(0x0018)
    FText                                         G;                                                            // 0x0018(0x0018)
    FText                                         B;                                                            // 0x0030(0x0018)
    FText                                         A;                                                            // 0x0048(0x0018)
};


// ScriptStruct  Engine.CustomDefine
// Struct Size::0x0020
struct FCustomDefine
{
    FString                                       DefineName;                                                   // 0x0000(0x0010)
    FString                                       DefineValue;                                                  // 0x0010(0x0010)
};


// ScriptStruct  Engine.CustomOutput
// Struct Size::0x0010
struct FCustomOutput
{
    FName                                         OutputName;                                                   // 0x0000(0x000C)
    enum class ECustomMaterialOutputType          OutputType;                                                   // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.CustomInput
// Struct Size::0x0028
struct FCustomInput
{
    FName                                         InputName;                                                    // 0x0000(0x000C)
    FExpressionInput                              Input;                                                        // 0x000C(0x001C)
};


// ScriptStruct  Engine.FunctionExpressionOutput
// Struct Size::0x0028
struct FFunctionExpressionOutput
{
    FMaterialExpressionFunctionOutput*            ExpressionOutput;                                             // 0x0000(0x0008)
    FGuid                                         ExpressionOutputId;                                           // 0x0008(0x0010)
    FExpressionOutput                             Output;                                                       // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.FunctionExpressionInput
// Struct Size::0x0038
struct FFunctionExpressionInput
{
    FMaterialExpressionFunctionInput*             ExpressionInput;                                              // 0x0000(0x0008)
    FGuid                                         ExpressionInputId;                                            // 0x0008(0x0010)
    FExpressionInput                              Input;                                                        // 0x0018(0x001C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.FontParameterValue
// Struct Size::0x0038
struct FFontParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0014)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FFont*                                        FontValue;                                                    // 0x0018(0x0008)
    int32_t                                       FontPage;                                                     // 0x0020(0x0004)
    FGuid                                         ExpressionGUID;                                               // 0x0024(0x0010)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.RuntimeVirtualTextureParameterValue
// Struct Size::0x0030
struct FRuntimeVirtualTextureParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0014)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FRuntimeVirtualTexture*                       ParameterValue;                                               // 0x0018(0x0008)
    FGuid                                         ExpressionGUID;                                               // 0x0020(0x0010)
};


// ScriptStruct  Engine.TextureParameterValue
// Struct Size::0x0030
struct FTextureParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0014)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FTexture*                                     ParameterValue;                                               // 0x0018(0x0008)
    FGuid                                         ExpressionGUID;                                               // 0x0020(0x0010)
};


// ScriptStruct  Engine.VectorParameterValue
// Struct Size::0x0034
struct FVectorParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0014)
    FLinearColor                                  ParameterValue;                                               // 0x0014(0x0010)
    FGuid                                         ExpressionGUID;                                               // 0x0024(0x0010)
};


// ScriptStruct  Engine.ScalarParameterValue
// Struct Size::0x0028
struct FScalarParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0014)
    float                                         ParameterValue;                                               // 0x0014(0x0004)
    FGuid                                         ExpressionGUID;                                               // 0x0018(0x0010)
};


// ScriptStruct  Engine.ScalarParameterAtlasInstanceData
// Struct Size::0x0068
struct FScalarParameterAtlasInstanceData
{
    bool                                          bIsUsedAsAtlasPosition;                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TSoftObjectPtr<FCurveLinearColor>             Curve;                                                        // 0x0008(0x0030)
    TSoftObjectPtr<FCurveLinearColorAtlas>        Atlas;                                                        // 0x0038(0x0030)
};


// ScriptStruct  Engine.MaterialInstanceBasePropertyOverrides
// Struct Size::0x003C
struct FMaterialInstanceBasePropertyOverrides
{
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    bool                                          bOverride;                                                    // 0x0001(0x0001)
    bool                                          bOverride;                                                    // 0x0002(0x0001)
    bool                                          bOverride;                                                    // 0x0003(0x0001)
    bool                                          bOverride;                                                    // 0x0004(0x0001)
    bool                                          bOverride;                                                    // 0x0005(0x0001)
    bool                                          bOverride;                                                    // 0x0006(0x0001)
    bool                                          bOverride;                                                    // 0x0007(0x0001)
    bool                                          bOverride;                                                    // 0x0008(0x0001)
    bool                                          bOverride;                                                    // 0x0009(0x0001)
    bool                                          bOverride;                                                    // 0x000A(0x0001)
    bool                                          bOverride;                                                    // 0x000B(0x0001)
    bool                                          bOverride;                                                    // 0x000C(0x0001)
    bool                                          bOverride;                                                    // 0x000D(0x0001)
    bool                                          bOverride;                                                    // 0x000E(0x0001)
    bool                                          bOverride;                                                    // 0x000F(0x0001)
    bool                                          bOverride;                                                    // 0x0010(0x0001)
    bool                                          bOverride;                                                    // 0x0011(0x0001)
    bool                                          bOverride;                                                    // 0x0012(0x0001)
    bool                                          bOverride;                                                    // 0x0013(0x0001)
    bool                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         IndirectLightingContributionValue;                            // 0x0018(0x0004)
    enum class EMaterialLightingSource            LightingSource;                                               // 0x001C(0x0001)
    enum class EMaterialLightingSourceColor       LightingSourceColor;                                          // 0x001D(0x0001)
    enum class EMaterialLightingSourceDirectionalityLightingSourceDirectionality;                               // 0x001E(0x0001)
    enum class EMaterialSpecularModel             SpecularModel;                                                // 0x001F(0x0001)
    enum class EMaterialCubemapMode               CubemapMode;                                                  // 0x0020(0x0001)
    enum class EMaterialCubemapSource             CubemapSource;                                                // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
    int32_t                                       SortPriorityOffset;                                           // 0x0024(0x0004)
    bool                                          bTranslucencyWritingDepth;                                    // 0x0028(0x0001)
    enum class EAresTranslucencyDepthMode         TranslucencyDepthMode;                                        // 0x0029(0x0001)
    bool                                          bForceDepthPrepass;                                           // 0x002A(0x0001)
    bool                                          bFloorOnlyDecal;                                              // 0x002B(0x0001)
    bool                                          bWorldDecal;                                                  // 0x002C(0x0001)
    bool                                          bFresnel;                                                     // 0x002D(0x0001)
    bool                                          bDecalDiffuseLighting;                                        // 0x002E(0x0001)
    bool                                          bVertexFog;                                                   // 0x002F(0x0001)
    bool                                          bDitherOpacityMask;                                           // 0x0030(0x0001)
    enum class EMaterialAresEnvironmentType       AresEnvironmentType;                                          // 0x0031(0x0001)
    bool                                          bUseAres3PClipping;                                           // 0x0032(0x0001)
    bool                                          bUseAresProjectionMatrixIndex;                                // 0x0033(0x0001)
    char                                          TwoSided;                                                     // 0x0034(0x0001)
    char                                          DitheredLODTransition;                                        // 0x0034(0x0001)
    char                                          bCastDynamicShadowAsMasked;                                   // 0x0034(0x0001)
    enum class EBlendMode                         BlendMode;                                                    // 0x0035(0x0001)
    enum class EMaterialShadingModel              ShadingModel;                                                 // 0x0036(0x0001)
    char                                          pa_0037[0x0001]                                               // 0x0037(0x0001)
    float                                         OpacityMaskClipValue;                                         // 0x0038(0x0004)
};


// ScriptStruct  Engine.MaterialTextureInfo
// Struct Size::0x0014
struct FMaterialTextureInfo
{
    float                                         SamplingScale;                                                // 0x0000(0x0004)
    int32_t                                       UVChannelIndex;                                               // 0x0004(0x0004)
    FName                                         TextureName;                                                  // 0x0008(0x000C)
};


// ScriptStruct  Engine.LightmassMaterialInterfaceSettings
// Struct Size::0x0024
struct FLightmassMaterialInterfaceSettings
{
    float                                         EmissiveBoost;                                                // 0x0000(0x0004)
    float                                         DiffuseBoost;                                                 // 0x0004(0x0004)
    float                                         ExportResolutionScale;                                        // 0x0008(0x0004)
    char                                          bCastShadowAsMasked;                                          // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    char                                          bCastShadowAsTranslucent;                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         MaskedTranslucentOpacity;                                     // 0x0014(0x0004)
    char                                          bOverrideCastShadowAsMasked;                                  // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    char                                          bOverrideCastShadowAsTranslucent;                             // 0x001C(0x0001)
    char                                          bOverrideMaskedTranslucentOpacity;                            // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    char                                          bOverrideEmissiveBoost;                                       // 0x0020(0x0001)
    char                                          bOverrideDiffuseBoost;                                        // 0x0020(0x0001)
    char                                          bOverrideExportResolutionScale;                               // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
};


// ScriptStruct  Engine.MaterialLayersFunctions
// Struct Size::0x0040
struct FMaterialLayersFunctions
{
    TArray<FMaterialFunctionInterface*>           Layers;                                                       // 0x0000(0x0010)
    TArray<FMaterialFunctionInterface*>           Blends;                                                       // 0x0010(0x0010)
    TArray<bool>                                  LayerStates;                                                  // 0x0020(0x0010)
    FString                                       KeyString;                                                    // 0x0030(0x0010)
};


// ScriptStruct  Engine.CollectionParameterBase
// Struct Size::0x001C
struct FCollectionParameterBase
{
    FName                                         ParameterName;                                                // 0x0000(0x000C)
    FGuid                                         Id;                                                           // 0x000C(0x0010)
};


// ScriptStruct  Engine.CollectionVectorParameter
// Struct Size::0x002C
struct FCollectionVectorParameter : public FCollectionParameterBase
{
    FLinearColor                                  DefaultValue;                                                 // 0x001C(0x0010)
};


// ScriptStruct  Engine.CollectionScalarParameter
// Struct Size::0x0020
struct FCollectionScalarParameter : public FCollectionParameterBase
{
    float                                         DefaultValue;                                                 // 0x001C(0x0004)
};


// ScriptStruct  Engine.InterpGroupActorInfo
// Struct Size::0x0020
struct FInterpGroupActorInfo
{
    FName                                         ObjectName;                                                   // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<AActor*>                               Actors;                                                       // 0x0010(0x0010)
};


// ScriptStruct  Engine.CameraCutInfo
// Struct Size::0x0010
struct FCameraCutInfo
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    float                                         TimeStamp;                                                    // 0x000C(0x0004)
};


// ScriptStruct  Engine.MemberReference
// Struct Size::0x0038
struct FMemberReference
{
    UObject*                                      MemberParent;                                                 // 0x0000(0x0008)
    FString                                       MemberScope;                                                  // 0x0008(0x0010)
    FName                                         MemberName;                                                   // 0x0018(0x000C)
    FGuid                                         MemberGuid;                                                   // 0x0024(0x0010)
    bool                                          bSelfContext;                                                 // 0x0034(0x0001)
    bool                                          bWasDeprecated;                                               // 0x0035(0x0001)
    char                                          pa_0036[0x0002]                                               // 0x0036(0x0002)
};


// ScriptStruct  Engine.MeshInstancingSettings
// Struct Size::0x0018
struct FMeshInstancingSettings
{
    AActor*                                       ActorClassToUse;                                              // 0x0000(0x0008)
    int32_t                                       InstanceReplacementThreshold;                                 // 0x0008(0x0004)
    enum class EMeshInstancingReplacementMethod   MeshReplacementMethod;                                        // 0x000C(0x0001)
    bool                                          bSkipMeshesWithVertexColors;                                  // 0x000D(0x0001)
    bool                                          bUseHLODVolumes;                                              // 0x000E(0x0001)
    char                                          pa_000F[0x0001]                                               // 0x000F(0x0001)
    FInstancedStaticMeshComponent*                ISMComponentToUse;                                            // 0x0010(0x0008)
};


// ScriptStruct  Engine.MeshMergingSettings
// Struct Size::0x00A0
struct FMeshMergingSettings
{
    int32_t                                       TargetLightMapResolution;                                     // 0x0000(0x0004)
    enum class EUVOutput                          OutputUVs;                                                    // 0x0004(0x0001)
    char                                          pa_0005[0x0007]                                               // 0x0005(0x0007)
    FMaterialProxySettings                        MaterialSettings;                                             // 0x000C(0x0088)
    int32_t                                       GutterSize;                                                   // 0x0094(0x0004)
    int32_t                                       SpecificLOD;                                                  // 0x0098(0x0004)
    enum class EMeshLODSelectionType              LODSelectionType;                                             // 0x009C(0x0001)
    char                                          bGenerateLightMapUV;                                          // 0x009D(0x0001)
    char                                          bComputedLightMapResolution;                                  // 0x009D(0x0001)
    char                                          bPivotPointAtZero;                                            // 0x009D(0x0001)
    char                                          bMergePhysicsData;                                            // 0x009D(0x0001)
    char                                          bMergeMaterials;                                              // 0x009D(0x0001)
    char                                          bCreateMergedMaterial;                                        // 0x009D(0x0001)
    char                                          bBakeVertexDataToMesh;                                        // 0x009D(0x0001)
    char                                          bUseVertexDataForBakingMaterial;                              // 0x009D(0x0001)
    char                                          bUseTextureBinning;                                           // 0x009E(0x0001)
    char                                          bReuseMeshLightmapUVs;                                        // 0x009E(0x0001)
    char                                          bMergeEquivalentMaterials;                                    // 0x009E(0x0001)
    char                                          bUseLandscapeCulling;                                         // 0x009E(0x0001)
    char                                          bIncludeImposters;                                            // 0x009E(0x0001)
    char                                          bAllowDistanceField;                                          // 0x009E(0x0001)
    char                                          pa_009F[0x0001]                                               // 0x009F(0x0001)
};


// ScriptStruct  Engine.MeshProxySettings
// Struct Size::0x00A8
struct FMeshProxySettings
{
    int32_t                                       ScreenSize;                                                   // 0x0000(0x0004)
    float                                         VoxelSize;                                                    // 0x0004(0x0004)
    FMaterialProxySettings                        MaterialSettings;                                             // 0x0008(0x0088)
    float                                         MergeDistance;                                                // 0x0090(0x0004)
    FColor                                        UnresolvedGeometryColor;                                      // 0x0094(0x0004)
    float                                         MaxRayCastDist;                                               // 0x0098(0x0004)
    float                                         HardAngleThreshold;                                           // 0x009C(0x0004)
    int32_t                                       LightMapResolution;                                           // 0x00A0(0x0004)
    enum class EProxyNormalComputationMethod      NormalCalculationMethod;                                      // 0x00A4(0x0001)
    enum class ELandscapeCullingPrecision         LandscapeCullingPrecision;                                    // 0x00A5(0x0001)
    char                                          bCalculateCorrectLODModel;                                    // 0x00A6(0x0001)
    char                                          bOverrideVoxelSize;                                           // 0x00A6(0x0001)
    char                                          bOverrideTransferDistance;                                    // 0x00A6(0x0001)
    char                                          bUseHardAngleThreshold;                                       // 0x00A6(0x0001)
    char                                          bComputeLightMapResolution;                                   // 0x00A6(0x0001)
    char                                          bRecalculateNormals;                                          // 0x00A6(0x0001)
    char                                          bUseLandscapeCulling;                                         // 0x00A6(0x0001)
    char                                          bAllowAdjacency;                                              // 0x00A6(0x0001)
    char                                          bAllowDistanceField;                                          // 0x00A7(0x0001)
    char                                          bReuseMeshLightmapUVs;                                        // 0x00A7(0x0001)
    char                                          bCreateCollision;                                             // 0x00A7(0x0001)
    char                                          bAllowVertexColors;                                           // 0x00A7(0x0001)
    char                                          bGenerateLightmapUVs;                                         // 0x00A7(0x0001)
};


// ScriptStruct  Engine.MeshReductionSettings
// Struct Size::0x0024
struct FMeshReductionSettings
{
    float                                         PercentTriangles;                                             // 0x0000(0x0004)
    float                                         PercentVertices;                                              // 0x0004(0x0004)
    float                                         MaxDeviation;                                                 // 0x0008(0x0004)
    float                                         PixelError;                                                   // 0x000C(0x0004)
    float                                         WeldingThreshold;                                             // 0x0010(0x0004)
    float                                         HardAngleThreshold;                                           // 0x0014(0x0004)
    int32_t                                       BaseLODModel;                                                 // 0x0018(0x0004)
    enum class EMeshFeatureImportance             SilhouetteImportance;                                         // 0x001C(0x0001)
    enum class EMeshFeatureImportance             TextureImportance;                                            // 0x001D(0x0001)
    enum class EMeshFeatureImportance             ShadingImportance;                                            // 0x001E(0x0001)
    char                                          bRecalculateNormals;                                          // 0x001F(0x0001)
    char                                          bGenerateUniqueLightmapUVs;                                   // 0x001F(0x0001)
    char                                          bKeepSymmetry;                                                // 0x001F(0x0001)
    char                                          bVisibilityAided;                                             // 0x001F(0x0001)
    char                                          bCullOccluded;                                                // 0x001F(0x0001)
    enum class EStaticMeshReductionTerimationCriterionTerminationCriterion;                                     // 0x0020(0x0001)
    enum class EMeshFeatureImportance             VisibilityAggressiveness;                                     // 0x0021(0x0001)
    enum class EMeshFeatureImportance             VertexColorImportance;                                        // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
};


// ScriptStruct  Engine.ParticleDecalManager
// Struct Size::0x0060
struct FParticleDecalManager
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TMap<FMaterialInterface*,FParticleDecalComponentPool>MaterialToDecalPoolMap;                                // 0x0008(0x0050)
    FWorld*                                       ManagerWorld;                                                 // 0x0058(0x0008)
};


// ScriptStruct  Engine.ParticleDecalComponentPool
// Struct Size::0x0038
struct FParticleDecalComponentPool
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<FMeshParticleDecalComponent*>          FreeDecalsArray;                                              // 0x0008(0x0010)
    FMaterialInterface*                           MaterialTemplate;                                             // 0x0018(0x0008)
    char                                          pa_0020[0x0018]                                               // 0x0020(0x0018)
};


// ScriptStruct  Engine.PurchaseInfo
// Struct Size::0x0040
struct FPurchaseInfo
{
    FString                                       Identifier;                                                   // 0x0000(0x0010)
    FString                                       DisplayName;                                                  // 0x0010(0x0010)
    FString                                       DisplayDescription;                                           // 0x0020(0x0010)
    FString                                       DisplayPrice;                                                 // 0x0030(0x0010)
};


// ScriptStruct  Engine.NameCurve
// Struct Size::0x0078
struct FNameCurve : public FIndexedCurve
{
    TArray<FNameCurveKey>                         Keys;                                                         // 0x0068(0x0010)
};


// ScriptStruct  Engine.NameCurveKey
// Struct Size::0x0010
struct FNameCurveKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    FName                                         Value;                                                        // 0x0004(0x000C)
};


// ScriptStruct  Engine.NavAvoidanceMask
// Struct Size::0x0004
struct FNavAvoidanceMask
{
    char                                          bGroup0;                                                      // 0x0000(0x0001)
    char                                          bGroup1;                                                      // 0x0000(0x0001)
    char                                          bGroup2;                                                      // 0x0000(0x0001)
    char                                          bGroup3;                                                      // 0x0000(0x0001)
    char                                          bGroup4;                                                      // 0x0000(0x0001)
    char                                          bGroup5;                                                      // 0x0000(0x0001)
    char                                          bGroup6;                                                      // 0x0000(0x0001)
    char                                          bGroup7;                                                      // 0x0000(0x0001)
    char                                          bGroup8;                                                      // 0x0001(0x0001)
    char                                          bGroup9;                                                      // 0x0001(0x0001)
    char                                          bGroup10;                                                     // 0x0001(0x0001)
    char                                          bGroup11;                                                     // 0x0001(0x0001)
    char                                          bGroup12;                                                     // 0x0001(0x0001)
    char                                          bGroup13;                                                     // 0x0001(0x0001)
    char                                          bGroup14;                                                     // 0x0001(0x0001)
    char                                          bGroup15;                                                     // 0x0001(0x0001)
    char                                          bGroup16;                                                     // 0x0002(0x0001)
    char                                          bGroup17;                                                     // 0x0002(0x0001)
    char                                          bGroup18;                                                     // 0x0002(0x0001)
    char                                          bGroup19;                                                     // 0x0002(0x0001)
    char                                          bGroup20;                                                     // 0x0002(0x0001)
    char                                          bGroup21;                                                     // 0x0002(0x0001)
    char                                          bGroup22;                                                     // 0x0002(0x0001)
    char                                          bGroup23;                                                     // 0x0002(0x0001)
    char                                          bGroup24;                                                     // 0x0003(0x0001)
    char                                          bGroup25;                                                     // 0x0003(0x0001)
    char                                          bGroup26;                                                     // 0x0003(0x0001)
    char                                          bGroup27;                                                     // 0x0003(0x0001)
    char                                          bGroup28;                                                     // 0x0003(0x0001)
    char                                          bGroup29;                                                     // 0x0003(0x0001)
    char                                          bGroup30;                                                     // 0x0003(0x0001)
    char                                          bGroup31;                                                     // 0x0003(0x0001)
};


// ScriptStruct  Engine.MovementProperties
// Struct Size::0x0001
struct FMovementProperties
{
    char                                          bCanCrouch;                                                   // 0x0000(0x0001)
    char                                          bCanJump;                                                     // 0x0000(0x0001)
    char                                          bCanWalk;                                                     // 0x0000(0x0001)
    char                                          bCanSwim;                                                     // 0x0000(0x0001)
    char                                          bCanFly;                                                      // 0x0000(0x0001)
};


// ScriptStruct  Engine.NavAgentProperties
// Struct Size::0x0038
struct FNavAgentProperties : public FMovementProperties
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         AgentRadius;                                                  // 0x0004(0x0004)
    float                                         AgentHeight;                                                  // 0x0008(0x0004)
    float                                         AgentStepHeight;                                              // 0x000C(0x0004)
    float                                         NavWalkingSearchHeightScale;                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FSoftClassPath                                PreferredNavData;                                             // 0x0018(0x0020)
};


// ScriptStruct  Engine.NavDataConfig
// Struct Size::0x0090
struct FNavDataConfig : public FNavAgentProperties
{
    FName                                         Name;                                                         // 0x0038(0x000C)
    FColor                                        Color;                                                        // 0x0044(0x0004)
    FVector                                       DefaultQueryExtent;                                           // 0x0048(0x000C)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    AActor*                                       NavigationDataClass;                                          // 0x0058(0x0008)
    TSoftClassPtr<UObject>                        NavDataClass;                                                 // 0x0060(0x0030)
};


// ScriptStruct  Engine.NavigationSegmentLink
// Struct Size::0x0060
struct FNavigationSegmentLink : public FNavigationLinkBase
{
    FVector                                       LeftStart;                                                    // 0x0030(0x000C)
    FVector                                       LeftEnd;                                                      // 0x003C(0x000C)
    FVector                                       RightStart;                                                   // 0x0048(0x000C)
    FVector                                       RightEnd;                                                     // 0x0054(0x000C)
};


// ScriptStruct  Engine.NavigationLink
// Struct Size::0x0048
struct FNavigationLink : public FNavigationLinkBase
{
    FVector                                       Left;                                                         // 0x0030(0x000C)
    FVector                                       Right;                                                        // 0x003C(0x000C)
};


// ScriptStruct  Engine.ChannelDefinition
// Struct Size::0x0030
struct FChannelDefinition
{
    FName                                         ChannelName;                                                  // 0x0000(0x000C)
    FName                                         ClassName;                                                    // 0x000C(0x000C)
    UObject*                                      ChannelClass;                                                 // 0x0018(0x0008)
    int32_t                                       StaticChannelIndex;                                           // 0x0020(0x0004)
    bool                                          bTickOnCreate;                                                // 0x0024(0x0001)
    bool                                          bServerOpen;                                                  // 0x0025(0x0001)
    bool                                          bClientOpen;                                                  // 0x0026(0x0001)
    bool                                          bInitialServer;                                               // 0x0027(0x0001)
    bool                                          bInitialClient;                                               // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  Engine.PacketSimulationSettings
// Struct Size::0x0034
struct FPacketSimulationSettings
{
    int32_t                                       PktLoss;                                                      // 0x0000(0x0004)
    int32_t                                       PktLossMaxSize;                                               // 0x0004(0x0004)
    int32_t                                       PktLossMinSize;                                               // 0x0008(0x0004)
    int32_t                                       PktOrder;                                                     // 0x000C(0x0004)
    int32_t                                       PktDup;                                                       // 0x0010(0x0004)
    int32_t                                       PktLag;                                                       // 0x0014(0x0004)
    int32_t                                       PktLagVariance;                                               // 0x0018(0x0004)
    int32_t                                       PktLagMin;                                                    // 0x001C(0x0004)
    int32_t                                       PktLagMax;                                                    // 0x0020(0x0004)
    int32_t                                       PktIncomingLagMin;                                            // 0x0024(0x0004)
    int32_t                                       PktIncomingLagMax;                                            // 0x0028(0x0004)
    int32_t                                       PktIncomingLoss;                                              // 0x002C(0x0004)
    int32_t                                       PktJitter;                                                    // 0x0030(0x0004)
};


// ScriptStruct  Engine.NetworkEmulationProfileDescription
// Struct Size::0x0020
struct FNetworkEmulationProfileDescription
{
    FString                                       ProfileName;                                                  // 0x0000(0x0010)
    FString                                       ToolTip;                                                      // 0x0010(0x0010)
};


// ScriptStruct  Engine.NodeItem
// Struct Size::0x0040
struct FNodeItem
{
    FName                                         ParentName;                                                   // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
};


// ScriptStruct  Engine.ParticleBurst
// Struct Size::0x000C
struct FParticleBurst
{
    int32_t                                       Count;                                                        // 0x0000(0x0004)
    int32_t                                       CountLow;                                                     // 0x0004(0x0004)
    float                                         Time;                                                         // 0x0008(0x0004)
};


// ScriptStruct  Engine.ParticleRandomSeedInfo
// Struct Size::0x0020
struct FParticleRandomSeedInfo
{
    FName                                         ParameterName;                                                // 0x0000(0x000C)
    char                                          bGetSeedFromInstance;                                         // 0x000C(0x0001)
    char                                          bInstanceSeedIsIndex;                                         // 0x000C(0x0001)
    char                                          bResetSeedOnEmitterLooping;                                   // 0x000C(0x0001)
    char                                          bRandomlySelectSeedArray;                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    TArray<int32_t>                               RandomSeeds;                                                  // 0x0010(0x0010)
};


// ScriptStruct  Engine.ParticleCurvePair
// Struct Size::0x0018
struct FParticleCurvePair
{
    FString                                       CurveName;                                                    // 0x0000(0x0010)
    UObject*                                      CurveObject;                                                  // 0x0010(0x0008)
};


// ScriptStruct  Engine.BeamModifierOptions
// Struct Size::0x0004
struct FBeamModifierOptions
{
    char                                          bModify;                                                      // 0x0000(0x0001)
    char                                          bScale;                                                       // 0x0000(0x0001)
    char                                          bLock;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  Engine.ParticleEvent
// Struct Size::0x0030
struct FParticleEvent
{
    enum class EParticleEventType                 Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Frequency;                                                    // 0x0004(0x0004)
    int32_t                                       ParticleFrequency;                                            // 0x0008(0x0004)
    char                                          FirstTimeOnly;                                                // 0x000C(0x0001)
    char                                          LastTimeOnly;                                                 // 0x000C(0x0001)
    char                                          UseReflectedImpactVector;                                     // 0x000C(0x0001)
    char                                          bUseOrbitOffset;                                              // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FName                                         CustomName;                                                   // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FParticleModuleEventSendToGame*>       ParticleModuleEventsToSendToGame;                             // 0x0020(0x0010)
};


// ScriptStruct  Engine.LocationBoneSocketInfo
// Struct Size::0x0018
struct FLocationBoneSocketInfo
{
    FName                                         BoneSocketName;                                               // 0x0000(0x000C)
    FVector                                       Offset;                                                       // 0x000C(0x000C)
};


// ScriptStruct  Engine.OrbitOptions
// Struct Size::0x0004
struct FOrbitOptions
{
    char                                          bProcessDuringSpawn;                                          // 0x0000(0x0001)
    char                                          bProcessDuringUpdate;                                         // 0x0000(0x0001)
    char                                          bUseEmitterTime;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  Engine.EmitterDynamicParameter
// Struct Size::0x0048
struct FEmitterDynamicParameter
{
    FName                                         ParamName;                                                    // 0x0000(0x000C)
    char                                          bUseEmitterTime;                                              // 0x000C(0x0001)
    char                                          bSpawnTimeOnly;                                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    enum class EEmitterDynamicParameterValue      ValueMethod;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    char                                          bScaleVelocityByParamValue;                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FRawDistributionFloat                         ParamValue;                                                   // 0x0018(0x0030)
};


// ScriptStruct  Engine.BeamTargetData
// Struct Size::0x0010
struct FBeamTargetData
{
    FName                                         TargetName;                                                   // 0x0000(0x000C)
    float                                         TargetPercentage;                                             // 0x000C(0x0004)
};


// ScriptStruct  Engine.GPUSpriteResourceData
// Struct Size::0x0160
struct FGPUSpriteResourceData
{
    TArray<FColor>                                QuantizedColorSamples;                                        // 0x0000(0x0010)
    TArray<FColor>                                QuantizedMiscSamples;                                         // 0x0010(0x0010)
    TArray<FColor>                                QuantizedSimulationAttrSamples;                               // 0x0020(0x0010)
    FVector4                                      ColorScale;                                                   // 0x0030(0x0010)
    FVector4                                      ColorBias;                                                    // 0x0040(0x0010)
    FVector4                                      MiscScale;                                                    // 0x0050(0x0010)
    FVector4                                      MiscBias;                                                     // 0x0060(0x0010)
    FVector4                                      SimulationAttrCurveScale;                                     // 0x0070(0x0010)
    FVector4                                      SimulationAttrCurveBias;                                      // 0x0080(0x0010)
    FVector4                                      SubImageSize;                                                 // 0x0090(0x0010)
    FVector4                                      SizeBySpeed;                                                  // 0x00A0(0x0010)
    FVector                                       ConstantAcceleration;                                         // 0x00B0(0x000C)
    FVector                                       OrbitOffsetBase;                                              // 0x00BC(0x000C)
    FVector                                       OrbitOffsetRange;                                             // 0x00C8(0x000C)
    FVector                                       OrbitFrequencyBase;                                           // 0x00D4(0x000C)
    FVector                                       OrbitFrequencyRange;                                          // 0x00E0(0x000C)
    FVector                                       OrbitPhaseBase;                                               // 0x00EC(0x000C)
    FVector                                       OrbitPhaseRange;                                              // 0x00F8(0x000C)
    float                                         GlobalVectorFieldScale;                                       // 0x0104(0x0004)
    float                                         GlobalVectorFieldTightness;                                   // 0x0108(0x0004)
    float                                         PerParticleVectorFieldScale;                                  // 0x010C(0x0004)
    float                                         PerParticleVectorFieldBias;                                   // 0x0110(0x0004)
    float                                         DragCoefficientScale;                                         // 0x0114(0x0004)
    float                                         DragCoefficientBias;                                          // 0x0118(0x0004)
    float                                         ResilienceScale;                                              // 0x011C(0x0004)
    float                                         ResilienceBias;                                               // 0x0120(0x0004)
    float                                         CollisionRadiusScale;                                         // 0x0124(0x0004)
    float                                         CollisionRadiusBias;                                          // 0x0128(0x0004)
    float                                         CollisionTimeBias;                                            // 0x012C(0x0004)
    float                                         CollisionRandomSpread;                                        // 0x0130(0x0004)
    float                                         CollisionRandomDistribution;                                  // 0x0134(0x0004)
    float                                         OneMinusFriction;                                             // 0x0138(0x0004)
    float                                         RotationRateScale;                                            // 0x013C(0x0004)
    float                                         CameraMotionBlurAmount;                                       // 0x0140(0x0004)
    enum class EParticleScreenAlignment           ScreenAlignment;                                              // 0x0144(0x0001)
    enum class EParticleAxisLock                  LockAxisFlag;                                                 // 0x0145(0x0001)
    char                                          pa_0146[0x0002]                                               // 0x0146(0x0002)
    FVector2D                                     PivotOffset;                                                  // 0x0148(0x0008)
    char                                          bRemoveHMDRoll;                                               // 0x0150(0x0001)
    char                                          pa_0151[0x0003]                                               // 0x0151(0x0003)
    float                                         MinFacingCameraBlendDistance;                                 // 0x0154(0x0004)
    float                                         MaxFacingCameraBlendDistance;                                 // 0x0158(0x0004)
    char                                          pa_015C[0x0004]                                               // 0x015C(0x0004)
};


// ScriptStruct  Engine.GPUSpriteEmitterInfo
// Struct Size::0x0280
struct FGPUSpriteEmitterInfo
{
    FParticleModuleRequired*                      RequiredModule;                                               // 0x0000(0x0008)
    FParticleModuleSpawn*                         SpawnModule;                                                  // 0x0008(0x0008)
    FParticleModuleSpawnPerUnit*                  SpawnPerUnitModule;                                           // 0x0010(0x0008)
    TArray<FParticleModule*>                      SpawnModules;                                                 // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FGPUSpriteLocalVectorFieldInfo                LocalVectorField;                                             // 0x0030(0x0070)
    FFloatDistribution                            VectorFieldScale;                                             // 0x00A0(0x0020)
    FFloatDistribution                            DragCoefficient;                                              // 0x00C0(0x0020)
    FFloatDistribution                            PointAttractorStrength;                                       // 0x00E0(0x0020)
    FFloatDistribution                            Resilience;                                                   // 0x0100(0x0020)
    FVector                                       ConstantAcceleration;                                         // 0x0120(0x000C)
    FVector                                       PointAttractorPosition;                                       // 0x012C(0x000C)
    float                                         PointAttractorRadiusSq;                                       // 0x0138(0x0004)
    FVector                                       OrbitOffsetBase;                                              // 0x013C(0x000C)
    FVector                                       OrbitOffsetRange;                                             // 0x0148(0x000C)
    FVector2D                                     InvMaxSize;                                                   // 0x0154(0x0008)
    float                                         InvRotationRateScale;                                         // 0x015C(0x0004)
    float                                         MaxLifetime;                                                  // 0x0160(0x0004)
    int32_t                                       MaxParticleCount;                                             // 0x0164(0x0004)
    enum class EParticleScreenAlignment           ScreenAlignment;                                              // 0x0168(0x0001)
    enum class EParticleAxisLock                  LockAxisFlag;                                                 // 0x0169(0x0001)
    char                                          pa_016A[0x0002]                                               // 0x016A(0x0002)
    char                                          bEnableCollision;                                             // 0x016C(0x0001)
    char                                          pa_016D[0x0003]                                               // 0x016D(0x0003)
    enum class EParticleCollisionMode             CollisionMode;                                                // 0x0170(0x0001)
    char                                          pa_0171[0x0003]                                               // 0x0171(0x0003)
    char                                          bRemoveHMDRoll;                                               // 0x0174(0x0001)
    char                                          pa_0175[0x0003]                                               // 0x0175(0x0003)
    float                                         MinFacingCameraBlendDistance;                                 // 0x0178(0x0004)
    float                                         MaxFacingCameraBlendDistance;                                 // 0x017C(0x0004)
    FRawDistributionVector                        DynamicColor;                                                 // 0x0180(0x0048)
    FRawDistributionFloat                         DynamicAlpha;                                                 // 0x01C8(0x0030)
    FRawDistributionVector                        DynamicColorScale;                                            // 0x01F8(0x0048)
    FRawDistributionFloat                         DynamicAlphaScale;                                            // 0x0240(0x0030)
    char                                          pa_0270[0x0010]                                               // 0x0270(0x0010)
};


// ScriptStruct  Engine.GPUSpriteLocalVectorFieldInfo
// Struct Size::0x0070
struct FGPUSpriteLocalVectorFieldInfo
{
    FVectorField*                                 Field;                                                        // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FRotator                                      MinInitialRotation;                                           // 0x0040(0x000C)
    FRotator                                      MaxInitialRotation;                                           // 0x004C(0x000C)
    FRotator                                      RotationRate;                                                 // 0x0058(0x000C)
    float                                         Intensity;                                                    // 0x0064(0x0004)
    float                                         Tightness;                                                    // 0x0068(0x0004)
    char                                          bIgnoreComponentTransform;                                    // 0x006C(0x0001)
    char                                          bTileX;                                                       // 0x006C(0x0001)
    char                                          bTileY;                                                       // 0x006C(0x0001)
    char                                          bTileZ;                                                       // 0x006C(0x0001)
    char                                          bUseFixDT;                                                    // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
};


// ScriptStruct  Engine.NamedEmitterMaterial
// Struct Size::0x0018
struct FNamedEmitterMaterial
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FMaterialInterface*                           Material;                                                     // 0x0010(0x0008)
};


// ScriptStruct  Engine.LODSoloTrack
// Struct Size::0x0010
struct FLODSoloTrack
{
    TArray<char>                                  SoloEnableSetting;                                            // 0x0000(0x0010)
};


// ScriptStruct  Engine.ParticleSystemLOD
// Struct Size::0x0001
struct FParticleSystemLOD
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.ParticleSysParam
// Struct Size::0x0090
struct FParticleSysParam
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    enum class EParticleSysParamType              ParamType;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         Scalar;                                                       // 0x0010(0x0004)
    float                                         Scalar;                                                       // 0x0014(0x0004)
    FVector                                       Vector;                                                       // 0x0018(0x000C)
    FVector                                       Vector;                                                       // 0x0024(0x000C)
    FColor                                        Color;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    AActor*                                       Actor;                                                        // 0x0038(0x0008)
    FMaterialInterface*                           Material;                                                     // 0x0040(0x0008)
    char                                          pa_0048[0x0048]                                               // 0x0048(0x0048)
};


// ScriptStruct  Engine.ParticleSystemWorldManagerTickFunction
// Struct Size::0x0030
struct FParticleSystemWorldManagerTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.ParticleSystemReplayFrame
// Struct Size::0x0010
struct FParticleSystemReplayFrame
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.ParticleEmitterReplayFrame
// Struct Size::0x0010
struct FParticleEmitterReplayFrame
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.FreezablePerPlatformInt
// Struct Size::0x0004
struct FFreezablePerPlatformInt
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
};


// ScriptStruct  Engine.PhysicalAnimationData
// Struct Size::0x0028
struct FPhysicalAnimationData
{
    FName                                         BodyName;                                                     // 0x0000(0x000C)
    char                                          bIsLocalSimulation;                                           // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         OrientationStrength;                                          // 0x0010(0x0004)
    float                                         AngularVelocityStrength;                                      // 0x0014(0x0004)
    float                                         PositionStrength;                                             // 0x0018(0x0004)
    float                                         VelocityStrength;                                             // 0x001C(0x0004)
    float                                         MaxLinearForce;                                               // 0x0020(0x0004)
    float                                         MaxAngularForce;                                              // 0x0024(0x0004)
};


// ScriptStruct  Engine.PhysicalAnimationProfile
// Struct Size::0x0034
struct FPhysicalAnimationProfile
{
    FName                                         ProfileName;                                                  // 0x0000(0x000C)
    FPhysicalAnimationData                        PhysicalAnimationData;                                        // 0x000C(0x0028)
};


// ScriptStruct  Engine.SolverIterations
// Struct Size::0x001C
struct FSolverIterations
{
    float                                         FixedTimeStep;                                                // 0x0000(0x0004)
    int32_t                                       SolverIterations;                                             // 0x0004(0x0004)
    int32_t                                       JointIterations;                                              // 0x0008(0x0004)
    int32_t                                       CollisionIterations;                                          // 0x000C(0x0004)
    int32_t                                       SolverPushOutIterations;                                      // 0x0010(0x0004)
    int32_t                                       JointPushOutIterations;                                       // 0x0014(0x0004)
    int32_t                                       CollisionPushOutIterations;                                   // 0x0018(0x0004)
};


// ScriptStruct  Engine.PhysicsConstraintProfileHandle
// Struct Size::0x0120
struct FPhysicsConstraintProfileHandle
{
    FConstraintProfileProperties                  ProfileProperties;                                            // 0x0000(0x0114)
    FName                                         ProfileName;                                                  // 0x0114(0x000C)
};


// ScriptStruct  Engine.ChaosPhysicsSettings
// Struct Size::0x0003
struct FChaosPhysicsSettings
{
    enum class EChaosThreadingMode                DefaultThreadingModel;                                        // 0x0000(0x0001)
    enum class EChaosSolverTickMode               DedicatedThreadTickMode;                                      // 0x0001(0x0001)
    enum class EChaosBufferMode                   DedicatedThreadBufferMode;                                    // 0x0002(0x0001)
};


// ScriptStruct  Engine.PhysicalSurfaceName
// Struct Size::0x0010
struct FPhysicalSurfaceName
{
    enum class EPhysicalSurface                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         Name;                                                         // 0x0004(0x000C)
};


// ScriptStruct  Engine.DelegateArray
// Struct Size::0x0010
struct FDelegateArray
{
    TArray<FDelegate>                             Delegates;                                                    // 0x0000(0x0010)
};


// ScriptStruct  Engine.TViewTarget
// Struct Size::0x06C0
struct FTViewTarget
{
    AActor*                                       Target;                                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FMinimalViewInfo                              POV;                                                          // 0x0010(0x06A0)
    FPlayerState*                                 PlayerState;                                                  // 0x06B0(0x0008)
    char                                          pa_06B8[0x0008]                                               // 0x06B8(0x0008)
};


// ScriptStruct  Engine.CameraCacheEntry
// Struct Size::0x06B0
struct FCameraCacheEntry
{
    float                                         TimeStamp;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FMinimalViewInfo                              POV;                                                          // 0x0010(0x06A0)
};


// ScriptStruct  Engine.UpdateLevelStreamingLevelStatus
// Struct Size::0x0014
struct FUpdateLevelStreamingLevelStatus
{
    FName                                         PackageName;                                                  // 0x0000(0x000C)
    int32_t                                       LODIndex;                                                     // 0x000C(0x0004)
    bool                                          bNewShouldBeLoaded;                                           // 0x0010(0x0001)
    bool                                          bNewShouldBeVisible;                                          // 0x0011(0x0001)
    bool                                          bNewShouldBlockOnLoad;                                        // 0x0012(0x0001)
    char                                          pa_0013[0x0001]                                               // 0x0013(0x0001)
};


// ScriptStruct  Engine.InputActionSpeechMapping
// Struct Size::0x0018
struct FInputActionSpeechMapping
{
    FName                                         ActionName;                                                   // 0x0000(0x000C)
    FName                                         SpeechKeyword;                                                // 0x000C(0x000C)
};


// ScriptStruct  Engine.InputAxisKeyMapping
// Struct Size::0x0030
struct FInputAxisKeyMapping
{
    FName                                         AxisName;                                                     // 0x0000(0x000C)
    float                                         Scale;                                                        // 0x000C(0x0004)
    FKey                                          Key;                                                          // 0x0010(0x0020)
};


// ScriptStruct  Engine.InputActionKeyMapping
// Struct Size::0x0030
struct FInputActionKeyMapping
{
    FName                                         ActionName;                                                   // 0x0000(0x000C)
    char                                          bShift;                                                       // 0x000C(0x0001)
    char                                          bCtrl;                                                        // 0x000C(0x0001)
    char                                          bAlt;                                                         // 0x000C(0x0001)
    char                                          bCmd;                                                         // 0x000C(0x0001)
    char                                          bGamepadShift;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FKey                                          Key;                                                          // 0x0010(0x0020)
};


// ScriptStruct  Engine.InputAxisConfigEntry
// Struct Size::0x001C
struct FInputAxisConfigEntry
{
    FName                                         AxisKeyName;                                                  // 0x0000(0x000C)
    FInputAxisProperties                          AxisProperties;                                               // 0x000C(0x0010)
};


// ScriptStruct  Engine.InputAxisProperties
// Struct Size::0x0010
struct FInputAxisProperties
{
    float                                         DeadZone;                                                     // 0x0000(0x0004)
    float                                         Sensitivity;                                                  // 0x0004(0x0004)
    float                                         Exponent;                                                     // 0x0008(0x0004)
    char                                          bInvert;                                                      // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.KeyBind
// Struct Size::0x0038
struct FKeyBind
{
    FKey                                          Key;                                                          // 0x0000(0x0020)
    FString                                       Command;                                                      // 0x0020(0x0010)
    char                                          Control;                                                      // 0x0030(0x0001)
    char                                          Shift;                                                        // 0x0030(0x0001)
    char                                          Alt;                                                          // 0x0030(0x0001)
    char                                          Cmd;                                                          // 0x0030(0x0001)
    char                                          bIgnoreCtrl;                                                  // 0x0030(0x0001)
    char                                          bIgnoreShift;                                                 // 0x0030(0x0001)
    char                                          bIgnoreAlt;                                                   // 0x0030(0x0001)
    char                                          bIgnoreCmd;                                                   // 0x0030(0x0001)
    char                                          bDisabled;                                                    // 0x0031(0x0001)
    char                                          pa_0032[0x0006]                                               // 0x0032(0x0006)
};


// ScriptStruct  Engine.PlayerMuteList
// Struct Size::0x0038
struct FPlayerMuteList
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
    bool                                          bHasVoiceHandshakeCompleted;                                  // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       VoiceChannelIdx;                                              // 0x0034(0x0004)
};


// ScriptStruct  Engine.PoseDataContainer
// Struct Size::0x0090
struct FPoseDataContainer
{
    TArray<FSmartName>                            PoseNames;                                                    // 0x0000(0x0010)
    TArray<FName>                                 Tracks;                                                       // 0x0010(0x0010)
    TMap<FName,int32_t>                           TrackMap;                                                     // 0x0020(0x0050)
    TArray<FPoseData>                             Poses;                                                        // 0x0070(0x0010)
    TArray<FAnimCurveBase>                        Curves;                                                       // 0x0080(0x0010)
};


// ScriptStruct  Engine.PoseData
// Struct Size::0x0070
struct FPoseData
{
    TArray<FTransform>                            LocalSpacePose;                                               // 0x0000(0x0010)
    TMap<int32_t,int32_t>                         TrackToBufferIndex;                                           // 0x0010(0x0050)
    TArray<float>                                 CurveData;                                                    // 0x0060(0x0010)
};


// ScriptStruct  Engine.PreviewAssetAttachContainer
// Struct Size::0x0010
struct FPreviewAssetAttachContainer
{
    TArray<FPreviewAttachedObjectPair>            AttachedObjects;                                              // 0x0000(0x0010)
};


// ScriptStruct  Engine.PreviewAttachedObjectPair
// Struct Size::0x0048
struct FPreviewAttachedObjectPair
{
    TSoftObjectPtr<UObject>                       AttachedObject;                                               // 0x0000(0x0030)
    UObject*                                      Object;                                                       // 0x0030(0x0008)
    FName                                         AttachedTo;                                                   // 0x0038(0x000C)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Engine.PreviewMeshCollectionEntry
// Struct Size::0x0030
struct FPreviewMeshCollectionEntry
{
    TSoftObjectPtr<USkeletalMesh>                 SkeletalMesh;                                                 // 0x0000(0x0030)
};


// ScriptStruct  Engine.PrimitiveComponentInstanceData
// Struct Size::0x0100
struct FPrimitiveComponentInstanceData : public FSceneComponentInstanceData
{
    char                                          pa_00B8[0x0008]                                               // 0x00B8(0x0008)
    FTransform                                    ComponentTransform;                                           // 0x00C0(0x0030)
    int32_t                                       VisibilityId;                                                 // 0x00F0(0x0004)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
    UPrimitiveComponent*                          LODParent;                                                    // 0x00F8(0x0008)
};


// ScriptStruct  Engine.SpriteCategoryInfo
// Struct Size::0x0040
struct FSpriteCategoryInfo
{
    FName                                         Category;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         DisplayName;                                                  // 0x0010(0x0018)
    FText                                         Description;                                                  // 0x0028(0x0018)
};


// ScriptStruct  Engine.QuartzClockSettings
// Struct Size::0x0020
struct FQuartzClockSettings
{
    FQuartzTimeSignature                          TimeSignature;                                                // 0x0000(0x0018)
    bool                                          bIgnoreLevelChange;                                           // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  Engine.QuartzTimeSignature
// Struct Size::0x0018
struct FQuartzTimeSignature
{
    int32_t                                       NumBeats;                                                     // 0x0000(0x0004)
    enum class EQuartzTimeSignatureQuantization   BeatType;                                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    TArray<FQuartzPulseOverrideStep>              OptionalPulseOverride;                                        // 0x0008(0x0010)
};


// ScriptStruct  Engine.QuartzPulseOverrideStep
// Struct Size::0x0008
struct FQuartzPulseOverrideStep
{
    int32_t                                       NumberOfPulses;                                               // 0x0000(0x0004)
    enum class EQuartzCommandQuantization         PulseDuration;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.QuartzQuantizationBoundary
// Struct Size::0x000C
struct FQuartzQuantizationBoundary
{
    enum class EQuartzCommandQuantization         Quantization;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Multiplier;                                                   // 0x0004(0x0004)
    enum class EQuarztQuantizationReference       CountingReferencePoint;                                       // 0x0008(0x0001)
    bool                                          bFireOnClockStart;                                            // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Engine.QuartzTransportTimeStamp
// Struct Size::0x0010
struct FQuartzTransportTimeStamp
{
    int32_t                                       Bars;                                                         // 0x0000(0x0004)
    int32_t                                       Beat;                                                         // 0x0004(0x0004)
    float                                         BeatFraction;                                                 // 0x0008(0x0004)
    float                                         Seconds;                                                      // 0x000C(0x0004)
};


// ScriptStruct  Engine.LevelNameAndTime
// Struct Size::0x0018
struct FLevelNameAndTime
{
    FString                                       LevelName;                                                    // 0x0000(0x0010)
    uint32_t                                      LevelChangeTimeInMS;                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.ReverbSettings
// Struct Size::0x0020
struct FReverbSettings
{
    bool                                          bApplyReverb;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FReverbEffect*                                ReverbEffect;                                                 // 0x0008(0x0008)
    FSoundEffectSubmixPreset*                     ReverbPluginEffect;                                           // 0x0010(0x0008)
    float                                         Volume;                                                       // 0x0018(0x0004)
    float                                         FadeTime;                                                     // 0x001C(0x0004)
};


// ScriptStruct  Engine.CompressedRichCurve
// Struct Size::0x0018
struct FCompressedRichCurve
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Engine.TransformBase
// Struct Size::0x0030
struct FTransformBase
{
    FName                                         Node;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FTransformBaseConstraint                      Constraints;                                                  // 0x0010(0x0010)
    char                                          pa_0020[0x0010]                                               // 0x0020(0x0010)
};


// ScriptStruct  Engine.TransformBaseConstraint
// Struct Size::0x0010
struct FTransformBaseConstraint
{
    TArray<FRigTransformConstraint>               TransformConstraints;                                         // 0x0000(0x0010)
};


// ScriptStruct  Engine.RigTransformConstraint
// Struct Size::0x0014
struct FRigTransformConstraint
{
    enum class EConstraintTransform               TranformType;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ParentSpace;                                                  // 0x0004(0x000C)
    float                                         Weight;                                                       // 0x0010(0x0004)
};


// ScriptStruct  Engine.Node
// Struct Size::0x0070
struct FNode
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    FName                                         ParentName;                                                   // 0x000C(0x000C)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FString                                       DisplayName;                                                  // 0x0050(0x0010)
    bool                                          bAdvanced;                                                    // 0x0060(0x0001)
    char                                          pa_0061[0x000F]                                               // 0x0061(0x000F)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x00A0
struct FRootMotionSource
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    uint16_t                                      Priority;                                                     // 0x0010(0x0002)
    uint16_t                                      LocalID;                                                      // 0x0012(0x0002)
    enum class ERootMotionAccumulateMode          AccumulateMode;                                               // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FName                                         InstanceName;                                                 // 0x0018(0x000C)
    float                                         StartTime;                                                    // 0x0024(0x0004)
    float                                         CurrentTime;                                                  // 0x0028(0x0004)
    float                                         PreviousTime;                                                 // 0x002C(0x0004)
    float                                         Duration;                                                     // 0x0030(0x0004)
    FRootMotionSourceStatus                       Status;                                                       // 0x0034(0x0001)
    FRootMotionSourceSettings                     Settings;                                                     // 0x0035(0x0001)
    bool                                          bInLocalSpace;                                                // 0x0036(0x0001)
    char                                          pa_0037[0x0009]                                               // 0x0037(0x0009)
    FRootMotionMovementParams                     RootMotionParams;                                             // 0x0040(0x0040)
    FRootMotionFinishVelocitySettings             FinishVelocityParams;                                         // 0x0080(0x0014)
    char                                          pa_0094[0x000C]                                               // 0x0094(0x000C)
};


// ScriptStruct  Engine.RootMotionFinishVelocitySettings
// Struct Size::0x0014
struct FRootMotionFinishVelocitySettings
{
    enum class ERootMotionFinishVelocityMode      Mode;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       SetVelocity;                                                  // 0x0004(0x000C)
    float                                         ClampVelocity;                                                // 0x0010(0x0004)
};


// ScriptStruct  Engine.RootMotionSourceStatus
// Struct Size::0x0001
struct FRootMotionSourceStatus
{
    char                                          Flags;                                                        // 0x0000(0x0001)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x00D0
struct FRootMotionSource : public FRootMotionSource
{
    FRotator                                      Rotation;                                                     // 0x0098(0x000C)
    float                                         Distance;                                                     // 0x00A4(0x0004)
    float                                         Height;                                                       // 0x00A8(0x0004)
    bool                                          bDisableTimeout;                                              // 0x00AC(0x0001)
    char                                          pa_00AD[0x0003]                                               // 0x00AD(0x0003)
    FCurveVector*                                 PathOffsetCurve;                                              // 0x00B0(0x0008)
    FCurveFloat*                                  TimeMappingCurve;                                             // 0x00B8(0x0008)
    char                                          pa_00C0[0x0010]                                               // 0x00C0(0x0010)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x00D0
struct FRootMotionSource : public FRootMotionSource
{
    FVector                                       StartLocation;                                                // 0x0098(0x000C)
    FVector                                       InitialTargetLocation;                                        // 0x00A4(0x000C)
    FVector                                       TargetLocation;                                               // 0x00B0(0x000C)
    bool                                          bRestrictSpeedToExpected;                                     // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    FCurveVector*                                 PathOffsetCurve;                                              // 0x00C0(0x0008)
    FCurveFloat*                                  TimeMappingCurve;                                             // 0x00C8(0x0008)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x00C0
struct FRootMotionSource : public FRootMotionSource
{
    FVector                                       StartLocation;                                                // 0x0098(0x000C)
    FVector                                       TargetLocation;                                               // 0x00A4(0x000C)
    bool                                          bRestrictSpeedToExpected;                                     // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
    FCurveVector*                                 PathOffsetCurve;                                              // 0x00B8(0x0008)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x00E0
struct FRootMotionSource : public FRootMotionSource
{
    FVector                                       Location;                                                     // 0x0098(0x000C)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
    AActor*                                       LocationActor;                                                // 0x00A8(0x0008)
    float                                         Radius;                                                       // 0x00B0(0x0004)
    float                                         Strength;                                                     // 0x00B4(0x0004)
    bool                                          bIsPush;                                                      // 0x00B8(0x0001)
    bool                                          bNoZForce;                                                    // 0x00B9(0x0001)
    char                                          pa_00BA[0x0006]                                               // 0x00BA(0x0006)
    FCurveFloat*                                  StrengthDistanceFalloff;                                      // 0x00C0(0x0008)
    FCurveFloat*                                  StrengthOverTime;                                             // 0x00C8(0x0008)
    bool                                          bUseFixedWorldDirection;                                      // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    FRotator                                      FixedWorldDirection;                                          // 0x00D4(0x000C)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x00B0
struct FRootMotionSource : public FRootMotionSource
{
    FVector                                       Force;                                                        // 0x0098(0x000C)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
    FCurveFloat*                                  StrengthOverTime;                                             // 0x00A8(0x0008)
};


// ScriptStruct  Engine.CameraExposureSettings
// Struct Size::0x0040
struct FCameraExposureSettings
{
    enum class EAutoExposureMethod                Method;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         LowPercent;                                                   // 0x0004(0x0004)
    float                                         HighPercent;                                                  // 0x0008(0x0004)
    float                                         MinBrightness;                                                // 0x000C(0x0004)
    float                                         MaxBrightness;                                                // 0x0010(0x0004)
    float                                         SpeedUp;                                                      // 0x0014(0x0004)
    float                                         SpeedDown;                                                    // 0x0018(0x0004)
    float                                         Bias;                                                         // 0x001C(0x0004)
    FCurveFloat*                                  BiasCurve;                                                    // 0x0020(0x0008)
    FTexture*                                     MeterMask;                                                    // 0x0028(0x0008)
    float                                         HistogramLogMin;                                              // 0x0030(0x0004)
    float                                         HistogramLogMax;                                              // 0x0034(0x0004)
    float                                         CalibrationConstant;                                          // 0x0038(0x0004)
    char                                          ApplyPhysicalCameraExposure;                                  // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  Engine.LensSettings
// Struct Size::0x00E0
struct FLensSettings
{
    FLensBloomSettings                            Bloom;                                                        // 0x0000(0x00B8)
    FLensImperfectionSettings                     Imperfections;                                                // 0x00B8(0x0020)
    float                                         ChromaticAberration;                                          // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
};


// ScriptStruct  Engine.LensImperfectionSettings
// Struct Size::0x0020
struct FLensImperfectionSettings
{
    FTexture*                                     DirtMask;                                                     // 0x0000(0x0008)
    float                                         DirtMaskIntensity;                                            // 0x0008(0x0004)
    FLinearColor                                  DirtMaskTint;                                                 // 0x000C(0x0010)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.LensBloomSettings
// Struct Size::0x00B8
struct FLensBloomSettings
{
    FGaussianSumBloomSettings                     GaussianSum;                                                  // 0x0000(0x0084)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    FConvolutionBloomSettings                     Convolution;                                                  // 0x0088(0x0028)
    enum class EBloomMethod                       Method;                                                       // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
};


// ScriptStruct  Engine.ConvolutionBloomSettings
// Struct Size::0x0028
struct FConvolutionBloomSettings
{
    FTexture2D*                                   Texture;                                                      // 0x0000(0x0008)
    float                                         Size;                                                         // 0x0008(0x0004)
    FVector2D                                     CenterUV;                                                     // 0x000C(0x0008)
    float                                         PreFilterMin;                                                 // 0x0014(0x0004)
    float                                         PreFilterMax;                                                 // 0x0018(0x0004)
    float                                         PreFilterMult;                                                // 0x001C(0x0004)
    float                                         BufferScale;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.GaussianSumBloomSettings
// Struct Size::0x0084
struct FGaussianSumBloomSettings
{
    float                                         Intensity;                                                    // 0x0000(0x0004)
    float                                         Threshold;                                                    // 0x0004(0x0004)
    float                                         SizeScale;                                                    // 0x0008(0x0004)
    float                                         Filter1Size;                                                  // 0x000C(0x0004)
    float                                         Filter2Size;                                                  // 0x0010(0x0004)
    float                                         Filter3Size;                                                  // 0x0014(0x0004)
    float                                         Filter4Size;                                                  // 0x0018(0x0004)
    float                                         Filter5Size;                                                  // 0x001C(0x0004)
    float                                         Filter6Size;                                                  // 0x0020(0x0004)
    FLinearColor                                  Filter1Tint;                                                  // 0x0024(0x0010)
    FLinearColor                                  Filter2Tint;                                                  // 0x0034(0x0010)
    FLinearColor                                  Filter3Tint;                                                  // 0x0044(0x0010)
    FLinearColor                                  Filter4Tint;                                                  // 0x0054(0x0010)
    FLinearColor                                  Filter5Tint;                                                  // 0x0064(0x0010)
    FLinearColor                                  Filter6Tint;                                                  // 0x0074(0x0010)
};


// ScriptStruct  Engine.FilmStockSettings
// Struct Size::0x0014
struct FFilmStockSettings
{
    float                                         Slope;                                                        // 0x0000(0x0004)
    float                                         Toe;                                                          // 0x0004(0x0004)
    float                                         Shoulder;                                                     // 0x0008(0x0004)
    float                                         BlackClip;                                                    // 0x000C(0x0004)
    float                                         WhiteClip;                                                    // 0x0010(0x0004)
};


// ScriptStruct  Engine.ColorGradingSettings
// Struct Size::0x0150
struct FColorGradingSettings
{
    FColorGradePerRangeSettings                   Global;                                                       // 0x0000(0x0050)
    FColorGradePerRangeSettings                   Shadows;                                                      // 0x0050(0x0050)
    FColorGradePerRangeSettings                   Midtones;                                                     // 0x00A0(0x0050)
    FColorGradePerRangeSettings                   Highlights;                                                   // 0x00F0(0x0050)
    float                                         ShadowsMax;                                                   // 0x0140(0x0004)
    float                                         HighlightsMin;                                                // 0x0144(0x0004)
    char                                          pa_0148[0x0008]                                               // 0x0148(0x0008)
};


// ScriptStruct  Engine.ColorGradePerRangeSettings
// Struct Size::0x0050
struct FColorGradePerRangeSettings
{
    FVector4                                      Saturation;                                                   // 0x0000(0x0010)
    FVector4                                      Contrast;                                                     // 0x0010(0x0010)
    FVector4                                      Gamma;                                                        // 0x0020(0x0010)
    FVector4                                      Gain;                                                         // 0x0030(0x0010)
    FVector4                                      Offset;                                                       // 0x0040(0x0010)
};


// ScriptStruct  Engine.EngineShowFlagsSetting
// Struct Size::0x0018
struct FEngineShowFlagsSetting
{
    FString                                       ShowFlagName;                                                 // 0x0000(0x0010)
    bool                                          Enabled;                                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Engine.SceneViewExtensionIsActiveFunctor
// Struct Size::0x0050
struct FSceneViewExtensionIsActiveFunctor
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  Engine.SingleAnimationPlayData
// Struct Size::0x0018
struct FSingleAnimationPlayData
{
    FAnimationAsset*                              AnimToPlay;                                                   // 0x0000(0x0008)
    char                                          bSavedLooping;                                                // 0x0008(0x0001)
    char                                          bSavedPlaying;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         SavedPosition;                                                // 0x000C(0x0004)
    float                                         SavedPlayRate;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.SkeletalMaterial
// Struct Size::0x0028
struct FSkeletalMaterial
{
    FMaterialInterface*                           MaterialInterface;                                            // 0x0000(0x0008)
    FName                                         MaterialSlotName;                                             // 0x0008(0x000C)
    FMeshUVChannelInfo                            UVChannelData;                                                // 0x0014(0x0014)
};


// ScriptStruct  Engine.ClothingAssetData
// Struct Size::0x0080
struct FClothingAssetData
{
    FName                                         AssetName;                                                    // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       ApexFileName;                                                 // 0x0010(0x0010)
    bool                                          bClothPropertiesChanged;                                      // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FClothPhysicsProperties                       PhysicsProperties;                                            // 0x0024(0x0050)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
};


// ScriptStruct  Engine.ClothPhysicsProperties
// Struct Size::0x0050
struct FClothPhysicsProperties
{
    float                                         VerticalResistance;                                           // 0x0000(0x0004)
    float                                         HorizontalResistance;                                         // 0x0004(0x0004)
    float                                         BendResistance;                                               // 0x0008(0x0004)
    float                                         ShearResistance;                                              // 0x000C(0x0004)
    float                                         Friction;                                                     // 0x0010(0x0004)
    float                                         Damping;                                                      // 0x0014(0x0004)
    float                                         TetherStiffness;                                              // 0x0018(0x0004)
    float                                         TetherLimit;                                                  // 0x001C(0x0004)
    float                                         Drag;                                                         // 0x0020(0x0004)
    float                                         StiffnessFrequency;                                           // 0x0024(0x0004)
    float                                         GravityScale;                                                 // 0x0028(0x0004)
    float                                         MassScale;                                                    // 0x002C(0x0004)
    float                                         InertiaBlend;                                                 // 0x0030(0x0004)
    float                                         SelfCollisionThickness;                                       // 0x0034(0x0004)
    float                                         SelfCollisionSquashScale;                                     // 0x0038(0x0004)
    float                                         SelfCollisionStiffness;                                       // 0x003C(0x0004)
    float                                         SolverFrequency;                                              // 0x0040(0x0004)
    float                                         FiberCompression;                                             // 0x0044(0x0004)
    float                                         FiberExpansion;                                               // 0x0048(0x0004)
    float                                         FiberResistance;                                              // 0x004C(0x0004)
};


// ScriptStruct  Engine.SkeletalMeshLODInfo
// Struct Size::0x00B8
struct FSkeletalMeshLODInfo
{
    FPerPlatformFloat                             ScreenSize;                                                   // 0x0000(0x0004)
    float                                         LODHysteresis;                                                // 0x0004(0x0004)
    TArray<int32_t>                               LODMaterialMap;                                               // 0x0008(0x0010)
    FSkeletalMeshBuildSettings                    BuildSettings;                                                // 0x0018(0x0014)
    FSkeletalMeshOptimizationSettings             ReductionSettings;                                            // 0x002C(0x003C)
    TArray<FBoneReference>                        BonesToRemove;                                                // 0x0068(0x0010)
    TArray<FBoneReference>                        BonesToPrioritize;                                            // 0x0078(0x0010)
    float                                         WeightOfPrioritization;                                       // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    FAnimSequence*                                BakePose;                                                     // 0x0090(0x0008)
    FAnimSequence*                                BakePoseOverride;                                             // 0x0098(0x0008)
    FString                                       SourceImportFilename;                                         // 0x00A0(0x0010)
    enum class ESkinCacheUsage                    SkinCacheUsage;                                               // 0x00B0(0x0001)
    char                                          bHasBeenSimplified;                                           // 0x00B1(0x0001)
    char                                          bHasPerLODVertexColors;                                       // 0x00B1(0x0001)
    char                                          bAllowCPUAccess;                                              // 0x00B1(0x0001)
    char                                          bSupportUniformlyDistributedSampling;                         // 0x00B1(0x0001)
    enum class EMaterialQualityLevel              MaterialQualityLevel;                                         // 0x00B2(0x0001)
    char                                          pa_00B3[0x0005]                                               // 0x00B3(0x0005)
};


// ScriptStruct  Engine.SkeletalMeshOptimizationSettings
// Struct Size::0x003C
struct FSkeletalMeshOptimizationSettings
{
    enum class SkeletalMeshTerminationCriterion   TerminationCriterion;                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         NumOfTrianglesPercentage;                                     // 0x0004(0x0004)
    float                                         NumOfVertPercentage;                                          // 0x0008(0x0004)
    uint32_t                                      MaxNumOfTriangles;                                            // 0x000C(0x0004)
    uint32_t                                      MaxNumOfVerts;                                                // 0x0010(0x0004)
    float                                         MaxDeviationPercentage;                                       // 0x0014(0x0004)
    enum class SkeletalMeshOptimizationType       ReductionMethod;                                              // 0x0018(0x0001)
    enum class SkeletalMeshOptimizationImportance SilhouetteImportance;                                         // 0x0019(0x0001)
    enum class SkeletalMeshOptimizationImportance TextureImportance;                                            // 0x001A(0x0001)
    enum class SkeletalMeshOptimizationImportance ShadingImportance;                                            // 0x001B(0x0001)
    enum class SkeletalMeshOptimizationImportance SkinningImportance;                                           // 0x001C(0x0001)
    char                                          bRemapMorphTargets;                                           // 0x001D(0x0001)
    char                                          bRecalcNormals;                                               // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    float                                         WeldingThreshold;                                             // 0x0020(0x0004)
    float                                         NormalsThreshold;                                             // 0x0024(0x0004)
    int32_t                                       MaxBonesPerVertex;                                            // 0x0028(0x0004)
    char                                          bEnforceBoneBoundaries;                                       // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    float                                         VolumeImportance;                                             // 0x0030(0x0004)
    char                                          bLockEdges;                                                   // 0x0034(0x0001)
    char                                          bLockColorBounaries;                                          // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       BaseLOD;                                                      // 0x0038(0x0004)
};


// ScriptStruct  Engine.SkeletalMeshClothBuildParams
// Struct Size::0x0060
struct FSkeletalMeshClothBuildParams
{
    TWeakObjectPtr<FClothingAssetBase>            TargetAsset;                                                  // 0x0000(0x0008)
    int32_t                                       TargetLod;                                                    // 0x0008(0x0004)
    bool                                          bRemapParameters;                                             // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FString                                       AssetName;                                                    // 0x0010(0x0010)
    int32_t                                       LodIndex;                                                     // 0x0020(0x0004)
    int32_t                                       SourceSection;                                                // 0x0024(0x0004)
    bool                                          bRemoveFromMesh;                                              // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    TSoftObjectPtr<FPhysicsAsset>                 PhysicsAsset;                                                 // 0x0030(0x0030)
};


// ScriptStruct  Engine.BoneMirrorExport
// Struct Size::0x001C
struct FBoneMirrorExport
{
    FName                                         BoneName;                                                     // 0x0000(0x000C)
    FName                                         SourceBoneName;                                               // 0x000C(0x000C)
    enum class EAxis                              BoneFlipAxis;                                                 // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  Engine.BoneMirrorInfo
// Struct Size::0x0008
struct FBoneMirrorInfo
{
    int32_t                                       SourceIndex;                                                  // 0x0000(0x0004)
    enum class EAxis                              BoneFlipAxis;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.SkeletalMeshComponentClothTickFunction
// Struct Size::0x0030
struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.SkeletalMeshComponentEndPhysicsTickFunction
// Struct Size::0x0030
struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.SkeletalMeshLODGroupSettings
// Struct Size::0x0080
struct FSkeletalMeshLODGroupSettings
{
    FPerPlatformFloat                             ScreenSize;                                                   // 0x0000(0x0004)
    float                                         LODHysteresis;                                                // 0x0004(0x0004)
    enum class EBoneFilterActionOption            BoneFilterActionOption;                                       // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<FBoneFilter>                           BoneList;                                                     // 0x0010(0x0010)
    TArray<FName>                                 BonesToPrioritize;                                            // 0x0020(0x0010)
    float                                         WeightOfPrioritization;                                       // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FAnimSequence*                                BakePose;                                                     // 0x0038(0x0008)
    FSkeletalMeshOptimizationSettings             ReductionSettings;                                            // 0x0040(0x003C)
    int8_t                                        MaterialQualityLevel;                                         // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
};


// ScriptStruct  Engine.BoneFilter
// Struct Size::0x0010
struct FBoneFilter
{
    bool                                          bExcludeSelf;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         BoneName;                                                     // 0x0004(0x000C)
};


// ScriptStruct  Engine.SkeletalMeshSamplingInfo
// Struct Size::0x0030
struct FSkeletalMeshSamplingInfo
{
    TArray<FSkeletalMeshSamplingRegion>           Regions;                                                      // 0x0000(0x0010)
    FSkeletalMeshSamplingBuiltData                BuiltData;                                                    // 0x0010(0x0020)
};


// ScriptStruct  Engine.SkeletalMeshSamplingBuiltData
// Struct Size::0x0020
struct FSkeletalMeshSamplingBuiltData
{
    TArray<FSkeletalMeshSamplingLODBuiltData>     WholeMeshBuiltData;                                           // 0x0000(0x0010)
    TArray<FSkeletalMeshSamplingRegionBuiltData>  RegionBuiltData;                                              // 0x0010(0x0010)
};


// ScriptStruct  Engine.SkeletalMeshSamplingRegionBuiltData
// Struct Size::0x0078
struct FSkeletalMeshSamplingRegionBuiltData
{
    char                                          pa_0000[0x0078]                                               // 0x0000(0x0078)
};


// ScriptStruct  Engine.SkeletalMeshSamplingLODBuiltData
// Struct Size::0x0048
struct FSkeletalMeshSamplingLODBuiltData
{
    char                                          pa_0000[0x0048]                                               // 0x0000(0x0048)
};


// ScriptStruct  Engine.SkeletalMeshSamplingRegion
// Struct Size::0x0038
struct FSkeletalMeshSamplingRegion
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    int32_t                                       LODIndex;                                                     // 0x000C(0x0004)
    char                                          bSupportUniformlyDistributedSampling;                         // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TArray<FSkeletalMeshSamplingRegionMaterialFilter>MaterialFilters;                                           // 0x0018(0x0010)
    TArray<FSkeletalMeshSamplingRegionBoneFilter> BoneFilters;                                                  // 0x0028(0x0010)
};


// ScriptStruct  Engine.SkeletalMeshSamplingRegionBoneFilter
// Struct Size::0x0010
struct FSkeletalMeshSamplingRegionBoneFilter
{
    FName                                         BoneName;                                                     // 0x0000(0x000C)
    char                                          bIncludeOrExclude;                                            // 0x000C(0x0001)
    char                                          bApplyToChildren;                                             // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.SkeletalMeshSamplingRegionMaterialFilter
// Struct Size::0x000C
struct FSkeletalMeshSamplingRegionMaterialFilter
{
    FName                                         MaterialName;                                                 // 0x0000(0x000C)
};


// ScriptStruct  Engine.VirtualBone
// Struct Size::0x0024
struct FVirtualBone
{
    FName                                         SourceBoneName;                                               // 0x0000(0x000C)
    FName                                         TargetBoneName;                                               // 0x000C(0x000C)
    FName                                         VirtualBoneName;                                              // 0x0018(0x000C)
};


// ScriptStruct  Engine.AnimSlotGroup
// Struct Size::0x0020
struct FAnimSlotGroup
{
    FName                                         GroupName;                                                    // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FName>                                 SlotNames;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Engine.RigConfiguration
// Struct Size::0x0018
struct FRigConfiguration
{
    FRig*                                         Rig;                                                          // 0x0000(0x0008)
    TArray<FNameMapping>                          BoneMappingTable;                                             // 0x0008(0x0010)
};


// ScriptStruct  Engine.NameMapping
// Struct Size::0x0018
struct FNameMapping
{
    FName                                         NodeName;                                                     // 0x0000(0x000C)
    FName                                         BoneName;                                                     // 0x000C(0x000C)
};


// ScriptStruct  Engine.BoneReductionSetting
// Struct Size::0x0010
struct FBoneReductionSetting
{
    TArray<FName>                                 BonesToRemove;                                                // 0x0000(0x0010)
};


// ScriptStruct  Engine.ReferencePose
// Struct Size::0x0020
struct FReferencePose
{
    FName                                         PoseName;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FTransform>                            ReferencePose;                                                // 0x0010(0x0010)
};


// ScriptStruct  Engine.BoneNode
// Struct Size::0x0014
struct FBoneNode
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    int32_t                                       ParentIndex;                                                  // 0x000C(0x0004)
    enum class EBoneTranslationRetargetingMode    TranslationRetargetingMode;                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Engine.SkeletonToMeshLinkup
// Struct Size::0x0020
struct FSkeletonToMeshLinkup
{
    TArray<int32_t>                               SkeletonToMeshTable;                                          // 0x0000(0x0010)
    TArray<int32_t>                               MeshToSkeletonTable;                                          // 0x0010(0x0010)
};


// ScriptStruct  Engine.VertexOffsetUsage
// Struct Size::0x0004
struct FVertexOffsetUsage
{
    int32_t                                       Usage;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Engine.SkelMeshComponentLODInfo
// Struct Size::0x0048
struct FSkelMeshComponentLODInfo
{
    TArray<bool>                                  HiddenMaterials;                                              // 0x0000(0x0010)
    char                                          pa_0010[0x0038]                                               // 0x0010(0x0038)
};


// ScriptStruct  Engine.SkelMeshSkinWeightInfo
// Struct Size::0x003C
struct FSkelMeshSkinWeightInfo
{
    int32_t                                       Bones;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x002C]                                               // 0x0004(0x002C)
    char                                          Weights;                                                      // 0x0030(0x0001)
    char                                          pa_0031[0x000B]                                               // 0x0031(0x000B)
};


// ScriptStruct  Engine.SkinWeightProfileInfo
// Struct Size::0x0014
struct FSkinWeightProfileInfo
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    FPerPlatformBool                              DefaultProfile;                                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FPerPlatformInt                               DefaultProfileFromLODIndex;                                   // 0x0010(0x0004)
};


// ScriptStruct  Engine.SkinWeightProfileManagerTickFunction
// Struct Size::0x0030
struct FSkinWeightProfileManagerTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.TentDistribution
// Struct Size::0x000C
struct FTentDistribution
{
    float                                         TipAltitude;                                                  // 0x0000(0x0004)
    float                                         TipValue;                                                     // 0x0004(0x0004)
    float                                         Width;                                                        // 0x0008(0x0004)
};


// ScriptStruct  Engine.PrecomputedSkyLightInstanceData
// Struct Size::0x0170
struct FPrecomputedSkyLightInstanceData : public FSceneComponentInstanceData
{
    FGuid                                         LightGuid;                                                    // 0x00B8(0x0010)
    float                                         AverageBrightness;                                            // 0x00C8(0x0004)
    char                                          pa_00CC[0x00A4]                                               // 0x00CC(0x00A4)
};


// ScriptStruct  Engine.SmartNameContainer
// Struct Size::0x0050
struct FSmartNameContainer
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  Engine.SmartNameMapping
// Struct Size::0x0070
struct FSmartNameMapping
{
    char                                          pa_0000[0x0070]                                               // 0x0000(0x0070)
};


// ScriptStruct  Engine.CurveMetaData
// Struct Size::0x0018
struct FCurveMetaData
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Engine.SoundAttenuationSettings
// Struct Size::0x03A8
struct FSoundAttenuationSettings : public FBaseAttenuationSettings
{
    char                                          bAttenuate;                                                   // 0x00B0(0x0001)
    char                                          bSpatialize;                                                  // 0x00B0(0x0001)
    char                                          bAttenuateWithLPF;                                            // 0x00B0(0x0001)
    char                                          bEnableListenerFocus;                                         // 0x00B0(0x0001)
    char                                          bEnableFocusInterpolation;                                    // 0x00B0(0x0001)
    char                                          bEnableOcclusion;                                             // 0x00B0(0x0001)
    char                                          bUseComplexCollisionForOcclusion;                             // 0x00B0(0x0001)
    char                                          bEnableReverbSend;                                            // 0x00B0(0x0001)
    char                                          bEnablePriorityAttenuation;                                   // 0x00B1(0x0001)
    char                                          bApplyNormalizationToStereoSounds;                            // 0x00B1(0x0001)
    char                                          bEnableLogFrequencyScaling;                                   // 0x00B1(0x0001)
    char                                          bEnableSubmixSends;                                           // 0x00B1(0x0001)
    enum class ESoundSpatializationAlgorithm      SpatializationAlgorithm;                                      // 0x00B2(0x0001)
    char                                          pa_00B3[0x0001]                                               // 0x00B3(0x0001)
    float                                         BinauralRadius;                                               // 0x00B4(0x0004)
    enum class EAirAbsorptionMethod               AbsorptionMethod;                                             // 0x00B8(0x0001)
    enum class ECollisionChannel                  OcclusionTraceChannel;                                        // 0x00B9(0x0001)
    enum class EReverbSendMethod                  ReverbSendMethod;                                             // 0x00BA(0x0001)
    enum class EPriorityAttenuationMethod         PriorityAttenuationMethod;                                    // 0x00BB(0x0001)
    float                                         OmniRadius;                                                   // 0x00BC(0x0004)
    float                                         StereoSpread;                                                 // 0x00C0(0x0004)
    float                                         LPFRadiusMin;                                                 // 0x00C4(0x0004)
    float                                         LPFRadiusMax;                                                 // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    FRuntimeFloatCurve                            CustomLowpassAirAbsorptionCurve;                              // 0x00D0(0x0088)
    FRuntimeFloatCurve                            CustomHighpassAirAbsorptionCurve;                             // 0x0158(0x0088)
    float                                         LPFFrequencyAtMin;                                            // 0x01E0(0x0004)
    float                                         LPFFrequencyAtMax;                                            // 0x01E4(0x0004)
    float                                         HPFFrequencyAtMin;                                            // 0x01E8(0x0004)
    float                                         HPFFrequencyAtMax;                                            // 0x01EC(0x0004)
    float                                         FocusAzimuth;                                                 // 0x01F0(0x0004)
    float                                         NonFocusAzimuth;                                              // 0x01F4(0x0004)
    float                                         FocusDistanceScale;                                           // 0x01F8(0x0004)
    float                                         NonFocusDistanceScale;                                        // 0x01FC(0x0004)
    float                                         FocusPriorityScale;                                           // 0x0200(0x0004)
    float                                         NonFocusPriorityScale;                                        // 0x0204(0x0004)
    float                                         FocusVolumeAttenuation;                                       // 0x0208(0x0004)
    float                                         NonFocusVolumeAttenuation;                                    // 0x020C(0x0004)
    float                                         FocusAttackInterpSpeed;                                       // 0x0210(0x0004)
    float                                         FocusReleaseInterpSpeed;                                      // 0x0214(0x0004)
    float                                         OcclusionLowPassFilterFrequency;                              // 0x0218(0x0004)
    float                                         OcclusionVolumeAttenuation;                                   // 0x021C(0x0004)
    float                                         OcclusionInterpolationTime;                                   // 0x0220(0x0004)
    float                                         ReverbWetLevelMin;                                            // 0x0224(0x0004)
    float                                         ReverbWetLevelMax;                                            // 0x0228(0x0004)
    float                                         ReverbDistanceMin;                                            // 0x022C(0x0004)
    float                                         ReverbDistanceMax;                                            // 0x0230(0x0004)
    float                                         ManualReverbSendLevel;                                        // 0x0234(0x0004)
    FRuntimeFloatCurve                            CustomReverbSendCurve;                                        // 0x0238(0x0088)
    TArray<FAttenuationSubmixSendSettings>        SubmixSendSettings;                                           // 0x02C0(0x0010)
    float                                         PriorityAttenuationMin;                                       // 0x02D0(0x0004)
    float                                         PriorityAttenuationMax;                                       // 0x02D4(0x0004)
    float                                         PriorityAttenuationDistanceMin;                               // 0x02D8(0x0004)
    float                                         PriorityAttenuationDistanceMax;                               // 0x02DC(0x0004)
    float                                         ManualPriorityAttenuation;                                    // 0x02E0(0x0004)
    char                                          pa_02E4[0x0004]                                               // 0x02E4(0x0004)
    FRuntimeFloatCurve                            CustomPriorityAttenuationCurve;                               // 0x02E8(0x0088)
    FSoundAttenuationPluginSettings               PluginSettings;                                               // 0x0370(0x0030)
    float                                         LPFMinPercent;                                                // 0x03A0(0x0004)
    float                                         LPFMaxPercent;                                                // 0x03A4(0x0004)
};


// ScriptStruct  Engine.SoundAttenuationPluginSettings
// Struct Size::0x0030
struct FSoundAttenuationPluginSettings
{
    TArray<FSpatializationPluginSourceSettingsBase*>SpatializationPluginSettingsArray;                          // 0x0000(0x0010)
    TArray<FOcclusionPluginSourceSettingsBase*>   OcclusionPluginSettingsArray;                                 // 0x0010(0x0010)
    TArray<FReverbPluginSourceSettingsBase*>      ReverbPluginSettingsArray;                                    // 0x0020(0x0010)
};


// ScriptStruct  Engine.AttenuationSubmixSendSettings
// Struct Size::0x00A8
struct FAttenuationSubmixSendSettings
{
    FSoundSubmixBase*                             Submix;                                                       // 0x0000(0x0008)
    enum class ESubmixSendMethod                  SubmixSendMethod;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         SubmixSendLevelMin;                                           // 0x000C(0x0004)
    float                                         SubmixSendLevelMax;                                           // 0x0010(0x0004)
    float                                         SubmixSendDistanceMin;                                        // 0x0014(0x0004)
    float                                         SubmixSendDistanceMax;                                        // 0x0018(0x0004)
    float                                         ManualSubmixSendLevel;                                        // 0x001C(0x0004)
    FRuntimeFloatCurve                            CustomSubmixSendCurve;                                        // 0x0020(0x0088)
};


// ScriptStruct  Engine.PassiveSoundMixModifier
// Struct Size::0x0010
struct FPassiveSoundMixModifier
{
    FSoundMix*                                    SoundMix;                                                     // 0x0000(0x0008)
    float                                         MinVolumeThreshold;                                           // 0x0008(0x0004)
    float                                         MaxVolumeThreshold;                                           // 0x000C(0x0004)
};


// ScriptStruct  Engine.SoundClassProperties
// Struct Size::0x0078
struct FSoundClassProperties
{
    float                                         Volume;                                                       // 0x0000(0x0004)
    float                                         Pitch;                                                        // 0x0004(0x0004)
    float                                         LowPassFilterFrequency;                                       // 0x0008(0x0004)
    float                                         AttenuationDistanceScale;                                     // 0x000C(0x0004)
    float                                         LFEBleed;                                                     // 0x0010(0x0004)
    float                                         VoiceCenterChannelVolume;                                     // 0x0014(0x0004)
    float                                         RadioFilterVolume;                                            // 0x0018(0x0004)
    float                                         RadioFilterVolumeThreshold;                                   // 0x001C(0x0004)
    char                                          bApplyEffects;                                                // 0x0020(0x0001)
    char                                          bAlwaysPlay;                                                  // 0x0020(0x0001)
    char                                          bIsUISound;                                                   // 0x0020(0x0001)
    char                                          bIsMusic;                                                     // 0x0020(0x0001)
    char                                          bCenterChannelOnly;                                           // 0x0020(0x0001)
    char                                          bApplyAmbientVolumes;                                         // 0x0020(0x0001)
    char                                          bReverb;                                                      // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         Default2DReverbSendAmount;                                    // 0x0024(0x0004)
    FSoundModulationDefaultSettings               ModulationSettings;                                           // 0x0028(0x0040)
    enum class EAudioOutputTarget                 OutputTarget;                                                 // 0x0068(0x0001)
    enum class ESoundWaveLoadingBehavior          LoadingBehavior;                                              // 0x0069(0x0001)
    char                                          pa_006A[0x0006]                                               // 0x006A(0x0006)
    FSoundSubmix*                                 DefaultSubmix;                                                // 0x0070(0x0008)
};


// ScriptStruct  Engine.SoundModulationDefaultSettings
// Struct Size::0x0040
struct FSoundModulationDefaultSettings
{
    FSoundModulationDestinationSettings           VolumeModulationDestination;                                  // 0x0000(0x0010)
    FSoundModulationDestinationSettings           PitchModulationDestination;                                   // 0x0010(0x0010)
    FSoundModulationDestinationSettings           HighpassModulationDestination;                                // 0x0020(0x0010)
    FSoundModulationDestinationSettings           LowpassModulationDestination;                                 // 0x0030(0x0010)
};


// ScriptStruct  Engine.SoundClassEditorData
// Struct Size::0x0008
struct FSoundClassEditorData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.SoundConcurrencySettings
// Struct Size::0x0028
struct FSoundConcurrencySettings
{
    int32_t                                       MaxCount;                                                     // 0x0000(0x0004)
    char                                          bLimitToOwner;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    enum class EMaxConcurrentResolutionRule       ResolutionRule;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         RetriggerTime;                                                // 0x000C(0x0004)
    float                                         VolumeScale;                                                  // 0x0010(0x0004)
    enum class EConcurrencyVolumeScaleMode        VolumeScaleMode;                                              // 0x0014(0x0004)
    float                                         VolumeScaleAttackTime;                                        // 0x0018(0x0004)
    char                                          bVolumeScaleCanRelease;                                       // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         VolumeScaleReleaseTime;                                       // 0x0020(0x0004)
    float                                         VoiceStealReleaseTime;                                        // 0x0024(0x0004)
};


// ScriptStruct  Engine.SoundNodeEditorData
// Struct Size::0x0008
struct FSoundNodeEditorData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.SourceEffectChainEntry
// Struct Size::0x0010
struct FSourceEffectChainEntry
{
    FSoundEffectSourcePreset*                     Preset;                                                       // 0x0000(0x0008)
    char                                          bBypass;                                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Engine.SoundGroup
// Struct Size::0x0020
struct FSoundGroup
{
    enum class ESoundGroup                        SoundGroup;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       DisplayName;                                                  // 0x0008(0x0010)
    char                                          bAlwaysDecompressOnLoad;                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         DecompressedDuration;                                         // 0x001C(0x0004)
};


// ScriptStruct  Engine.SoundClassAdjuster
// Struct Size::0x0020
struct FSoundClassAdjuster
{
    FSoundClass*                                  SoundClassObject;                                             // 0x0000(0x0008)
    float                                         VolumeAdjuster;                                               // 0x0008(0x0004)
    float                                         PitchAdjuster;                                                // 0x000C(0x0004)
    float                                         LowPassFilterFrequency;                                       // 0x0010(0x0004)
    char                                          bApplyToChildren;                                             // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         VoiceCenterChannelVolumeAdjuster;                             // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.AudioEQEffect
// Struct Size::0x0040
struct FAudioEQEffect : public FAudioEffectParameters
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    float                                         FrequencyCenter0;                                             // 0x0010(0x0004)
    float                                         Gain0;                                                        // 0x0014(0x0004)
    float                                         Bandwidth0;                                                   // 0x0018(0x0004)
    float                                         FrequencyCenter1;                                             // 0x001C(0x0004)
    float                                         Gain1;                                                        // 0x0020(0x0004)
    float                                         Bandwidth1;                                                   // 0x0024(0x0004)
    float                                         FrequencyCenter2;                                             // 0x0028(0x0004)
    float                                         Gain2;                                                        // 0x002C(0x0004)
    float                                         Bandwidth2;                                                   // 0x0030(0x0004)
    float                                         FrequencyCenter3;                                             // 0x0034(0x0004)
    float                                         Gain3;                                                        // 0x0038(0x0004)
    float                                         Bandwidth3;                                                   // 0x003C(0x0004)
};


// ScriptStruct  Engine.SoundModulationDefaultRoutingSettings
// Struct Size::0x0048
struct FSoundModulationDefaultRoutingSettings : public FSoundModulationDefaultSettings
{
    enum class EModulationRouting                 VolumeRouting;                                                // 0x0040(0x0001)
    enum class EModulationRouting                 PitchRouting;                                                 // 0x0041(0x0001)
    enum class EModulationRouting                 HighpassRouting;                                              // 0x0042(0x0001)
    enum class EModulationRouting                 LowpassRouting;                                               // 0x0043(0x0001)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Engine.DistanceDatum
// Struct Size::0x0014
struct FDistanceDatum
{
    float                                         FadeInDistanceStart;                                          // 0x0000(0x0004)
    float                                         FadeInDistanceEnd;                                            // 0x0004(0x0004)
    float                                         FadeOutDistanceStart;                                         // 0x0008(0x0004)
    float                                         FadeOutDistanceEnd;                                           // 0x000C(0x0004)
    float                                         Volume;                                                       // 0x0010(0x0004)
};


// ScriptStruct  Engine.ModulatorContinuousParams
// Struct Size::0x0024
struct FModulatorContinuousParams
{
    FName                                         ParameterName;                                                // 0x0000(0x000C)
    float                                         Default;                                                      // 0x000C(0x0004)
    float                                         MinInput;                                                     // 0x0010(0x0004)
    float                                         MaxInput;                                                     // 0x0014(0x0004)
    float                                         MinOutput;                                                    // 0x0018(0x0004)
    float                                         MaxOutput;                                                    // 0x001C(0x0004)
    enum class ModulationParamMode                ParamMode;                                                    // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
};


// ScriptStruct  Engine.SoundSourceBusSendInfo
// Struct Size::0x00B8
struct FSoundSourceBusSendInfo
{
    enum class ESourceBusSendLevelControlMethod   SourceBusSendLevelControlMethod;                              // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FSoundSourceBus*                              SoundSourceBus;                                               // 0x0008(0x0008)
    FAudioBus*                                    AudioBus;                                                     // 0x0010(0x0008)
    float                                         SendLevel;                                                    // 0x0018(0x0004)
    float                                         MinSendLevel;                                                 // 0x001C(0x0004)
    float                                         MaxSendLevel;                                                 // 0x0020(0x0004)
    float                                         MinSendDistance;                                              // 0x0024(0x0004)
    float                                         MaxSendDistance;                                              // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FRuntimeFloatCurve                            CustomSendLevelCurve;                                         // 0x0030(0x0088)
};


// ScriptStruct  Engine.SoundSubmixSpectralAnalysisBandSettings
// Struct Size::0x0010
struct FSoundSubmixSpectralAnalysisBandSettings
{
    float                                         BandFrequency;                                                // 0x0000(0x0004)
    int32_t                                       AttackTimeMsec;                                               // 0x0004(0x0004)
    int32_t                                       ReleaseTimeMsec;                                              // 0x0008(0x0004)
    float                                         QFactor;                                                      // 0x000C(0x0004)
};


// ScriptStruct  Engine.SoundWaveEnvelopeTimeData
// Struct Size::0x0008
struct FSoundWaveEnvelopeTimeData
{
    float                                         Amplitude;                                                    // 0x0000(0x0004)
    float                                         TimeSec;                                                      // 0x0004(0x0004)
};


// ScriptStruct  Engine.SoundWaveSpectralTimeData
// Struct Size::0x0018
struct FSoundWaveSpectralTimeData
{
    TArray<FSoundWaveSpectralDataEntry>           Data;                                                         // 0x0000(0x0010)
    float                                         TimeSec;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.SoundWaveSpectralDataEntry
// Struct Size::0x0008
struct FSoundWaveSpectralDataEntry
{
    float                                         Magnitude;                                                    // 0x0000(0x0004)
    float                                         NormalizedMagnitude;                                          // 0x0004(0x0004)
};


// ScriptStruct  Engine.SoundWaveEnvelopeDataPerSound
// Struct Size::0x0010
struct FSoundWaveEnvelopeDataPerSound
{
    float                                         Envelope;                                                     // 0x0000(0x0004)
    float                                         PlaybackTime;                                                 // 0x0004(0x0004)
    FSoundWave*                                   SoundWave;                                                    // 0x0008(0x0008)
};


// ScriptStruct  Engine.SoundWaveSpectralDataPerSound
// Struct Size::0x0020
struct FSoundWaveSpectralDataPerSound
{
    TArray<FSoundWaveSpectralData>                SpectralData;                                                 // 0x0000(0x0010)
    float                                         PlaybackTime;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FSoundWave*                                   SoundWave;                                                    // 0x0018(0x0008)
};


// ScriptStruct  Engine.SoundWaveSpectralData
// Struct Size::0x000C
struct FSoundWaveSpectralData
{
    float                                         FrequencyHz;                                                  // 0x0000(0x0004)
    float                                         Magnitude;                                                    // 0x0004(0x0004)
    float                                         NormalizedMagnitude;                                          // 0x0008(0x0004)
};


// ScriptStruct  Engine.StreamedAudioPlatformData
// Struct Size::0x0020
struct FStreamedAudioPlatformData
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  Engine.SplineInstanceData
// Struct Size::0x01A0
struct FSplineInstanceData : public FSceneComponentInstanceData
{
    bool                                          bSplineHasBeenEdited;                                         // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
    FSplineCurves                                 SplineCurves;                                                 // 0x00C0(0x0070)
    FSplineCurves                                 SplineCurvesPreUCS;                                           // 0x0130(0x0070)
};


// ScriptStruct  Engine.SplineCurves
// Struct Size::0x0070
struct FSplineCurves
{
    FInterpCurveVector                            Position;                                                     // 0x0000(0x0018)
    FInterpCurveQuat                              Rotation;                                                     // 0x0018(0x0018)
    FInterpCurveVector                            Scale;                                                        // 0x0030(0x0018)
    FInterpCurveFloat                             ReparamTable;                                                 // 0x0048(0x0018)
    FSplineMetadata*                              Metadata;                                                     // 0x0060(0x0008)
    uint32_t                                      Version;                                                      // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  Engine.SplinePoint
// Struct Size::0x0044
struct FSplinePoint
{
    float                                         InputKey;                                                     // 0x0000(0x0004)
    FVector                                       Position;                                                     // 0x0004(0x000C)
    FVector                                       ArriveTangent;                                                // 0x0010(0x000C)
    FVector                                       LeaveTangent;                                                 // 0x001C(0x000C)
    FRotator                                      Rotation;                                                     // 0x0028(0x000C)
    FVector                                       Scale;                                                        // 0x0034(0x000C)
    enum class ESplinePointType                   Type;                                                         // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
};


// ScriptStruct  Engine.SplineMeshInstanceData
// Struct Size::0x00E8
struct FSplineMeshInstanceData : public FSceneComponentInstanceData
{
    FVector                                       StartPos;                                                     // 0x00B8(0x000C)
    FVector                                       EndPos;                                                       // 0x00C4(0x000C)
    FVector                                       StartTangent;                                                 // 0x00D0(0x000C)
    FVector                                       EndTangent;                                                   // 0x00DC(0x000C)
};


// ScriptStruct  Engine.SplineMeshParams
// Struct Size::0x0058
struct FSplineMeshParams
{
    FVector                                       StartPos;                                                     // 0x0000(0x000C)
    FVector                                       StartTangent;                                                 // 0x000C(0x000C)
    FVector2D                                     StartScale;                                                   // 0x0018(0x0008)
    float                                         StartRoll;                                                    // 0x0020(0x0004)
    FVector2D                                     StartOffset;                                                  // 0x0024(0x0008)
    FVector                                       EndPos;                                                       // 0x002C(0x000C)
    FVector2D                                     EndScale;                                                     // 0x0038(0x0008)
    FVector                                       EndTangent;                                                   // 0x0040(0x000C)
    float                                         EndRoll;                                                      // 0x004C(0x0004)
    FVector2D                                     EndOffset;                                                    // 0x0050(0x0008)
};


// ScriptStruct  Engine.MaterialRemapIndex
// Struct Size::0x0018
struct FMaterialRemapIndex
{
    uint32_t                                      ImportVersionKey;                                             // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               MaterialRemap;                                                // 0x0008(0x0010)
};


// ScriptStruct  Engine.StaticMaterial
// Struct Size::0x0038
struct FStaticMaterial
{
    FMaterialInterface*                           MaterialInterface;                                            // 0x0000(0x0008)
    FName                                         MaterialSlotName;                                             // 0x0008(0x000C)
    FName                                         ImportedMaterialSlotName;                                     // 0x0014(0x000C)
    FMeshUVChannelInfo                            UVChannelData;                                                // 0x0020(0x0014)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.AssetEditorOrbitCameraPosition
// Struct Size::0x0028
struct FAssetEditorOrbitCameraPosition
{
    bool                                          bIsSet;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       CamOrbitPoint;                                                // 0x0004(0x000C)
    FVector                                       CamOrbitZoom;                                                 // 0x0010(0x000C)
    FRotator                                      CamOrbitRotation;                                             // 0x001C(0x000C)
};


// ScriptStruct  Engine.MeshSectionInfoMap
// Struct Size::0x0050
struct FMeshSectionInfoMap
{
    TMap<uint32_t,FMeshSectionInfo>               Map;                                                          // 0x0000(0x0050)
};


// ScriptStruct  Engine.MeshSectionInfo
// Struct Size::0x0008
struct FMeshSectionInfo
{
    int32_t                                       MaterialIndex;                                                // 0x0000(0x0004)
    bool                                          bEnableCollision;                                             // 0x0004(0x0001)
    bool                                          bCastShadow;                                                  // 0x0005(0x0001)
    bool                                          bVisibleInRayTracing;                                         // 0x0006(0x0001)
    bool                                          bForceOpaque;                                                 // 0x0007(0x0001)
};


// ScriptStruct  Engine.StaticMeshSourceModel
// Struct Size::0x0070
struct FStaticMeshSourceModel
{
    FMeshBuildSettings                            BuildSettings;                                                // 0x0000(0x0030)
    FMeshReductionSettings                        ReductionSettings;                                            // 0x0030(0x0024)
    float                                         LODDistance;                                                  // 0x0054(0x0004)
    FPerPlatformFloat                             ScreenSize;                                                   // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       SourceImportFilename;                                         // 0x0060(0x0010)
};


// ScriptStruct  Engine.StaticMeshOptimizationSettings
// Struct Size::0x001C
struct FStaticMeshOptimizationSettings
{
    enum class EOptimizationType                  ReductionMethod;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         NumOfTrianglesPercentage;                                     // 0x0004(0x0004)
    float                                         MaxDeviationPercentage;                                       // 0x0008(0x0004)
    float                                         WeldingThreshold;                                             // 0x000C(0x0004)
    bool                                          bRecalcNormals;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         NormalsThreshold;                                             // 0x0014(0x0004)
    char                                          SilhouetteImportance;                                         // 0x0018(0x0001)
    char                                          TextureImportance;                                            // 0x0019(0x0001)
    char                                          ShadingImportance;                                            // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
};


// ScriptStruct  Engine.StaticMeshComponentInstanceData
// Struct Size::0x0140
struct FStaticMeshComponentInstanceData : public FPrimitiveComponentInstanceData
{
    FStaticMesh*                                  StaticMesh;                                                   // 0x0100(0x0008)
    TArray<FStaticMeshVertexColorLODData>         VertexColorLODs;                                              // 0x0108(0x0010)
    TArray<FGuid>                                 CachedStaticLighting;                                         // 0x0118(0x0010)
    TArray<FStreamingTextureBuildInfo>            StreamingTextureData;                                         // 0x0128(0x0010)
    char                                          pa_0138[0x0008]                                               // 0x0138(0x0008)
};


// ScriptStruct  Engine.StreamingTextureBuildInfo
// Struct Size::0x000C
struct FStreamingTextureBuildInfo
{
    uint32_t                                      PackedRelativeBox;                                            // 0x0000(0x0004)
    int32_t                                       TextureLevelIndex;                                            // 0x0004(0x0004)
    float                                         TexelFactor;                                                  // 0x0008(0x0004)
};


// ScriptStruct  Engine.StaticMeshVertexColorLODData
// Struct Size::0x0028
struct FStaticMeshVertexColorLODData
{
    TArray<FPaintedVertex>                        PaintedVertices;                                              // 0x0000(0x0010)
    TArray<FColor>                                VertexBufferColors;                                           // 0x0010(0x0010)
    uint32_t                                      LODIndex;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.PaintedVertex
// Struct Size::0x0020
struct FPaintedVertex
{
    FVector                                       Position;                                                     // 0x0000(0x000C)
    FColor                                        Color;                                                        // 0x000C(0x0004)
    FVector4                                      Normal;                                                       // 0x0010(0x0010)
};


// ScriptStruct  Engine.StaticMeshComponentLODInfo
// Struct Size::0x0090
struct FStaticMeshComponentLODInfo
{
    char                                          pa_0000[0x0090]                                               // 0x0000(0x0090)
};


// ScriptStruct  Engine.StaticParameterSet
// Struct Size::0x0040
struct FStaticParameterSet
{
    TArray<FStaticSwitchParameter>                StaticSwitchParameters;                                       // 0x0000(0x0010)
    TArray<FStaticComponentMaskParameter>         StaticComponentMaskParameters;                                // 0x0010(0x0010)
    TArray<FStaticTerrainLayerWeightParameter>    TerrainLayerWeightParameters;                                 // 0x0020(0x0010)
    TArray<FStaticMaterialLayersParameter>        MaterialLayersParameters;                                     // 0x0030(0x0010)
};


// ScriptStruct  Engine.StaticParameterBase
// Struct Size::0x0028
struct FStaticParameterBase
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0014)
    bool                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FGuid                                         ExpressionGUID;                                               // 0x0018(0x0010)
};


// ScriptStruct  Engine.StaticMaterialLayersParameter
// Struct Size::0x0068
struct FStaticMaterialLayersParameter : public FStaticParameterBase
{
    FMaterialLayersFunctions                      Value;                                                        // 0x0028(0x0040)
};


// ScriptStruct  Engine.StaticTerrainLayerWeightParameter
// Struct Size::0x0030
struct FStaticTerrainLayerWeightParameter : public FStaticParameterBase
{
    int32_t                                       WeightmapIndex;                                               // 0x0028(0x0004)
    bool                                          bWeightBasedBlend;                                            // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  Engine.StaticComponentMaskParameter
// Struct Size::0x002C
struct FStaticComponentMaskParameter : public FStaticParameterBase
{
    bool                                          R;                                                            // 0x0028(0x0001)
    bool                                          G;                                                            // 0x0029(0x0001)
    bool                                          B;                                                            // 0x002A(0x0001)
    bool                                          A;                                                            // 0x002B(0x0001)
};


// ScriptStruct  Engine.StaticSwitchParameter
// Struct Size::0x002C
struct FStaticSwitchParameter : public FStaticParameterBase
{
    bool                                          Value;                                                        // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
};


// ScriptStruct  Engine.EquirectProps
// Struct Size::0x0048
struct FEquirectProps
{
    FBox2D                                        LeftUVRect;                                                   // 0x0000(0x0014)
    FBox2D                                        RightUVRect;                                                  // 0x0014(0x0014)
    FVector2D                                     LeftScale;                                                    // 0x0028(0x0008)
    FVector2D                                     RightScale;                                                   // 0x0030(0x0008)
    FVector2D                                     LeftBias;                                                     // 0x0038(0x0008)
    FVector2D                                     RightBias;                                                    // 0x0040(0x0008)
};


// ScriptStruct  Engine.SubsurfaceProfileStruct
// Struct Size::0x008C
struct FSubsurfaceProfileStruct
{
    FLinearColor                                  SurfaceAlbedo;                                                // 0x0000(0x0010)
    FLinearColor                                  MeanFreePathColor;                                            // 0x0010(0x0010)
    float                                         MeanFreePathDistance;                                         // 0x0020(0x0004)
    float                                         WorldUnitScale;                                               // 0x0024(0x0004)
    bool                                          bEnableBurley;                                                // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         ScatterRadius;                                                // 0x002C(0x0004)
    FLinearColor                                  SubsurfaceColor;                                              // 0x0030(0x0010)
    FLinearColor                                  FalloffColor;                                                 // 0x0040(0x0010)
    FLinearColor                                  BoundaryColorBleed;                                           // 0x0050(0x0010)
    float                                         ExtinctionScale;                                              // 0x0060(0x0004)
    float                                         NormalScale;                                                  // 0x0064(0x0004)
    float                                         ScatteringDistribution;                                       // 0x0068(0x0004)
    float                                         IOR;                                                          // 0x006C(0x0004)
    float                                         Roughness0;                                                   // 0x0070(0x0004)
    float                                         Roughness1;                                                   // 0x0074(0x0004)
    float                                         LobeMix;                                                      // 0x0078(0x0004)
    FLinearColor                                  TransmissionTintColor;                                        // 0x007C(0x0010)
};


// ScriptStruct  Engine.TextureFormatSettings
// Struct Size::0x0002
struct FTextureFormatSettings
{
    enum class TextureCompressionSettings         CompressionSettings;                                          // 0x0000(0x0001)
    char                                          CompressionNoAlpha;                                           // 0x0001(0x0001)
    char                                          CompressionNone;                                              // 0x0001(0x0001)
    char                                          CompressionYCoCg;                                             // 0x0001(0x0001)
    char                                          SRGB;                                                         // 0x0001(0x0001)
};


// ScriptStruct  Engine.TexturePlatformData
// Struct Size::0x0030
struct FTexturePlatformData
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  Engine.TextureSource
// Struct Size::0x0038
struct FTextureSource
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  Engine.TextureSourceBlock
// Struct Size::0x0018
struct FTextureSourceBlock
{
    int32_t                                       BlockX;                                                       // 0x0000(0x0004)
    int32_t                                       BlockY;                                                       // 0x0004(0x0004)
    int32_t                                       SizeX;                                                        // 0x0008(0x0004)
    int32_t                                       SizeY;                                                        // 0x000C(0x0004)
    int32_t                                       NumSlices;                                                    // 0x0010(0x0004)
    int32_t                                       NumMips;                                                      // 0x0014(0x0004)
};


// ScriptStruct  Engine.TextureLODGroup
// Struct Size::0x007C
struct FTextureLODGroup
{
    enum class TextureGroup                       Group;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x000B]                                               // 0x0001(0x000B)
    int32_t                                       LODBias;                                                      // 0x000C(0x0004)
    int32_t                                       LODBias;                                                      // 0x0010(0x0004)
    int32_t                                       LODBias;                                                      // 0x0014(0x0004)
    char                                          pa_0018[0x0004]                                               // 0x0018(0x0004)
    int32_t                                       NumStreamedMips;                                              // 0x001C(0x0004)
    enum class TextureMipGenSettings              MipGenSettings;                                               // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    int32_t                                       MinLODSize;                                                   // 0x0024(0x0004)
    int32_t                                       MaxLODSize;                                                   // 0x0028(0x0004)
    int32_t                                       MaxLODSize;                                                   // 0x002C(0x0004)
    int32_t                                       MaxLODSize;                                                   // 0x0030(0x0004)
    int32_t                                       OptionalLODBias;                                              // 0x0034(0x0004)
    int32_t                                       OptionalMaxLODSize;                                           // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FName                                         MinMagFilter;                                                 // 0x0040(0x000C)
    FName                                         MipFilter;                                                    // 0x004C(0x000C)
    enum class ETextureMipLoadOptions             MipLoadOptions;                                               // 0x0058(0x0001)
    bool                                          HighPriorityLoad;                                             // 0x0059(0x0001)
    bool                                          DuplicateNonOptionalMips;                                     // 0x005A(0x0001)
    char                                          pa_005B[0x0001]                                               // 0x005B(0x0001)
    float                                         Downscale;                                                    // 0x005C(0x0004)
    enum class ETextureDownscaleOptions           DownscaleOptions;                                             // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    int32_t                                       VirtualTextureTileCountBias;                                  // 0x0064(0x0004)
    int32_t                                       VirtualTextureTileSizeBias;                                   // 0x0068(0x0004)
    enum class ETextureLossyCompressionAmount     LossyCompressionAmount;                                       // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
    uint32_t                                      MaxTextureDimension;                                          // 0x0070(0x0004)
    uint32_t                                      AdditionalAnisotropy;                                         // 0x0074(0x0004)
    bool                                          IsUI;                                                         // 0x0078(0x0001)
    char                                          pa_0079[0x0003]                                               // 0x0079(0x0003)
};


// ScriptStruct  Engine.StreamingRenderAssetPrimitiveInfo
// Struct Size::0x0030
struct FStreamingRenderAssetPrimitiveInfo
{
    UStreamableRenderAsset*                       RenderAsset;                                                  // 0x0000(0x0008)
    FBoxSphereBounds                              Bounds;                                                       // 0x0008(0x001C)
    float                                         TexelFactor;                                                  // 0x0024(0x0004)
    uint32_t                                      PackedRelativeBox;                                            // 0x0028(0x0004)
    char                                          bAllowInvalidTexelFactorWhenUnregistered;                     // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  Engine.Timeline
// Struct Size::0x00B0
struct FTimeline
{
    enum class ETimelineLengthMode                LengthMode;                                                   // 0x0000(0x0001)
    char                                          bLooping;                                                     // 0x0001(0x0001)
    char                                          bReversePlayback;                                             // 0x0001(0x0001)
    char                                          bPlaying;                                                     // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         Length;                                                       // 0x0004(0x0004)
    float                                         PlayRate;                                                     // 0x0008(0x0004)
    float                                         TickInterval;                                                 // 0x000C(0x0004)
    float                                         Position;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FTimelineEventEntry>                   Events;                                                       // 0x0018(0x0010)
    TArray<FTimelineVectorTrack>                  InterpVectors;                                                // 0x0028(0x0010)
    TArray<FTimelineFloatTrack>                   InterpFloats;                                                 // 0x0038(0x0010)
    TArray<FTimelineLinearColorTrack>             InterpLinearColors;                                           // 0x0048(0x0010)
    FDelegate                                     TimelinePostUpdateFunc;                                       // 0x0058(0x0014)
    FDelegate                                     TimelineFinishedFunc;                                         // 0x006C(0x0014)
    TWeakObjectPtr<UObject>                       PropertySetObject;                                            // 0x0080(0x0008)
    FName                                         DirectionPropertyName;                                        // 0x0088(0x000C)
    char                                          pa_0094[0x001C]                                               // 0x0094(0x001C)
};


// ScriptStruct  Engine.TimelineLinearColorTrack
// Struct Size::0x0050
struct FTimelineLinearColorTrack
{
    FCurveLinearColor*                            LinearColorCurve;                                             // 0x0000(0x0008)
    FDelegate                                     InterpFunc;                                                   // 0x0008(0x0014)
    FName                                         TrackName;                                                    // 0x001C(0x000C)
    FName                                         LinearColorPropertyName;                                      // 0x0028(0x000C)
    char                                          pa_0034[0x001C]                                               // 0x0034(0x001C)
};


// ScriptStruct  Engine.TimelineFloatTrack
// Struct Size::0x0050
struct FTimelineFloatTrack
{
    FCurveFloat*                                  FloatCurve;                                                   // 0x0000(0x0008)
    FDelegate                                     InterpFunc;                                                   // 0x0008(0x0014)
    FName                                         TrackName;                                                    // 0x001C(0x000C)
    FName                                         FloatPropertyName;                                            // 0x0028(0x000C)
    char                                          pa_0034[0x001C]                                               // 0x0034(0x001C)
};


// ScriptStruct  Engine.TimelineVectorTrack
// Struct Size::0x0050
struct FTimelineVectorTrack
{
    FCurveVector*                                 VectorCurve;                                                  // 0x0000(0x0008)
    FDelegate                                     InterpFunc;                                                   // 0x0008(0x0014)
    FName                                         TrackName;                                                    // 0x001C(0x000C)
    FName                                         VectorPropertyName;                                           // 0x0028(0x000C)
    char                                          pa_0034[0x001C]                                               // 0x0034(0x001C)
};


// ScriptStruct  Engine.TimelineEventEntry
// Struct Size::0x0018
struct FTimelineEventEntry
{
    float                                         Time;                                                         // 0x0000(0x0004)
    FDelegate                                     EventFunc;                                                    // 0x0004(0x0014)
};


// ScriptStruct  Engine.TTTrackBase
// Struct Size::0x0018
struct FTTTrackBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FName                                         TrackName;                                                    // 0x0008(0x000C)
    bool                                          bIsExternalCurve;                                             // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  Engine.TTPropertyTrack
// Struct Size::0x0028
struct FTTPropertyTrack : public FTTTrackBase
{
    FName                                         PropertyName;                                                 // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.TTLinearColorTrack
// Struct Size::0x0030
struct FTTLinearColorTrack : public FTTPropertyTrack
{
    FCurveLinearColor*                            CurveLinearColor;                                             // 0x0028(0x0008)
};


// ScriptStruct  Engine.TTVectorTrack
// Struct Size::0x0030
struct FTTVectorTrack : public FTTPropertyTrack
{
    FCurveVector*                                 CurveVector;                                                  // 0x0028(0x0008)
};


// ScriptStruct  Engine.TTFloatTrack
// Struct Size::0x0030
struct FTTFloatTrack : public FTTPropertyTrack
{
    FCurveFloat*                                  CurveFloat;                                                   // 0x0028(0x0008)
};


// ScriptStruct  Engine.TTEventTrack
// Struct Size::0x0030
struct FTTEventTrack : public FTTTrackBase
{
    FName                                         FunctionName;                                                 // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FCurveFloat*                                  CurveKeys;                                                    // 0x0028(0x0008)
};


// ScriptStruct  Engine.TTTrackId
// Struct Size::0x0008
struct FTTTrackId
{
    int32_t                                       TrackType;                                                    // 0x0000(0x0004)
    int32_t                                       TrackIndex;                                                   // 0x0004(0x0004)
};


// ScriptStruct  Engine.TimeStretchCurveInstance
// Struct Size::0x0030
struct FTimeStretchCurveInstance
{
    bool                                          bHasValidData;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x002F]                                               // 0x0001(0x002F)
};


// ScriptStruct  Engine.TimeStretchCurve
// Struct Size::0x0028
struct FTimeStretchCurve
{
    float                                         SamplingRate;                                                 // 0x0000(0x0004)
    float                                         CurveValueMinPrecision;                                       // 0x0004(0x0004)
    TArray<FTimeStretchCurveMarker>               Markers;                                                      // 0x0008(0x0010)
    float                                         Sum;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x000C]                                               // 0x001C(0x000C)
};


// ScriptStruct  Engine.TimeStretchCurveMarker
// Struct Size::0x0010
struct FTimeStretchCurveMarker
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0008]                                               // 0x0004(0x0008)
    float                                         Alpha;                                                        // 0x000C(0x0004)
};


// ScriptStruct  Engine.TouchInputControl
// Struct Size::0x0078
struct FTouchInputControl
{
    FTexture2D*                                   Image1;                                                       // 0x0000(0x0008)
    FTexture2D*                                   Image2;                                                       // 0x0008(0x0008)
    FVector2D                                     Center;                                                       // 0x0010(0x0008)
    FVector2D                                     VisualSize;                                                   // 0x0018(0x0008)
    FVector2D                                     ThumbSize;                                                    // 0x0020(0x0008)
    FVector2D                                     InteractionSize;                                              // 0x0028(0x0008)
    FVector2D                                     InputScale;                                                   // 0x0030(0x0008)
    FKey                                          MainInputKey;                                                 // 0x0038(0x0020)
    FKey                                          AltInputKey;                                                  // 0x0058(0x0020)
};


// ScriptStruct  Engine.UpdateLevelVisibilityLevelInfo
// Struct Size::0x001C
struct FUpdateLevelVisibilityLevelInfo
{
    FName                                         PackageName;                                                  // 0x0000(0x000C)
    FName                                         FileName;                                                     // 0x000C(0x000C)
    char                                          bIsVisible;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  Engine.HardwareCursorReference
// Struct Size::0x0014
struct FHardwareCursorReference
{
    FName                                         CursorPath;                                                   // 0x0000(0x000C)
    FVector2D                                     HotSpot;                                                      // 0x000C(0x0008)
};


// ScriptStruct  Engine.VirtualTextureBuildSettings
// Struct Size::0x000C
struct FVirtualTextureBuildSettings
{
    int32_t                                       TileSize;                                                     // 0x0000(0x0004)
    int32_t                                       TileBorderSize;                                               // 0x0004(0x0004)
    bool                                          bEnableCompressCrunch;                                        // 0x0008(0x0001)
    bool                                          bEnableCompressZlib;                                          // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Engine.VirtualTextureSpacePoolConfig
// Struct Size::0x0028
struct FVirtualTextureSpacePoolConfig
{
    int32_t                                       MinTileSize;                                                  // 0x0000(0x0004)
    int32_t                                       MaxTileSize;                                                  // 0x0004(0x0004)
    TArray<enum class EPixelFormat>               Formats;                                                      // 0x0008(0x0010)
    int32_t                                       SizeInMegabyte;                                               // 0x0018(0x0004)
    bool                                          bAllowSizeScale;                                              // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    uint32_t                                      ScalabilityGroup;                                             // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.VoiceSettings
// Struct Size::0x0018
struct FVoiceSettings
{
    USceneComponent*                              ComponentToAttachTo;                                          // 0x0000(0x0008)
    FSoundAttenuation*                            AttenuationSettings;                                          // 0x0008(0x0008)
    FSoundEffectSourcePresetChain*                SourceEffectChain;                                            // 0x0010(0x0008)
};


// ScriptStruct  Engine.StreamingLevelsToConsider
// Struct Size::0x0028
struct FStreamingLevelsToConsider
{
    TArray<FLevelStreaming*>                      StreamingLevels;                                              // 0x0000(0x0010)
    char                                          pa_0010[0x0018]                                               // 0x0010(0x0018)
};


// ScriptStruct  Engine.LevelCollection
// Struct Size::0x0078
struct FLevelCollection
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FGameStateBase*                               GameState;                                                    // 0x0008(0x0008)
    FNetDriver*                                   NetDriver;                                                    // 0x0010(0x0008)
    FDemoNetDriver*                               DemoNetDriver;                                                // 0x0018(0x0008)
    FLevel*                                       PersistentLevel;                                              // 0x0020(0x0008)
    TSet<FLevel*>                                 Levels;                                                       // 0x0028(0x0050)
};


// ScriptStruct  Engine.EndPhysicsTickFunction
// Struct Size::0x0030
struct FEndPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.StartPhysicsTickFunction
// Struct Size::0x0030
struct FStartPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.LevelViewportInfo
// Struct Size::0x0020
struct FLevelViewportInfo
{
    FVector                                       CamPosition;                                                  // 0x0000(0x000C)
    FRotator                                      CamRotation;                                                  // 0x000C(0x000C)
    float                                         CamOrthoZoom;                                                 // 0x0018(0x0004)
    bool                                          CamUpdated;                                                   // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.WorldPSCPool
// Struct Size::0x0058
struct FWorldPSCPool
{
    TMap<FParticleSystem*,FPSCPool>               WorldParticleSystemPools;                                     // 0x0000(0x0050)
    char                                          pa_0050[0x0008]                                               // 0x0050(0x0008)
};


// ScriptStruct  Engine.PSCPool
// Struct Size::0x0010
struct FPSCPool
{
    TArray<FPSCPoolElem>                          FreeElements;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Engine.PSCPoolElem
// Struct Size::0x0010
struct FPSCPoolElem
{
    FParticleSystemComponent*                     PSC;                                                          // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  Engine.BroadphaseSettings
// Struct Size::0x0040
struct FBroadphaseSettings
{
    bool                                          bUseMBPOnClient;                                              // 0x0000(0x0001)
    bool                                          bUseMBPOnServer;                                              // 0x0001(0x0001)
    bool                                          bUseMBPOuterBounds;                                           // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FBox                                          MBPBounds;                                                    // 0x0004(0x001C)
    FBox                                          MBPOuterBounds;                                               // 0x0020(0x001C)
    uint32_t                                      MBPNumSubdivs;                                                // 0x003C(0x0004)
};


// ScriptStruct  Engine.HierarchicalSimplification
// Struct Size::0x0160
struct FHierarchicalSimplification
{
    float                                         TransitionScreenSize;                                         // 0x0000(0x0004)
    float                                         OverrideDrawDistance;                                         // 0x0004(0x0004)
    char                                          bUseOverrideDrawDistance;                                     // 0x0008(0x0001)
    char                                          bAllowSpecificExclusion;                                      // 0x0008(0x0001)
    char                                          bSimplifyMesh;                                                // 0x0008(0x0001)
    char                                          bOnlyGenerateClustersForVolumes;                              // 0x0008(0x0001)
    char                                          bReusePreviousLevelClusters;                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FMeshProxySettings                            ProxySetting;                                                 // 0x000C(0x00A8)
    FMeshMergingSettings                          MergeSetting;                                                 // 0x00B4(0x00A0)
    float                                         DesiredBoundRadius;                                           // 0x0154(0x0004)
    float                                         DesiredFillingPercentage;                                     // 0x0158(0x0004)
    int32_t                                       MinNumberOfActorsToBuild;                                     // 0x015C(0x0004)
};


// ScriptStruct  Engine.LightmassWorldInfoSettings
// Struct Size::0x004C
struct FLightmassWorldInfoSettings
{
    float                                         StaticLightingLevelScale;                                     // 0x0000(0x0004)
    int32_t                                       NumIndirectLightingBounces;                                   // 0x0004(0x0004)
    int32_t                                       NumSkyLightingBounces;                                        // 0x0008(0x0004)
    float                                         IndirectLightingQuality;                                      // 0x000C(0x0004)
    float                                         IndirectLightingSmoothness;                                   // 0x0010(0x0004)
    FColor                                        EnvironmentColor;                                             // 0x0014(0x0004)
    float                                         EnvironmentIntensity;                                         // 0x0018(0x0004)
    float                                         EmissiveBoost;                                                // 0x001C(0x0004)
    float                                         DiffuseBoost;                                                 // 0x0020(0x0004)
    enum class EVolumeLightingMethod              VolumeLightingMethod;                                         // 0x0024(0x0001)
    char                                          bUseAmbientOcclusion;                                         // 0x0025(0x0001)
    char                                          bGenerateAmbientOcclusionMaterialMask;                        // 0x0025(0x0001)
    char                                          bVisualizeMaterialDiffuse;                                    // 0x0025(0x0001)
    char                                          bVisualizeAmbientOcclusion;                                   // 0x0025(0x0001)
    char                                          bCompressLightmaps;                                           // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
    float                                         VolumetricLightmapDetailCellSize;                             // 0x0028(0x0004)
    float                                         VolumetricLightmapMaximumBrickMemoryMb;                       // 0x002C(0x0004)
    float                                         VolumetricLightmapSphericalHarmonicSmoothing;                 // 0x0030(0x0004)
    float                                         VolumeLightSamplePlacementScale;                              // 0x0034(0x0004)
    float                                         DirectIlluminationOcclusionFraction;                          // 0x0038(0x0004)
    float                                         IndirectIlluminationOcclusionFraction;                        // 0x003C(0x0004)
    float                                         OcclusionExponent;                                            // 0x0040(0x0004)
    float                                         FullyOccludedSamplesFraction;                                 // 0x0044(0x0004)
    float                                         MaxOcclusionDistance;                                         // 0x0048(0x0004)
};


// ScriptStruct  Serialization.StructSerializerTestStruct
// Struct Size::0x0480
struct FStructSerializerTestStruct
{
    FStructSerializerNumericTestStruct            Numerics;                                                     // 0x0000(0x0030)
    FStructSerializerBooleanTestStruct            Booleans;                                                     // 0x0030(0x0003)
    char                                          pa_0033[0x0005]                                               // 0x0033(0x0005)
    FStructSerializerObjectTestStruct             Objects;                                                      // 0x0038(0x00C0)
    char                                          pa_00F8[0x0008]                                               // 0x00F8(0x0008)
    FStructSerializerBuiltinTestStruct            Builtins;                                                     // 0x0100(0x00A0)
    FStructSerializerArrayTestStruct              Arrays;                                                       // 0x01A0(0x0060)
    FStructSerializerMapTestStruct                Maps;                                                         // 0x0200(0x0140)
    FStructSerializerSetTestStruct                Sets;                                                         // 0x0340(0x0140)
};


// ScriptStruct  Serialization.StructSerializerSetTestStruct
// Struct Size::0x0140
struct FStructSerializerSetTestStruct
{
    TSet<FString>                                 StrSet;                                                       // 0x0000(0x0050)
    TSet<int32_t>                                 IntSet;                                                       // 0x0050(0x0050)
    TSet<FName>                                   NameSet;                                                      // 0x00A0(0x0050)
    TSet<FStructSerializerBuiltinTestStruct>      StructSet;                                                    // 0x00F0(0x0050)
};


// ScriptStruct  Serialization.StructSerializerBuiltinTestStruct
// Struct Size::0x00A0
struct FStructSerializerBuiltinTestStruct
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    FName                                         Name;                                                         // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       String;                                                       // 0x0020(0x0010)
    FText                                         Text;                                                         // 0x0030(0x0018)
    FVector                                       Vector;                                                       // 0x0048(0x000C)
    char                                          pa_0054[0x000C]                                               // 0x0054(0x000C)
    FVector4                                      Vector4;                                                      // 0x0060(0x0010)
    FRotator                                      Rotator;                                                      // 0x0070(0x000C)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FQuat                                         Quat;                                                         // 0x0080(0x0010)
    FColor                                        Color;                                                        // 0x0090(0x0004)
    char                                          pa_0094[0x000C]                                               // 0x0094(0x000C)
};


// ScriptStruct  Serialization.StructSerializerMapTestStruct
// Struct Size::0x0140
struct FStructSerializerMapTestStruct
{
    TMap<int32_t,FString>                         IntToStr;                                                     // 0x0000(0x0050)
    TMap<FString,FString>                         StrToStr;                                                     // 0x0050(0x0050)
    TMap<FString,FVector>                         StrToVec;                                                     // 0x00A0(0x0050)
    TMap<FString,FStructSerializerBuiltinTestStruct>StrToStruct;                                                // 0x00F0(0x0050)
};


// ScriptStruct  Serialization.StructSerializerArrayTestStruct
// Struct Size::0x0060
struct FStructSerializerArrayTestStruct
{
    TArray<int32_t>                               Int32Array;                                                   // 0x0000(0x0010)
    TArray<char>                                  ByteArray;                                                    // 0x0010(0x0010)
    int32_t                                       StaticSingleElement;                                          // 0x0020(0x0004)
    int32_t                                       StaticInt32Array;                                             // 0x0024(0x0004)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    float                                         StaticFloatArray;                                             // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
    TArray<FVector>                               VectorArray;                                                  // 0x0040(0x0010)
    TArray<FStructSerializerBuiltinTestStruct>    StructArray;                                                  // 0x0050(0x0010)
};


// ScriptStruct  Serialization.StructSerializerObjectTestStruct
// Struct Size::0x00C0
struct FStructSerializerObjectTestStruct
{
    UObject*                                      Class;                                                        // 0x0000(0x0008)
    FMetaData*                                    SubClass;                                                     // 0x0008(0x0008)
    TSoftClassPtr<UObject>                        SoftClass;                                                    // 0x0010(0x0030)
    UObject*                                      Object;                                                       // 0x0040(0x0008)
    TWeakObjectPtr<FMetaData>                     WeakObject;                                                   // 0x0048(0x0008)
    TSoftObjectPtr<FMetaData>                     SoftObject;                                                   // 0x0050(0x0030)
    FSoftClassPath                                ClassPath;                                                    // 0x0080(0x0020)
    FSoftObjectPath                               ObjectPath;                                                   // 0x00A0(0x0020)
};


// ScriptStruct  Serialization.StructSerializerBooleanTestStruct
// Struct Size::0x0003
struct FStructSerializerBooleanTestStruct
{
    bool                                          BoolFalse;                                                    // 0x0000(0x0001)
    bool                                          BoolTrue;                                                     // 0x0001(0x0001)
    char                                          Bitfield0;                                                    // 0x0002(0x0001)
    char                                          Bitfield1;                                                    // 0x0002(0x0001)
    char                                          Bitfield2Set;                                                 // 0x0002(0x0001)
    char                                          Bitfield3;                                                    // 0x0002(0x0001)
    char                                          Bitfield4Set;                                                 // 0x0002(0x0001)
    char                                          Bitfield5Set;                                                 // 0x0002(0x0001)
    char                                          Bitfield6;                                                    // 0x0002(0x0001)
    char                                          Bitfield7Set;                                                 // 0x0002(0x0001)
};


// ScriptStruct  Serialization.StructSerializerNumericTestStruct
// Struct Size::0x0030
struct FStructSerializerNumericTestStruct
{
    int8_t                                        Int8;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0001]                                               // 0x0001(0x0001)
    int16_t                                       Int16;                                                        // 0x0002(0x0002)
    int32_t                                       Int32;                                                        // 0x0004(0x0004)
    int64_t                                       Int64;                                                        // 0x0008(0x0008)
    char                                          UInt8;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0001]                                               // 0x0011(0x0001)
    uint16_t                                      UInt16;                                                       // 0x0012(0x0002)
    uint32_t                                      UInt32;                                                       // 0x0014(0x0004)
    uint64_t                                      UInt64;                                                       // 0x0018(0x0008)
    float                                         Float;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    double                                        Double;                                                       // 0x0028(0x0008)
};


// ScriptStruct  Serialization.StructSerializerByteArray
// Struct Size::0x0038
struct FStructSerializerByteArray
{
    int32_t                                       Dummy1;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<char>                                  ByteArray;                                                    // 0x0008(0x0010)
    int32_t                                       Dummy2;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int8_t>                                Int8Array;                                                    // 0x0020(0x0010)
    int32_t                                       Dummy3;                                                       // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Overlay.OverlayItem
// Struct Size::0x0028
struct FOverlayItem
{
    FTimespan                                     StartTime;                                                    // 0x0000(0x0008)
    FTimespan                                     EndTime;                                                      // 0x0008(0x0008)
    FString                                       Text;                                                         // 0x0010(0x0010)
    FVector2D                                     Position;                                                     // 0x0020(0x0008)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothConfig
// Struct Size::0x00D4
struct FClothConfig
{
    enum class EClothingWindMethod                WindMethod;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FClothConstraintSetup                         VerticalConstraintConfig;                                     // 0x0004(0x0010)
    FClothConstraintSetup                         HorizontalConstraintConfig;                                   // 0x0014(0x0010)
    FClothConstraintSetup                         BendConstraintConfig;                                         // 0x0024(0x0010)
    FClothConstraintSetup                         ShearConstraintConfig;                                        // 0x0034(0x0010)
    float                                         SelfCollisionRadius;                                          // 0x0044(0x0004)
    float                                         SelfCollisionStiffness;                                       // 0x0048(0x0004)
    float                                         SelfCollisionCullScale;                                       // 0x004C(0x0004)
    FVector                                       Damping;                                                      // 0x0050(0x000C)
    float                                         Friction;                                                     // 0x005C(0x0004)
    float                                         WindDragCoefficient;                                          // 0x0060(0x0004)
    float                                         WindLiftCoefficient;                                          // 0x0064(0x0004)
    FVector                                       LinearDrag;                                                   // 0x0068(0x000C)
    FVector                                       AngularDrag;                                                  // 0x0074(0x000C)
    FVector                                       LinearInertiaScale;                                           // 0x0080(0x000C)
    FVector                                       AngularInertiaScale;                                          // 0x008C(0x000C)
    FVector                                       CentrifugalInertiaScale;                                      // 0x0098(0x000C)
    float                                         SolverFrequency;                                              // 0x00A4(0x0004)
    float                                         StiffnessFrequency;                                           // 0x00A8(0x0004)
    float                                         GravityScale;                                                 // 0x00AC(0x0004)
    FVector                                       GravityOverride;                                              // 0x00B0(0x000C)
    bool                                          bUseGravityOverride;                                          // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    float                                         TetherStiffness;                                              // 0x00C0(0x0004)
    float                                         TetherLimit;                                                  // 0x00C4(0x0004)
    float                                         CollisionThickness;                                           // 0x00C8(0x0004)
    float                                         AnimDriveSpringStiffness;                                     // 0x00CC(0x0004)
    float                                         AnimDriveDamperStiffness;                                     // 0x00D0(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothConstraintSetup
// Struct Size::0x0010
struct FClothConstraintSetup
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         StiffnessMultiplier;                                          // 0x0004(0x0004)
    float                                         StretchLimit;                                                 // 0x0008(0x0004)
    float                                         CompressionLimit;                                             // 0x000C(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothLODDataCommon
// Struct Size::0x0160
struct FClothLODDataCommon
{
    FClothPhysicalMeshData                        PhysicalMeshData;                                             // 0x0000(0x00F8)
    FClothCollisionData                           CollisionData;                                                // 0x00F8(0x0040)
    bool                                          bUseMultipleInfluences;                                       // 0x0138(0x0001)
    char                                          pa_0139[0x0003]                                               // 0x0139(0x0003)
    float                                         SkinningKernelRadius;                                         // 0x013C(0x0004)
    char                                          pa_0140[0x0020]                                               // 0x0140(0x0020)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothPhysicalMeshData
// Struct Size::0x00F8
struct FClothPhysicalMeshData
{
    TArray<FVector>                               Vertices;                                                     // 0x0000(0x0010)
    TArray<FVector>                               Normals;                                                      // 0x0010(0x0010)
    TArray<uint32_t>                              Indices;                                                      // 0x0020(0x0010)
    TMap<uint32_t,FPointWeightMap>                WeightMaps;                                                   // 0x0030(0x0050)
    TArray<float>                                 InverseMasses;                                                // 0x0080(0x0010)
    TArray<FClothVertBoneData>                    BoneData;                                                     // 0x0090(0x0010)
    int32_t                                       MaxBoneWeights;                                               // 0x00A0(0x0004)
    int32_t                                       NumFixedVerts;                                                // 0x00A4(0x0004)
    TArray<uint32_t>                              SelfCollisionIndices;                                         // 0x00A8(0x0010)
    TArray<float>                                 MaxDistances;                                                 // 0x00B8(0x0010)
    TArray<float>                                 BackstopDistances;                                            // 0x00C8(0x0010)
    TArray<float>                                 BackstopRadiuses;                                             // 0x00D8(0x0010)
    TArray<float>                                 AnimDriveMultipliers;                                         // 0x00E8(0x0010)
};


// ScriptStruct  ClothingSystemRuntimeCommon.PointWeightMap
// Struct Size::0x0010
struct FPointWeightMap
{
    TArray<float>                                 Values;                                                       // 0x0000(0x0010)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothParameterMask
// Struct Size::0x0030
struct FClothParameterMask
{
    FName                                         MaskName;                                                     // 0x0000(0x000C)
    enum class EWeightMapTargetCommon             CurrentTarget;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         MaxValue;                                                     // 0x0010(0x0004)
    float                                         MinValue;                                                     // 0x0014(0x0004)
    TArray<float>                                 Values;                                                       // 0x0018(0x0010)
    bool                                          bEnabled;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  ClothingSystemRuntimeNv.ClothConstraintSetupNv
// Struct Size::0x0010
struct FClothConstraintSetupNv
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         StiffnessMultiplier;                                          // 0x0004(0x0004)
    float                                         StretchLimit;                                                 // 0x0008(0x0004)
    float                                         CompressionLimit;                                             // 0x000C(0x0004)
};


// ScriptStruct  SessionMessages.SessionServiceLogUnsubscribe
// Struct Size::0x0001
struct FSessionServiceLogUnsubscribe
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  SessionMessages.SessionServiceLogSubscribe
// Struct Size::0x0001
struct FSessionServiceLogSubscribe
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  SessionMessages.SessionServiceLog
// Struct Size::0x0040
struct FSessionServiceLog
{
    FName                                         Category;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Data;                                                         // 0x0010(0x0010)
    FGuid                                         InstanceId;                                                   // 0x0020(0x0010)
    double                                        TimeSeconds;                                                  // 0x0030(0x0008)
    char                                          Verbosity;                                                    // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  SessionMessages.SessionServicePong
// Struct Size::0x0090
struct FSessionServicePong
{
    bool                                          Authorized;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       BuildDate;                                                    // 0x0008(0x0010)
    FString                                       DeviceName;                                                   // 0x0018(0x0010)
    FGuid                                         InstanceId;                                                   // 0x0028(0x0010)
    FString                                       InstanceName;                                                 // 0x0038(0x0010)
    FString                                       PlatformName;                                                 // 0x0048(0x0010)
    FGuid                                         SessionId;                                                    // 0x0058(0x0010)
    FString                                       SessionName;                                                  // 0x0068(0x0010)
    FString                                       SessionOwner;                                                 // 0x0078(0x0010)
    bool                                          Standalone;                                                   // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
};


// ScriptStruct  SessionMessages.SessionServicePing
// Struct Size::0x0010
struct FSessionServicePing
{
    FString                                       UserName;                                                     // 0x0000(0x0010)
};


// ScriptStruct  NavigationSystem.NavCollisionBox
// Struct Size::0x0018
struct FNavCollisionBox
{
    FVector                                       Offset;                                                       // 0x0000(0x000C)
    FVector                                       Extent;                                                       // 0x000C(0x000C)
};


// ScriptStruct  NavigationSystem.NavCollisionCylinder
// Struct Size::0x0014
struct FNavCollisionCylinder
{
    FVector                                       Offset;                                                       // 0x0000(0x000C)
    float                                         Radius;                                                       // 0x000C(0x0004)
    float                                         Height;                                                       // 0x0010(0x0004)
};


// ScriptStruct  NavigationSystem.SupportedAreaData
// Struct Size::0x0020
struct FSupportedAreaData
{
    FString                                       AreaClassName;                                                // 0x0000(0x0010)
    int32_t                                       AreaID;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UObject*                                      AreaClass;                                                    // 0x0018(0x0008)
};


// ScriptStruct  NavigationSystem.NavGraphNode
// Struct Size::0x0018
struct FNavGraphNode
{
    UObject*                                      Owner;                                                        // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  NavigationSystem.NavGraphEdge
// Struct Size::0x0018
struct FNavGraphEdge
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  NavigationSystem.NavigationFilterFlags
// Struct Size::0x0004
struct FNavigationFilterFlags
{
    char                                          bNavFlag0;                                                    // 0x0000(0x0001)
    char                                          bNavFlag1;                                                    // 0x0000(0x0001)
    char                                          bNavFlag2;                                                    // 0x0000(0x0001)
    char                                          bNavFlag3;                                                    // 0x0000(0x0001)
    char                                          bNavFlag4;                                                    // 0x0000(0x0001)
    char                                          bNavFlag5;                                                    // 0x0000(0x0001)
    char                                          bNavFlag6;                                                    // 0x0000(0x0001)
    char                                          bNavFlag7;                                                    // 0x0000(0x0001)
    char                                          bNavFlag8;                                                    // 0x0001(0x0001)
    char                                          bNavFlag9;                                                    // 0x0001(0x0001)
    char                                          bNavFlag10;                                                   // 0x0001(0x0001)
    char                                          bNavFlag11;                                                   // 0x0001(0x0001)
    char                                          bNavFlag12;                                                   // 0x0001(0x0001)
    char                                          bNavFlag13;                                                   // 0x0001(0x0001)
    char                                          bNavFlag14;                                                   // 0x0001(0x0001)
    char                                          bNavFlag15;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
};


// ScriptStruct  NavigationSystem.NavLinkCustomInstanceData
// Struct Size::0x0070
struct FNavLinkCustomInstanceData : public FActorComponentInstanceData
{
    uint32_t                                      NavLinkUserId;                                                // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  NavigationSystem.RecastNavMeshGenerationProperties
// Struct Size::0x0040
struct FRecastNavMeshGenerationProperties
{
    int32_t                                       TilePoolSize;                                                 // 0x0000(0x0004)
    float                                         TileSizeUU;                                                   // 0x0004(0x0004)
    float                                         CellSize;                                                     // 0x0008(0x0004)
    float                                         CellHeight;                                                   // 0x000C(0x0004)
    float                                         AgentRadius;                                                  // 0x0010(0x0004)
    float                                         AgentHeight;                                                  // 0x0014(0x0004)
    float                                         AgentMaxSlope;                                                // 0x0018(0x0004)
    float                                         AgentMaxStepHeight;                                           // 0x001C(0x0004)
    float                                         MinRegionArea;                                                // 0x0020(0x0004)
    float                                         MergeRegionSize;                                              // 0x0024(0x0004)
    float                                         MaxSimplificationError;                                       // 0x0028(0x0004)
    int32_t                                       TileNumberHardLimit;                                          // 0x002C(0x0004)
    enum class ERecastPartitioning                RegionPartitioning;                                           // 0x0030(0x0001)
    enum class ERecastPartitioning                LayerPartitioning;                                            // 0x0031(0x0001)
    char                                          pa_0032[0x0002]                                               // 0x0032(0x0002)
    int32_t                                       RegionChunkSplits;                                            // 0x0034(0x0004)
    int32_t                                       LayerChunkSplits;                                             // 0x0038(0x0004)
    char                                          bSortNavigationAreasByCost;                                   // 0x003C(0x0001)
    char                                          bPerformVoxelFiltering;                                       // 0x003C(0x0001)
    char                                          bMarkLowHeightAreas;                                          // 0x003C(0x0001)
    char                                          bUseExtraTopCellWhenMarkingAreas;                             // 0x003C(0x0001)
    char                                          bFilterLowSpanSequences;                                      // 0x003C(0x0001)
    char                                          bFilterLowSpanFromTileCache;                                  // 0x003C(0x0001)
    char                                          bFixedTilePoolSize;                                           // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  WebBrowser.WebJSCallbackBase
// Struct Size::0x0020
struct FWebJSCallbackBase
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  WebBrowser.WebJSResponse
// Struct Size::0x0020
struct FWebJSResponse : public FWebJSCallbackBase
{
};


// ScriptStruct  WebBrowser.WebJSFunction
// Struct Size::0x0020
struct FWebJSFunction : public FWebJSCallbackBase
{
};


// ScriptStruct  ChaosSolverEngine.ChaosHandlerSet
// Struct Size::0x0058
struct FChaosHandlerSet
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TSet<UObject*>                                ChaosHandlers;                                                // 0x0008(0x0050)
};


// ScriptStruct  ChaosSolverEngine.BreakEventCallbackWrapper
// Struct Size::0x0040
struct FBreakEventCallbackWrapper
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  ChaosSolverEngine.ChaosDebugSubstepControl
// Struct Size::0x0003
struct FChaosDebugSubstepControl
{
    bool                                          bPause;                                                       // 0x0000(0x0001)
    bool                                          bSubstep;                                                     // 0x0001(0x0001)
    bool                                          bStep;                                                        // 0x0002(0x0001)
};


// ScriptStruct  FieldSystemEngine.FieldObjectCommands
// Struct Size::0x0030
struct FFieldObjectCommands
{
    TArray<FName>                                 TargetNames;                                                  // 0x0000(0x0010)
    TArray<FFieldNodeBase*>                       RootNodes;                                                    // 0x0010(0x0010)
    TArray<FFieldSystemMetaData*>                 MetaDatas;                                                    // 0x0020(0x0010)
};


// ScriptStruct  GeometryCollectionEngine.ChaosBreakingEventRequestSettings
// Struct Size::0x0018
struct FChaosBreakingEventRequestSettings
{
    int32_t                                       MaxNumberOfResults;                                           // 0x0000(0x0004)
    float                                         MinRadius;                                                    // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinMass;                                                      // 0x000C(0x0004)
    float                                         MaxDistance;                                                  // 0x0010(0x0004)
    enum class EChaosBreakingSortMethod           SortMethod;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  GeometryCollectionEngine.ChaosCollisionEventRequestSettings
// Struct Size::0x0018
struct FChaosCollisionEventRequestSettings
{
    int32_t                                       MaxNumberResults;                                             // 0x0000(0x0004)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinImpulse;                                                   // 0x000C(0x0004)
    float                                         MaxDistance;                                                  // 0x0010(0x0004)
    enum class EChaosCollisionSortMethod          SortMethod;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  GeometryCollectionEngine.ChaosTrailingEventRequestSettings
// Struct Size::0x0018
struct FChaosTrailingEventRequestSettings
{
    int32_t                                       MaxNumberOfResults;                                           // 0x0000(0x0004)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinAngularSpeed;                                              // 0x000C(0x0004)
    float                                         MaxDistance;                                                  // 0x0010(0x0004)
    enum class EChaosTrailingSortMethod           SortMethod;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionDebugDrawActorSelectedRigidBody
// Struct Size::0x0018
struct FGeometryCollectionDebugDrawActorSelectedRigidBody
{
    int32_t                                       Id;                                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FChaosSolverActor*                            Solver;                                                       // 0x0008(0x0008)
    FGeometryCollectionActor*                     GeometryCollection;                                           // 0x0010(0x0008)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionDebugDrawWarningMessage
// Struct Size::0x0001
struct FGeometryCollectionDebugDrawWarningMessage
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionSizeSpecificData
// Struct Size::0x0024
struct FGeometryCollectionSizeSpecificData
{
    float                                         MaxSize;                                                      // 0x0000(0x0004)
    enum class ECollisionTypeEnum                 CollisionType;                                                // 0x0004(0x0001)
    enum class EImplicitTypeEnum                  ImplicitType;                                                 // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    int32_t                                       MinLevelSetResolution;                                        // 0x0008(0x0004)
    int32_t                                       MaxLevelSetResolution;                                        // 0x000C(0x0004)
    int32_t                                       MinClusterLevelSetResolution;                                 // 0x0010(0x0004)
    int32_t                                       MaxClusterLevelSetResolution;                                 // 0x0014(0x0004)
    int32_t                                       CollisionObjectReductionPercentage;                           // 0x0018(0x0004)
    float                                         CollisionParticlesFraction;                                   // 0x001C(0x0004)
    int32_t                                       MaximumCollisionParticles;                                    // 0x0020(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionSource
// Struct Size::0x0060
struct FGeometryCollectionSource
{
    FSoftObjectPath                               SourceGeometryObject;                                         // 0x0000(0x0020)
    FTransform                                    LocalTransform;                                               // 0x0020(0x0030)
    TArray<FMaterialInterface*>                   SourceMaterial;                                               // 0x0050(0x0010)
};


// ScriptStruct  AIModule.AIDataProviderValue
// Struct Size::0x0028
struct FAIDataProviderValue
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    FAIDataProvider*                              DataBinding;                                                  // 0x0010(0x0008)
    FName                                         DataField;                                                    // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  AIModule.AIDataProviderTypedValue
// Struct Size::0x0038
struct FAIDataProviderTypedValue : public FAIDataProviderValue
{
    UObject*                                      PropertyType;                                                 // 0x0028(0x0008)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  AIModule.AIDataProviderBoolValue
// Struct Size::0x0040
struct FAIDataProviderBoolValue : public FAIDataProviderTypedValue
{
    bool                                          DefaultValue;                                                 // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  AIModule.AIDataProviderFloatValue
// Struct Size::0x0040
struct FAIDataProviderFloatValue : public FAIDataProviderTypedValue
{
    float                                         DefaultValue;                                                 // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  AIModule.AIDataProviderIntValue
// Struct Size::0x0040
struct FAIDataProviderIntValue : public FAIDataProviderTypedValue
{
    int32_t                                       DefaultValue;                                                 // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  AIModule.AIDataProviderStructValue
// Struct Size::0x0038
struct FAIDataProviderStructValue : public FAIDataProviderValue
{
    char                                          pa_0028[0x0010]                                               // 0x0028(0x0010)
};


// ScriptStruct  AIModule.ActorPerceptionBlueprintInfo
// Struct Size::0x0020
struct FActorPerceptionBlueprintInfo
{
    AActor*                                       Target;                                                       // 0x0000(0x0008)
    TArray<FAIStimulus>                           LastSensedStimuli;                                            // 0x0008(0x0010)
    enum class ETeamAttitude                      Attitude;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  AIModule.AISenseAffiliationFilter
// Struct Size::0x0004
struct FAISenseAffiliationFilter
{
    char                                          bDetectEnemies;                                               // 0x0000(0x0001)
    char                                          bDetectNeutrals;                                              // 0x0000(0x0001)
    char                                          bDetectFriendlies;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  AIModule.AIDamageEvent
// Struct Size::0x0040
struct FAIDamageEvent
{
    float                                         Amount;                                                       // 0x0000(0x0004)
    FVector                                       Location;                                                     // 0x0004(0x000C)
    FVector                                       HitLocation;                                                  // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    AActor*                                       DamagedActor;                                                 // 0x0020(0x0008)
    AActor*                                       Instigator;                                                   // 0x0028(0x0008)
    FName                                         Tag;                                                          // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  AIModule.AINoiseEvent
// Struct Size::0x0030
struct FAINoiseEvent
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
    FVector                                       NoiseLocation;                                                // 0x0004(0x000C)
    float                                         Loudness;                                                     // 0x0010(0x0004)
    float                                         MaxRange;                                                     // 0x0014(0x0004)
    AActor*                                       Instigator;                                                   // 0x0018(0x0008)
    FName                                         Tag;                                                          // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  AIModule.AIPredictionEvent
// Struct Size::0x0018
struct FAIPredictionEvent
{
    AActor*                                       Requestor;                                                    // 0x0000(0x0008)
    AActor*                                       PredictedActor;                                               // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  AIModule.AISightEvent
// Struct Size::0x0018
struct FAISightEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AActor*                                       SeenActor;                                                    // 0x0008(0x0008)
    AActor*                                       Observer;                                                     // 0x0010(0x0008)
};


// ScriptStruct  AIModule.AITeamStimulusEvent
// Struct Size::0x0038
struct FAITeamStimulusEvent
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
    AActor*                                       Broadcaster;                                                  // 0x0028(0x0008)
    AActor*                                       Enemy;                                                        // 0x0030(0x0008)
};


// ScriptStruct  AIModule.AITouchEvent
// Struct Size::0x0020
struct FAITouchEvent
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    AActor*                                       TouchReceiver;                                                // 0x0010(0x0008)
    AActor*                                       OtherActor;                                                   // 0x0018(0x0008)
};


// ScriptStruct  AIModule.IntervalCountdown
// Struct Size::0x0008
struct FIntervalCountdown
{
    float                                         Interval;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
};


// ScriptStruct  AIModule.AIMoveRequest
// Struct Size::0x0040
struct FAIMoveRequest
{
    AActor*                                       GoalActor;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0038]                                               // 0x0008(0x0038)
};


// ScriptStruct  AIModule.BehaviorTreeTemplateInfo
// Struct Size::0x0018
struct FBehaviorTreeTemplateInfo
{
    FBehaviorTree*                                Asset;                                                        // 0x0000(0x0008)
    FBTCompositeNode*                             Template;                                                     // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  AIModule.BlackboardKeySelector
// Struct Size::0x0030
struct FBlackboardKeySelector
{
    TArray<FBlackboardKeyType*>                   AllowedTypes;                                                 // 0x0000(0x0010)
    FName                                         SelectedKeyName;                                              // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FBlackboardKeyType*                           SelectedKeyType;                                              // 0x0020(0x0008)
    char                                          SelectedKeyID;                                                // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    char                                          bNoneIsAllowedValue;                                          // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  AIModule.BlackboardEntry
// Struct Size::0x0020
struct FBlackboardEntry
{
    FName                                         EntryName;                                                    // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FBlackboardKeyType*                           KeyType;                                                      // 0x0010(0x0008)
    char                                          bInstanceSynced;                                              // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  AIModule.BTCompositeChild
// Struct Size::0x0030
struct FBTCompositeChild
{
    FBTCompositeNode*                             ChildComposite;                                               // 0x0000(0x0008)
    FBTTaskNode*                                  ChildTask;                                                    // 0x0008(0x0008)
    TArray<FBTDecorator*>                         Decorators;                                                   // 0x0010(0x0010)
    TArray<FBTDecoratorLogic>                     DecoratorOps;                                                 // 0x0020(0x0010)
};


// ScriptStruct  AIModule.BTDecoratorLogic
// Struct Size::0x0004
struct FBTDecoratorLogic
{
    enum class EBTDecoratorLogic                  Operation;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0001]                                               // 0x0001(0x0001)
    uint16_t                                      Number;                                                       // 0x0002(0x0002)
};


// ScriptStruct  AIModule.CrowdAvoidanceSamplingPattern
// Struct Size::0x0020
struct FCrowdAvoidanceSamplingPattern
{
    TArray<float>                                 Angles;                                                       // 0x0000(0x0010)
    TArray<float>                                 Radii;                                                        // 0x0010(0x0010)
};


// ScriptStruct  AIModule.CrowdAvoidanceConfig
// Struct Size::0x001C
struct FCrowdAvoidanceConfig
{
    float                                         VelocityBias;                                                 // 0x0000(0x0004)
    float                                         DesiredVelocityWeight;                                        // 0x0004(0x0004)
    float                                         CurrentVelocityWeight;                                        // 0x0008(0x0004)
    float                                         SideBiasWeight;                                               // 0x000C(0x0004)
    float                                         ImpactTimeWeight;                                             // 0x0010(0x0004)
    float                                         ImpactTimeRange;                                              // 0x0014(0x0004)
    char                                          CustomPatternIdx;                                             // 0x0018(0x0001)
    char                                          AdaptiveDivisions;                                            // 0x0019(0x0001)
    char                                          AdaptiveRings;                                                // 0x001A(0x0001)
    char                                          AdaptiveDepth;                                                // 0x001B(0x0001)
};


// ScriptStruct  AIModule.EnvQueryInstanceCache
// Struct Size::0x0188
struct FEnvQueryInstanceCache
{
    FEnvQuery*                                    Template;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0180]                                               // 0x0008(0x0180)
};


// ScriptStruct  AIModule.EnvQueryRequest
// Struct Size::0x0068
struct FEnvQueryRequest
{
    FEnvQuery*                                    QueryTemplate;                                                // 0x0000(0x0008)
    UObject*                                      Owner;                                                        // 0x0008(0x0008)
    FWorld*                                       World;                                                        // 0x0010(0x0008)
    char                                          pa_0018[0x0050]                                               // 0x0018(0x0050)
};


// ScriptStruct  AIModule.EQSParametrizedQueryExecutionRequest
// Struct Size::0x0050
struct FEQSParametrizedQueryExecutionRequest
{
    FEnvQuery*                                    QueryTemplate;                                                // 0x0000(0x0008)
    TArray<FAIDynamicParam>                       QueryConfig;                                                  // 0x0008(0x0010)
    FBlackboardKeySelector                        EQSQueryBlackboardKey;                                        // 0x0018(0x0030)
    enum class EEnvQueryRunMode                   RunMode;                                                      // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    char                                          bUseBBKeyForQueryTemplate;                                    // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
};


// ScriptStruct  AIModule.AIDynamicParam
// Struct Size::0x0048
struct FAIDynamicParam
{
    FName                                         ParamName;                                                    // 0x0000(0x000C)
    enum class EAIParamType                       ParamType;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         Value;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FBlackboardKeySelector                        BBKey;                                                        // 0x0018(0x0030)
};


// ScriptStruct  AIModule.EnvQueryResult
// Struct Size::0x0040
struct FEnvQueryResult
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    FEnvQueryItemType*                            ItemType;                                                     // 0x0010(0x0008)
    char                                          pa_0018[0x0014]                                               // 0x0018(0x0014)
    int32_t                                       OptionIndex;                                                  // 0x002C(0x0004)
    int32_t                                       QueryID;                                                      // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
};


// ScriptStruct  AIModule.EnvOverlapData
// Struct Size::0x0020
struct FEnvOverlapData
{
    float                                         ExtentX;                                                      // 0x0000(0x0004)
    float                                         ExtentY;                                                      // 0x0004(0x0004)
    float                                         ExtentZ;                                                      // 0x0008(0x0004)
    FVector                                       ShapeOffset;                                                  // 0x000C(0x000C)
    enum class ECollisionChannel                  OverlapChannel;                                               // 0x0018(0x0001)
    enum class EEnvOverlapShape                   OverlapShape;                                                 // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    char                                          bOnlyBlockingHits;                                            // 0x001C(0x0001)
    char                                          bOverlapComplex;                                              // 0x001C(0x0001)
    char                                          bSkipOverlapQuerier;                                          // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  AIModule.EnvTraceData
// Struct Size::0x0030
struct FEnvTraceData
{
    int32_t                                       VersionNum;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FNavigationQueryFilter*                       NavigationFilter;                                             // 0x0008(0x0008)
    float                                         ProjectDown;                                                  // 0x0010(0x0004)
    float                                         ProjectUp;                                                    // 0x0014(0x0004)
    float                                         ExtentX;                                                      // 0x0018(0x0004)
    float                                         ExtentY;                                                      // 0x001C(0x0004)
    float                                         ExtentZ;                                                      // 0x0020(0x0004)
    float                                         PostProjectionVerticalOffset;                                 // 0x0024(0x0004)
    enum class ETraceTypeQuery                    TraceChannel;                                                 // 0x0028(0x0001)
    enum class ECollisionChannel                  SerializedChannel;                                            // 0x0029(0x0001)
    enum class EEnvTraceShape                     TraceShape;                                                   // 0x002A(0x0001)
    enum class EEnvQueryTrace                     TraceMode;                                                    // 0x002B(0x0001)
    char                                          bTraceComplex;                                                // 0x002C(0x0001)
    char                                          bOnlyBlockingHits;                                            // 0x002C(0x0001)
    char                                          bCanTraceOnNavMesh;                                           // 0x002C(0x0001)
    char                                          bCanTraceOnGeometry;                                          // 0x002C(0x0001)
    char                                          bCanDisableTrace;                                             // 0x002C(0x0001)
    char                                          bCanProjectDown;                                              // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  AIModule.EnvDirection
// Struct Size::0x0020
struct FEnvDirection
{
    FEnvQueryContext*                             LineFrom;                                                     // 0x0000(0x0008)
    FEnvQueryContext*                             LineTo;                                                       // 0x0008(0x0008)
    FEnvQueryContext*                             Rotation;                                                     // 0x0010(0x0008)
    enum class EEnvDirection                      DirMode;                                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  AIModule.EnvNamedValue
// Struct Size::0x0014
struct FEnvNamedValue
{
    FName                                         ParamName;                                                    // 0x0000(0x000C)
    enum class EAIParamType                       ParamType;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         Value;                                                        // 0x0010(0x0004)
};


// ScriptStruct  AIModule.GenericTeamId
// Struct Size::0x0001
struct FGenericTeamId
{
    char                                          TeamID;                                                       // 0x0000(0x0001)
};


// ScriptStruct  AIModule.PawnActionStack
// Struct Size::0x0008
struct FPawnActionStack
{
    FPawnAction*                                  TopAction;                                                    // 0x0000(0x0008)
};


// ScriptStruct  AIModule.PawnActionEvent
// Struct Size::0x0018
struct FPawnActionEvent
{
    FPawnAction*                                  Action;                                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  AIModule.RecastGraphWrapper
// Struct Size::0x0098
struct FRecastGraphWrapper
{
    FRecastNavMesh*                               RecastNavMeshActor;                                           // 0x0000(0x0008)
    char                                          pa_0008[0x0090]                                               // 0x0008(0x0090)
};


// ScriptStruct  RGIHotfix.PatchsieveVersionSetDTO
// Struct Size::0x0010
struct FPatchsieveVersionSetDTO
{
    TArray<FReleaseDTO>                           Releases;                                                     // 0x0000(0x0010)
};


// ScriptStruct  RGIHotfix.ReleaseDTO
// Struct Size::0x0028
struct FReleaseDTO
{
    FReleaseDetailsDTO                            Release;                                                      // 0x0000(0x0010)
    FDownloadDetailsDTO                           Download;                                                     // 0x0010(0x0018)
};


// ScriptStruct  RGIHotfix.DownloadDetailsDTO
// Struct Size::0x0018
struct FDownloadDetailsDTO
{
    FString                                       Url;                                                          // 0x0000(0x0010)
    bool                                          SCD;                                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  RGIHotfix.ReleaseDetailsDTO
// Struct Size::0x0010
struct FReleaseDetailsDTO
{
    FString                                       Id;                                                           // 0x0000(0x0010)
};


// ScriptStruct  WidgetCarousel.WidgetCarouselNavigationBarStyle
// Struct Size::0x0890
struct FWidgetCarouselNavigationBarStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   HighlightBrush;                                               // 0x0008(0x0090)
    FButtonStyle                                  LeftButtonStyle;                                              // 0x0098(0x02A8)
    FButtonStyle                                  CenterButtonStyle;                                            // 0x0340(0x02A8)
    FButtonStyle                                  RightButtonStyle;                                             // 0x05E8(0x02A8)
};


// ScriptStruct  WidgetCarousel.WidgetCarouselNavigationButtonStyle
// Struct Size::0x03D0
struct FWidgetCarouselNavigationButtonStyle : public FSlateWidgetStyle
{
    FButtonStyle                                  InnerButtonStyle;                                             // 0x0008(0x02A8)
    FSlateBrush                                   NavigationButtonLeftImage;                                    // 0x02B0(0x0090)
    FSlateBrush                                   NavigationButtonRightImage;                                   // 0x0340(0x0090)
};


// ScriptStruct  InteractiveToolsFramework.BrushStampData
// Struct Size::0x00B0
struct FBrushStampData
{
    char                                          pa_0000[0x00B0]                                               // 0x0000(0x00B0)
};


// ScriptStruct  InteractiveToolsFramework.BehaviorInfo
// Struct Size::0x0020
struct FBehaviorInfo
{
    FInputBehavior*                               Behavior;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0018]                                               // 0x0008(0x0018)
};


// ScriptStruct  InteractiveToolsFramework.InputRayHit
// Struct Size::0x0028
struct FInputRayHit
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  InteractiveToolsFramework.ActiveGizmo
// Struct Size::0x0030
struct FActiveGizmo
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  InteractiveToolsFramework.GizmoFloatParameterChange
// Struct Size::0x0008
struct FGizmoFloatParameterChange
{
    float                                         InitialValue;                                                 // 0x0000(0x0004)
    float                                         CurrentValue;                                                 // 0x0004(0x0004)
};


// ScriptStruct  InteractiveToolsFramework.GizmoVec2ParameterChange
// Struct Size::0x0010
struct FGizmoVec2ParameterChange
{
    FVector2D                                     InitialValue;                                                 // 0x0000(0x0008)
    FVector2D                                     CurrentValue;                                                 // 0x0008(0x0008)
};


// ScriptStruct  InputTooling.AimToolingGuardrailsSharedTuningSet
// Struct Size::0x0018
struct FAimToolingGuardrailsSharedTuningSet
{
    FCurveFloat*                                  GuardrailsMaximumDeflectionAngleDegreesStickDeflectionCurve;  // 0x0000(0x0008)
    FCurveFloat*                                  GuardrailsMinimumLengthPercentStickDeflectionCurve;           // 0x0008(0x0008)
    FCurveFloat*                                  GuardrailsMaximumLengthPercentStickDeflectionCurve;           // 0x0010(0x0008)
};


// ScriptStruct  InputTooling.AimToolingTemporalBendingWeaponTuningSet
// Struct Size::0x001C
struct FAimToolingTemporalBendingWeaponTuningSet
{
    bool                                          bTemporalBendingForWeapon;                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         PrecisionFiringErrorCutoff;                                   // 0x0004(0x0004)
    float                                         PrecisionMovementErrorCutoff;                                 // 0x0008(0x0004)
    float                                         PrecisionRecoilPitchCutoff;                                   // 0x000C(0x0004)
    float                                         PrecisionRecoilYawCutoff;                                     // 0x0010(0x0004)
    float                                         OffTargetTimeCutoff;                                          // 0x0014(0x0004)
    float                                         MaxBendingAngleDegs;                                          // 0x0018(0x0004)
};


// ScriptStruct  InputTooling.AimToolingSpatialBendingWeaponTuningSet
// Struct Size::0x0008
struct FAimToolingSpatialBendingWeaponTuningSet
{
    float                                         SpatialBendingExponent;                                       // 0x0000(0x0004)
    float                                         SpatialBendingMovePenaltyScale;                               // 0x0004(0x0004)
};


// ScriptStruct  InputTooling.AimToolingSpatialBendingFeatureTuningSet
// Struct Size::0x0018
struct FAimToolingSpatialBendingFeatureTuningSet
{
    float                                         SpatialBendingInnerRadiusCm;                                  // 0x0000(0x0004)
    float                                         SpatialBendingOuterRadiusCm;                                  // 0x0004(0x0004)
    float                                         SpatialBendingMaxAngleDegs;                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FCurveFloat*                                  SpatialBendingEfficacyScaleForErrorCurve;                     // 0x0010(0x0008)
};


// ScriptStruct  InputTooling.AimToolingBendingSharedTuningSet
// Struct Size::0x0001
struct FAimToolingBendingSharedTuningSet
{
    enum class EAimToolingBendingMode             BendingMode;                                                  // 0x0000(0x0001)
};


// ScriptStruct  InputTooling.AimToolingPullToCenterWeaponTuningSet
// Struct Size::0x0010
struct FAimToolingPullToCenterWeaponTuningSet
{
    FCurveFloat*                                  PullToCenterWorldDistFromTargetCurve;                         // 0x0000(0x0008)
    FCurveFloat*                                  PullToCenterStickDeflectionCurve;                             // 0x0008(0x0008)
};


// ScriptStruct  InputTooling.AimToolingPullToCenterFeatureTuningSet
// Struct Size::0x0068
struct FAimToolingPullToCenterFeatureTuningSet
{
    bool                                          AimToolingPullToCenterNewImplementation;                      // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FCurveFloat*                                  AimToolingPullToCenterAngleToTargetCurve;                     // 0x0008(0x0008)
    FCurveFloat*                                  AimToolingPullToCenterOverTargetPctCurve;                     // 0x0010(0x0008)
    float                                         AimToolingPullToCenterRadialTowardExponent;                   // 0x0018(0x0004)
    float                                         AimToolingPullToCenterRadialTowardScale;                      // 0x001C(0x0004)
    float                                         AimToolingPullToCenterRadialAwayExponent;                     // 0x0020(0x0004)
    float                                         AimToolingPullToCenterRadialAwayScale;                        // 0x0024(0x0004)
    float                                         AimToolingPullToCenterTangentialTowardExponent;               // 0x0028(0x0004)
    float                                         AimToolingPullToCenterTangentialTowardScale;                  // 0x002C(0x0004)
    float                                         AimToolingPullToCenterTangentialAwayExponent;                 // 0x0030(0x0004)
    float                                         AimToolingPullToCenterTangentialAwayScale;                    // 0x0034(0x0004)
    float                                         AimToolingPullToCenterMovePenaltyScale;                       // 0x0038(0x0004)
    float                                         AimToolingPullToCenterRecoilEfficacyScale;                    // 0x003C(0x0004)
    float                                         AimToolingPullToCenterAdjustmentClampThreshold;               // 0x0040(0x0004)
    float                                         AimToolingPullToCenterAdjustmentClampScale;                   // 0x0044(0x0004)
    FCurveFloat*                                  PullToCenterRadialTowardCurve;                                // 0x0048(0x0008)
    FCurveFloat*                                  PullToCenterRadialAwayCurve;                                  // 0x0050(0x0008)
    FCurveFloat*                                  PullToCenterTangentialTowardCurve;                            // 0x0058(0x0008)
    FCurveFloat*                                  PullToCenterTangentialAwayCurve;                              // 0x0060(0x0008)
};


// ScriptStruct  InputTooling.AimToolingPullToCenterSharedTuningSet
// Struct Size::0x0004
struct FAimToolingPullToCenterSharedTuningSet
{
    float                                         AimToolingPullToCenterInAirScale;                             // 0x0000(0x0004)
};


// ScriptStruct  InputTooling.AimToolingFrameOfReferenceWeaponTuningSet
// Struct Size::0x0030
struct FAimToolingFrameOfReferenceWeaponTuningSet
{
    FAimToolingFrameOfReferenceWeaponTuningCurves TowardTargetCurves;                                           // 0x0000(0x0018)
    FAimToolingFrameOfReferenceWeaponTuningCurves AwayFromTargetCurves;                                         // 0x0018(0x0018)
};


// ScriptStruct  InputTooling.AimToolingFrameOfReferenceWeaponTuningCurves
// Struct Size::0x0018
struct FAimToolingFrameOfReferenceWeaponTuningCurves
{
    FCurveFloat*                                  FrameOfReferenceWorldDistFromTargetCurve;                     // 0x0000(0x0008)
    FCurveFloat*                                  FrameOfReferenceStickDeflectionCurve;                         // 0x0008(0x0008)
    FCurveFloat*                                  FrameOfReferenceOverTargetPctCurve;                           // 0x0010(0x0008)
};


// ScriptStruct  InputTooling.AimToolingFrameOfReferenceFeatureTuningSet
// Struct Size::0x0028
struct FAimToolingFrameOfReferenceFeatureTuningSet
{
    float                                         AimToolingFrameOfReferenceMinOverTargetPct;                   // 0x0000(0x0004)
    float                                         AimToolingFrameOfReferenceMovementDeltaScale;                 // 0x0004(0x0004)
    FVector2D                                     AimToolingFrameOfReferenceScale;                              // 0x0008(0x0008)
    FVector2D                                     AimToolingFrameOfReferenceMaxDelta;                           // 0x0010(0x0008)
    float                                         AimToolingFrameOfReferenceHighVelocityStrengthMinBias;        // 0x0018(0x0004)
    float                                         AimToolingFrameOfReferenceHighVelocityStrengthMaxBias;        // 0x001C(0x0004)
    FCurveFloat*                                  AimToolingFrameOfReferenceHighVelocityStrengthCurve;          // 0x0020(0x0008)
};


// ScriptStruct  InputTooling.AimToolingFrameOfReferenceSharedTuningSet
// Struct Size::0x000C
struct FAimToolingFrameOfReferenceSharedTuningSet
{
    float                                         AimToolingFrameOfReferenceGlobalScale;                        // 0x0000(0x0004)
    float                                         AimToolingFrameOfReferenceVisionBlockedScale;                 // 0x0004(0x0004)
    float                                         AimToolingFrameOfReferenceInAirScale;                         // 0x0008(0x0004)
};


// ScriptStruct  InputTooling.AimToolingStrafeAssistWeaponTuningSet
// Struct Size::0x0038
struct FAimToolingStrafeAssistWeaponTuningSet
{
    FAimToolingStrafeAssistWeaponTuningCurves     TowardTargetCurves;                                           // 0x0000(0x0018)
    FAimToolingStrafeAssistWeaponTuningCurves     AwayFromTargetCurves;                                         // 0x0018(0x0018)
    float                                         AimToolingStrafeAssistNewTargetDelaySeconds;                  // 0x0030(0x0004)
    float                                         AimToolingStrafeAssistNewTargetRampUpSeconds;                 // 0x0034(0x0004)
};


// ScriptStruct  InputTooling.AimToolingStrafeAssistWeaponTuningCurves
// Struct Size::0x0018
struct FAimToolingStrafeAssistWeaponTuningCurves
{
    FCurveFloat*                                  StrafeAssistOverTargetPctCurve;                               // 0x0000(0x0008)
    FCurveFloat*                                  StrafeAssistWorldDistFromTargetCurve;                         // 0x0008(0x0008)
    FCurveFloat*                                  StrafeAssistPlayerSpeedCurve;                                 // 0x0010(0x0008)
};


// ScriptStruct  InputTooling.AimToolingStrafeAssistFeatureTuningSet
// Struct Size::0x0010
struct FAimToolingStrafeAssistFeatureTuningSet
{
    float                                         AimToolingStrafeAssistMovementDeltaScale;                     // 0x0000(0x0004)
    float                                         AimToolingStrafeAssistMinimumMaxSpeedThreshold;               // 0x0004(0x0004)
    float                                         AimToolingStrafeAssistMinimumMaxSpeedOverride;                // 0x0008(0x0004)
    enum class EAimToolingStrafeAssistMode        AimToolingStrafeAssistMode;                                   // 0x000C(0x0001)
    enum class EAimToolingStrafeAssistCounterStrafeModeAimToolingStrafeAssistCounterStrafeMode;                 // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  InputTooling.AimToolingStrafeAssistSharedTuningSet
// Struct Size::0x000C
struct FAimToolingStrafeAssistSharedTuningSet
{
    float                                         AimToolingStrafeAssistGlobalScale;                            // 0x0000(0x0004)
    float                                         AimToolingStrafeAssistVisionBlockedScale;                     // 0x0004(0x0004)
    float                                         AimToolingStrafeAssistInAirScale;                             // 0x0008(0x0004)
};


// ScriptStruct  InputTooling.AimToolingTargetFrictionWeaponTuningSet
// Struct Size::0x0030
struct FAimToolingTargetFrictionWeaponTuningSet
{
    FAimToolingTargetFrictionWeaponTuningCurves   TowardTargetCurves;                                           // 0x0000(0x0018)
    FAimToolingTargetFrictionWeaponTuningCurves   AwayFromTargetCurves;                                         // 0x0018(0x0018)
};


// ScriptStruct  InputTooling.AimToolingTargetFrictionWeaponTuningCurves
// Struct Size::0x0018
struct FAimToolingTargetFrictionWeaponTuningCurves
{
    FCurveFloat*                                  TargetFrictionOverTargetPctCurve;                             // 0x0000(0x0008)
    FCurveFloat*                                  TargetFrictionWorldDistFromTargetCurve;                       // 0x0008(0x0008)
    FCurveFloat*                                  TargetFrictionStickDeflectionCurve;                           // 0x0010(0x0008)
};


// ScriptStruct  InputTooling.AimToolingTargetFrictionFeatureTuningSet
// Struct Size::0x0008
struct FAimToolingTargetFrictionFeatureTuningSet
{
    bool                                          bAimToolingTargetFrictionOverrideGlobalScale;                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         AimToolingTargetFrictionGlobalScaleOverride;                  // 0x0004(0x0004)
};


// ScriptStruct  InputTooling.AimToolingTargetFrictionSharedTuningSet
// Struct Size::0x0010
struct FAimToolingTargetFrictionSharedTuningSet
{
    float                                         AimToolingTargetFrictionGlobalScale;                          // 0x0000(0x0004)
    float                                         AimToolingTargetFrictionVisionBlockedScale;                   // 0x0004(0x0004)
    float                                         AimToolingTargetFrictionInAirScale;                           // 0x0008(0x0004)
    enum class EAimToolingTargetFrictionAimingScalarModeTargetFrictionPrecisionAimingScalarMode;                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  InputTooling.AimToolingDecelerationWeaponTuningSet
// Struct Size::0x0008
struct FAimToolingDecelerationWeaponTuningSet
{
    FCurveFloat*                                  DecelerationWorldDistFromTargetCurve;                         // 0x0000(0x0008)
};


// ScriptStruct  InputTooling.AimToolingDecelerationSharedTuningSet
// Struct Size::0x0018
struct FAimToolingDecelerationSharedTuningSet
{
    float                                         DecelerationTime;                                             // 0x0000(0x0004)
    float                                         DecelerationMaxAngleDeg;                                      // 0x0004(0x0004)
    float                                         DecelerationAverageWindow;                                    // 0x0008(0x0004)
    float                                         DecelerationHalfAngle;                                        // 0x000C(0x0004)
    float                                         DecelerationStartThreshold;                                   // 0x0010(0x0004)
    float                                         DecelerationVisionBlockedScale;                               // 0x0014(0x0004)
};


// ScriptStruct  InputTooling.AimToolingAimAccelerationDelaySharedTuningSet
// Struct Size::0x0008
struct FAimToolingAimAccelerationDelaySharedTuningSet
{
    float                                         AimAccelerationDelayScaleDecayRate;                           // 0x0000(0x0004)
    float                                         AimAccelerationDelayMinOverTargetPct;                         // 0x0004(0x0004)
};


// ScriptStruct  InputTooling.AimToolingMoveErrorSharedTuningSet
// Struct Size::0x0008
struct FAimToolingMoveErrorSharedTuningSet
{
    float                                         MoveErrorMax;                                                 // 0x0000(0x0004)
    float                                         MoveErrorExponent;                                            // 0x0004(0x0004)
};


// ScriptStruct  InputTooling.AimToolingTargetManagementWeaponTuningSet
// Struct Size::0x0008
struct FAimToolingTargetManagementWeaponTuningSet
{
    float                                         TargetManagementMaxQueryDist;                                 // 0x0000(0x0004)
    float                                         TargetManagementMinQueryDist;                                 // 0x0004(0x0004)
};


// ScriptStruct  InputTooling.AimToolingTargetManagementSharedTuningSet
// Struct Size::0x00A0
struct FAimToolingTargetManagementSharedTuningSet
{
    FCurveFloat*                                  TargetManagementAssistRadiusXCurve;                           // 0x0000(0x0008)
    FCurveFloat*                                  TargetManagementAssistRadiusYCurve;                           // 0x0008(0x0008)
    FCurveFloat*                                  TargetManagementAssistRadiusXRecoilScaleCurve;                // 0x0010(0x0008)
    FCurveFloat*                                  TargetManagementAssistRadiusYRecoilScaleCurve;                // 0x0018(0x0008)
    float                                         TargetManagementMinBiasDistance;                              // 0x0020(0x0004)
    float                                         TargetManagementMaxBiasDistance;                              // 0x0024(0x0004)
    float                                         TargetManagementOverTargetWeight;                             // 0x0028(0x0004)
    bool                                          bIsTargetManagementOverTargetNormalized;                      // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    float                                         TargetManagementDistanceWeight;                               // 0x0030(0x0004)
    bool                                          bIsTargetManagementDistanceNormalized;                        // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    float                                         TargetManagementPreviousTargetWeight;                         // 0x0038(0x0004)
    float                                         TargetManagementPreviousTargetDecay;                          // 0x003C(0x0004)
    TMap<enum class EAimToolingTargetType,float>  TargetManagementShootableTargetScoreModifiers;                // 0x0040(0x0050)
    float                                         AimToolingCloseRangeTuningDistance;                           // 0x0090(0x0004)
    bool                                          ENGINEERING;                                                  // 0x0094(0x0001)
    char                                          pa_0095[0x0003]                                               // 0x0095(0x0003)
    FCurveFloat*                                  TargetManagementQueryAngleCurve;                              // 0x0098(0x0008)
};


// ScriptStruct  InputTooling.AimToolingNewTargetRampUpSharedTuningSet
// Struct Size::0x000C
struct FAimToolingNewTargetRampUpSharedTuningSet
{
    bool                                          IsNewTargetRampUpEnabled;                                     // 0x0000(0x0001)
    bool                                          NewTargetRampUpDeceleration;                                  // 0x0001(0x0001)
    bool                                          NewTargetRampUpFrameOfReference;                              // 0x0002(0x0001)
    bool                                          NewTargetRampUpStrafeAssist;                                  // 0x0003(0x0001)
    bool                                          NewTargetRampUpTargetFriction;                                // 0x0004(0x0001)
    bool                                          NewTargetRampUpPullToCenter;                                  // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    float                                         NewTargetRampUpTime;                                          // 0x0008(0x0004)
};


// ScriptStruct  InputTooling.AimToolingNoTargetFalloffSharedTuningSet
// Struct Size::0x000C
struct FAimToolingNoTargetFalloffSharedTuningSet
{
    bool                                          IsNoTargetFalloffEnabled;                                     // 0x0000(0x0001)
    bool                                          NoTargetFalloffDeceleration;                                  // 0x0001(0x0001)
    bool                                          NoTargetFalloffFrameOfReference;                              // 0x0002(0x0001)
    bool                                          NoTargetFalloffStrafeAssist;                                  // 0x0003(0x0001)
    bool                                          NoTargetFalloffTargetFriction;                                // 0x0004(0x0001)
    bool                                          NoTargetFalloffPullToCenter;                                  // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    float                                         NoTargetFalloffTime;                                          // 0x0008(0x0004)
};


// ScriptStruct  InputTooling.AimToolingDecelerationState
// Struct Size::0x0038
struct FAimToolingDecelerationState
{
    TArray<FAimToolingDecelerationEntry>          InputEntries;                                                 // 0x0000(0x0010)
    FVector2D                                     AverageInputRate;                                             // 0x0010(0x0008)
    float                                         TimeTotal;                                                    // 0x0018(0x0004)
    bool                                          bIsDecelerating;                                              // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         DecelerationAmount;                                           // 0x0020(0x0004)
    FVector2D                                     DecelerationStartDirection;                                   // 0x0024(0x0008)
    FVector2D                                     DecelerationLastKnownDirection;                               // 0x002C(0x0008)
    float                                         DecelerationStartSize;                                        // 0x0034(0x0004)
};


// ScriptStruct  InputTooling.AimToolingDecelerationEntry
// Struct Size::0x000C
struct FAimToolingDecelerationEntry
{
    FVector2D                                     Input;                                                        // 0x0000(0x0008)
    float                                         Duration;                                                     // 0x0008(0x0004)
};


// ScriptStruct  InputTooling.AimToolingAxis
// Struct Size::0x0024
struct FAimToolingAxis
{
    FName                                         TopBone;                                                      // 0x0000(0x000C)
    FName                                         MiddleBone;                                                   // 0x000C(0x000C)
    FName                                         BottomBone;                                                   // 0x0018(0x000C)
};


// ScriptStruct  InputTooling.AimToolingTargetPointDef
// Struct Size::0x0014
struct FAimToolingTargetPointDef
{
    FName                                         TargetPointName;                                              // 0x0000(0x000C)
    float                                         Weight;                                                       // 0x000C(0x0004)
    float                                         RadiusScale;                                                  // 0x0010(0x0004)
};


// ScriptStruct  InputTooling.AimToolingBoneDef
// Struct Size::0x0014
struct FAimToolingBoneDef
{
    FName                                         Bone;                                                         // 0x0000(0x000C)
    float                                         Weight;                                                       // 0x000C(0x0004)
    float                                         RadiusScale;                                                  // 0x0010(0x0004)
};


// ScriptStruct  InputTooling.AimToolingQueriedTarget
// Struct Size::0x0010
struct FAimToolingQueriedTarget
{
    FAimToolingTargetComponentBase*               TargetComponent;                                              // 0x0000(0x0008)
    bool                                          bInDirectVision;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  InputTooling.AimToolingTarget
// Struct Size::0x0028
struct FAimToolingTarget
{
    FAimToolingTargetComponentBase*               TargetComponent;                                              // 0x0000(0x0008)
    float                                         Weight;                                                       // 0x0008(0x0004)
    float                                         OverTargetPercent;                                            // 0x000C(0x0004)
    float                                         Dist;                                                         // 0x0010(0x0004)
    float                                         DistPercent;                                                  // 0x0014(0x0004)
    FVector                                       AssistLocation;                                               // 0x0018(0x000C)
    bool                                          bInDirectVision;                                              // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  InputTooling.AimToolingPullToCenterResult
// Struct Size::0x0024
struct FAimToolingPullToCenterResult
{
    char                                          pa_0000[0x0024]                                               // 0x0000(0x0024)
};


// ScriptStruct  InputTooling.AimToolingCachedProjectionData
// Struct Size::0x0120
struct FAimToolingCachedProjectionData
{
    FPlayerController*                            OwningPC;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0118]                                               // 0x0008(0x0118)
};


// ScriptStruct  InputTooling.AimToolingModifiers
// Struct Size::0x0028
struct FAimToolingModifiers
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  InputTooling.MovementToolingFastReleaseSharedTuningSet
// Struct Size::0x0008
struct FMovementToolingFastReleaseSharedTuningSet
{
    float                                         FastReleasePower;                                             // 0x0000(0x0004)
    float                                         FastReleaseMinSpeed;                                          // 0x0004(0x0004)
};


// ScriptStruct  InputTooling.MovementToolingFastStrafingSharedTuningSet
// Struct Size::0x0028
struct FMovementToolingFastStrafingSharedTuningSet
{
    float                                         FastStrafingStickDeltaInitialThreshold;                       // 0x0000(0x0004)
    float                                         FastStrafingStickDeltaReleaseThreshold;                       // 0x0004(0x0004)
    float                                         FastStrafingYInitialThreshold;                                // 0x0008(0x0004)
    float                                         FastStrafingYReleaseThreshold;                                // 0x000C(0x0004)
    float                                         FastStrafingHorizontalToTotalSpeedInitialThreshold;           // 0x0010(0x0004)
    float                                         FastStrafingCounterStrafeThreshold;                           // 0x0014(0x0004)
    float                                         FastStrafingCounterStrafeMaxSpeed;                            // 0x0018(0x0004)
    float                                         FastStrafingCounterStrafeHoldSpeed;                           // 0x001C(0x0004)
    float                                         InitialFastStrafingStickDeltaThreshold;                       // 0x0020(0x0004)
    float                                         InitialFastStrafingPlayerSpeedCutoff;                         // 0x0024(0x0004)
};


// ScriptStruct  InputTooling.MovementToolingShotRootingSharedTuningSet
// Struct Size::0x0010
struct FMovementToolingShotRootingSharedTuningSet
{
    float                                         ShotRootingDeadzone;                                          // 0x0000(0x0004)
    float                                         ShotRootingDuration;                                          // 0x0004(0x0004)
    float                                         ShotRootingFalloffSeconds;                                    // 0x0008(0x0004)
    float                                         ShotRootingFalloffExponent;                                   // 0x000C(0x0004)
};


// ScriptStruct  AISpatialAwareness.AISpatialAwarenessAmortizationQueue
// Struct Size::0x0010
struct FAISpatialAwarenessAmortizationQueue
{
    TArray<UObject*>                              AmortizationQueue;                                            // 0x0000(0x0010)
};


// ScriptStruct  AISpatialAwareness.WaypointQueryInfo
// Struct Size::0x0028
struct FWaypointQueryInfo
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  AISpatialAwareness.InfluenceMapDebugData
// Struct Size::0x0098
struct FInfluenceMapDebugData
{
    TArray<int32_t>                               FocusedNodeIndices;                                           // 0x0000(0x0010)
    FInfluenceLayerDebugInfo                      LayerDebugInfo;                                               // 0x0010(0x0048)
    TArray<int32_t>                               NodeIndicesToDebugDraw;                                       // 0x0058(0x0010)
    TArray<FInfluenceNodeSimpleDebugInfo>         InfluenceNodeSimpleDebugInfo;                                 // 0x0068(0x0010)
    TArray<FInfluenceNodeComplexDebugInfo>        InfluenceNodeComplexDebugInfo;                                // 0x0078(0x0010)
    TArray<FInfluenceNodeNeighborDebugInfo>       InfluenceNodeNeighborDebugInfo;                               // 0x0088(0x0010)
};


// ScriptStruct  AISpatialAwareness.InfluenceNodeNeighborDebugInfo
// Struct Size::0x0020
struct FInfluenceNodeNeighborDebugInfo
{
    int32_t                                       NodeIndex;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               NodeNeighborIndices;                                          // 0x0008(0x0010)
    int32_t                                       NumHopsToOriginNode;                                          // 0x0018(0x0004)
    float                                         DistanceToOriginNode;                                         // 0x001C(0x0004)
};


// ScriptStruct  AISpatialAwareness.InfluenceNodeComplexDebugInfo
// Struct Size::0x0040
struct FInfluenceNodeComplexDebugInfo
{
    int32_t                                       NodeIndex;                                                    // 0x0000(0x0004)
    int32_t                                       SeedNumber;                                                   // 0x0004(0x0004)
    float                                         PropagatedToTimestamp;                                        // 0x0008(0x0004)
    float                                         ClearedTimestamp;                                             // 0x000C(0x0004)
    bool                                          bPropagationFrontierNode;                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FString                                       WaypointName;                                                 // 0x0018(0x0010)
    float                                         WaypointValue;                                                // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<FPropagationProgressDebugInfo>         PropagationProgress;                                          // 0x0030(0x0010)
};


// ScriptStruct  AISpatialAwareness.PropagationProgressDebugInfo
// Struct Size::0x0008
struct FPropagationProgressDebugInfo
{
    int32_t                                       NodeNeighborIndex;                                            // 0x0000(0x0004)
    float                                         DistanceTravelled;                                            // 0x0004(0x0004)
};


// ScriptStruct  AISpatialAwareness.InfluenceNodeSimpleDebugInfo
// Struct Size::0x000C
struct FInfluenceNodeSimpleDebugInfo
{
    int32_t                                       NodeIndex;                                                    // 0x0000(0x0004)
    float                                         Value;                                                        // 0x0004(0x0004)
    bool                                          bRecentlyCleared;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  AISpatialAwareness.InfluenceLayerDebugInfo
// Struct Size::0x0048
struct FInfluenceLayerDebugInfo
{
    int32_t                                       BlockID;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       BlockIDDebugString;                                           // 0x0008(0x0010)
    int32_t                                       LayerID;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       LayerIDDebugString;                                           // 0x0020(0x0010)
    FString                                       ActiveSourcesDebugString;                                     // 0x0030(0x0010)
    bool                                          bLayerPropagates;                                             // 0x0040(0x0001)
    bool                                          bPropagationPaused;                                           // 0x0041(0x0001)
    char                                          pa_0042[0x0006]                                               // 0x0042(0x0006)
};


// ScriptStruct  AISpatialAwareness.SavedInfoMap
// Struct Size::0x0050
struct FSavedInfoMap
{
    TMap<int32_t,FPropagationSavedInfo>           LayerToPropagationSavedInfo;                                  // 0x0000(0x0050)
};


// ScriptStruct  AISpatialAwareness.PropagationSavedInfo
// Struct Size::0x0008
struct FPropagationSavedInfo
{
    float                                         PropagatedToTimestamp;                                        // 0x0000(0x0004)
    float                                         ClearedTimestamp;                                             // 0x0004(0x0004)
};


// ScriptStruct  AISpatialAwareness.ClientRequestedInfluenceMapDebugData
// Struct Size::0x0008
struct FClientRequestedInfluenceMapDebugData
{
    bool                                          bNodeDebuggingEnabled;                                        // 0x0000(0x0001)
    bool                                          bDrawNodeConnectivityEnabled;                                 // 0x0001(0x0001)
    bool                                          bFocusedNodeIndexLocked;                                      // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    int32_t                                       NumHopsToShow;                                                // 0x0004(0x0004)
};


// ScriptStruct  AISpatialAwareness.InfluenceMapLayer
// Struct Size::0x0038
struct FInfluenceMapLayer
{
    TArray<FInfluenceSourceComponentBase*>        ActiveSources;                                                // 0x0000(0x0010)
    TArray<enum class EInfluenceSourceTag>        SourceTags;                                                   // 0x0010(0x0010)
    enum class EInfluenceLayerTag                 Tag;                                                          // 0x0020(0x0001)
    char                                          pa_0021[0x000B]                                               // 0x0021(0x000B)
    enum class EPropagationModifierTag            PropagationTag;                                               // 0x002C(0x0001)
    bool                                          bPropagates;                                                  // 0x002D(0x0001)
    char                                          pa_002E[0x0002]                                               // 0x002E(0x0002)
    int32_t                                       SeedNumber;                                                   // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  AISpatialAwareness.InfluenceLayerID
// Struct Size::0x0004
struct FInfluenceLayerID
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
};


// ScriptStruct  AISpatialAwareness.InfluenceLayerBlockID
// Struct Size::0x0004
struct FInfluenceLayerBlockID
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
};


// ScriptStruct  AISpatialAwareness.InfluenceMapNode
// Struct Size::0x0030
struct FInfluenceMapNode
{
    FVector                                       NodeLocation;                                                 // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FLayerValue>                           LayerValueMap;                                                // 0x0010(0x0010)
    TArray<FNodeConnectionInfo>                   NodeConnectionInfo;                                           // 0x0020(0x0010)
};


// ScriptStruct  AISpatialAwareness.NodeConnectionInfo
// Struct Size::0x0008
struct FNodeConnectionInfo
{
    int32_t                                       NodeIndex;                                                    // 0x0000(0x0004)
    float                                         Distance;                                                     // 0x0004(0x0004)
};


// ScriptStruct  AISpatialAwareness.LayerValue
// Struct Size::0x0018
struct FLayerValue
{
    int32_t                                       SeedNumber;                                                   // 0x0000(0x0004)
    float                                         Value;                                                        // 0x0004(0x0004)
    float                                         ModulationStartTimestamp;                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FCurveFloat*                                  ModulationCurve;                                              // 0x0010(0x0008)
};


// ScriptStruct  AISpatialAwareness.NodeOperationsList
// Struct Size::0x0010
struct FNodeOperationsList
{
    TArray<FNodeOperation>                        Operations;                                                   // 0x0000(0x0010)
};


// ScriptStruct  AISpatialAwareness.NodeOperation
// Struct Size::0x0028
struct FNodeOperation
{
    enum class ENodeOperation                     Operation;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Value;                                                        // 0x0004(0x0004)
    int32_t                                       SeedNumber;                                                   // 0x0008(0x0004)
    float                                         ModulationTimestamp;                                          // 0x000C(0x0004)
    FCurveFloat*                                  ModulationCurve;                                              // 0x0010(0x0008)
    TArray<int32_t>                               AffectedLayerIndices;                                         // 0x0018(0x0010)
};


// ScriptStruct  AISpatialAwareness.InfluenceMapQuery
// Struct Size::0x000C
struct FInfluenceMapQuery
{
    FVector                                       SourcePosition;                                               // 0x0000(0x000C)
};


// ScriptStruct  AISpatialAwareness.MovementLayerPropagationInfo
// Struct Size::0x0078
struct FMovementLayerPropagationInfo
{
    int32_t                                       SeedNumber;                                                   // 0x0000(0x0004)
    bool                                          bPaused;                                                      // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FPropagationParameters                        PropagationParameters;                                        // 0x0008(0x0010)
    TArray<FFrontierNodePropagationInfo>          FrontierNodePropagationInfo;                                  // 0x0018(0x0010)
    TMap<int32_t,float>                           ClearedNodeTimestamps;                                        // 0x0028(0x0050)
};


// ScriptStruct  AISpatialAwareness.FrontierNodePropagationInfo
// Struct Size::0x0008
struct FFrontierNodePropagationInfo
{
    int32_t                                       NodeIndex;                                                    // 0x0000(0x0004)
    float                                         PropagatedToTimestamp;                                        // 0x0004(0x0004)
};


// ScriptStruct  AISpatialAwareness.MapMarkupWaypointDebugData
// Struct Size::0x0030
struct FMapMarkupWaypointDebugData
{
    TArray<FMapMarkupWaypoint*>                   FocusedWaypoints;                                             // 0x0000(0x0010)
    TArray<FMapMarkupRoom*>                       FocusedRooms;                                                 // 0x0010(0x0010)
    TArray<FMapMarkupWaypoint*>                   WaypointsToDebugDraw;                                         // 0x0020(0x0010)
};


// ScriptStruct  AISpatialAwareness.ClientRequestedWaypointDebugData
// Struct Size::0x0005
struct FClientRequestedWaypointDebugData
{
    bool                                          bWaypointDebuggingEnabled;                                    // 0x0000(0x0001)
    bool                                          bDrawVisibilityConnectionsEnabled;                            // 0x0001(0x0001)
    bool                                          bRelevantWaypointsByRoom;                                     // 0x0002(0x0001)
    bool                                          bLockOriginWaypoint;                                          // 0x0003(0x0001)
    bool                                          bLockOriginRoom;                                              // 0x0004(0x0001)
};


// ScriptStruct  AISpatialAwareness.WaypointsForNavMeshPoly
// Struct Size::0x0010
struct FWaypointsForNavMeshPoly
{
    TArray<FMapMarkupWaypoint*>                   Waypoints;                                                    // 0x0000(0x0010)
};


// ScriptStruct  AISpatialAwareness.NodeInfo
// Struct Size::0x0028
struct FNodeInfo
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FMapMarkupWaypoint*                           Waypoint;                                                     // 0x0010(0x0008)
    TArray<FNeighboringNodeInfo>                  NeighboringNodesInfo;                                         // 0x0018(0x0010)
};


// ScriptStruct  AISpatialAwareness.NeighboringNodeInfo
// Struct Size::0x0010
struct FNeighboringNodeInfo
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    float                                         Distance;                                                     // 0x000C(0x0004)
};


// ScriptStruct  AISpatialAwareness.RoomPathfinderData
// Struct Size::0x0028
struct FRoomPathfinderData
{
    FMapMarkupRoom*                               DestinationRoom;                                              // 0x0000(0x0008)
    TArray<FMapMarkupRoom*>                       PreferredPathRooms;                                           // 0x0008(0x0010)
    TArray<FMapMarkupRoom*>                       AvoidPathRooms;                                               // 0x0018(0x0010)
};


// ScriptStruct  RigVM.RigVMParameter
// Struct Size::0x0040
struct FRigVMParameter
{
    enum class ERigVMParameterType                Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         Name;                                                         // 0x0004(0x000C)
    int32_t                                       RegisterIndex;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       CPPType;                                                      // 0x0018(0x0010)
    FScriptStruct*                                ScriptStruct;                                                 // 0x0028(0x0008)
    FName                                         ScriptStructPath;                                             // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  RigVM.RigVMByteCode
// Struct Size::0x0030
struct FRigVMByteCode
{
    TArray<char>                                  ByteCode;                                                     // 0x0000(0x0010)
    int32_t                                       NumInstructions;                                              // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FRigVMByteCodeEntry>                   Entries;                                                      // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  RigVM.RigVMByteCodeEntry
// Struct Size::0x0010
struct FRigVMByteCodeEntry
{
    FName                                         Name;                                                         // 0x0000(0x000C)
    int32_t                                       InstructionIndex;                                             // 0x000C(0x0004)
};


// ScriptStruct  RigVM.RigVMInstructionArray
// Struct Size::0x0010
struct FRigVMInstructionArray
{
    TArray<FRigVMInstruction>                     Instructions;                                                 // 0x0000(0x0010)
};


// ScriptStruct  RigVM.RigVMInstruction
// Struct Size::0x0010
struct FRigVMInstruction
{
    uint64_t                                      ByteCodeIndex;                                                // 0x0000(0x0008)
    enum class ERigVMOpCode                       OpCode;                                                       // 0x0008(0x0001)
    char                                          OperandAlignment;                                             // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  RigVM.RigVMBaseOp
// Struct Size::0x0001
struct FRigVMBaseOp
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  RigVM.RigVMUnaryOp
// Struct Size::0x0008
struct FRigVMUnaryOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
};


// ScriptStruct  RigVM.RigVMChangeTypeOp
// Struct Size::0x0010
struct FRigVMChangeTypeOp : public FRigVMUnaryOp
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  RigVM.RigVMJumpIfOp
// Struct Size::0x0010
struct FRigVMJumpIfOp : public FRigVMUnaryOp
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  RigVM.RigVMJumpOp
// Struct Size::0x0008
struct FRigVMJumpOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
};


// ScriptStruct  RigVM.RigVMComparisonOp
// Struct Size::0x0014
struct FRigVMComparisonOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x0013]                                               // 0x0001(0x0013)
};


// ScriptStruct  RigVM.RigVMCopyOp
// Struct Size::0x000E
struct FRigVMCopyOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x000D]                                               // 0x0001(0x000D)
};


// ScriptStruct  RigVM.RigVMBinaryOp
// Struct Size::0x000E
struct FRigVMBinaryOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x000D]                                               // 0x0001(0x000D)
};


// ScriptStruct  RigVM.RigVMExecuteOp
// Struct Size::0x0004
struct FRigVMExecuteOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  RigVM.RigVMSlice
// Struct Size::0x000C
struct FRigVMSlice
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  RigVM.RigVMMemoryContainer
// Struct Size::0x00A0
struct FRigVMMemoryContainer
{
    bool                                          bUseNameMap;                                                  // 0x0000(0x0001)
    enum class ERigVMMemoryType                   MemoryType;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<FRigVMRegister>                        Registers;                                                    // 0x0008(0x0010)
    TArray<FRigVMRegisterOffset>                  RegisterOffsets;                                              // 0x0018(0x0010)
    TArray<char>                                  Data;                                                         // 0x0028(0x0010)
    TArray<FScriptStruct*>                        ScriptStructs;                                                // 0x0038(0x0010)
    TMap<FName,int32_t>                           NameMap;                                                      // 0x0048(0x0050)
    bool                                          bEncounteredErrorDuringLoad;                                  // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
};


// ScriptStruct  RigVM.RigVMRegisterOffset
// Struct Size::0x0048
struct FRigVMRegisterOffset
{
    TArray<int32_t>                               Segments;                                                     // 0x0000(0x0010)
    enum class ERigVMRegisterType                 Type;                                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FName                                         CPPType;                                                      // 0x0014(0x000C)
    FScriptStruct*                                ScriptStruct;                                                 // 0x0020(0x0008)
    FScriptStruct*                                ParentScriptStruct;                                           // 0x0028(0x0008)
    int32_t                                       ArrayIndex;                                                   // 0x0030(0x0004)
    uint16_t                                      ElementSize;                                                  // 0x0034(0x0002)
    char                                          pa_0036[0x0002]                                               // 0x0036(0x0002)
    FString                                       CachedSegmentPath;                                            // 0x0038(0x0010)
};


// ScriptStruct  RigVM.RigVMRegister
// Struct Size::0x0028
struct FRigVMRegister
{
    enum class ERigVMRegisterType                 Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    uint32_t                                      ByteIndex;                                                    // 0x0004(0x0004)
    uint16_t                                      ElementSize;                                                  // 0x0008(0x0002)
    uint16_t                                      ElementCount;                                                 // 0x000A(0x0002)
    uint16_t                                      SliceCount;                                                   // 0x000C(0x0002)
    char                                          AlignmentBytes;                                               // 0x000E(0x0001)
    char                                          pa_000F[0x0001]                                               // 0x000F(0x0001)
    uint16_t                                      TrailingBytes;                                                // 0x0010(0x0002)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    FName                                         Name;                                                         // 0x0014(0x000C)
    int32_t                                       ScriptStructIndex;                                            // 0x0020(0x0004)
    bool                                          bIsArray;                                                     // 0x0024(0x0001)
    bool                                          bIsDynamic;                                                   // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
};


// ScriptStruct  RigVM.RigVMOperand
// Struct Size::0x0006
struct FRigVMOperand
{
    enum class ERigVMMemoryType                   MemoryType;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0001]                                               // 0x0001(0x0001)
    uint16_t                                      RegisterIndex;                                                // 0x0002(0x0002)
    uint16_t                                      RegisterOffset;                                               // 0x0004(0x0002)
};


// ScriptStruct  RigVM.RigVMStatistics
// Struct Size::0x002C
struct FRigVMStatistics
{
    uint32_t                                      BytesForCDO;                                                  // 0x0000(0x0004)
    uint32_t                                      BytesPerInstance;                                             // 0x0004(0x0004)
    FRigVMMemoryStatistics                        LiteralMemory;                                                // 0x0008(0x000C)
    FRigVMMemoryStatistics                        WorkMemory;                                                   // 0x0014(0x000C)
    uint32_t                                      BytesForCaching;                                              // 0x0020(0x0004)
    FRigVMByteCodeStatistics                      ByteCode;                                                     // 0x0024(0x0008)
};


// ScriptStruct  RigVM.RigVMByteCodeStatistics
// Struct Size::0x0008
struct FRigVMByteCodeStatistics
{
    uint32_t                                      InstructionCount;                                             // 0x0000(0x0004)
    uint32_t                                      DataBytes;                                                    // 0x0004(0x0004)
};


// ScriptStruct  RigVM.RigVMMemoryStatistics
// Struct Size::0x000C
struct FRigVMMemoryStatistics
{
    uint32_t                                      RegisterCount;                                                // 0x0000(0x0004)
    uint32_t                                      DataBytes;                                                    // 0x0004(0x0004)
    uint32_t                                      TotalBytes;                                                   // 0x0008(0x0004)
};


// UserDefinedStruct  Engine.Default
// Struct Size::0x0000
struct FDefault
{
};


// AISenseBlueprintListener  AIModule.Default
// Struct Size::0x0000
struct FDefault
{
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0015
struct FStruct
{
    FAkComponent*                                 AkComponent;                                                  // 0x0000(0x0008)
    AActor*                                       OwningActor;                                                  // 0x0008(0x0008)
    float                                         Radius;                                                       // 0x0010(0x0004)
    enum class Enum                               Type;                                                         // 0x0014(0x0001)
};


// UserDefinedStruct  AkSwitch.AkSwitch
// Struct Size::0x0020
struct FAkSwitch
{
    FString                                       Group;                                                        // 0x0000(0x0010)
    FString                                       State;                                                        // 0x0010(0x0010)
};


// UserDefinedStruct  AudioEventList.AudioEventList
// Struct Size::0x0010
struct FAudioEventList
{
    TArray<FAkAudioEvent*>                        EventList;                                                    // 0x0000(0x0010)
};


// UserDefinedStruct  SharedButtonStyle.SharedButtonStyle
// Struct Size::0x0048
struct FSharedButtonStyle
{
    FLinearColor                                  BackgroundColor;                                              // 0x0000(0x0010)
    FLinearColor                                  LabelColor;                                                   // 0x0010(0x0010)
    FLinearColor                                  DisabledBackgroundColor;                                      // 0x0020(0x0010)
    FAkAudioEvent*                                AUD;                                                          // 0x0030(0x0008)
    FAkAudioEvent*                                AUD;                                                          // 0x0038(0x0008)
    FAkAudioEvent*                                AUD;                                                          // 0x0040(0x0008)
};


// UserDefinedStruct  AudioSetting.AudioSetting
// Struct Size::0x001C
struct FAudioSetting
{
    FText                                         SettingName;                                                  // 0x0000(0x0018)
    int32_t                                       SettingValue;                                                 // 0x0018(0x0004)
};


// UserDefinedStruct  VOLanguageContainer.VOLanguageContainer
// Struct Size::0x0030
struct FVOLanguageContainer
{
    enum class VOLanguage                         VOLanguage;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FText                                         DisplayName;                                                  // 0x0008(0x0018)
    FString                                       Directory;                                                    // 0x0020(0x0010)
};


// UserDefinedStruct  SettingsNotificationBannerAppearance.SettingsNotificationBannerAppearance
// Struct Size::0x0040
struct FSettingsNotificationBannerAppearance
{
    FTexture2D*                                   NotificationIcon;                                             // 0x0000(0x0008)
    FLinearColor                                  BackgroundColor;                                              // 0x0008(0x0010)
    FSlateColor                                   IconTint;                                                     // 0x0018(0x0028)
};


// UserDefinedStruct  PlayerFacingPerfPresetGroup.PlayerFacingPerfPresetGroup
// Struct Size::0x0028
struct FPlayerFacingPerfPresetGroup
{
    TArray<enum class EAresIntSettingName>        Settings;                                                     // 0x0000(0x0010)
    FText                                         PresetName;                                                   // 0x0010(0x0018)
};


// UserDefinedStruct  NVCRadialItemOptions.NVCRadialItemOptions
// Struct Size::0x0038
struct FNVCRadialItemOptions
{
    FText                                         DisplayText;                                                  // 0x0000(0x0018)
    enum class NonVerbalCommTypesEnum             CommEnum;                                                     // 0x0018(0x0001)
    enum class TacticalVOEnum                     Voiceline;                                                    // 0x0019(0x0001)
    enum class VOPriorityEnum                     VoicelinePriority;                                            // 0x001A(0x0001)
    enum class VOEmoteEnum                        EmoteVoiceline;                                               // 0x001B(0x0001)
    bool                                          ShouldPing;                                                   // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FText                                         ChatText;                                                     // 0x0020(0x0018)
};


// UserDefinedStruct  EquippableHUDInfo.EquippableHUDInfo
// Struct Size::0x0020
struct FEquippableHUDInfo
{
    FText                                         EquippableName;                                               // 0x0000(0x0018)
    FTexture2D*                                   EquippableIcon;                                               // 0x0018(0x0008)
};


// UserDefinedStruct  KillFeed.KillFeedColorPalette
// Struct Size::0x0040
struct FKillFeedColorPalette
{
    FLinearColor                                  AccentColor;                                                  // 0x0000(0x0010)
    FLinearColor                                  PrimaryColor;                                                 // 0x0010(0x0010)
    FLinearColor                                  SecondaryColor;                                               // 0x0020(0x0010)
    FLinearColor                                  TertiaryColor;                                                // 0x0030(0x0010)
};


// UserDefinedStruct  KillRowInfoTimestamped.KillRowInfoTimestamped
// Struct Size::0x0054
struct FKillRowInfoTimestamped
{
    FKillFeedRowInfo                              RowInfo;                                                      // 0x0000(0x0050)
    float                                         ExpiryTime;                                                   // 0x0050(0x0004)
};


// UserDefinedStruct  KillFeed.KillFeedRowInfo
// Struct Size::0x004A
struct FKillFeedRowInfo
{
    FPlayerController*                            OwningPlayer;                                                 // 0x0000(0x0008)
    FShooterPlayerState*                          LeftPlayerState;                                              // 0x0008(0x0008)
    FShooterPlayerState*                          RightPlayerState;                                             // 0x0010(0x0008)
    int32_t                                       KillNumberInRoundForKiller;                                   // 0x0018(0x0004)
    int32_t                                       KillNumberInRoundForVictim;                                   // 0x001C(0x0004)
    FDamageResponse*                              DamageResponse;                                               // 0x0020(0x0008)
    bool                                          bWasAllyRes;                                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    FAresEquippable*                              EquippableUsed;                                               // 0x0030(0x0008)
    TArray<FAresAssist>                           AssistsList;                                                  // 0x0038(0x0010)
    bool                                          bWasTemporaryDeath;                                           // 0x0048(0x0001)
    bool                                          bWasRecovery;                                                 // 0x0049(0x0001)
};


// UserDefinedStruct  CharacterAbilityTooltipDetails.CharacterAbilityTooltipDetails
// Struct Size::0x0048
struct FCharacterAbilityTooltipDetails
{
    FText                                         Title;                                                        // 0x0000(0x0018)
    FText                                         Description;                                                  // 0x0018(0x0018)
    FTexture*                                     Icon;                                                         // 0x0030(0x0008)
    int32_t                                       Price;                                                        // 0x0038(0x0004)
    FName                                         Action;                                                       // 0x003C(0x000C)
};


// UserDefinedStruct  WeaponSwapStruct.WeaponSwapStruct
// Struct Size::0x0018
struct FWeaponSwapStruct
{
    FAresEquippable*                              Equippable;                                                   // 0x0000(0x0008)
    enum class EAresItemSlot                      Slot;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FShooterCharacter*                            Player;                                                       // 0x0010(0x0008)
};


// UserDefinedStruct  .Struct
// Struct Size::0x0030
struct FStruct
{
    FText                                         ClusterName;                                                  // 0x0000(0x0018)
    FTexture2D*                                   GroupBillboard;                                               // 0x0018(0x0008)
    TArray<FGameObject*>                          Spawners;                                                     // 0x0020(0x0010)
};


// UserDefinedStruct  .Struct
// Struct Size::0x0038
struct FStruct
{
    TSoftClassPtr<UObject>                        EquippableClass;                                              // 0x0000(0x0030)
    FBehaviorTree*                                BehaviorTree;                                                 // 0x0030(0x0008)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x003E
struct FStruct
{
    int32_t                                       BotCount;                                                     // 0x0000(0x0004)
    float                                         SpawnAngle;                                                   // 0x0004(0x0004)
    float                                         BotDuration;                                                  // 0x0008(0x0004)
    float                                         BotPostDeathDelay;                                            // 0x000C(0x0004)
    float                                         StartUpDelay;                                                 // 0x0010(0x0004)
    float                                         ChallengeTime;                                                // 0x0014(0x0004)
    int32_t                                       ModelType;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FText                                         ChallengeName;                                                // 0x0020(0x0018)
    int32_t                                       SettingsIndex;                                                // 0x0038(0x0004)
    enum class Enum                               ModuleID;                                                     // 0x003C(0x0001)
    enum class Enum                               ModuleDifficulty;                                             // 0x003D(0x0001)
};


// UserDefinedStruct  ShootingRangeSettings.ShootingRangeSettings
// Struct Size::0x0011
struct FShootingRangeSettings
{
    bool                                          ShootingRangeBotArmorEnabled;                                 // 0x0000(0x0001)
    bool                                          ShootingRangeBotStrafeEnabled;                                // 0x0001(0x0001)
    bool                                          ShootingRangeBotInfiniteAmmoEnabled;                          // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    int32_t                                       ShootingRangeSkillTestSetting;                                // 0x0004(0x0004)
    int32_t                                       ShootingRangePlantModuleDifficultySetting;                    // 0x0008(0x0004)
    int32_t                                       ShootingRangeDefuseModuleDifficultySetting;                   // 0x000C(0x0004)
    bool                                          ShootingRangePracticeModeEnabled;                             // 0x0010(0x0001)
};


// UserDefinedStruct  SetPlayData.SetPlayData
// Struct Size::0x0050
struct FSetPlayData
{
    TMap<FName,enum class BombSiteEnum>           CharacterAssignments;                                         // 0x0000(0x0050)
};


// UserDefinedStruct  SetPlayData.SetPlayData
// Struct Size::0x0010
struct FSetPlayData
{
    TArray<FSetPlayData>                          PlayDataList;                                                 // 0x0000(0x0010)
};


// UserDefinedStruct  ST.ST
// Struct Size::0x00A0
struct FST
{
    TMap<enum class BombSiteEnum,FAkAudioEvent*>  StackVOLines;                                                 // 0x0000(0x0050)
    TMap<enum class BombSiteEnum,FAkAudioEvent*>  SplitVOLines;                                                 // 0x0050(0x0050)
};


// UserDefinedStruct  SetPlayData.SetPlayData
// Struct Size::0x0068
struct FSetPlayData
{
    float                                         SelectionWeight;                                              // 0x0000(0x0004)
    enum class BombSiteEnum                       TargetSite;                                                   // 0x0004(0x0001)
    bool                                          IsStackPush;                                                  // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    FGameplayTag                                  StackApproachLane;                                            // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TMap<FName,FGameplayTag>                      CharacterAssignments;                                         // 0x0018(0x0050)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0010
struct FStruct
{
    FShooterCharacter*                            AllyCharacter;                                                // 0x0000(0x0008)
    FShooterCharacter*                            EnemyCharacter;                                               // 0x0008(0x0008)
};


// UserDefinedStruct  .CharacterBlackboardMapping
// Struct Size::0x0038
struct FCharacterBlackboardMapping
{
    TSoftClassPtr<UObject>                        CharacterClass;                                               // 0x0000(0x0030)
    FBlackboardData*                              Blackboard;                                                   // 0x0030(0x0008)
};


// UserDefinedStruct  .CharacterBehaviorTreeMapping
// Struct Size::0x0038
struct FCharacterBehaviorTreeMapping
{
    TSoftClassPtr<UObject>                        CharacterClass;                                               // 0x0000(0x0030)
    FBehaviorTree*                                BehaviorTree;                                                 // 0x0030(0x0008)
};


// UserDefinedStruct  BombSiteCoordinationInfo.BombSiteCoordinationInfo
// Struct Size::0x007A
struct FBombSiteCoordinationInfo
{
    FBombDestination*                             BombDestination;                                              // 0x0000(0x0008)
    TArray<FSpawnBarrier*>                        SpawnBarriers;                                                // 0x0008(0x0010)
    TArray<FShooterPlayerState*>                  PlayersAssignedToSite;                                        // 0x0018(0x0010)
    TMap<FShooterPlayerState*,FSpawnBarrier*>     SpawnBarrierAssignments;                                      // 0x0028(0x0050)
    bool                                          HasBeenSearchedForPlantedBomb;                                // 0x0078(0x0001)
    bool                                          HasBeenClearedOnOffense;                                      // 0x0079(0x0001)
};


// UserDefinedStruct  .EquippablePurchaseInfoArray
// Struct Size::0x0010
struct FEquippablePurchaseInfoArray
{
    TArray<FEquippablePurchaseInfo>               EquippablePurchaseInfos;                                      // 0x0000(0x0010)
};


// UserDefinedStruct  .EquippablePurchaseInfo
// Struct Size::0x003C
struct FEquippablePurchaseInfo
{
    enum class EAresTeamRole                      TargetedTeamRole;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TSoftClassPtr<UObject>                        Equippable;                                                   // 0x0008(0x0030)
    int32_t                                       NumCharges;                                                   // 0x0038(0x0004)
};


// UserDefinedStruct  .PurchasableInfo
// Struct Size::0x001C
struct FPurchasableInfo
{
    int32_t                                       Price;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FAresPurchasableEquippable*                   Equippable;                                                   // 0x0008(0x0008)
    FName                                         Category;                                                     // 0x0010(0x000C)
};


// UserDefinedStruct  .BotTeamMaxNumWeaponRestrictions
// Struct Size::0x0018
struct FBotTeamMaxNumWeaponRestrictions
{
    int32_t                                       MaxNumOnTeam;                                                 // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FAresPurchasableEquippable*>           RestrictedWeaponGroup;                                        // 0x0008(0x0010)
};


// UserDefinedStruct  .EquippableToActivationComponentMapping
// Struct Size::0x0060
struct FEquippableToActivationComponentMapping
{
    TSoftClassPtr<UObject>                        Equippable;                                                   // 0x0000(0x0030)
    TSoftClassPtr<UObject>                        EquippableActivationComponent;                                // 0x0030(0x0030)
};


// UserDefinedStruct  ScoreboardPlayerInfo.ScoreboardPlayerInfo
// Struct Size::0x0099
struct FScoreboardPlayerInfo
{
    FName                                         CharacterClass;                                               // 0x0000(0x000C)
    bool                                          bIsAlive;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       Kills;                                                        // 0x0010(0x0004)
    int32_t                                       Deaths;                                                       // 0x0014(0x0004)
    int32_t                                       Assists;                                                      // 0x0018(0x0004)
    int32_t                                       Score;                                                        // 0x001C(0x0004)
    FString                                       Subject;                                                      // 0x0020(0x0010)
    bool                                          bIsUltReady;                                                  // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       UltCharges;                                                   // 0x0034(0x0004)
    int32_t                                       RequiredUltCharges;                                           // 0x0038(0x0004)
    int32_t                                       Ping;                                                         // 0x003C(0x0004)
    bool                                          bHasBomb;                                                     // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    FAresItem*                                    Armor;                                                        // 0x0048(0x0008)
    FAresEquippable*                              BestWeapon;                                                   // 0x0050(0x0008)
    int32_t                                       Money;                                                        // 0x0058(0x0004)
    int32_t                                       CompetitiveTier;                                              // 0x005C(0x0004)
    bool                                          bIsAFK;                                                       // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    int32_t                                       ConnectionStatus;                                             // 0x0064(0x0004)
    FTexture*                                     CharacterPortrait;                                            // 0x0068(0x0008)
    FText                                         CharacterNameText;                                            // 0x0070(0x0018)
    bool                                          IsNewRound;                                                   // 0x0088(0x0001)
    bool                                          IsValid;                                                      // 0x0089(0x0001)
    char                                          pa_008A[0x0006]                                               // 0x008A(0x0006)
    FAresPlayerStateBase*                         PlayerState;                                                  // 0x0090(0x0008)
    bool                                          bIsDowned;                                                    // 0x0098(0x0001)
};


// UserDefinedStruct  TabDefinition.TabDefinition
// Struct Size::0x0028
struct FTabDefinition
{
    FText                                         DisplayText;                                                  // 0x0000(0x0018)
    FTexture*                                     DisplayIcon;                                                  // 0x0018(0x0008)
    FUserWidget*                                  TabWidget;                                                    // 0x0020(0x0008)
};


// UserDefinedStruct  MatchDetailsMatchHighlightsResults.MatchDetailsMatchHighlightsResults
// Struct Size::0x0070
struct FMatchDetailsMatchHighlightsResults
{
    bool                                          MatchWentToOT;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       FirstHalfWins;                                                // 0x0004(0x0004)
    int32_t                                       SecondHalfWins;                                               // 0x0008(0x0004)
    int32_t                                       OTWins;                                                       // 0x000C(0x0004)
    int32_t                                       FirstHalfFirstBloods;                                         // 0x0010(0x0004)
    int32_t                                       SecondHalfFirstBloods;                                        // 0x0014(0x0004)
    int32_t                                       OTFirstBloods;                                                // 0x0018(0x0004)
    int32_t                                       FirstHalfFIrstBloodWins;                                      // 0x001C(0x0004)
    int32_t                                       SecondHalfFirstBloodWins;                                     // 0x0020(0x0004)
    int32_t                                       OTFirstBloodWins;                                             // 0x0024(0x0004)
    int32_t                                       FirstHalfEliminationWins;                                     // 0x0028(0x0004)
    int32_t                                       SecondHalfEliminationWins;                                    // 0x002C(0x0004)
    int32_t                                       OTEliminationWins;                                            // 0x0030(0x0004)
    int32_t                                       FirstHalfSpikesDeployed;                                      // 0x0034(0x0004)
    int32_t                                       SecondHalfSpikesDeployed;                                     // 0x0038(0x0004)
    int32_t                                       OTSpikesDeployed;                                             // 0x003C(0x0004)
    int32_t                                       FirstHalfPostSpikeWins;                                       // 0x0040(0x0004)
    int32_t                                       SecondHalfPostSpikeWins;                                      // 0x0044(0x0004)
    int32_t                                       OTPostSpikeWins;                                              // 0x0048(0x0004)
    int32_t                                       FirstHalfDefusals;                                            // 0x004C(0x0004)
    int32_t                                       SecondHalfDefusals;                                           // 0x0050(0x0004)
    int32_t                                       OTDefusals;                                                   // 0x0054(0x0004)
    int32_t                                       FirstHalfDefTeamEliminated;                                   // 0x0058(0x0004)
    int32_t                                       SecondHalfDefTeamEliminated;                                  // 0x005C(0x0004)
    int32_t                                       OTDefTeamEliminated;                                          // 0x0060(0x0004)
    int32_t                                       FirstHalfDets;                                                // 0x0064(0x0004)
    int32_t                                       SecondHalfDets;                                               // 0x0068(0x0004)
    int32_t                                       OTDets;                                                       // 0x006C(0x0004)
};


// UserDefinedStruct  MatchDetailsHighlight.MatchDetailsHighlight
// Struct Size::0x0028
struct FMatchDetailsHighlight
{
    int32_t                                       Count;                                                        // 0x0000(0x0004)
    FName                                         TeamID;                                                       // 0x0004(0x000C)
    enum class MatchDetailsHighlightEnum          HighlightType;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TArray<int32_t>                               RoundNumbers;                                                 // 0x0018(0x0010)
};


// UserDefinedStruct  MatchDetailsRankedTierDetails.MatchDetailsRankedTierDetails
// Struct Size::0x0030
struct FMatchDetailsRankedTierDetails
{
    FLinearColor                                  TextColor;                                                    // 0x0000(0x0010)
    FTexture2D*                                   RankTierIcon;                                                 // 0x0010(0x0008)
    FText                                         RankTier;                                                     // 0x0018(0x0018)
};


// UserDefinedStruct  AdditionalCarouselObjectContext.AdditionalCarouselObjectContext
// Struct Size::0x0001
struct FAdditionalCarouselObjectContext
{
    bool                                          IsJuiceContent;                                               // 0x0000(0x0001)
};


// UserDefinedStruct  MissionViewData.MissionViewData
// Struct Size::0x0011
struct FMissionViewData
{
    FGuid                                         MissionID;                                                    // 0x0000(0x0010)
    bool                                          CompletedDuringMatch;                                         // 0x0010(0x0001)
};


// UserDefinedStruct  MissionListStruct.MissionListStruct
// Struct Size::0x0020
struct FMissionListStruct
{
    FGuid                                         MatchID;                                                      // 0x0000(0x0010)
    TArray<FMissionViewData>                      Missions;                                                     // 0x0010(0x0010)
};


// UserDefinedStruct  MenuButtonStateAppearance.MenuButtonStateAppearance
// Struct Size::0x0160
struct FMenuButtonStateAppearance
{
    FLinearColor                                  TextColor;                                                    // 0x0000(0x0010)
    FLinearColor                                  IconColor;                                                    // 0x0010(0x0010)
    FLinearColor                                  BackgroundColor;                                              // 0x0020(0x0010)
    FLinearColor                                  OutlineColor;                                                 // 0x0030(0x0010)
    FSlateBrush                                   BackgroundImage;                                              // 0x0040(0x0090)
    FSlateBrush                                   OutlineImage;                                                 // 0x00D0(0x0090)
};


// UserDefinedStruct  MaterialList.MaterialList
// Struct Size::0x0010
struct FMaterialList
{
    TArray<FMaterialInterface*>                   Mat;                                                          // 0x0000(0x0010)
};


// UserDefinedStruct  .EquippableSoundEffect
// Struct Size::0x0015
struct FEquippableSoundEffect
{
    FAkAudioEvent*                                SoundEvent;                                                   // 0x0000(0x0008)
    FName                                         AttachPointName;                                              // 0x0008(0x000C)
    bool                                          bSoundFollowsAttachPoint;                                     // 0x0014(0x0001)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x001C
struct FStruct
{
    FAnimInstance*                                Instance;                                                     // 0x0000(0x0008)
    FAnimMontage*                                 Montage;                                                      // 0x0008(0x0008)
    float                                         StartedGameTime;                                              // 0x0010(0x0004)
    float                                         StartedMontageTime;                                           // 0x0014(0x0004)
    float                                         PlayRate;                                                     // 0x0018(0x0004)
};


// UserDefinedStruct  .ShooterCharacterAndGameplayEffectStruct
// Struct Size::0x0010
struct FShooterCharacterAndGameplayEffectStruct
{
    FShooterCharacter*                            ShooterCharacter;                                             // 0x0000(0x0008)
    FActiveGameplayEffectHandle                   GameplayEffectHandle;                                         // 0x0008(0x0008)
};


// UserDefinedStruct  .ActorAnd
// Struct Size::0x0028
struct FActorAnd
{
    AActor*                                       Actor;                                                        // 0x0000(0x0008)
    FEffectID                                     FXC;                                                          // 0x0008(0x0020)
};


// UserDefinedStruct  RootMotionData.RootMotionData
// Struct Size::0x0010
struct FRootMotionData
{
    FVector                                       Velocity;                                                     // 0x0000(0x000C)
    float                                         Duration;                                                     // 0x000C(0x0004)
};


// UserDefinedStruct  KillBannerOverrideElementStruct.KillBannerOverrideElementStruct
// Struct Size::0x0028
struct FKillBannerOverrideElementStruct
{
    FTexture2D*                                   KillBanner;                                                   // 0x0000(0x0008)
    FTexture2D*                                   Glow;                                                         // 0x0008(0x0008)
    FTexture2D*                                   BackGround;                                                   // 0x0010(0x0008)
    FTexture2D*                                   BackGroundDissolve;                                           // 0x0018(0x0008)
    FOptionalKillBannerEffects*                   KillBannerWings;                                              // 0x0020(0x0008)
};


// UserDefinedStruct  KillBannerStruct.KillBannerStruct
// Struct Size::0x0018
struct FKillBannerStruct
{
    bool                                          SpecialOverrides;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FKillBannerOverrideElementStruct>      Overrides;                                                    // 0x0008(0x0010)
};


// UserDefinedStruct  KillBannerStruct.KillBannerStruct
// Struct Size::0x00D0
struct FKillBannerStruct
{
    FLinearColor                                  PrimaryColor;                                                 // 0x0000(0x0010)
    FOptionalKillBannerEffects*                   OptionalEffects;                                              // 0x0010(0x0008)
    int32_t                                       OptionalEffectsKillCount;                                     // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FTexture2D*                                   BackgroundFrame;                                              // 0x0020(0x0008)
    FTexture2D*                                   BackgroundFrame;                                              // 0x0028(0x0008)
    FTexture2D*                                   KillWheel-TXT;                                                // 0x0030(0x0008)
    FTexture2D*                                   KillWheel;                                                    // 0x0038(0x0008)
    FTexture2D*                                   KillWheel;                                                    // 0x0040(0x0008)
    float                                         KillWheel;                                                    // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FTexture2D*                                   Badge;                                                        // 0x0050(0x0008)
    FVector2D                                     Badge;                                                        // 0x0058(0x0008)
    FTexture2D*                                   Badge;                                                        // 0x0060(0x0008)
    TArray<FPaperFlipbook*>                       FlipBookFX;                                                   // 0x0068(0x0010)
    FAkAudioEvent*                                Sound;                                                        // 0x0078(0x0008)
    FAkAudioEvent*                                Sound;                                                        // 0x0080(0x0008)
    FAkAudioEvent*                                Sound;                                                        // 0x0088(0x0008)
    FAkAudioEvent*                                Sound;                                                        // 0x0090(0x0008)
    FAkAudioEvent*                                Sound;                                                        // 0x0098(0x0008)
    FAkAudioEvent*                                Sound;                                                        // 0x00A0(0x0008)
    FAkAudioEvent*                                Sound;                                                        // 0x00A8(0x0008)
    FAkAudioEvent*                                Sound;                                                        // 0x00B0(0x0008)
    FKillBannerStruct                             Special;                                                      // 0x00B8(0x0018)
};


// UserDefinedStruct  TagInstance.TagInstance
// Struct Size::0x0050
struct FTagInstance
{
    TMap<FName,FAkAudioEvent*>                    RelatedTags;                                                  // 0x0000(0x0050)
};


// UserDefinedStruct  MapRelationshipInstance.MapRelationshipInstance
// Struct Size::0x0050
struct FMapRelationshipInstance
{
    TMap<enum class MapID,FAkAudioEvent*>         RelatedMaps;                                                  // 0x0000(0x0050)
};


// UserDefinedStruct  CharacterRelationshipInstance.CharacterRelationshipInstance
// Struct Size::0x0050
struct FCharacterRelationshipInstance
{
    TMap<enum class CharacterID,FAkAudioEvent*>   RelatedCharacters;                                            // 0x0000(0x0050)
};


// UserDefinedStruct  .Material
// Struct Size::0x0030
struct FMaterial
{
    FString                                       Slot;                                                         // 0x0000(0x0010)
    TArray<FMaterialInterface*>                   1PMaterials;                                                  // 0x0010(0x0010)
    TArray<FMaterialInterface*>                   3PMaterials;                                                  // 0x0020(0x0010)
};


// UserDefinedStruct  QueuedVOLine.QueuedVOLine
// Struct Size::0x0040
struct FQueuedVOLine
{
    FAkAudioEvent*                                Event;                                                        // 0x0000(0x0008)
    enum class VOPriorityEnum                     Priority;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         QueueTimeout;                                                 // 0x000C(0x0004)
    float                                         TimeEnteredQueue;                                             // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FAkSwitch>                             AkSwitchAray;                                                 // 0x0018(0x0010)
    bool                                          WaitsOnAnnouncer;                                             // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    int32_t                                       RandomSeed;                                                   // 0x002C(0x0004)
    FBaseVOComponent*                             WaitOnCharacter;                                              // 0x0030(0x0008)
    FShooterCharacter*                            VOThrowTargetCharacter;                                       // 0x0038(0x0008)
};


// UserDefinedStruct  .EquippableParticleInfo
// Struct Size::0x00C0
struct FEquippableParticleInfo
{
    TSoftObjectPtr<FParticleSystem>               Particle;                                                     // 0x0000(0x0030)
    bool                                          IsCharacterAttachment;                                        // 0x0030(0x0001)
    bool                                          IsAresEquippableAttachmentComponent;                          // 0x0031(0x0001)
    char                                          pa_0032[0x0006]                                               // 0x0032(0x0006)
    FString                                       AresEquippableAttachmentComponentSlot;                        // 0x0038(0x0010)
    FName                                         AttachPoint;                                                  // 0x0048(0x000C)
    bool                                          IsWorldAttachmentLocation;                                    // 0x0054(0x0001)
    char                                          pa_0055[0x000B]                                               // 0x0055(0x000B)
    FTransform                                    SpawnTransform;                                               // 0x0060(0x0030)
    enum class ELHMMirroringIgnoreType            MirroringIgnoreType;                                          // 0x0090(0x0001)
    enum class EAresParticleVariantColor          VariantColor;                                                 // 0x0091(0x0001)
    char                                          pa_0092[0x0002]                                               // 0x0092(0x0002)
    int32_t                                       TranslucentSortPriority;                                      // 0x0094(0x0004)
    TArray<enum class EAresEquippableState>       ActiveStates;                                                 // 0x0098(0x0010)
    enum class EquippableParticleToggleEnum       StateChangeToggleType;                                        // 0x00A8(0x0001)
    char                                          pa_00A9[0x0007]                                               // 0x00A9(0x0007)
    TArray<FStruct>                               ParticleOverrides;                                            // 0x00B0(0x0010)
};


// UserDefinedStruct  .GunSkinParticleInfo
// Struct Size::0x0096
struct FGunSkinParticleInfo
{
    TSoftObjectPtr<FParticleSystem>               Particle;                                                     // 0x0000(0x0030)
    bool                                          IsAresEquippableAttachmentComponent;                          // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    FString                                       AresEquippableAttachmentComponentSlot;                        // 0x0038(0x0010)
    FName                                         VFXAttachPoint;                                               // 0x0048(0x000C)
    FVector                                       ParticleSpawnLocationOffset;                                  // 0x0054(0x000C)
    FRotator                                      ParticleSpawnRotationOffset;                                  // 0x0060(0x000C)
    enum class ELHMMirroringIgnoreType            MirroringIgnoreType;                                          // 0x006C(0x0001)
    bool                                          IsFirstPerson;                                                // 0x006D(0x0001)
    char                                          pa_006E[0x0002]                                               // 0x006E(0x0002)
    int32_t                                       SortPriority;                                                 // 0x0070(0x0004)
    bool                                          AttachToVFX;                                                  // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
    TArray<FStruct>                               ParticleOverrides;                                            // 0x0078(0x0010)
    bool                                          HideOnFire?;                                                  // 0x0088(0x0001)
    bool                                          HideOnEquip;                                                  // 0x0089(0x0001)
    bool                                          HideOnReload;                                                 // 0x008A(0x0001)
    bool                                          HideOnIdle;                                                   // 0x008B(0x0001)
    bool                                          HideOnADS;                                                    // 0x008C(0x0001)
    bool                                          HideOnInspect;                                                // 0x008D(0x0001)
    char                                          pa_008E[0x0002]                                               // 0x008E(0x0002)
    float                                         HideTimeAfterFire;                                            // 0x0090(0x0004)
    enum class EAresParticleVariantColor          Variant;                                                      // 0x0094(0x0001)
    enum class EAres                              TimeDilationOverrideBehaviour;                                // 0x0095(0x0001)
};


// UserDefinedStruct  RoundEndRewards.RoundEndRewards
// Struct Size::0x0010
struct FRoundEndRewards
{
    FOwnerExclusivePlayerInfo*                    Player;                                                       // 0x0000(0x0008)
    int32_t                                       Energy;                                                       // 0x0008(0x0004)
    int32_t                                       Money;                                                        // 0x000C(0x0004)
};


// UserDefinedStruct  InsuranceRewards.InsuranceRewards
// Struct Size::0x0010
struct FInsuranceRewards
{
    FOwnerExclusivePlayerInfo*                    Player;                                                       // 0x0000(0x0008)
    int32_t                                       Energy;                                                       // 0x0008(0x0004)
    int32_t                                       Money;                                                        // 0x000C(0x0004)
};


// UserDefinedStruct  MatchResultAbilityInfo.MatchResultAbilityInfo
// Struct Size::0x002C
struct FMatchResultAbilityInfo
{
    enum class EAresItemSlot                      AbilitySlot;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         AbilityType;                                                  // 0x0004(0x000C)
    float                                         Value;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Subject;                                                      // 0x0018(0x0010)
    int32_t                                       Round;                                                        // 0x0028(0x0004)
};


// UserDefinedStruct  MatchResultAbilityCastCount.MatchResultAbilityCastCount
// Struct Size::0x0060
struct FMatchResultAbilityCastCount
{
    TMap<enum class EAresItemSlot,int32_t>        abilityCounts;                                                // 0x0000(0x0050)
    FString                                       subject;                                                      // 0x0050(0x0010)
};


// UserDefinedStruct  MatchResultBombPlantEvent.MatchResultBombPlantEvent
// Struct Size::0x0048
struct FMatchResultBombPlantEvent
{
    int32_t                                       round;                                                        // 0x0000(0x0004)
    int32_t                                       gameTime;                                                     // 0x0004(0x0004)
    FString                                       planter;                                                      // 0x0008(0x0010)
    FMatchResultMapLocation                       plantLocation;                                                // 0x0018(0x0008)
    int32_t                                       roundTime;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FMatchResultPlayerLocation>            playerLocations;                                              // 0x0028(0x0010)
    FString                                       plantSite;                                                    // 0x0038(0x0010)
};


// UserDefinedStruct  MatchResultBombDefuseEvent.MatchResultBombDefuseEvent
// Struct Size::0x0038
struct FMatchResultBombDefuseEvent
{
    int32_t                                       round;                                                        // 0x0000(0x0004)
    int32_t                                       gameTime;                                                     // 0x0004(0x0004)
    FString                                       defuser;                                                      // 0x0008(0x0010)
    FMatchResultMapLocation                       defuseLocation;                                               // 0x0018(0x0008)
    int32_t                                       roundTime;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FMatchResultPlayerLocation>            playerLocations;                                              // 0x0028(0x0010)
};


// UserDefinedStruct  MatchResultDamageEvent.MatchResultDamageEvent
// Struct Size::0x0038
struct FMatchResultDamageEvent
{
    int32_t                                       round;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       attacker;                                                     // 0x0008(0x0010)
    FString                                       victim;                                                       // 0x0018(0x0010)
    int32_t                                       damage;                                                       // 0x0028(0x0004)
    int32_t                                       headshots;                                                    // 0x002C(0x0004)
    int32_t                                       bodyshots;                                                    // 0x0030(0x0004)
    int32_t                                       legshots;                                                     // 0x0034(0x0004)
};


// UserDefinedStruct  MatchResultRoundEconomy.MatchResultRoundEconomy
// Struct Size::0x0014
struct FMatchResultRoundEconomy
{
    TArray<FMatchResultPlayerEconomy>             playerEconomies;                                              // 0x0000(0x0010)
    int32_t                                       round;                                                        // 0x0010(0x0004)
};


// UserDefinedStruct  MatchResultPlayerEconomy.MatchResultPlayerEconomy
// Struct Size::0x0040
struct FMatchResultPlayerEconomy
{
    FString                                       Subject;                                                      // 0x0000(0x0010)
    int32_t                                       LoadoutValue;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Weapon;                                                       // 0x0018(0x0010)
    FString                                       Armor;                                                        // 0x0028(0x0010)
    int32_t                                       Remaining;                                                    // 0x0038(0x0004)
    int32_t                                       Spent;                                                        // 0x003C(0x0004)
};


// UserDefinedStruct  MatchResultPlayerKillEvent.MatchResultPlayerKillEvent
// Struct Size::0x0080
struct FMatchResultPlayerKillEvent
{
    FString                                       killer;                                                       // 0x0000(0x0010)
    FString                                       victim;                                                       // 0x0010(0x0010)
    TArray<FString>                               assistants;                                                   // 0x0020(0x0010)
    int32_t                                       gameTime;                                                     // 0x0030(0x0004)
    int32_t                                       round;                                                        // 0x0034(0x0004)
    int32_t                                       roundTime;                                                    // 0x0038(0x0004)
    FMatchResultMapLocation                       victimLocation;                                               // 0x003C(0x0008)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<FMatchResultPlayerLocation>            playerLocations;                                              // 0x0048(0x0010)
    FMatchResultDamageInfo                        finishingDamage;                                              // 0x0058(0x0028)
};


// UserDefinedStruct  MatchResultRoundPenaltyEvent.MatchResultRoundPenaltyEvent
// Struct Size::0x0018
struct FMatchResultRoundPenaltyEvent
{
    int32_t                                       RoundNum;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Subject;                                                      // 0x0008(0x0010)
};


// UserDefinedStruct  MatchResultPlayerRoundScores.MatchResultPlayerRoundScores
// Struct Size::0x0054
struct FMatchResultPlayerRoundScores
{
    TMap<FString,int32_t>                         PlayerScores;                                                 // 0x0000(0x0050)
    int32_t                                       Round;                                                        // 0x0050(0x0004)
};


// UserDefinedStruct  MatchResultPlayerLocation.MatchResultPlayerLocation
// Struct Size::0x0020
struct FMatchResultPlayerLocation
{
    FMatchResultMapLocation                       location;                                                     // 0x0000(0x0008)
    float                                         viewRadians;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       subject;                                                      // 0x0010(0x0010)
};


// UserDefinedStruct  MatchResultMapLocation.MatchResultMapLocation
// Struct Size::0x0008
struct FMatchResultMapLocation
{
    int32_t                                       x;                                                            // 0x0000(0x0004)
    int32_t                                       y;                                                            // 0x0004(0x0004)
};


// UserDefinedStruct  MatchResultDamageInfo.MatchResultDamageInfo
// Struct Size::0x0021
struct FMatchResultDamageInfo
{
    FString                                       damageType;                                                   // 0x0000(0x0010)
    FString                                       damageItem;                                                   // 0x0010(0x0010)
    bool                                          isSecondaryFireMode;                                          // 0x0020(0x0001)
};


// UserDefinedStruct  MatchResultRoundCeremony.MatchResultRoundCeremony
// Struct Size::0x0014
struct FMatchResultRoundCeremony
{
    FString                                       ceremony;                                                     // 0x0000(0x0010)
    int32_t                                       round;                                                        // 0x0010(0x0004)
};


// UserDefinedStruct  MatchResultRoundStayedInSpawnEvent.MatchResultRoundStayedInSpawnEvent
// Struct Size::0x0018
struct FMatchResultRoundStayedInSpawnEvent
{
    int32_t                                       RoundNum;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Subject;                                                      // 0x0008(0x0010)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0018
struct FStruct
{
    int32_t                                       MaxCharges;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FSlateBrush>                           Images;                                                       // 0x0008(0x0010)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0029
struct FStruct
{
    float                                         MaxTime;                                                      // 0x0000(0x0004)
    float                                         CurrentTime;                                                  // 0x0004(0x0004)
    bool                                          AutomaticallyRemove;                                          // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FText                                         TimerText;                                                    // 0x0010(0x0018)
    bool                                          ShowExpireWarning;                                            // 0x0028(0x0001)
};


// UserDefinedStruct  PlatformSpecificText.PlatformSpecificText
// Struct Size::0x0090
struct FPlatformSpecificText
{
    FWidget*                                      ContainerObject;                                              // 0x0000(0x0008)
    FTextBlock*                                   TextBlockRef;                                                 // 0x0008(0x0008)
    TSet<enum class EActionChordTapHoldType>      InputType;                                                    // 0x0010(0x0050)
    FText                                         ConsoleTextValue;                                             // 0x0060(0x0018)
    FText                                         DesktopTextValue;                                             // 0x0078(0x0018)
};


// UserDefinedStruct  AresMinimapSlotConfig.AresMinimapSlotConfig
// Struct Size::0x0029
struct FAresMinimapSlotConfig
{
    enum class EAresMinimapLayer                  MinimapLayer;                                                 // 0x0000(0x0001)
    enum class EAresMinimapPositionSpace          MinimapPositionSpace;                                         // 0x0001(0x0001)
    enum class EAresMinimapRotationSpace          MinimapRotationSpace;                                         // 0x0002(0x0001)
    enum class EAresMinimapSizeSpace              MinimapSizeSpace;                                             // 0x0003(0x0001)
    FVector                                       MinimapPosition;                                              // 0x0004(0x000C)
    float                                         MinimapRotation;                                              // 0x0010(0x0004)
    FVector                                       MinimapSize;                                                  // 0x0014(0x000C)
    FVector2D                                     Alignment;                                                    // 0x0020(0x0008)
    bool                                          DrawOffMap;                                                   // 0x0028(0x0001)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0008
struct FStruct
{
    float                                         StartTime;                                                    // 0x0000(0x0004)
    float                                         Duration;                                                     // 0x0004(0x0004)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0020
struct FStruct
{
    TArray<FAkAudioEvent*>                        BeginEvents;                                                  // 0x0000(0x0010)
    TArray<FAkAudioEvent*>                        EndEvents;                                                    // 0x0010(0x0010)
};


// UserDefinedStruct  SiteRushWeaponPool.SiteRushWeaponPool
// Struct Size::0x0018
struct FSiteRushWeaponPool
{
    TArray<FAresItem*>                            Weapons;                                                      // 0x0000(0x0010)
    FAresItem*                                    Armor;                                                        // 0x0010(0x0008)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0038
struct FStruct
{
    enum class Enum                               MounseInput;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         BindingName;                                                  // 0x0004(0x000C)
    FTexture2D*                                   InputImage;                                                   // 0x0010(0x0008)
    FLinearColor                                  InputColor;                                                   // 0x0018(0x0010)
    FLinearColor                                  ImageColor;                                                   // 0x0028(0x0010)
};


// UserDefinedStruct  .GunSkinVFXMeshInfo
// Struct Size::0x003C
struct FGunSkinVFXMeshInfo
{
    FStaticMesh*                                  Mesh;                                                         // 0x0000(0x0008)
    FName                                         AttachSocket;                                                 // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FMaterialInterface*                           Material;                                                     // 0x0018(0x0008)
    bool                                          AttachToCosmeticMesh;                                         // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Offset;                                                       // 0x0024(0x000C)
    FRotator                                      Rotation;                                                     // 0x0030(0x000C)
};


// UserDefinedStruct  S.S
// Struct Size::0x000C
struct FS
{
    FGameplayTag                                  Magnitude;                                                    // 0x0000(0x000C)
};


// UserDefinedStruct  S.S
// Struct Size::0x000C
struct FS
{
    FGameplayTag                                  Descriptor;                                                   // 0x0000(0x000C)
};


// UserDefinedStruct  S.S
// Struct Size::0x000C
struct FS
{
    FGameplayTag                                  Channel;                                                      // 0x0000(0x000C)
};


// UserDefinedStruct  SlowTimeRequest.SlowTimeRequest
// Struct Size::0x0018
struct FSlowTimeRequest
{
    float                                         TimeSlowGoal;                                                 // 0x0000(0x0004)
    float                                         TimeSlowRemaining;                                            // 0x0004(0x0004)
    float                                         TimeSlowSpeed;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    AActor*                                       Requestor;                                                    // 0x0010(0x0008)
};


// UserDefinedStruct  GameStateInfo.GameStateInfo
// Struct Size::0x0001
struct FGameStateInfo
{
    bool                                          IsBombGameState;                                              // 0x0000(0x0001)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x00A9
struct FStruct
{
    FGameplayTag                                  GameplayTag;                                                  // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         DisplayText;                                                  // 0x0010(0x0018)
    enum class Enum                               BuffOrDebuff;                                                 // 0x0028(0x0001)
    enum class Enum                               Orientation;                                                  // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    TSoftClassPtr<UObject>                        WidgetClass;                                                  // 0x0030(0x0030)
    FGameplayTagQuery                             QueryInfo;                                                    // 0x0060(0x0048)
    bool                                          BuffItATail;                                                  // 0x00A8(0x0001)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x006C
struct FStruct
{
    float                                         NearSight;                                                    // 0x0000(0x0004)
    float                                         Occluder;                                                     // 0x0004(0x0004)
    FLinearColor                                  Occluder;                                                     // 0x0008(0x0010)
    float                                         Fade;                                                         // 0x0018(0x0004)
    FLinearColor                                  Fade;                                                         // 0x001C(0x0010)
    FLinearColor                                  Fade;                                                         // 0x002C(0x0010)
    float                                         Fade;                                                         // 0x003C(0x0004)
    float                                         Fade;                                                         // 0x0040(0x0004)
    FLinearColor                                  Fresnel;                                                      // 0x0044(0x0010)
    float                                         Fresnel;                                                      // 0x0054(0x0004)
    float                                         Fresnel;                                                      // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    AActor*                                       CutoutObject;                                                 // 0x0060(0x0008)
    float                                         CutoutSize;                                                   // 0x0068(0x0004)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0024
struct FStruct
{
    float                                         Alpha;                                                        // 0x0000(0x0004)
    FLinearColor                                  ColorMain;                                                    // 0x0004(0x0010)
    FLinearColor                                  ColorFringe;                                                  // 0x0014(0x0010)
};


// UserDefinedStruct  .Struct
// Struct Size::0x0138
struct FStruct
{
    FName                                         MaterialOverrideName;                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TSoftObjectPtr<FMaterialInterface>            MaterialOverride;                                             // 0x0010(0x0030)
    TMap<FName,TSoftObjectPtr<FTexture>>          TextureOverride;                                              // 0x0040(0x0050)
    TMap<FName,FLinearColor>                      ColorOverride;                                                // 0x0090(0x0050)
    TMap<FName,float>                             ScalarOverride;                                               // 0x00E0(0x0050)
    FMaterialInstanceDynamic*                     DynamicInstancecallinBPonly;                                  // 0x0130(0x0008)
};


// UserDefinedStruct  .EquippableParticleEffect
// Struct Size::0x0091
struct FEquippableParticleEffect
{
    TSoftObjectPtr<FParticleSystem>               FX;                                                           // 0x0000(0x0030)
    FName                                         AttachPointName;                                              // 0x0030(0x000C)
    FFloatRange                                   StabilityRange;                                               // 0x003C(0x0010)
    enum class ErrorTypeEnum                      ErrorType;                                                    // 0x004C(0x0001)
    bool                                          AttachToVFX;                                                  // 0x004D(0x0001)
    char                                          pa_004E[0x0002]                                               // 0x004E(0x0002)
    TArray<FStruct>                               ParticleOverrides;                                            // 0x0050(0x0010)
    FTransform                                    SpawnTransform;                                               // 0x0060(0x0030)
    enum class EAresParticleVariantColor          VariantColor;                                                 // 0x0090(0x0001)
};


// UserDefinedStruct  TrackedPawnState.TrackedPawnState
// Struct Size::0x0020
struct FTrackedPawnState
{
    FVector                                       Position;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
    float                                         Health;                                                       // 0x0018(0x0004)
    float                                         TimeStamp;                                                    // 0x001C(0x0004)
};


// UserDefinedStruct  .AbilityTelemetryStasticParameters
// Struct Size::0x0010
struct FAbilityTelemetryStasticParameters
{
    enum class ECharacterAbilityStatisticList     Stat;                                                         // 0x0000(0x0001)
    enum class EAresAlliance                      Alliance;                                                     // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         Value;                                                        // 0x0004(0x0004)
    FShooterCharacter*                            AffectedCharacter;                                            // 0x0008(0x0008)
};


// UserDefinedStruct  .AbilityTelemetryEventPackage
// Struct Size::0x0328
struct FAbilityTelemetryEventPackage
{
    FAbilityUsageEvent                            UsageEvent;                                                   // 0x0000(0x0300)
    TArray<FVector>                               EventLocations;                                               // 0x0300(0x0010)
    TArray<FCharacterAbilityEffectInfo>           AbilityEffects;                                               // 0x0310(0x0010)
    int32_t                                       AssociatedCastID;                                             // 0x0320(0x0004)
    int32_t                                       DestroyedCount;                                               // 0x0324(0x0004)
};


// UserDefinedStruct  .CharacterAbilityEffectInfo
// Struct Size::0x0038
struct FCharacterAbilityEffectInfo
{
    enum class ECharacterAbilityStatisticList     Statistic;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FText                                         LocalizedStat;                                                // 0x0008(0x0018)
    float                                         Value;                                                        // 0x0020(0x0004)
    float                                         Time;                                                         // 0x0024(0x0004)
    TArray<FCharacterAbilityAffectedTargetInfo>   AffectedTargetsArray;                                         // 0x0028(0x0010)
};


// UserDefinedStruct  .CharacterAbilityCastInfo
// Struct Size::0x0058
struct FCharacterAbilityCastInfo
{
    FString                                       Player;                                                       // 0x0000(0x0010)
    enum class EAresItemSlot                      Slot;                                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       Round;                                                        // 0x0014(0x0004)
    enum class EAresGamePhase                     RoundPhase;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         CastTime;                                                     // 0x001C(0x0004)
    FVector                                       CastLocation;                                                 // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<FVector>                               EffectLocations;                                              // 0x0030(0x0010)
    int32_t                                       DestroyedCount;                                               // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<FCharacterAbilityEffectInfo>           Effects;                                                      // 0x0048(0x0010)
};


// UserDefinedStruct  .CharacterAbilityAffectedTargetInfo
// Struct Size::0x000C
struct FCharacterAbilityAffectedTargetInfo
{
    FShooterPlayerState*                          AffectedPlayer;                                               // 0x0000(0x0008)
    float                                         Value;                                                        // 0x0008(0x0004)
};


// UserDefinedStruct  .CharacterImpactParticle
// Struct Size::0x0090
struct FCharacterImpactParticle
{
    FAresHitImpactParticle                        HeadDamage;                                                   // 0x0000(0x0018)
    FAresHitImpactParticle                        BodyDamage;                                                   // 0x0018(0x0018)
    FAresHitImpactParticle                        LegDamage;                                                    // 0x0030(0x0018)
    FAresHitImpactParticle                        HeadKill;                                                     // 0x0048(0x0018)
    FAresHitImpactParticle                        BodyKill;                                                     // 0x0060(0x0018)
    FAresHitImpactParticle                        LegKill;                                                      // 0x0078(0x0018)
};


// UserDefinedStruct  SeasonButtonStruct.SeasonButtonStruct
// Struct Size::0x0031
struct FSeasonButtonStruct
{
    FText                                         ActText;                                                      // 0x0000(0x0018)
    FText                                         EpisodeText;                                                  // 0x0018(0x0018)
    bool                                          Enabled;                                                      // 0x0030(0x0001)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0098
struct FStruct
{
    FName                                         ParameterName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FExplicitFloatCurve                           ParameterCurve;                                               // 0x0010(0x0088)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0018
struct FStruct
{
    FName                                         ParameterName;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FCurveVector*                                 ParameterCurve;                                               // 0x0010(0x0008)
};


// UserDefinedStruct  HudAbilityCharges.Struct
// Struct Size::0x0058
struct FStruct
{
    int32_t                                       MaxCharges;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TMap<int32_t,FStruct>                         ChargeTextures;                                               // 0x0008(0x0050)
};


// UserDefinedStruct  HudAbilityCharges.Struct
// Struct Size::0x0010
struct FStruct
{
    TArray<FTexture2D*>                           TextureArray;                                                 // 0x0000(0x0010)
};


