																/* VALORANT V9.03*/
																/* QQ 1787174068  */
																/* QQ 2278616922*/
// Enum  CoreUObject.EInterpCurveMode
enum class EInterpCurveMode : uint8_t
{
    CIM                                            = 0,
    CIM                                            = 1,
    CIM                                            = 2,
    CIM                                            = 3,
    CIM                                            = 4,
    CIM                                            = 5,
    CIM                                            = 6

};


// Enum  CoreUObject.Default
enum class Default : uint8_t
{

};


// Enum  CoreUObject.ERangeBoundTypes
enum class ERangeBoundTypes : uint8_t
{
    Exclusive                                      = 0,
    Inclusive                                      = 1,
    Open                                           = 2,
    ERangeBoundTypes                               = 3

};


// Enum  CoreUObject.ELocalizedTextSourceCategory
enum class ELocalizedTextSourceCategory : uint8_t
{
    Game                                           = 0,
    Engine                                         = 1,
    Editor                                         = 2,
    ELocalizedTextSourceCategory                   = 3

};


// Enum  CoreUObject.EAutomationEventType
enum class EAutomationEventType : uint8_t
{
    Info                                           = 0,
    Warning                                        = 1,
    Error                                          = 2,
    EAutomationEventType                           = 3

};


// Enum  CoreUObject.EStringMeasurementUnits
enum class EStringMeasurementUnits : uint8_t
{
    CodeUnits                                      = 0,
    CodeUnits                                      = 1,
    CodePoints                                     = 2,
    EStringMeasurementUnits                        = 3

};


// Enum  ApexDestruction.EImpactDamageOverride
enum class EImpactDamageOverride : uint8_t
{
    IDO                                            = 0,
    IDO                                            = 1,
    IDO                                            = 2,
    IDO                                            = 3

};


// Enum  Engine.ETextGender
enum class ETextGender : uint8_t
{
    Masculine                                      = 0,
    Feminine                                       = 1,
    Neuter                                         = 2,
    ETextGender                                    = 3

};


// Enum  Engine.EFormatArgumentType
enum class EFormatArgumentType : uint8_t
{
    Int                                            = 0,
    UInt                                           = 1,
    Float                                          = 2,
    Double                                         = 3,
    Text                                           = 4,
    Gender                                         = 5,
    EFormatArgumentType                            = 6

};


// Enum  InputCore.ETouchIndex
enum class ETouchIndex : uint8_t
{
    Touch1                                         = 0,
    Touch2                                         = 1,
    Touch3                                         = 2,
    Touch4                                         = 3,
    Touch5                                         = 4,
    Touch6                                         = 5,
    Touch7                                         = 6,
    Touch8                                         = 7,
    Touch9                                         = 8,
    Touch10                                        = 9,
    CursorPointerIndex                             = 10,
    MAX                                            = 11,
    ETouchIndex                                    = 12

};


// Enum  Engine.EEndPlayReason
enum class EEndPlayReason : uint8_t
{
    Destroyed                                      = 0,
    LevelTransition                                = 1,
    EndPlayInEditor                                = 2,
    RemovedFromWorld                               = 3,
    Quit                                           = 4,
    EEndPlayReason                                 = 5

};


// Enum  Engine.ENetRole
enum class ENetRole : uint8_t
{
    ROLE                                           = 0,
    ROLE                                           = 1,
    ROLE                                           = 2,
    ROLE                                           = 3,
    ROLE                                           = 4

};


// Enum  Engine.ETickingGroup
enum class ETickingGroup : uint8_t
{
    TG                                             = 0,
    TG                                             = 1,
    TG                                             = 2,
    TG                                             = 3,
    TG                                             = 4,
    TG                                             = 5,
    TG                                             = 6,
    TG                                             = 7,
    TG                                             = 8,
    TG                                             = 9

};


// Enum  Engine.EComponentCreationMethod
enum class EComponentCreationMethod : uint8_t
{
    Native                                         = 0,
    SimpleConstructionScript                       = 1,
    UserConstructionScript                         = 2,
    Instance                                       = 3,
    EComponentCreationMethod                       = 4

};


// Enum  Engine.ETemperatureSeverityType
enum class ETemperatureSeverityType : uint8_t
{
    Unknown                                        = 0,
    Good                                           = 1,
    Bad                                            = 2,
    Serious                                        = 3,
    Critical                                       = 4,
    NumSeverities                                  = 5,
    ETemperatureSeverityType                       = 6

};


// Enum  Engine.EQuartzCommandQuantization
enum class EQuartzCommandQuantization : uint8_t
{
    Bar                                            = 0,
    Beat                                           = 1,
    ThirtySecondNote                               = 2,
    SixteenthNote                                  = 3,
    EighthNote                                     = 4,
    QuarterNote                                    = 5,
    HalfNote                                       = 6,
    WholeNote                                      = 7,
    DottedSixteenthNote                            = 8,
    DottedEighthNote                               = 9,
    DottedQuarterNote                              = 10,
    DottedHalfNote                                 = 11,
    DottedWholeNote                                = 12,
    SixteenthNoteTriplet                           = 13,
    EighthNoteTriplet                              = 14,
    QuarterNoteTriplet                             = 15,
    HalfNoteTriplet                                = 16,
    Tick                                           = 17,
    Count                                          = 18,
    None                                           = 19,
    EQuartzCommandQuantization                     = 20

};


// Enum  Engine.EQuartzCommandDelegateSubType
enum class EQuartzCommandDelegateSubType : uint8_t
{
    CommandOnFailedToQueue                         = 0,
    CommandOnQueued                                = 1,
    CommandOnCanceled                              = 2,
    CommandOnAboutToStart                          = 3,
    CommandOnStarted                               = 4,
    Count                                          = 5,
    EQuartzCommandDelegateSubType                  = 6

};


// Enum  Engine.EAudioComponentPlayState
enum class EAudioComponentPlayState : uint8_t
{
    Playing                                        = 0,
    Stopped                                        = 1,
    Paused                                         = 2,
    FadingIn                                       = 3,
    FadingOut                                      = 4,
    Count                                          = 5,
    EAudioComponentPlayState                       = 6

};


// Enum  Engine.EPlaneConstraintAxisSetting
enum class EPlaneConstraintAxisSetting : uint8_t
{
    Custom                                         = 0,
    X                                              = 1,
    Y                                              = 2,
    Z                                              = 3,
    UseGlobalPhysicsSetting                        = 4,
    EPlaneConstraintAxisSetting                    = 5

};


// Enum  Engine.EInterpToBehaviourType
enum class EInterpToBehaviourType : uint8_t
{
    OneShot                                        = 0,
    OneShot                                        = 1,
    Loop                                           = 2,
    PingPong                                       = 3,
    EInterpToBehaviourType                         = 4

};


// Enum  Engine.ETeleportType
enum class ETeleportType : uint8_t
{
    None                                           = 0,
    TeleportPhysics                                = 1,
    ResetPhysics                                   = 2,
    ETeleportType                                  = 3

};


// Enum  Engine.EPlatformInterfaceDataType
enum class EPlatformInterfaceDataType : uint8_t
{
    PIDT                                           = 0,
    PIDT                                           = 1,
    PIDT                                           = 2,
    PIDT                                           = 3,
    PIDT                                           = 4,
    PIDT                                           = 5,
    PIDT                                           = 6

};


// Enum  Engine.EMovementMode
enum class EMovementMode : uint8_t
{
    MOVE                                           = 0,
    MOVE                                           = 1,
    MOVE                                           = 2,
    MOVE                                           = 3,
    MOVE                                           = 4,
    MOVE                                           = 5,
    MOVE                                           = 6,
    MOVE                                           = 7

};


// Enum  Engine.ENetworkFailure
enum class ENetworkFailure : uint8_t
{
    NetDriverAlreadyExists                         = 0,
    NetDriverCreateFailure                         = 1,
    NetDriverListenFailure                         = 2,
    ConnectionLost                                 = 3,
    ConnectionTimeout                              = 4,
    FailureReceived                                = 5,
    OutdatedClient                                 = 6,
    OutdatedServer                                 = 7,
    PendingConnectionFailure                       = 8,
    NetGuidMismatch                                = 9,
    NetChecksumMismatch                            = 10,
    ENetworkFailure                                = 11

};


// Enum  Engine.ETravelFailure
enum class ETravelFailure : uint8_t
{
    NoLevel                                        = 0,
    LoadMapFailure                                 = 1,
    InvalidURL                                     = 2,
    PackageMissing                                 = 3,
    PackageVersion                                 = 4,
    NoDownload                                     = 5,
    TravelFailure                                  = 6,
    CheatCommands                                  = 7,
    PendingNetGameCreateFailure                    = 8,
    CloudSaveFailure                               = 9,
    ServerTravelFailure                            = 10,
    ClientTravelFailure                            = 11,
    ETravelFailure                                 = 12

};


// Enum  Engine.EScreenOrientation
enum class EScreenOrientation : uint8_t
{
    Unknown                                        = 0,
    Portrait                                       = 1,
    PortraitUpsideDown                             = 2,
    LandscapeLeft                                  = 3,
    LandscapeRight                                 = 4,
    FaceUp                                         = 5,
    FaceDown                                       = 6,
    EScreenOrientation                             = 7

};


// Enum  Engine.EApplicationState
enum class EApplicationState : uint8_t
{
    Unknown                                        = 0,
    Inactive                                       = 1,
    Background                                     = 2,
    Active                                         = 3,
    EApplicationState                              = 4

};


// Enum  Engine.EObjectTypeQuery
enum class EObjectTypeQuery : uint8_t
{
    ObjectTypeQuery1                               = 0,
    ObjectTypeQuery2                               = 1,
    ObjectTypeQuery3                               = 2,
    ObjectTypeQuery4                               = 3,
    ObjectTypeQuery5                               = 4,
    ObjectTypeQuery6                               = 5,
    ObjectTypeQuery7                               = 6,
    ObjectTypeQuery8                               = 7,
    ObjectTypeQuery9                               = 8,
    ObjectTypeQuery10                              = 9,
    ObjectTypeQuery11                              = 10,
    ObjectTypeQuery12                              = 11,
    ObjectTypeQuery13                              = 12,
    ObjectTypeQuery14                              = 13,
    ObjectTypeQuery15                              = 14,
    ObjectTypeQuery16                              = 15,
    ObjectTypeQuery17                              = 16,
    ObjectTypeQuery18                              = 17,
    ObjectTypeQuery19                              = 18,
    ObjectTypeQuery20                              = 19,
    ObjectTypeQuery21                              = 20,
    ObjectTypeQuery22                              = 21,
    ObjectTypeQuery23                              = 22,
    ObjectTypeQuery24                              = 23,
    ObjectTypeQuery25                              = 24,
    ObjectTypeQuery26                              = 25,
    ObjectTypeQuery27                              = 26,
    ObjectTypeQuery28                              = 27,
    ObjectTypeQuery29                              = 28,
    ObjectTypeQuery30                              = 29,
    ObjectTypeQuery31                              = 30,
    ObjectTypeQuery32                              = 31,
    ObjectTypeQuery                                = 32,
    EObjectTypeQuery                               = 33

};


// Enum  Engine.EDrawDebugTrace
enum class EDrawDebugTrace : uint8_t
{
    None                                           = 0,
    ForOneFrame                                    = 1,
    ForDuration                                    = 2,
    Persistent                                     = 3,
    EDrawDebugTrace                                = 4

};


// Enum  Engine.ETraceTypeQuery
enum class ETraceTypeQuery : uint8_t
{
    TraceTypeQuery1                                = 0,
    TraceTypeQuery2                                = 1,
    TraceTypeQuery3                                = 2,
    TraceTypeQuery4                                = 3,
    TraceTypeQuery5                                = 4,
    TraceTypeQuery6                                = 5,
    TraceTypeQuery7                                = 6,
    TraceTypeQuery8                                = 7,
    TraceTypeQuery9                                = 8,
    TraceTypeQuery10                               = 9,
    TraceTypeQuery11                               = 10,
    TraceTypeQuery12                               = 11,
    TraceTypeQuery13                               = 12,
    TraceTypeQuery14                               = 13,
    TraceTypeQuery15                               = 14,
    TraceTypeQuery16                               = 15,
    TraceTypeQuery17                               = 16,
    TraceTypeQuery18                               = 17,
    TraceTypeQuery19                               = 18,
    TraceTypeQuery20                               = 19,
    TraceTypeQuery21                               = 20,
    TraceTypeQuery22                               = 21,
    TraceTypeQuery23                               = 22,
    TraceTypeQuery24                               = 23,
    TraceTypeQuery25                               = 24,
    TraceTypeQuery26                               = 25,
    TraceTypeQuery27                               = 26,
    TraceTypeQuery28                               = 27,
    TraceTypeQuery29                               = 28,
    TraceTypeQuery30                               = 29,
    TraceTypeQuery31                               = 30,
    TraceTypeQuery32                               = 31,
    TraceTypeQuery                                 = 32,
    ETraceTypeQuery                                = 33

};


// Enum  Engine.EMoveComponentAction
enum class EMoveComponentAction : uint8_t
{
    Move                                           = 0,
    Stop                                           = 1,
    Return                                         = 2,
    EMoveComponentAction                           = 3

};


// Enum  Engine.EQuitPreference
enum class EQuitPreference : uint8_t
{
    Quit                                           = 0,
    Background                                     = 1,
    EQuitPreference                                = 2

};


// Enum  GameplayAbilities.EGameplayEffectGrantedAbilityRemovePolicy
enum class EGameplayEffectGrantedAbilityRemovePolicy : uint8_t
{
    CancelAbilityImmediately                       = 0,
    RemoveAbilityOnEnd                             = 1,
    DoNothing                                      = 2,
    EGameplayEffectGrantedAbilityRemovePolicy      = 3

};


// Enum  DataRegistry.EDataRegistryAcquireStatus
enum class EDataRegistryAcquireStatus : uint8_t
{
    NotStarted                                     = 0,
    WaitingForInitialAcquire                       = 1,
    InitialAcquireFinished                         = 2,
    WaitingForResources                            = 3,
    AcquireFinished                                = 4,
    AcquireError                                   = 5,
    DoesNotExist                                   = 6,
    EDataRegistryAcquireStatus                     = 7

};


// Enum  GameplayAbilities.EGameplayEffectAttributeCaptureSource
enum class EGameplayEffectAttributeCaptureSource : uint8_t
{
    Source                                         = 0,
    Target                                         = 1,
    EGameplayEffectAttributeCaptureSource          = 2

};


// Enum  GameplayTasks.ETaskResourceOverlapPolicy
enum class ETaskResourceOverlapPolicy : uint8_t
{
    StartOnTop                                     = 0,
    StartAtEnd                                     = 1,
    ETaskResourceOverlapPolicy                     = 2

};


// Enum  GameplayTasks.EGameplayTaskRunResult
enum class EGameplayTaskRunResult : uint8_t
{
    Error                                          = 0,
    Failed                                         = 1,
    Success                                        = 2,
    Success                                        = 3,
    Success                                        = 4,
    EGameplayTaskRunResult                         = 5

};


// Enum  GameplayAbilities.EGameplayAbilityActivationMode
enum class EGameplayAbilityActivationMode : uint8_t
{
    Authority                                      = 0,
    NonAuthority                                   = 1,
    Predicting                                     = 2,
    Confirmed                                      = 3,
    Rejected                                       = 4,
    EGameplayAbilityActivationMode                 = 5

};


// Enum  GameplayAbilities.EAbilityGenericReplicatedEvent
enum class EAbilityGenericReplicatedEvent : uint8_t
{
    GenericConfirm                                 = 0,
    GenericCancel                                  = 1,
    InputPressed                                   = 2,
    InputReleased                                  = 3,
    GenericSignalFromClient                        = 4,
    GenericSignalFromServer                        = 5,
    GameCustom1                                    = 6,
    GameCustom2                                    = 7,
    GameCustom3                                    = 8,
    GameCustom4                                    = 9,
    GameCustom5                                    = 10,
    GameCustom6                                    = 11,
    MAX                                            = 12

};


// Enum  Engine.EFastArraySerializerDeltaFlags
enum class EFastArraySerializerDeltaFlags : uint8_t
{
    None                                           = 0,
    HasBeenSerialized                              = 1,
    HasDeltaBeenRequested                          = 2,
    IsUsingDeltaSerialization                      = 4,
    EFastArraySerializerDeltaFlags                 = 5

};


// Enum  GameplayAbilities.EGameplayCueEvent
enum class EGameplayCueEvent : uint8_t
{
    OnActive                                       = 0,
    WhileActive                                    = 1,
    Executed                                       = 2,
    Removed                                        = 3,
    EGameplayCueEvent                              = 4

};


// Enum  GameplayAbilities.EGameplayEffectReplicationMode
enum class EGameplayEffectReplicationMode : uint8_t
{
    Minimal                                        = 0,
    Mixed                                          = 1,
    Full                                           = 2,
    EGameplayEffectReplicationMode                 = 3

};


// Enum  GameplayAbilities.EAbilityTaskWaitState
enum class EAbilityTaskWaitState : uint8_t
{
    WaitingOnGame                                  = 1,
    WaitingOnUser                                  = 2,
    WaitingOnAvatar                                = 4,
    EAbilityTaskWaitState                          = 5

};


// Enum  GameplayAbilities.ERootMotionMoveToActorTargetOffsetType
enum class ERootMotionMoveToActorTargetOffsetType : uint8_t
{
    AlignFromTargetToSource                        = 0,
    AlignToTargetForward                           = 1,
    AlignToWorldSpace                              = 2,
    ERootMotionMoveToActorTargetOffsetType         = 3

};


// Enum  GameplayAbilities.EAbilityTaskNetSyncType
enum class EAbilityTaskNetSyncType : uint8_t
{
    BothWait                                       = 0,
    OnlyServerWait                                 = 1,
    OnlyClientWait                                 = 2,
    EAbilityTaskNetSyncType                        = 3

};


// Enum  GameplayAbilities.EWaitAttributeChangeComparison
enum class EWaitAttributeChangeComparison : uint8_t
{
    None                                           = 0,
    GreaterThan                                    = 1,
    LessThan                                       = 2,
    GreaterThanOrEqualTo                           = 3,
    LessThanOrEqualTo                              = 4,
    NotEqualTo                                     = 5,
    ExactlyEqualTo                                 = 6,
    MAX                                            = 7

};


// Enum  GameplayAbilities.EGameplayAbilityInputBinds
enum class EGameplayAbilityInputBinds : uint8_t
{
    Ability1                                       = 0,
    Ability2                                       = 1,
    Ability3                                       = 2,
    Ability4                                       = 3,
    Ability5                                       = 4,
    Ability6                                       = 5,
    Ability7                                       = 6,
    Ability8                                       = 7,
    Ability9                                       = 8,
    EGameplayAbilityInputBinds                     = 9

};


// Enum  GameplayAbilities.ETargetDataFilterSelf
enum class ETargetDataFilterSelf : uint8_t
{
    TDFS                                           = 0,
    TDFS                                           = 1,
    TDFS                                           = 2,
    TDFS                                           = 3

};


// Enum  GameplayAbilities.EGameplayAbilityTargetingLocationType
enum class EGameplayAbilityTargetingLocationType : uint8_t
{
    LiteralTransform                               = 0,
    ActorTransform                                 = 1,
    SocketTransform                                = 2,
    EGameplayAbilityTargetingLocationType          = 3

};


// Enum  GameplayAbilities.EGameplayTargetingConfirmation
enum class EGameplayTargetingConfirmation : uint8_t
{
    Instant                                        = 0,
    UserConfirmed                                  = 1,
    Custom                                         = 2,
    CustomMulti                                    = 3,
    EGameplayTargetingConfirmation                 = 4

};


// Enum  GameplayAbilities.ERepAnimPositionMethod
enum class ERepAnimPositionMethod : uint8_t
{
    Position                                       = 0,
    CurrentSectionId                               = 1,
    ERepAnimPositionMethod                         = 2

};


// Enum  GameplayAbilities.EGameplayAbilityTriggerSource
enum class EGameplayAbilityTriggerSource : uint8_t
{
    GameplayEvent                                  = 0,
    OwnedTagAdded                                  = 1,
    OwnedTagPresent                                = 2,
    EGameplayAbilityTriggerSource                  = 3

};


// Enum  GameplayAbilities.EGameplayAbilityReplicationPolicy
enum class EGameplayAbilityReplicationPolicy : uint8_t
{
    ReplicateNo                                    = 0,
    ReplicateYes                                   = 1,
    EGameplayAbilityReplicationPolicy              = 2

};


// Enum  GameplayAbilities.EGameplayAbilityNetSecurityPolicy
enum class EGameplayAbilityNetSecurityPolicy : uint8_t
{
    ClientOrServer                                 = 0,
    ServerOnlyExecution                            = 1,
    ServerOnlyTermination                          = 2,
    ServerOnly                                     = 3,
    EGameplayAbilityNetSecurityPolicy              = 4

};


// Enum  GameplayAbilities.EGameplayAbilityNetExecutionPolicy
enum class EGameplayAbilityNetExecutionPolicy : uint8_t
{
    LocalPredicted                                 = 0,
    LocalOnly                                      = 1,
    ServerInitiated                                = 2,
    ServerOnly                                     = 3,
    EGameplayAbilityNetExecutionPolicy             = 4

};


// Enum  GameplayAbilities.EGameplayAbilityInstancingPolicy
enum class EGameplayAbilityInstancingPolicy : uint8_t
{
    NonInstanced                                   = 0,
    InstancedPerActor                              = 1,
    InstancedPerExecution                          = 2,
    EGameplayAbilityInstancingPolicy               = 3

};


// Enum  GameplayAbilities.EGameplayCuePayloadType
enum class EGameplayCuePayloadType : uint8_t
{
    CueParameters                                  = 0,
    FromSpec                                       = 1,
    EGameplayCuePayloadType                        = 2

};


// Enum  GameplayAbilities.EGameplayEffectPeriodInhibitionRemovedPolicy
enum class EGameplayEffectPeriodInhibitionRemovedPolicy : uint8_t
{
    NeverReset                                     = 0,
    ResetPeriod                                    = 1,
    ExecuteAndResetPeriod                          = 2,
    EGameplayEffectPeriodInhibitionRemovedPolicy   = 3

};


// Enum  GameplayAbilities.EGameplayEffectStackingExpirationPolicy
enum class EGameplayEffectStackingExpirationPolicy : uint8_t
{
    ClearEntireStack                               = 0,
    RemoveSingleStackAndRefreshDuration            = 1,
    RefreshDuration                                = 2,
    EGameplayEffectStackingExpirationPolicy        = 3

};


// Enum  GameplayAbilities.EGameplayEffectStackingPeriodPolicy
enum class EGameplayEffectStackingPeriodPolicy : uint8_t
{
    ResetOnSuccessfulApplication                   = 0,
    NeverReset                                     = 1,
    EGameplayEffectStackingPeriodPolicy            = 2

};


// Enum  GameplayAbilities.EGameplayEffectStackingDurationPolicy
enum class EGameplayEffectStackingDurationPolicy : uint8_t
{
    RefreshOnSuccessfulApplication                 = 0,
    NeverRefresh                                   = 1,
    EGameplayEffectStackingDurationPolicy          = 2

};


// Enum  GameplayAbilities.EGameplayEffectDurationType
enum class EGameplayEffectDurationType : uint8_t
{
    Instant                                        = 0,
    Infinite                                       = 1,
    HasDuration                                    = 2,
    EGameplayEffectDurationType                    = 3

};


// Enum  GameplayAbilities.EGameplayEffectScopedModifierAggregatorType
enum class EGameplayEffectScopedModifierAggregatorType : uint8_t
{
    CapturedAttributeBacked                        = 0,
    Transient                                      = 1,
    EGameplayEffectScopedModifierAggregatorType    = 2

};


// Enum  GameplayAbilities.EAttributeBasedFloatCalculationType
enum class EAttributeBasedFloatCalculationType : uint8_t
{
    AttributeMagnitude                             = 0,
    AttributeBaseValue                             = 1,
    AttributeBonusMagnitude                        = 2,
    AttributeMagnitudeEvaluatedUpToChannel         = 3,
    EAttributeBasedFloatCalculationType            = 4

};


// Enum  GameplayAbilities.EGameplayEffectMagnitudeCalculation
enum class EGameplayEffectMagnitudeCalculation : uint8_t
{
    ScalableFloat                                  = 0,
    AttributeBased                                 = 1,
    CustomCalculationClass                         = 2,
    SetByCaller                                    = 3,
    FloatCurve                                     = 4,
    EGameplayEffectMagnitudeCalculation            = 5

};


// Enum  GameplayAbilities.EGameplayTagEventType
enum class EGameplayTagEventType : uint8_t
{
    NewOrRemoved                                   = 0,
    AnyCountChange                                 = 1,
    EGameplayTagEventType                          = 2

};


// Enum  GameplayAbilities.EGameplayEffectStackingType
enum class EGameplayEffectStackingType : uint8_t
{
    None                                           = 0,
    AggregateBySource                              = 1,
    AggregateByTarget                              = 2,
    EGameplayEffectStackingType                    = 3

};


// Enum  GameplayAbilities.EGameplayModOp
enum class EGameplayModOp : uint8_t
{
    Additive                                       = 0,
    Multiplicitive                                 = 1,
    Division                                       = 2,
    Override                                       = 3,
    Minimum                                        = 4,
    Maximum                                        = 5,
    AddUnstacked                                   = 6,
    MulUnstacked                                   = 7,
    Max                                            = 8,
    EGameplayModOp                                 = 9

};


// Enum  GameplayAbilities.EGameplayModEvaluationChannel
enum class EGameplayModEvaluationChannel : uint8_t
{
    Channel0                                       = 0,
    Channel1                                       = 1,
    Channel2                                       = 2,
    Channel3                                       = 3,
    Channel4                                       = 4,
    Channel5                                       = 5,
    Channel6                                       = 6,
    Channel7                                       = 7,
    Channel8                                       = 8,
    Channel9                                       = 9,
    Channel                                        = 10,
    EGameplayModEvaluationChannel                  = 11

};


// Enum  DataRegistry.EMetaDataRegistrySourceAssetUsage
enum class EMetaDataRegistrySourceAssetUsage : uint8_t
{
    NoAssets                                       = 0,
    SearchAssets                                   = 1,
    RegisterAssets                                 = 2,
    SearchAndRegisterAssets                        = 3,
    EMetaDataRegistrySourceAssetUsage              = 4

};


// Enum  DataRegistry.EDataRegistrySubsystemGetItemResult
enum class EDataRegistrySubsystemGetItemResult : uint8_t
{
    Found                                          = 0,
    NotFound                                       = 1,
    EDataRegistrySubsystemGetItemResult            = 2

};


// Enum  DataRegistry.EDataRegistryAvailability
enum class EDataRegistryAvailability : uint8_t
{
    DoesNotExist                                   = 0,
    Unknown                                        = 1,
    Remote                                         = 2,
    OnDisk                                         = 3,
    LocalAsset                                     = 4,
    PreCached                                      = 5,
    EDataRegistryAvailability                      = 6

};


// Enum  Qos.EQosResponseType
enum class EQosResponseType : uint8_t
{
    NoResponse                                     = 0,
    Success                                        = 1,
    Failure                                        = 2,
    EQosResponseType                               = 3

};


// Enum  Qos.EQosCompletionResult
enum class EQosCompletionResult : uint8_t
{
    Invalid                                        = 0,
    Success                                        = 1,
    Failure                                        = 2,
    Canceled                                       = 3,
    EQosCompletionResult                           = 4

};


// Enum  Qos.EQosDatacenterResult
enum class EQosDatacenterResult : uint8_t
{
    Invalid                                        = 0,
    Success                                        = 1,
    Incomplete                                     = 2,
    EQosDatacenterResult                           = 3

};


// Enum  Party.EApprovalAction
enum class EApprovalAction : uint8_t
{
    Approve                                        = 0,
    Enqueue                                        = 1,
    EnqueueAndStartBeacon                          = 2,
    Deny                                           = 3,
    EApprovalAction                                = 4

};


// Enum  Party.EPartyJoinDenialReason
enum class EPartyJoinDenialReason : uint8_t
{
    NoReason                                       = 0,
    JoinAttemptAborted                             = 1,
    Busy                                           = 2,
    OssUnavailable                                 = 3,
    PartyFull                                      = 4,
    GameFull                                       = 5,
    NotPartyLeader                                 = 6,
    PartyPrivate                                   = 7,
    JoinerCrossplayRestricted                      = 8,
    MemberCrossplayRestricted                      = 9,
    GameModeRestricted                             = 10,
    Banned                                         = 11,
    NotLoggedIn                                    = 12,
    CheckingForRejoin                              = 13,
    TargetUserMissingPresence                      = 14,
    TargetUserUnjoinable                           = 15,
    TargetUserAway                                 = 16,
    AlreadyLeaderInPlatformSession                 = 17,
    TargetUserPlayingDifferentGame                 = 18,
    TargetUserMissingPlatformSession               = 19,
    PlatformSessionMissingJoinInfo                 = 20,
    FailedToStartFindConsoleSession                = 21,
    MissingPartyClassForTypeId                     = 22,
    TargetUserBlocked                              = 23,
    CustomReason0                                  = 24,
    CustomReason1                                  = 25,
    CustomReason2                                  = 26,
    CustomReason3                                  = 27,
    CustomReason4                                  = 28,
    CustomReason5                                  = 29,
    CustomReason6                                  = 30,
    CustomReason7                                  = 31,
    CustomReason8                                  = 32,
    CustomReason9                                  = 33,
    CustomReason10                                 = 34,
    CustomReason11                                 = 35,
    CustomReason12                                 = 36,
    CustomReason13                                 = 37,
    CustomReason14                                 = 38,
    CustomReason15                                 = 39,
    CustomReason16                                 = 40,
    CustomReason17                                 = 41,
    CustomReason18                                 = 42,
    CustomReason19                                 = 43,
    CustomReason20                                 = 44,
    CustomReason21                                 = 45,
    CustomReason22                                 = 46,
    CustomReason23                                 = 47,
    CustomReason24                                 = 48,
    CustomReason25                                 = 49,
    CustomReason26                                 = 50,
    CustomReason27                                 = 51,
    CustomReason28                                 = 52,
    CustomReason29                                 = 53,
    CustomReason30                                 = 54,
    CustomReason31                                 = 55,
    CustomReason32                                 = 56,
    CustomReason33                                 = 57,
    CustomReason34                                 = 58,
    CustomReason35                                 = 59,
    CustomReason36                                 = 60,
    CustomReason37                                 = 61,
    CustomReason38                                 = 62,
    CustomReason39                                 = 63,
    MAX                                            = 64

};


// Enum  Party.EPartyInviteRestriction
enum class EPartyInviteRestriction : uint8_t
{
    AnyMember                                      = 0,
    LeaderOnly                                     = 1,
    NoInvites                                      = 2,
    EPartyInviteRestriction                        = 3

};


// Enum  Party.EPartyType
enum class EPartyType : uint8_t
{
    Public                                         = 0,
    FriendsOnly                                    = 1,
    Private                                        = 2,
    EPartyType                                     = 3

};


// Enum  Party.ESocialChannelType
enum class ESocialChannelType : uint8_t
{
    General                                        = 0,
    Founder                                        = 1,
    Party                                          = 2,
    Team                                           = 3,
    System                                         = 4,
    Private                                        = 5,
    ESocialChannelType                             = 6

};


// Enum  Party.EPlatformIconDisplayRule
enum class EPlatformIconDisplayRule : uint8_t
{
    Always                                         = 0,
    AlwaysIfDifferent                              = 1,
    AlwaysWhenInCrossplayParty                     = 2,
    AlwaysIfDifferentWhenInCrossplayParty          = 3,
    Never                                          = 4,
    EPlatformIconDisplayRule                       = 5

};


// Enum  Party.ECrossplayPreference
enum class ECrossplayPreference : uint8_t
{
    NoSelection                                    = 0,
    OptedIn                                        = 1,
    OptedOut                                       = 2,
    OptedOutRestricted                             = 3,
    ECrossplayPreference                           = 4

};


// Enum  Party.ESocialRelationship
enum class ESocialRelationship : uint8_t
{
    Any                                            = 0,
    FriendInviteReceived                           = 1,
    FriendInviteSent                               = 2,
    PartyInvite                                    = 3,
    Friend                                         = 4,
    BlockedPlayer                                  = 5,
    SuggestedFriend                                = 6,
    RecentPlayer                                   = 7,
    ESocialRelationship                            = 8

};


// Enum  Party.ESocialSubsystem
enum class ESocialSubsystem : uint8_t
{
    Primary                                        = 0,
    Platform                                       = 1,
    MAX                                            = 2

};


// Enum  Lobby.ELobbyBeaconJoinState
enum class ELobbyBeaconJoinState : uint8_t
{
    None                                           = 0,
    SentJoinRequest                                = 1,
    JoinRequestAcknowledged                        = 2,
    ELobbyBeaconJoinState                          = 3

};


// Enum  Hotfix.EHotfixResult
enum class EHotfixResult : uint8_t
{
    Failed                                         = 0,
    Success                                        = 1,
    SuccessNoChange                                = 2,
    SuccessNeedsReload                             = 3,
    SuccessNeedsRelaunch                           = 4,
    EHotfixResult                                  = 5

};


// Enum  Hotfix.EUpdateCompletionStatus
enum class EUpdateCompletionStatus : uint8_t
{
    UpdateUnknown                                  = 0,
    UpdateSuccess                                  = 1,
    UpdateSuccess                                  = 2,
    UpdateSuccess                                  = 3,
    UpdateSuccess                                  = 4,
    UpdateSuccess                                  = 5,
    UpdateFailure                                  = 6,
    UpdateFailure                                  = 7,
    UpdateFailure                                  = 8,
    EUpdateCompletionStatus                        = 9

};


// Enum  Hotfix.EUpdateState
enum class EUpdateState : uint8_t
{
    UpdateIdle                                     = 0,
    UpdatePending                                  = 1,
    CheckingForPatch                               = 2,
    DetectingPlatformEnvironment                   = 3,
    CheckingForHotfix                              = 4,
    WaitingOnInitialLoad                           = 5,
    InitialLoadComplete                            = 6,
    UpdateComplete                                 = 7,
    EUpdateState                                   = 8

};


// Enum  Rejoin.ERejoinStatus
enum class ERejoinStatus : uint8_t
{
    NoMatchToRejoin                                = 0,
    RejoinAvailable                                = 1,
    UpdatingStatus                                 = 2,
    NeedsRecheck                                   = 3,
    NoMatchToRejoin                                = 4,
    ERejoinStatus                                  = 5

};


// Enum  OnlineSubsystem.EInAppPurchaseState
enum class EInAppPurchaseState : uint8_t
{
    Unknown                                        = 0,
    Success                                        = 1,
    Failed                                         = 2,
    Cancelled                                      = 3,
    Invalid                                        = 4,
    NotAllowed                                     = 5,
    Restored                                       = 6,
    AlreadyOwned                                   = 7,
    EInAppPurchaseState                            = 8

};


// Enum  OnlineSubsystem.EMPMatchOutcome
enum class EMPMatchOutcome : uint8_t
{
    None                                           = 0,
    Quit                                           = 1,
    Won                                            = 2,
    Lost                                           = 3,
    Tied                                           = 4,
    TimeExpired                                    = 5,
    First                                          = 6,
    Second                                         = 7,
    Third                                          = 8,
    Fourth                                         = 9,
    EMPMatchOutcome                                = 10

};


// Enum  OnlineSubsystemUtils.EInAppPurchaseStatus
enum class EInAppPurchaseStatus : uint8_t
{
    Invalid                                        = 0,
    Failed                                         = 1,
    Deferred                                       = 2,
    Canceled                                       = 3,
    Purchased                                      = 4,
    Restored                                       = 5,
    EInAppPurchaseStatus                           = 6

};


// Enum  OnlineSubsystemUtils.EOnlineProxyStoreOfferDiscountType
enum class EOnlineProxyStoreOfferDiscountType : uint8_t
{
    NotOnSale                                      = 0,
    Percentage                                     = 1,
    DiscountAmount                                 = 2,
    PayAmount                                      = 3,
    EOnlineProxyStoreOfferDiscountType             = 4

};


// Enum  OnlineSubsystemUtils.EBeaconConnectionState
enum class EBeaconConnectionState : uint8_t
{
    Invalid                                        = 0,
    Closed                                         = 1,
    Pending                                        = 2,
    Open                                           = 3,
    EBeaconConnectionState                         = 4

};


// Enum  OnlineSubsystemUtils.EClientRequestType
enum class EClientRequestType : uint8_t
{
    NonePending                                    = 0,
    ExistingSessionReservation                     = 1,
    ReservationUpdate                              = 2,
    EmptyServerReservation                         = 3,
    Reconnect                                      = 4,
    Abandon                                        = 5,
    ReservationRemoveMembers                       = 6,
    AddOrUpdateReservation                         = 7,
    EClientRequestType                             = 8

};


// Enum  OnlineSubsystemUtils.EPartyReservationResult
enum class EPartyReservationResult : uint8_t
{
    NoResult                                       = 0,
    RequestPending                                 = 1,
    GeneralError                                   = 2,
    PartyLimitReached                              = 3,
    IncorrectPlayerCount                           = 4,
    RequestTimedOut                                = 5,
    ReservationDuplicate                           = 6,
    ReservationNotFound                            = 7,
    ReservationAccepted                            = 8,
    ReservationDenied                              = 9,
    ReservationDenied                              = 10,
    ReservationDenied                              = 11,
    ReservationRequestCanceled                     = 12,
    ReservationInvalid                             = 13,
    BadSessionId                                   = 14,
    ReservationDenied                              = 15,
    EPartyReservationResult                        = 16

};


// Enum  OnlineSubsystemUtils.ESpectatorClientRequestType
enum class ESpectatorClientRequestType : uint8_t
{
    NonePending                                    = 0,
    ExistingSessionReservation                     = 1,
    ReservationUpdate                              = 2,
    EmptyServerReservation                         = 3,
    Reconnect                                      = 4,
    Abandon                                        = 5,
    ESpectatorClientRequestType                    = 6

};


// Enum  OnlineSubsystemUtils.ESpectatorReservationResult
enum class ESpectatorReservationResult : uint8_t
{
    NoResult                                       = 0,
    RequestPending                                 = 1,
    GeneralError                                   = 2,
    SpectatorLimitReached                          = 3,
    IncorrectPlayerCount                           = 4,
    RequestTimedOut                                = 5,
    ReservationDuplicate                           = 6,
    ReservationNotFound                            = 7,
    ReservationAccepted                            = 8,
    ReservationDenied                              = 9,
    ReservationDenied                              = 10,
    ReservationDenied                              = 11,
    ReservationRequestCanceled                     = 12,
    ReservationInvalid                             = 13,
    BadSessionId                                   = 14,
    ReservationDenied                              = 15,
    ESpectatorReservationResult                    = 16

};


// Enum  RemoteSession.ERemoteSessionConnectionChange
enum class ERemoteSessionConnectionChange : uint8_t
{
    Connected                                      = 0,
    Disconnected                                   = 1,
    ERemoteSessionConnectionChange                 = 2

};


// Enum  RemoteSession.ERemoteSessionChannelChange
enum class ERemoteSessionChannelChange : uint8_t
{
    Created                                        = 0,
    Destroyed                                      = 1,
    ERemoteSessionChannelChange                    = 2

};


// Enum  RemoteSession.ERemoteSessionChannelMode
enum class ERemoteSessionChannelMode : uint8_t
{
    Unknown                                        = 0,
    Read                                           = 1,
    Write                                          = 2,
    MaxValue                                       = 3,
    ERemoteSessionChannelMode                      = 4

};


// Enum  AppleImageUtils.EAppleTextureType
enum class EAppleTextureType : uint8_t
{
    Unknown                                        = 0,
    Image                                          = 1,
    PixelBuffer                                    = 2,
    Surface                                        = 3,
    MetalTexture                                   = 4,
    EAppleTextureType                              = 5

};


// Enum  AppleImageUtils.ETextureRotationDirection
enum class ETextureRotationDirection : uint8_t
{
    None                                           = 0,
    Left                                           = 1,
    Right                                          = 2,
    Down                                           = 3,
    LeftMirrored                                   = 4,
    RightMirrored                                  = 5,
    DownMirrored                                   = 6,
    UpMirrored                                     = 7,
    ETextureRotationDirection                      = 8

};


// Enum  MediaIOCore.EFileMediaOutputPixelFormat
enum class EFileMediaOutputPixelFormat : uint8_t
{
    B8G8R8A8                                       = 0,
    FloatRGBA                                      = 1,
    EFileMediaOutputPixelFormat                    = 2

};


// Enum  MediaIOCore.EMediaCaptureCroppingType
enum class EMediaCaptureCroppingType : uint8_t
{
    None                                           = 0,
    Center                                         = 1,
    TopLeft                                        = 2,
    Custom                                         = 3,
    EMediaCaptureCroppingType                      = 4

};


// Enum  MediaIOCore.EMediaCaptureState
enum class EMediaCaptureState : uint8_t
{
    Error                                          = 0,
    Capturing                                      = 1,
    Preparing                                      = 2,
    StopRequested                                  = 3,
    Stopped                                        = 4,
    EMediaCaptureState                             = 5

};


// Enum  MediaIOCore.EMediaIOReferenceType
enum class EMediaIOReferenceType : uint8_t
{
    FreeRun                                        = 0,
    External                                       = 1,
    Input                                          = 2,
    EMediaIOReferenceType                          = 3

};


// Enum  MediaIOCore.EMediaIOOutputType
enum class EMediaIOOutputType : uint8_t
{
    Fill                                           = 0,
    FillAndKey                                     = 1,
    EMediaIOOutputType                             = 2

};


// Enum  MediaIOCore.EMediaIOInputType
enum class EMediaIOInputType : uint8_t
{
    Fill                                           = 0,
    FillAndKey                                     = 1,
    EMediaIOInputType                              = 2

};


// Enum  MediaIOCore.EMediaIOTimecodeFormat
enum class EMediaIOTimecodeFormat : uint8_t
{
    None                                           = 0,
    LTC                                            = 1,
    VITC                                           = 2,
    EMediaIOTimecodeFormat                         = 3

};


// Enum  MediaIOCore.EMediaIOStandardType
enum class EMediaIOStandardType : uint8_t
{
    Progressive                                    = 0,
    Interlaced                                     = 1,
    ProgressiveSegmentedFrame                      = 2,
    EMediaIOStandardType                           = 3

};


// Enum  MediaIOCore.EMediaIOQuadLinkTransportType
enum class EMediaIOQuadLinkTransportType : uint8_t
{
    SquareDivision                                 = 0,
    TwoSampleInterleave                            = 1,
    EMediaIOQuadLinkTransportType                  = 2

};


// Enum  MediaIOCore.EMediaIOTransportType
enum class EMediaIOTransportType : uint8_t
{
    SingleLink                                     = 0,
    DualLink                                       = 1,
    QuadLink                                       = 2,
    HDMI                                           = 3,
    EMediaIOTransportType                          = 4

};


// Enum  RemoteControl.ERCAccess
enum class ERCAccess : uint8_t
{
    NO                                             = 0,
    READ                                           = 1,
    WRITE                                          = 2,
    WRITE                                          = 3,
    ERCAccess                                      = 4

};


// Enum  RemoteControl.EExposedFieldType
enum class EExposedFieldType : uint8_t
{
    Invalid                                        = 0,
    Property                                       = 1,
    Function                                       = 2,
    EExposedFieldType                              = 3

};


// Enum  RemoteControl.ERemoteControlEnum
enum class ERemoteControlEnum : uint8_t
{
    E                                              = 0,
    E                                              = 1,
    E                                              = 2,
    E                                              = 3

};


// Enum  RemoteControl.ERemoteControlEnumClass
enum class ERemoteControlEnumClass : uint8_t
{
    E                                              = 0,
    E                                              = 1,
    E                                              = 2,
    E                                              = 3

};


// Enum  RemoteControl.ERCBindingStatus
enum class ERCBindingStatus : uint8_t
{
    Unassigned                                     = 0,
    Awaiting                                       = 1,
    Bound                                          = 2,
    ERCBindingStatus                               = 3

};


// Enum  WebRemoteControl.ERemoteControlEvent
enum class ERemoteControlEvent : uint8_t
{
    PreObjectPropertyChanged                       = 0,
    ObjectPropertyChanged                          = 1,
    EventCount                                     = 2,
    ERemoteControlEvent                            = 3

};


// Enum  WebRemoteControl.ERemoteControlHttpVerbs
enum class ERemoteControlHttpVerbs : uint8_t
{
    None                                           = 0,
    Get                                            = 1,
    Post                                           = 2,
    Put                                            = 4,
    Patch                                          = 8,
    Delete                                         = 16,
    Options                                        = 32,
    ERemoteControlHttpVerbs                        = 33

};


// Enum  PlatformUI.EPlatformUIHotFixAvailability
enum class EPlatformUIHotFixAvailability : uint8_t
{
    Unknown                                        = 0,
    UpdateRequired                                 = 1,
    Ready                                          = 2,
    EPlatformUIHotFixAvailability                  = 3

};


// Enum  PlatformUI.LoadingIndicatorType
enum class LoadingIndicatorType : uint8_t
{
    INDETERMINATE                                  = 0,
    PROGRESS                                       = 1,
    LoadingIndicatorType                           = 2

};


// Enum  RTPPlugin.ERTPEventFlags
enum class ERTPEventFlags : uint8_t
{
    None                                           = 0,
    CollectClientIpAddress                         = 1,
    SendToDatadog                                  = 2,
    SendToAp                                       = 4,
    ERTPEventFlags                                 = 5

};


// Enum  AkAudio.EAkCallbackType
enum class EAkCallbackType : uint8_t
{
    EndOfEvent                                     = 0,
    Marker                                         = 2,
    Duration                                       = 3,
    Starvation                                     = 5,
    MusicPlayStarted                               = 7,
    MusicSyncBeat                                  = 8,
    MusicSyncBar                                   = 9,
    MusicSyncEntry                                 = 10,
    MusicSyncExit                                  = 11,
    MusicSyncGrid                                  = 12,
    MusicSyncUserCue                               = 13,
    MusicSyncPoint                                 = 14,
    MIDIEvent                                      = 16,
    EAkCallbackType                                = 17

};


// Enum  AkAudio.EAkResult
enum class EAkResult : uint8_t
{
    NotImplemented                                 = 0,
    Success                                        = 1,
    Fail                                           = 2,
    PartialSuccess                                 = 3,
    NotCompatible                                  = 4,
    AlreadyConnected                               = 5,
    InvalidFile                                    = 7,
    AudioFileHeaderTooLarge                        = 8,
    MaxReached                                     = 9,
    InvalidID                                      = 14,
    IDNotFound                                     = 15,
    InvalidInstanceID                              = 16,
    NoMoreData                                     = 17,
    InvalidStateGroup                              = 20,
    ChildAlreadyHasAParent                         = 21,
    InvalidLanguage                                = 22,
    CannotAddItseflAsAChild                        = 23,
    InvalidParameter                               = 31,
    ElementAlreadyInList                           = 35,
    PathNotFound                                   = 36,
    PathNoVertices                                 = 37,
    PathNotRunning                                 = 38,
    PathNotPaused                                  = 39,
    PathNodeAlreadyInList                          = 40,
    PathNodeNotInList                              = 41,
    DataNeeded                                     = 43,
    NoDataNeeded                                   = 44,
    DataReady                                      = 45,
    NoDataReady                                    = 46,
    InsufficientMemory                             = 52,
    Cancelled                                      = 53,
    UnknownBankID                                  = 54,
    BankReadError                                  = 56,
    InvalidSwitchType                              = 57,
    FormatNotReady                                 = 63,
    WrongBankVersion                               = 64,
    FileNotFound                                   = 66,
    DeviceNotReady                                 = 67,
    BankAlreadyLoaded                              = 69,
    RenderedFX                                     = 71,
    ProcessNeeded                                  = 72,
    ProcessDone                                    = 73,
    MemManagerNotInitialized                       = 74,
    StreamMgrNotInitialized                        = 75,
    SSEInstructionsNotSupported                    = 76,
    Busy                                           = 77,
    UnsupportedChannelConfig                       = 78,
    PluginMediaNotAvailable                        = 79,
    MustBeVirtualized                              = 80,
    CommandTooLarge                                = 81,
    RejectedByFilter                               = 82,
    InvalidCustomPlatformName                      = 83,
    DLLCannotLoad                                  = 84,
    DLLPathNotFound                                = 85,
    NoJavaVM                                       = 86,
    OpenSLError                                    = 87,
    PluginNotRegistered                            = 88,
    DataAlignmentError                             = 89,
    EAkResult                                      = 90

};


// Enum  AkAudio.EAkAndroidAudioAPI
enum class EAkAndroidAudioAPI : uint8_t
{
    AAudio                                         = 0,
    OpenSL                                         = 1,
    EAkAndroidAudioAPI                             = 2

};


// Enum  AkAudio.EAkAudioEventDurationType
enum class EAkAudioEventDurationType : uint8_t
{
    Unknown                                        = 0,
    OneShot                                        = 1,
    Infinite                                       = 2,
    Mixed                                          = 3,
    EAkAudioEventDurationType                      = 4

};


// Enum  AkAudio.EAkAudioSessionMode
enum class EAkAudioSessionMode : uint8_t
{
    Default                                        = 0,
    VoiceChat                                      = 1,
    GameChat                                       = 2,
    VideoRecording                                 = 3,
    Measurement                                    = 4,
    MoviePlayback                                  = 5,
    VideoChat                                      = 6,
    EAkAudioSessionMode                            = 7

};


// Enum  AkAudio.EAkAudioSessionCategoryOptions
enum class EAkAudioSessionCategoryOptions : uint8_t
{
    MixWithOthers                                  = 0,
    DuckOthers                                     = 1,
    AllowBluetooth                                 = 2,
    DefaultToSpeaker                               = 3,
    EAkAudioSessionCategoryOptions                 = 4

};


// Enum  AkAudio.EAkAudioSessionCategory
enum class EAkAudioSessionCategory : uint8_t
{
    Ambient                                        = 0,
    SoloAmbient                                    = 1,
    PlayAndRecord                                  = 2,
    EAkAudioSessionCategory                        = 3

};


// Enum  AkAudio.EReflectionFilterBits
enum class EReflectionFilterBits : uint8_t
{
    Wall                                           = 0,
    Ceiling                                        = 1,
    Floor                                          = 2,
    EReflectionFilterBits                          = 3

};


// Enum  AkAudio.AkCodecId
enum class AkCodecId : uint8_t
{
    None                                           = 0,
    PCM                                            = 1,
    ADPCM                                          = 2,
    XMA                                            = 3,
    Vorbis                                         = 4,
    ATRAC9                                         = 12,
    OpusNX                                         = 17,
    AkOpus                                         = 19,
    AkOpusWEM                                      = 20,
    AkCodecId                                      = 21

};


// Enum  AkAudio.EAkMidiCcValues
enum class EAkMidiCcValues : uint8_t
{
    AkMidiCcBankSelectCoarse                       = 0,
    AkMidiCcModWheelCoarse                         = 1,
    AkMidiCcBreathCtrlCoarse                       = 2,
    AkMidiCcCtrl3Coarse                            = 3,
    AkMidiCcFootPedalCoarse                        = 4,
    AkMidiCcPortamentoCoarse                       = 5,
    AkMidiCcDataEntryCoarse                        = 6,
    AkMidiCcVolumeCoarse                           = 7,
    AkMidiCcBalanceCoarse                          = 8,
    AkMidiCcCtrl9Coarse                            = 9,
    AkMidiCcPanPositionCoarse                      = 10,
    AkMidiCcExpressionCoarse                       = 11,
    AkMidiCcEffectCtrl1Coarse                      = 12,
    AkMidiCcEffectCtrl2Coarse                      = 13,
    AkMidiCcCtrl14Coarse                           = 14,
    AkMidiCcCtrl15Coarse                           = 15,
    AkMidiCcGenSlider1                             = 16,
    AkMidiCcGenSlider2                             = 17,
    AkMidiCcGenSlider3                             = 18,
    AkMidiCcGenSlider4                             = 19,
    AkMidiCcCtrl20Coarse                           = 20,
    AkMidiCcCtrl21Coarse                           = 21,
    AkMidiCcCtrl22Coarse                           = 22,
    AkMidiCcCtrl23Coarse                           = 23,
    AkMidiCcCtrl24Coarse                           = 24,
    AkMidiCcCtrl25Coarse                           = 25,
    AkMidiCcCtrl26Coarse                           = 26,
    AkMidiCcCtrl27Coarse                           = 27,
    AkMidiCcCtrl28Coarse                           = 28,
    AkMidiCcCtrl29Coarse                           = 29,
    AkMidiCcCtrl30Coarse                           = 30,
    AkMidiCcCtrl31Coarse                           = 31,
    AkMidiCcBankSelectFine                         = 32,
    AkMidiCcModWheelFine                           = 33,
    AkMidiCcBreathCtrlFine                         = 34,
    AkMidiCcCtrl3Fine                              = 35,
    AkMidiCcFootPedalFine                          = 36,
    AkMidiCcPortamentoFine                         = 37,
    AkMidiCcDataEntryFine                          = 38,
    AkMidiCcVolumeFine                             = 39,
    AkMidiCcBalanceFine                            = 40,
    AkMidiCcCtrl9Fine                              = 41,
    AkMidiCcPanPositionFine                        = 42,
    AkMidiCcExpressionFine                         = 43,
    AkMidiCcEffectCtrl1Fine                        = 44,
    AkMidiCcEffectCtrl2Fine                        = 45,
    AkMidiCcCtrl14Fine                             = 46,
    AkMidiCcCtrl15Fine                             = 47,
    AkMidiCcCtrl20Fine                             = 52,
    AkMidiCcCtrl21Fine                             = 53,
    AkMidiCcCtrl22Fine                             = 54,
    AkMidiCcCtrl23Fine                             = 55,
    AkMidiCcCtrl24Fine                             = 56,
    AkMidiCcCtrl25Fine                             = 57,
    AkMidiCcCtrl26Fine                             = 58,
    AkMidiCcCtrl27Fine                             = 59,
    AkMidiCcCtrl28Fine                             = 60,
    AkMidiCcCtrl29Fine                             = 61,
    AkMidiCcCtrl30Fine                             = 62,
    AkMidiCcCtrl31Fine                             = 63,
    AkMidiCcHoldPedal                              = 64,
    AkMidiCcPortamentoOnOff                        = 65,
    AkMidiCcSustenutoPedal                         = 66,
    AkMidiCcSoftPedal                              = 67,
    AkMidiCcLegatoPedal                            = 68,
    AkMidiCcHoldPedal2                             = 69,
    AkMidiCcSoundVariation                         = 70,
    AkMidiCcSoundTimbre                            = 71,
    AkMidiCcSoundReleaseTime                       = 72,
    AkMidiCcSoundAttackTime                        = 73,
    AkMidiCcSoundBrightness                        = 74,
    AkMidiCcSoundCtrl6                             = 75,
    AkMidiCcSoundCtrl7                             = 76,
    AkMidiCcSoundCtrl8                             = 77,
    AkMidiCcSoundCtrl9                             = 78,
    AkMidiCcSoundCtrl10                            = 79,
    AkMidiCcGeneralButton1                         = 80,
    AkMidiCcGeneralButton2                         = 81,
    AkMidiCcGeneralButton3                         = 82,
    AkMidiCcGeneralButton4                         = 83,
    AkMidiCcReverbLevel                            = 91,
    AkMidiCcTremoloLevel                           = 92,
    AkMidiCcChorusLevel                            = 93,
    AkMidiCcCelesteLevel                           = 94,
    AkMidiCcPhaserLevel                            = 95,
    AkMidiCcDataButtonP1                           = 96,
    AkMidiCcDataButtonM1                           = 97,
    AkMidiCcNonRegisterCoarse                      = 98,
    AkMidiCcNonRegisterFine                        = 99,
    AkMidiCcAllSoundOff                            = 120,
    AkMidiCcAllControllersOff                      = 121,
    AkMidiCcLocalKeyboard                          = 122,
    AkMidiCcAllNotesOff                            = 123,
    AkMidiCcOmniModeOff                            = 124,
    AkMidiCcOmniModeOn                             = 125,
    AkMidiCcOmniMonophonicOn                       = 126,
    AkMidiCcOmniPolyphonicOn                       = 127,
    EAkMidiCcValues                                = 128

};


// Enum  AkAudio.EAkMidiEventType
enum class EAkMidiEventType : uint8_t
{
    AkMidiEventTypeInvalid                         = 0,
    AkMidiEventTypeNoteOff                         = 128,
    AkMidiEventTypeNoteOn                          = 144,
    AkMidiEventTypeNoteAftertouch                  = 160,
    AkMidiEventTypeController                      = 176,
    AkMidiEventTypeProgramChange                   = 192,
    AkMidiEventTypeChannelAftertouch               = 208,
    AkMidiEventTypePitchBend                       = 224,
    AkMidiEventTypeSysex                           = 240,
    AkMidiEventTypeEscape                          = 247,
    AkMidiEventTypeMeta                            = 255,
    EAkMidiEventType                               = 256

};


// Enum  AkAudio.ERTPCValueType
enum class ERTPCValueType : uint8_t
{
    Default                                        = 0,
    Global                                         = 1,
    GameObject                                     = 2,
    PlayingID                                      = 3,
    Unavailable                                    = 4,
    ERTPCValueType                                 = 5

};


// Enum  AkAudio.EAkCurveInterpolation
enum class EAkCurveInterpolation : uint8_t
{
    Log3                                           = 0,
    Sine                                           = 1,
    Log1                                           = 2,
    InvSCurve                                      = 3,
    Linear                                         = 4,
    SCurve                                         = 5,
    Exp1                                           = 6,
    SineRecip                                      = 7,
    Exp3                                           = 8,
    LastFadeCurve                                  = 8,
    Constant                                       = 9,
    EAkCurveInterpolation                          = 10

};


// Enum  AkAudio.AkActionOnEventType
enum class AkActionOnEventType : uint8_t
{
    Stop                                           = 0,
    Pause                                          = 1,
    Resume                                         = 2,
    Break                                          = 3,
    ReleaseEnvelope                                = 4,
    AkActionOnEventType                            = 5

};


// Enum  AkAudio.AkMultiPositionType
enum class AkMultiPositionType : uint8_t
{
    SingleSource                                   = 0,
    MultiSources                                   = 1,
    MultiDirections                                = 2,
    AkMultiPositionType                            = 3

};


// Enum  AkAudio.AkSpeakerConfiguration
enum class AkSpeakerConfiguration : uint8_t
{
    Ak                                             = 1,
    Ak                                             = 2,
    Ak                                             = 4,
    Ak                                             = 8,
    Ak                                             = 16,
    Ak                                             = 32,
    Ak                                             = 256,
    Ak                                             = 512,
    Ak                                             = 1024,
    Ak                                             = 2048,
    Ak                                             = 4096,
    Ak                                             = 8192,
    Ak                                             = 16384,
    Ak                                             = 32768,
    Ak                                             = 65536,
    Ak                                             = 131072,
    Ak                                             = 131073

};


// Enum  AkAudio.AkChannelConfiguration
enum class AkChannelConfiguration : uint8_t
{
    Ak                                             = 0,
    Ak                                             = 1,
    Ak                                             = 2,
    Ak                                             = 3,
    AK                                             = 4,
    Ak                                             = 5,
    Ak                                             = 6,
    Ak                                             = 7,
    Ak                                             = 8,
    Ak                                             = 9,
    Ak                                             = 10,
    Ak                                             = 11,
    Ak                                             = 12,
    Ak                                             = 13,
    Ak                                             = 14,
    Ak                                             = 15,
    Ak                                             = 16,
    Ak                                             = 17,
    Ak                                             = 18,
    Ak                                             = 19,
    Ak                                             = 20,
    Ak                                             = 21,
    Ak                                             = 22,
    Ak                                             = 23,
    Ak                                             = 24,
    Ak                                             = 25,
    Ak                                             = 26,
    AkChannelConfiguration                         = 27

};


// Enum  AkAudio.AkAcousticPortalState
enum class AkAcousticPortalState : uint8_t
{
    Closed                                         = 0,
    Open                                           = 1,
    AkAcousticPortalState                          = 2

};


// Enum  AkAudio.PanningRule
enum class PanningRule : uint8_t
{
    PanningRule                                    = 0,
    PanningRule                                    = 1,
    PanningRule                                    = 2

};


// Enum  AkAudio.EAkAudioContext
enum class EAkAudioContext : uint8_t
{
    Foreign                                        = 0,
    GameplayAudio                                  = 1,
    EditorAudio                                    = 2,
    AlwaysActive                                   = 3,
    EAkAudioContext                                = 4

};


// Enum  AkAudio.AkMeshType
enum class AkMeshType : uint8_t
{
    StaticMesh                                     = 0,
    CollisionMesh                                  = 1,
    AkMeshType                                     = 2

};


// Enum  AkAudio.EAkCommSystem
enum class EAkCommSystem : uint8_t
{
    Socket                                         = 0,
    HTCS                                           = 1,
    EAkCommSystem                                  = 2

};


// Enum  AkAudio.EAkChannelMask
enum class EAkChannelMask : uint8_t
{
    FrontLeft                                      = 0,
    FrontRight                                     = 1,
    FrontCenter                                    = 2,
    LowFrequency                                   = 3,
    BackLeft                                       = 4,
    BackRight                                      = 5,
    BackCenter                                     = 8,
    SideLeft                                       = 9,
    SideRight                                      = 10,
    Top                                            = 11,
    HeightFrontLeft                                = 12,
    HeightFrontCenter                              = 13,
    HeightFrontRight                               = 14,
    HeightBackLeft                                 = 15,
    HeightBackCenter                               = 16,
    HeightBackRight                                = 17,
    EAkChannelMask                                 = 18

};


// Enum  AkAudio.EAkChannelConfigType
enum class EAkChannelConfigType : uint8_t
{
    Anonymous                                      = 0,
    Standard                                       = 1,
    Ambisonic                                      = 2,
    EAkChannelConfigType                           = 3

};


// Enum  AkAudio.EAkPanningRule
enum class EAkPanningRule : uint8_t
{
    Speakers                                       = 0,
    Headphones                                     = 1,
    EAkPanningRule                                 = 2

};


// Enum  AkAudio.EAkUnrealAudioRouting
enum class EAkUnrealAudioRouting : uint8_t
{
    Custom                                         = 0,
    Separate                                       = 1,
    AudioLink                                      = 2,
    AudioMixer                                     = 3,
    EnableWwiseOnly                                = 4,
    EnableUnrealOnly                               = 5,
    EAkUnrealAudioRouting                          = 6

};


// Enum  AkAudio.EAkCollisionChannel
enum class EAkCollisionChannel : uint8_t
{
    EAKCC                                          = 0,
    EAKCC                                          = 1,
    EAKCC                                          = 2,
    EAKCC                                          = 3,
    EAKCC                                          = 4,
    EAKCC                                          = 5,
    EAKCC                                          = 6,
    EAKCC                                          = 7,
    EAKCC                                          = 8,
    EAKCC                                          = 9

};


// Enum  AkAudio.EAkFitToGeometryMode
enum class EAkFitToGeometryMode : uint8_t
{
    OrientedBox                                    = 0,
    AlignedBox                                     = 1,
    ConvexPolyhedron                               = 2,
    EAkFitToGeometryMode                           = 3

};


// Enum  WwiseFileHandler.EWwiseLanguageRequirement
enum class EWwiseLanguageRequirement : uint8_t
{
    IsDefault                                      = 0,
    IsOptional                                     = 1,
    SFX                                            = 2,
    EWwiseLanguageRequirement                      = 3

};


// Enum  WwiseFileHandler.EWwiseSoundBankType
enum class EWwiseSoundBankType : uint8_t
{
    User                                           = 0,
    Event                                          = 30,
    Bus                                            = 31,
    EWwiseSoundBankType                            = 32

};


// Enum  WwiseResourceLoader.EWwiseEventDestroyOptions
enum class EWwiseEventDestroyOptions : uint8_t
{
    StopEventOnDestroy                             = 0,
    WaitForEventEnd                                = 1,
    EWwiseEventDestroyOptions                      = 2

};


// Enum  WwiseResourceLoader.EWwiseEventSwitchContainerLoading
enum class EWwiseEventSwitchContainerLoading : uint8_t
{
    AlwaysLoad                                     = 0,
    LoadOnReference                                = 1,
    EWwiseEventSwitchContainerLoading              = 2

};


// Enum  WwiseResourceLoader.EWwiseGroupType
enum class EWwiseGroupType : uint8_t
{
    Switch                                         = 0,
    State                                          = 1,
    Unknown                                        = 255,
    EWwiseGroupType                                = 256

};


// Enum  WwiseResourceLoader.EWwiseReloadLanguage
enum class EWwiseReloadLanguage : uint8_t
{
    Manual                                         = 0,
    Immediate                                      = 1,
    Safe                                           = 2,
    EWwiseReloadLanguage                           = 3

};


// Enum  HoudiniEngineRuntime.EHoudiniStaticMeshMethod
enum class EHoudiniStaticMeshMethod : uint8_t
{
    RawMesh                                        = 0,
    FMeshDescription                               = 1,
    UHoudiniStaticMesh                             = 2,
    EHoudiniStaticMeshMethod                       = 3

};


// Enum  HoudiniEngineRuntime.EHoudiniAssetStateResult
enum class EHoudiniAssetStateResult : uint8_t
{
    None                                           = 0,
    Working                                        = 1,
    Success                                        = 2,
    FinishedWithError                              = 3,
    FinishedWithFatalError                         = 4,
    Aborted                                        = 5,
    EHoudiniAssetStateResult                       = 6

};


// Enum  HoudiniEngineRuntime.EHoudiniAssetState
enum class EHoudiniAssetState : uint8_t
{
    NeedInstantiation                              = 0,
    NewHDA                                         = 1,
    PreInstantiation                               = 2,
    Instantiating                                  = 3,
    PreCook                                        = 4,
    Cooking                                        = 5,
    PostCook                                       = 6,
    PreProcess                                     = 7,
    Processing                                     = 8,
    None                                           = 9,
    NeedRebuild                                    = 10,
    NeedDelete                                     = 11,
    Deleting                                       = 12,
    ProcessTemplate                                = 13,
    EHoudiniAssetState                             = 14

};


// Enum  HoudiniEngineRuntime.EHoudiniProxyRefineRequestResult
enum class EHoudiniProxyRefineRequestResult : uint8_t
{
    Invalid                                        = 0,
    None                                           = 1,
    PendingCooks                                   = 2,
    Refined                                        = 3,
    EHoudiniProxyRefineRequestResult               = 4

};


// Enum  HoudiniEngineRuntime.EHoudiniProxyRefineResult
enum class EHoudiniProxyRefineResult : uint8_t
{
    Invalid                                        = 0,
    Failed                                         = 1,
    Success                                        = 2,
    Skipped                                        = 3,
    EHoudiniProxyRefineResult                      = 4

};


// Enum  HoudiniEngineRuntime.EHoudiniLandscapeExportType
enum class EHoudiniLandscapeExportType : uint8_t
{
    Heightfield                                    = 0,
    Mesh                                           = 1,
    Points                                         = 2,
    EHoudiniLandscapeExportType                    = 3

};


// Enum  HoudiniEngineRuntime.EHoudiniCurveBreakpointParameterization
enum class EHoudiniCurveBreakpointParameterization : uint8_t
{
    Invalid                                        = 4294967295,
    Uniform                                        = 0,
    Chord                                          = 1,
    Centripetal                                    = 2,
    EHoudiniCurveBreakpointParameterization        = 3

};


// Enum  HoudiniEngineRuntime.EHoudiniCurveMethod
enum class EHoudiniCurveMethod : uint8_t
{
    Invalid                                        = 4294967295,
    CVs                                            = 0,
    Breakpoints                                    = 1,
    Freehand                                       = 2,
    EHoudiniCurveMethod                            = 3

};


// Enum  HoudiniEngineRuntime.EHoudiniCurveType
enum class EHoudiniCurveType : uint8_t
{
    Invalid                                        = 4294967295,
    Polygon                                        = 0,
    Nurbs                                          = 1,
    Bezier                                         = 2,
    Points                                         = 3,
    EHoudiniCurveType                              = 4

};


// Enum  HoudiniEngineRuntime.EHoudiniOutputType
enum class EHoudiniOutputType : uint8_t
{
    Invalid                                        = 0,
    Mesh                                           = 1,
    Instancer                                      = 2,
    Landscape                                      = 3,
    Curve                                          = 4,
    Skeletal                                       = 5,
    GeometryCollection                             = 6,
    DataTable                                      = 7,
    EHoudiniOutputType                             = 8

};


// Enum  HoudiniEngineRuntime.EHoudiniInputType
enum class EHoudiniInputType : uint8_t
{
    Invalid                                        = 0,
    Geometry                                       = 1,
    Curve                                          = 2,
    Asset                                          = 3,
    Landscape                                      = 4,
    World                                          = 5,
    Skeletal                                       = 6,
    GeometryCollection                             = 7,
    EHoudiniInputType                              = 8

};


// Enum  HoudiniEngineRuntime.EHoudiniLandscapeOutputBakeType
enum class EHoudiniLandscapeOutputBakeType : uint8_t
{
    Detachment                                     = 0,
    BakeToImage                                    = 1,
    BakeToWorld                                    = 2,
    InValid                                        = 3,
    EHoudiniLandscapeOutputBakeType                = 4

};


// Enum  HoudiniEngineRuntime.EHoudiniRampInterpolationType
enum class EHoudiniRampInterpolationType : uint8_t
{
    InValid                                        = 4294967295,
    CONSTANT                                       = 0,
    LINEAR                                         = 1,
    CATMULL                                        = 2,
    MONOTONE                                       = 3,
    BEZIER                                         = 4,
    BSPLINE                                        = 5,
    HERMITE                                        = 6,
    EHoudiniRampInterpolationType                  = 7

};


// Enum  HoudiniEngineRuntime.EAttribOwner
enum class EAttribOwner : uint8_t
{
    Invalid                                        = 4294967295,
    Vertex                                         = 0,
    Point                                          = 1,
    Prim                                           = 2,
    Detail                                         = 3,
    EAttribOwner                                   = 4

};


// Enum  HoudiniEngineRuntime.EAttribStorageType
enum class EAttribStorageType : uint8_t
{
    Invalid                                        = 4294967295,
    INT                                            = 0,
    INT64                                          = 1,
    FLOAT                                          = 2,
    FLOAT64                                        = 3,
    STRING                                         = 4,
    EAttribStorageType                             = 5

};


// Enum  HoudiniEngineRuntime.EHoudiniInstancerType
enum class EHoudiniInstancerType : uint8_t
{
    Invalid                                        = 0,
    ObjectInstancer                                = 1,
    PackedPrimitive                                = 2,
    AttributeInstancer                             = 3,
    OldSchoolAttributeInstancer                    = 4,
    GeometryCollection                             = 5,
    EHoudiniInstancerType                          = 6

};


// Enum  HoudiniEngineRuntime.EHoudiniPartType
enum class EHoudiniPartType : uint8_t
{
    Invalid                                        = 0,
    Mesh                                           = 1,
    Instancer                                      = 2,
    Curve                                          = 3,
    Volume                                         = 4,
    DataTable                                      = 5,
    EHoudiniPartType                               = 6

};


// Enum  HoudiniEngineRuntime.EHoudiniGeoType
enum class EHoudiniGeoType : uint8_t
{
    Invalid                                        = 0,
    Default                                        = 1,
    Intermediate                                   = 2,
    Input                                          = 3,
    Curve                                          = 4,
    EHoudiniGeoType                                = 5

};


// Enum  HoudiniEngineRuntime.EHoudiniHandleType
enum class EHoudiniHandleType : uint8_t
{
    Xform                                          = 0,
    Bounder                                        = 1,
    Unsupported                                    = 2,
    EHoudiniHandleType                             = 3

};


// Enum  HoudiniEngineRuntime.EXformParameter
enum class EXformParameter : uint8_t
{
    TX                                             = 0,
    TY                                             = 1,
    TZ                                             = 2,
    RX                                             = 3,
    RY                                             = 4,
    RZ                                             = 5,
    SX                                             = 6,
    SY                                             = 7,
    SZ                                             = 8,
    COUNT                                          = 9,
    EXformParameter                                = 10

};


// Enum  HoudiniEngineRuntime.EHoudiniInputObjectType
enum class EHoudiniInputObjectType : uint8_t
{
    Invalid                                        = 0,
    Object                                         = 1,
    StaticMesh                                     = 2,
    SkeletalMesh                                   = 3,
    SceneComponent                                 = 4,
    StaticMeshComponent                            = 5,
    InstancedStaticMeshComponent                   = 6,
    SplineComponent                                = 7,
    HoudiniSplineComponent                         = 8,
    HoudiniAssetComponent                          = 9,
    Actor                                          = 10,
    Landscape                                      = 11,
    Brush                                          = 12,
    CameraComponent                                = 13,
    DataTable                                      = 14,
    HoudiniAssetActor                              = 15,
    FoliageType                                    = 16,
    GeometryCollection                             = 17,
    GeometryCollectionComponent                    = 18,
    GeometryCollectionActor                        = 19,
    SkeletalMeshComponent                          = 20,
    Blueprint                                      = 21,
    EHoudiniInputObjectType                        = 22

};


// Enum  HoudiniEngineRuntime.EHoudiniXformType
enum class EHoudiniXformType : uint8_t
{
    None                                           = 0,
    IntoThisObject                                 = 1,
    Auto                                           = 2,
    EHoudiniXformType                              = 3

};


// Enum  HoudiniEngineRuntime.EHoudiniCurveOutputType
enum class EHoudiniCurveOutputType : uint8_t
{
    UnrealSpline                                   = 0,
    HoudiniSpline                                  = 1,
    EHoudiniCurveOutputType                        = 2

};


// Enum  HoudiniEngineRuntime.EHoudiniParameterType
enum class EHoudiniParameterType : uint8_t
{
    Invalid                                        = 0,
    Button                                         = 1,
    ButtonStrip                                    = 2,
    Color                                          = 3,
    ColorRamp                                      = 4,
    File                                           = 5,
    FileDir                                        = 6,
    FileGeo                                        = 7,
    FileImage                                      = 8,
    Float                                          = 9,
    FloatRamp                                      = 10,
    Folder                                         = 11,
    FolderList                                     = 12,
    Input                                          = 13,
    Int                                            = 14,
    IntChoice                                      = 15,
    Label                                          = 16,
    MultiParm                                      = 17,
    Separator                                      = 18,
    String                                         = 19,
    StringChoice                                   = 20,
    StringAssetRef                                 = 21,
    Toggle                                         = 22,
    EHoudiniParameterType                          = 23

};


// Enum  HoudiniEngineRuntime.EHoudiniFolderParameterType
enum class EHoudiniFolderParameterType : uint8_t
{
    Invalid                                        = 0,
    Collapsible                                    = 1,
    Simple                                         = 2,
    Tabs                                           = 3,
    Radio                                          = 4,
    Other                                          = 5,
    EHoudiniFolderParameterType                    = 6

};


// Enum  HoudiniEngineRuntime.EHoudiniMultiParmModificationType
enum class EHoudiniMultiParmModificationType : uint8_t
{
    None                                           = 0,
    Inserted                                       = 1,
    Removed                                        = 2,
    Modified                                       = 3,
    EHoudiniMultiParmModificationType              = 4

};


// Enum  HoudiniEngineRuntime.EHoudiniRampPointConstructStatus
enum class EHoudiniRampPointConstructStatus : uint8_t
{
    None                                           = 0,
    INITIALIZED                                    = 1,
    POSITION                                       = 2,
    VALUE                                          = 3,
    INTERPTYPE                                     = 4,
    EHoudiniRampPointConstructStatus               = 5

};


// Enum  HoudiniEngineRuntime.EPDGWorkResultState
enum class EPDGWorkResultState : uint8_t
{
    None                                           = 0,
    ToLoad                                         = 1,
    Loading                                        = 2,
    Loaded                                         = 3,
    ToDelete                                       = 4,
    Deleting                                       = 5,
    Deleted                                        = 6,
    NotLoaded                                      = 7,
    EPDGWorkResultState                            = 8

};


// Enum  HoudiniEngineRuntime.EPDGNodeState
enum class EPDGNodeState : uint8_t
{
    None                                           = 0,
    Dirtied                                        = 1,
    Dirtying                                       = 2,
    Cooking                                        = 3,
    Cook                                           = 4,
    Cook                                           = 5,
    EPDGNodeState                                  = 6

};


// Enum  HoudiniEngineRuntime.EPDGLinkState
enum class EPDGLinkState : uint8_t
{
    Inactive                                       = 0,
    Linking                                        = 1,
    Linked                                         = 2,
    Error                                          = 3,
    EPDGLinkState                                  = 4

};


// Enum  HoudiniEngineRuntime.EHoudiniExecutableType
enum class EHoudiniExecutableType : uint8_t
{
    HRSHE                                          = 0,
    HRSHE                                          = 1,
    HRSHE                                          = 2,
    HRSHE                                          = 3,
    HRSHE                                          = 4

};


// Enum  HoudiniEngineRuntime.EHoudiniRuntimeSettingsRecomputeFlag
enum class EHoudiniRuntimeSettingsRecomputeFlag : uint8_t
{
    HRSRF                                          = 0,
    HRSRF                                          = 1,
    HRSRF                                          = 2,
    HRSRF                                          = 3

};


// Enum  HoudiniEngineRuntime.EHoudiniRuntimeSettingsSessionType
enum class EHoudiniRuntimeSettingsSessionType : uint8_t
{
    HRSST                                          = 0,
    HRSST                                          = 1,
    HRSST                                          = 2,
    HRSST                                          = 3,
    HRSST                                          = 4

};


// Enum  Reflex.EReflexMode
enum class EReflexMode : uint8_t
{
    Disabled                                       = 0,
    Enabled                                        = 1,
    EnabledPlusBoost                               = 3,
    EReflexMode                                    = 4

};


// Enum  UMG.ESlateAccessibleBehavior
enum class ESlateAccessibleBehavior : uint8_t
{
    NotAccessible                                  = 0,
    Auto                                           = 1,
    Summary                                        = 2,
    Custom                                         = 3,
    ToolTip                                        = 4,
    ESlateAccessibleBehavior                       = 5

};


// Enum  SlateCore.EUINavigation
enum class EUINavigation : uint8_t
{
    Left                                           = 0,
    Right                                          = 1,
    Up                                             = 2,
    Down                                           = 3,
    Next                                           = 4,
    Previous                                       = 5,
    Num                                            = 6,
    Invalid                                        = 7,
    EUINavigation                                  = 8

};


// Enum  SlateCore.ECheckBoxState
enum class ECheckBoxState : uint8_t
{
    Unchecked                                      = 0,
    Checked                                        = 1,
    Undetermined                                   = 2,
    ECheckBoxState                                 = 3

};


// Enum  SlateCore.EWidgetClipping
enum class EWidgetClipping : uint8_t
{
    Inherit                                        = 0,
    ClipToBounds                                   = 1,
    ClipToBoundsWithoutIntersecting                = 2,
    ClipToBoundsAlways                             = 3,
    OnDemand                                       = 4,
    EWidgetClipping                                = 5

};


// Enum  CoreUObject.EMouseCursor
enum class EMouseCursor : uint8_t
{
    None                                           = 0,
    Default                                        = 1,
    TextEditBeam                                   = 2,
    ResizeLeftRight                                = 3,
    ResizeUpDown                                   = 4,
    ResizeSouthEast                                = 5,
    ResizeSouthWest                                = 6,
    CardinalCross                                  = 7,
    Crosshairs                                     = 8,
    Hand                                           = 9,
    GrabHand                                       = 10,
    GrabHandClosed                                 = 11,
    SlashedCircle                                  = 12,
    EyeDropper                                     = 13,
    EMouseCursor                                   = 14

};


// Enum  UMG.ESlateQuality
enum class ESlateQuality : uint8_t
{
    Low                                            = 0,
    Medium                                         = 1,
    High                                           = 2,
    ESlateQuality                                  = 3

};


// Enum  SlateCore.ESlateBrushImageType
enum class ESlateBrushImageType : uint8_t
{
    NoImage                                        = 0,
    FullColor                                      = 1,
    Linear                                         = 2,
    ESlateBrushImageType                           = 3

};


// Enum  SlateCore.ESlateBrushMirrorType
enum class ESlateBrushMirrorType : uint8_t
{
    NoMirror                                       = 0,
    Horizontal                                     = 1,
    Vertical                                       = 2,
    Both                                           = 3,
    ESlateBrushMirrorType                          = 4

};


// Enum  SlateCore.ESlateBrushTileType
enum class ESlateBrushTileType : uint8_t
{
    NoTile                                         = 0,
    Horizontal                                     = 1,
    Vertical                                       = 2,
    Both                                           = 3,
    ESlateBrushTileType                            = 4

};


// Enum  SlateCore.ESlateBrushDrawType
enum class ESlateBrushDrawType : uint8_t
{
    NoDrawType                                     = 0,
    Box                                            = 1,
    Border                                         = 2,
    Image                                          = 3,
    ESlateBrushDrawType                            = 4

};


// Enum  SlateCore.ESlateColorStylingMode
enum class ESlateColorStylingMode : uint8_t
{
    UseColor                                       = 0,
    UseColor                                       = 1,
    UseColor                                       = 2,
    UseColor                                       = 3,
    UseColor                                       = 4

};


// Enum  UMG.ESlateVisibility
enum class ESlateVisibility : uint8_t
{
    Visible                                        = 0,
    Collapsed                                      = 1,
    Hidden                                         = 2,
    HitTestInvisible                               = 3,
    SelfHitTestInvisible                           = 4,
    ESlateVisibility                               = 5

};


// Enum  SlateCore.EUINavigationRule
enum class EUINavigationRule : uint8_t
{
    Escape                                         = 0,
    Explicit                                       = 1,
    Wrap                                           = 2,
    Stop                                           = 3,
    Custom                                         = 4,
    CustomBoundary                                 = 5,
    Invalid                                        = 6,
    EUINavigationRule                              = 7

};


// Enum  SlateCore.EFlowDirectionPreference
enum class EFlowDirectionPreference : uint8_t
{
    Inherit                                        = 0,
    Culture                                        = 1,
    LeftToRight                                    = 2,
    RightToLeft                                    = 3,
    EFlowDirectionPreference                       = 4

};


// Enum  SlateCore.EColorVisionDeficiency
enum class EColorVisionDeficiency : uint8_t
{
    NormalVision                                   = 0,
    Deuteranope                                    = 1,
    Protanope                                      = 2,
    Tritanope                                      = 3,
    EColorVisionDeficiency                         = 4

};


// Enum  Engine.EMouseLockMode
enum class EMouseLockMode : uint8_t
{
    DoNotLock                                      = 0,
    LockOnCapture                                  = 1,
    LockAlways                                     = 2,
    LockInFullscreen                               = 3,
    EMouseLockMode                                 = 4

};


// Enum  Engine.EWindowTitleBarMode
enum class EWindowTitleBarMode : uint8_t
{
    Overlay                                        = 0,
    VerticalBox                                    = 1,
    EWindowTitleBarMode                            = 2

};


// Enum  SlateCore.ESelectInfo
enum class ESelectInfo : uint8_t
{
    OnKeyPress                                     = 0,
    OnNavigation                                   = 1,
    OnMouseClick                                   = 2,
    Direct                                         = 3,
    ESelectInfo                                    = 4

};


// Enum  SlateCore.ETextCommit
enum class ETextCommit : uint8_t
{
    Default                                        = 0,
    OnEnter                                        = 1,
    OnUserMovedFocus                               = 2,
    OnCleared                                      = 3,
    ETextCommit                                    = 4

};


// Enum  Slate.ETextJustify
enum class ETextJustify : uint8_t
{
    Left                                           = 0,
    Center                                         = 1,
    Right                                          = 2,
    ETextJustify                                   = 3

};


// Enum  Slate.ETextFlowDirection
enum class ETextFlowDirection : uint8_t
{
    Auto                                           = 0,
    LeftToRight                                    = 1,
    RightToLeft                                    = 2,
    ETextFlowDirection                             = 3

};


// Enum  SlateCore.ETextShapingMethod
enum class ETextShapingMethod : uint8_t
{
    Auto                                           = 0,
    KerningOnly                                    = 1,
    FullShaping                                    = 2,
    ETextShapingMethod                             = 3

};


// Enum  Slate.EVirtualKeyboardDismissAction
enum class EVirtualKeyboardDismissAction : uint8_t
{
    TextChangeOnDismiss                            = 0,
    TextCommitOnAccept                             = 1,
    TextCommitOnDismiss                            = 2,
    EVirtualKeyboardDismissAction                  = 3

};


// Enum  Slate.EVirtualKeyboardTrigger
enum class EVirtualKeyboardTrigger : uint8_t
{
    OnFocusByPointer                               = 0,
    OnAllFocusEvents                               = 1,
    EVirtualKeyboardTrigger                        = 2

};


// Enum  UMG.EVirtualKeyboardType
enum class EVirtualKeyboardType : uint8_t
{
    Default                                        = 0,
    Number                                         = 1,
    Web                                            = 2,
    Email                                          = 3,
    Password                                       = 4,
    AlphaNumeric                                   = 5,
    EVirtualKeyboardType                           = 6

};


// Enum  SlateCore.EMenuPlacement
enum class EMenuPlacement : uint8_t
{
    MenuPlacement                                  = 0,
    MenuPlacement                                  = 1,
    MenuPlacement                                  = 2,
    MenuPlacement                                  = 3,
    MenuPlacement                                  = 4,
    MenuPlacement                                  = 5,
    MenuPlacement                                  = 6,
    MenuPlacement                                  = 7,
    MenuPlacement                                  = 8,
    MenuPlacement                                  = 9,
    MenuPlacement                                  = 10,
    MenuPlacement                                  = 11,
    MenuPlacement                                  = 12,
    MenuPlacement                                  = 13

};


// Enum  Slate.ETextWrappingPolicy
enum class ETextWrappingPolicy : uint8_t
{
    DefaultWrapping                                = 0,
    AllowPerCharacterWrapping                      = 1,
    ETextWrappingPolicy                            = 2

};


// Enum  SlateCore.EHorizontalAlignment
enum class EHorizontalAlignment : uint8_t
{
    HAlign                                         = 0,
    HAlign                                         = 1,
    HAlign                                         = 2,
    HAlign                                         = 3,
    HAlign                                         = 4

};


// Enum  SlateCore.EVerticalAlignment
enum class EVerticalAlignment : uint8_t
{
    VAlign                                         = 0,
    VAlign                                         = 1,
    VAlign                                         = 2,
    VAlign                                         = 3,
    VAlign                                         = 4

};


// Enum  Slate.ETextTransformPolicy
enum class ETextTransformPolicy : uint8_t
{
    None                                           = 0,
    ToLower                                        = 1,
    ToUpper                                        = 2,
    ETextTransformPolicy                           = 3

};


// Enum  CommonUI.ECommonNumericType
enum class ECommonNumericType : uint8_t
{
    Number                                         = 0,
    Percentage                                     = 1,
    Seconds                                        = 2,
    Distance                                       = 3,
    ECommonNumericType                             = 4

};


// Enum  Engine.ERoundingMode
enum class ERoundingMode : uint8_t
{
    HalfToEven                                     = 0,
    HalfFromZero                                   = 1,
    HalfToZero                                     = 2,
    FromZero                                       = 3,
    ToZero                                         = 4,
    ToNegativeInfinity                             = 5,
    ToPositiveInfinity                             = 6,
    ERoundingMode                                  = 7

};


// Enum  UMG.EWidgetAnimationEvent
enum class EWidgetAnimationEvent : uint8_t
{
    Started                                        = 0,
    Finished                                       = 1,
    EWidgetAnimationEvent                          = 2

};


// Enum  Engine.EInputEvent
enum class EInputEvent : uint8_t
{
    IE                                             = 0,
    IE                                             = 1,
    IE                                             = 2,
    IE                                             = 3,
    IE                                             = 4,
    IE                                             = 5,
    IE                                             = 6

};


// Enum  UMG.EUMGSequencePlayMode
enum class EUMGSequencePlayMode : uint8_t
{
    Forward                                        = 0,
    Reverse                                        = 1,
    PingPong                                       = 2,
    EUMGSequencePlayMode                           = 3

};


// Enum  UMG.EWidgetTickFrequency
enum class EWidgetTickFrequency : uint8_t
{
    Never                                          = 0,
    Auto                                           = 1,
    EWidgetTickFrequency                           = 2

};


// Enum  CommonUI.ECommonInputMode
enum class ECommonInputMode : uint8_t
{
    Menu                                           = 0,
    Game                                           = 1,
    All                                            = 2,
    MAX                                            = 3

};


// Enum  CommonUI.ERichTextInlineIconDisplayMode
enum class ERichTextInlineIconDisplayMode : uint8_t
{
    IconOnly                                       = 0,
    TextOnly                                       = 1,
    IconAndText                                    = 2,
    MAX                                            = 3

};


// Enum  CommonUI.EInputActionState
enum class EInputActionState : uint8_t
{
    Enabled                                        = 0,
    Disabled                                       = 1,
    Hidden                                         = 2,
    HiddenAndDisabled                              = 3,
    EInputActionState                              = 4

};


// Enum  CommonUI.ETransitionCurve
enum class ETransitionCurve : uint8_t
{
    Linear                                         = 0,
    QuadIn                                         = 1,
    QuadOut                                        = 2,
    QuadInOut                                      = 3,
    CubicIn                                        = 4,
    CubicOut                                       = 5,
    CubicInOut                                     = 6,
    ETransitionCurve                               = 7

};


// Enum  CommonUI.ECommonSwitcherTransition
enum class ECommonSwitcherTransition : uint8_t
{
    FadeOnly                                       = 0,
    Horizontal                                     = 1,
    Vertical                                       = 2,
    Zoom                                           = 3,
    ECommonSwitcherTransition                      = 4

};


// Enum  CommonInput.ECommonInputType
enum class ECommonInputType : uint8_t
{
    MouseAndKeyboard                               = 0,
    Gamepad                                        = 1,
    Touch                                          = 2,
    Count                                          = 3,
    ECommonInputType                               = 4

};


// Enum  AINavigation.ENavAreaFlag
enum class ENavAreaFlag : uint8_t
{
    Default                                        = 0,
    Jump                                           = 1,
    Crouch                                         = 2,
    Teleport                                       = 3,
    Drop                                           = 4,
    Fly                                            = 5,
    ENavAreaFlag                                   = 6

};


// Enum  Niagara.ENiagaraSystemSpawnSectionEndBehavior
enum class ENiagaraSystemSpawnSectionEndBehavior : uint8_t
{
    SetSystemInactive                              = 0,
    Deactivate                                     = 1,
    None                                           = 2,
    ENiagaraSystemSpawnSectionEndBehavior          = 3

};


// Enum  Niagara.ENiagaraSystemSpawnSectionEvaluateBehavior
enum class ENiagaraSystemSpawnSectionEvaluateBehavior : uint8_t
{
    ActivateIfInactive                             = 0,
    None                                           = 1,
    ENiagaraSystemSpawnSectionEvaluateBehavior     = 2

};


// Enum  Niagara.ENiagaraSystemSpawnSectionStartBehavior
enum class ENiagaraSystemSpawnSectionStartBehavior : uint8_t
{
    Activate                                       = 0,
    ENiagaraSystemSpawnSectionStartBehavior        = 1

};


// Enum  Niagara.ENiagaraBakerViewMode
enum class ENiagaraBakerViewMode : uint8_t
{
    Perspective                                    = 0,
    OrthoFront                                     = 1,
    OrthoBack                                      = 2,
    OrthoLeft                                      = 3,
    OrthoRight                                     = 4,
    OrthoTop                                       = 5,
    OrthoBottom                                    = 6,
    Num                                            = 7,
    ENiagaraBakerViewMode                          = 8

};


// Enum  Niagara.ENiagaraCollisionMode
enum class ENiagaraCollisionMode : uint8_t
{
    None                                           = 0,
    SceneGeometry                                  = 1,
    DepthBuffer                                    = 2,
    DistanceField                                  = 3,
    ENiagaraCollisionMode                          = 4

};


// Enum  Niagara.ENiagaraFunctionDebugState
enum class ENiagaraFunctionDebugState : uint8_t
{
    NoDebug                                        = 0,
    Basic                                          = 1,
    ENiagaraFunctionDebugState                     = 2

};


// Enum  Niagara.ENiagaraSystemInstanceState
enum class ENiagaraSystemInstanceState : uint8_t
{
    None                                           = 0,
    PendingSpawn                                   = 1,
    PendingSpawnPaused                             = 2,
    Spawning                                       = 3,
    Running                                        = 4,
    Paused                                         = 5,
    Num                                            = 6,
    ENiagaraSystemInstanceState                    = 7

};


// Enum  Niagara.ENCPoolMethod
enum class ENCPoolMethod : uint8_t
{
    None                                           = 0,
    AutoRelease                                    = 1,
    ManualRelease                                  = 2,
    ManualRelease                                  = 3,
    FreeInPool                                     = 4,
    ENCPoolMethod                                  = 5

};


// Enum  Niagara.ENiagaraLegacyTrailWidthMode
enum class ENiagaraLegacyTrailWidthMode : uint8_t
{
    FromCentre                                     = 0,
    FromFirst                                      = 1,
    FromSecond                                     = 2,
    ENiagaraLegacyTrailWidthMode                   = 3

};


// Enum  Niagara.ENiagaraRendererSourceDataMode
enum class ENiagaraRendererSourceDataMode : uint8_t
{
    Particles                                      = 0,
    Emitter                                        = 1,
    ENiagaraRendererSourceDataMode                 = 2

};


// Enum  Niagara.ENiagaraBindingSource
enum class ENiagaraBindingSource : uint8_t
{
    ImplicitFromSource                             = 0,
    ExplicitParticles                              = 1,
    ExplicitEmitter                                = 2,
    ExplicitSystem                                 = 3,
    ExplicitUser                                   = 4,
    MaxBindingSource                               = 5,
    ENiagaraBindingSource                          = 6

};


// Enum  Niagara.ENiagaraIterationSource
enum class ENiagaraIterationSource : uint8_t
{
    Particles                                      = 0,
    DataInterface                                  = 1,
    ENiagaraIterationSource                        = 2

};


// Enum  Niagara.ENiagaraScriptGroup
enum class ENiagaraScriptGroup : uint8_t
{
    Particle                                       = 0,
    Emitter                                        = 1,
    System                                         = 2,
    Max                                            = 3,
    ENiagaraScriptGroup                            = 4

};


// Enum  Niagara.ENiagaraScriptContextStaticSwitch
enum class ENiagaraScriptContextStaticSwitch : uint8_t
{
    System                                         = 0,
    Emitter                                        = 1,
    Particle                                       = 2,
    ENiagaraScriptContextStaticSwitch              = 3

};


// Enum  Niagara.ENiagaraCompileUsageStaticSwitch
enum class ENiagaraCompileUsageStaticSwitch : uint8_t
{
    Spawn                                          = 0,
    Update                                         = 1,
    Event                                          = 2,
    SimulationStage                                = 3,
    Default                                        = 4,
    ENiagaraCompileUsageStaticSwitch               = 5

};


// Enum  Niagara.ENiagaraScriptUsage
enum class ENiagaraScriptUsage : uint8_t
{
    Function                                       = 0,
    Module                                         = 1,
    DynamicInput                                   = 2,
    ParticleSpawnScript                            = 3,
    ParticleSpawnScriptInterpolated                = 4,
    ParticleUpdateScript                           = 5,
    ParticleEventScript                            = 6,
    ParticleSimulationStageScript                  = 7,
    ParticleGPUComputeScript                       = 8,
    EmitterSpawnScript                             = 9,
    EmitterUpdateScript                            = 10,
    SystemSpawnScript                              = 11,
    SystemUpdateScript                             = 12,
    ENiagaraScriptUsage                            = 13

};


// Enum  Niagara.ENiagaraScriptCompileStatus
enum class ENiagaraScriptCompileStatus : uint8_t
{
    NCS                                            = 0,
    NCS                                            = 1,
    NCS                                            = 2,
    NCS                                            = 3,
    NCS                                            = 4,
    NCS                                            = 5,
    NCS                                            = 6,
    NCS                                            = 7

};


// Enum  Niagara.ENiagaraInputNodeUsage
enum class ENiagaraInputNodeUsage : uint8_t
{
    Undefined                                      = 0,
    Parameter                                      = 1,
    Attribute                                      = 2,
    SystemConstant                                 = 3,
    TranslatorConstant                             = 4,
    RapidIterationParameter                        = 5,
    ENiagaraInputNodeUsage                         = 6

};


// Enum  Niagara.ENiagaraDataSetType
enum class ENiagaraDataSetType : uint8_t
{
    ParticleData                                   = 0,
    Shared                                         = 1,
    Event                                          = 2,
    ENiagaraDataSetType                            = 3

};


// Enum  Niagara.ENiagaraStatDisplayMode
enum class ENiagaraStatDisplayMode : uint8_t
{
    Percent                                        = 0,
    Absolute                                       = 1,
    ENiagaraStatDisplayMode                        = 2

};


// Enum  Niagara.ENiagaraStatEvaluationType
enum class ENiagaraStatEvaluationType : uint8_t
{
    Average                                        = 0,
    Maximum                                        = 1,
    ENiagaraStatEvaluationType                     = 2

};


// Enum  Niagara.ENiagaraAgeUpdateMode
enum class ENiagaraAgeUpdateMode : uint8_t
{
    TickDeltaTime                                  = 0,
    DesiredAge                                     = 1,
    DesiredAgeNoSeek                               = 2,
    ENiagaraAgeUpdateMode                          = 3

};


// Enum  Niagara.ENiagaraSimTarget
enum class ENiagaraSimTarget : uint8_t
{
    CPUSim                                         = 0,
    GPUComputeSim                                  = 1,
    ENiagaraSimTarget                              = 2

};


// Enum  Niagara.ENiagaraRendererMotionVectorSetting
enum class ENiagaraRendererMotionVectorSetting : uint8_t
{
    AutoDetect                                     = 0,
    Precise                                        = 1,
    Approximate                                    = 2,
    Disable                                        = 3,
    ENiagaraRendererMotionVectorSetting            = 4

};


// Enum  Niagara.ENiagaraDefaultRendererMotionVectorSetting
enum class ENiagaraDefaultRendererMotionVectorSetting : uint8_t
{
    Precise                                        = 0,
    Approximate                                    = 1,
    ENiagaraDefaultRendererMotionVectorSetting     = 2

};


// Enum  Niagara.ENiagaraDefaultMode
enum class ENiagaraDefaultMode : uint8_t
{
    Value                                          = 0,
    Binding                                        = 1,
    Custom                                         = 2,
    FailIfPreviouslyNotSet                         = 3,
    ENiagaraDefaultMode                            = 4

};


// Enum  Niagara.ENiagaraMipMapGeneration
enum class ENiagaraMipMapGeneration : uint8_t
{
    Disabled                                       = 0,
    PostStage                                      = 1,
    PostSimulate                                   = 2,
    ENiagaraMipMapGeneration                       = 3

};


// Enum  Niagara.ENiagaraGpuBufferFormat
enum class ENiagaraGpuBufferFormat : uint8_t
{
    Float                                          = 0,
    HalfFloat                                      = 1,
    UnsignedNormalizedByte                         = 2,
    Max                                            = 3,
    ENiagaraGpuBufferFormat                        = 4

};


// Enum  Niagara.ENiagaraTickBehavior
enum class ENiagaraTickBehavior : uint8_t
{
    UsePrereqs                                     = 0,
    UseComponentTickGroup                          = 1,
    ForceTickFirst                                 = 2,
    ForceTickLast                                  = 3,
    ENiagaraTickBehavior                           = 4

};


// Enum  Niagara.ENDIExport
enum class ENDIExport : uint8_t
{
    ENDIExport                                     = 0,
    ENDIExport                                     = 1,
    ENDIExport                                     = 2

};


// Enum  Niagara.ENDILandscape
enum class ENDILandscape : uint8_t
{
    ENDILandscape                                  = 0,
    ENDILandscape                                  = 1,
    ENDILandscape                                  = 2,
    ENDILandscape                                  = 3

};


// Enum  Niagara.ESetResolutionMethod
enum class ESetResolutionMethod : uint8_t
{
    Independent                                    = 0,
    MaxAxis                                        = 1,
    CellSize                                       = 2,
    ESetResolutionMethod                           = 3

};


// Enum  Niagara.ENDISkeletalMesh
enum class ENDISkeletalMesh : uint8_t
{
    ENDISkeletalMesh                               = 255,
    ENDISkeletalMesh                               = 0,
    ENDISkeletalMesh                               = 1,
    ENDISkeletalMesh                               = 2,
    ENDISkeletalMesh                               = 256

};


// Enum  Niagara.ENDISkeletalMesh
enum class ENDISkeletalMesh : uint8_t
{
    ENDISkeletalMesh                               = 0,
    ENDISkeletalMesh                               = 1,
    ENDISkeletalMesh                               = 2,
    ENDISkeletalMesh                               = 3

};


// Enum  Niagara.ENDIStaticMesh
enum class ENDIStaticMesh : uint8_t
{
    ENDIStaticMesh                                 = 0,
    ENDIStaticMesh                                 = 1,
    ENDIStaticMesh                                 = 2,
    ENDIStaticMesh                                 = 3,
    ENDIStaticMesh                                 = 4

};


// Enum  Niagara.ENiagaraDebugHudVerbosity
enum class ENiagaraDebugHudVerbosity : uint8_t
{
    None                                           = 0,
    Basic                                          = 1,
    Verbose                                        = 2,
    ENiagaraDebugHudVerbosity                      = 3

};


// Enum  Niagara.ENiagaraDebugHudFont
enum class ENiagaraDebugHudFont : uint8_t
{
    Small                                          = 0,
    Normal                                         = 1,
    ENiagaraDebugHudFont                           = 2

};


// Enum  Niagara.ENiagaraDebugHudVAlign
enum class ENiagaraDebugHudVAlign : uint8_t
{
    Top                                            = 0,
    Center                                         = 1,
    Bottom                                         = 2,
    ENiagaraDebugHudVAlign                         = 3

};


// Enum  Niagara.ENiagaraDebugHudHAlign
enum class ENiagaraDebugHudHAlign : uint8_t
{
    Left                                           = 0,
    Center                                         = 1,
    Right                                          = 2,
    ENiagaraDebugHudHAlign                         = 3

};


// Enum  Niagara.ENiagaraDebugPlaybackMode
enum class ENiagaraDebugPlaybackMode : uint8_t
{
    Play                                           = 0,
    Loop                                           = 1,
    Paused                                         = 2,
    Step                                           = 3,
    ENiagaraDebugPlaybackMode                      = 4

};


// Enum  Niagara.ENiagaraScalabilityUpdateFrequency
enum class ENiagaraScalabilityUpdateFrequency : uint8_t
{
    SpawnOnly                                      = 0,
    Low                                            = 1,
    Medium                                         = 2,
    High                                           = 3,
    Continuous                                     = 4,
    ENiagaraScalabilityUpdateFrequency             = 5

};


// Enum  Niagara.ENiagaraCullReaction
enum class ENiagaraCullReaction : uint8_t
{
    Deactivate                                     = 0,
    DeactivateImmediate                            = 1,
    DeactivateResume                               = 2,
    DeactivateImmediateResume                      = 3,
    ENiagaraCullReaction                           = 4

};


// Enum  Niagara.EParticleAllocationMode
enum class EParticleAllocationMode : uint8_t
{
    AutomaticEstimate                              = 0,
    ManualEstimate                                 = 1,
    EParticleAllocationMode                        = 2

};


// Enum  Niagara.EScriptExecutionMode
enum class EScriptExecutionMode : uint8_t
{
    EveryParticle                                  = 0,
    SpawnedParticles                               = 1,
    SingleParticle                                 = 2,
    EScriptExecutionMode                           = 3

};


// Enum  Niagara.ENiagaraSortMode
enum class ENiagaraSortMode : uint8_t
{
    None                                           = 0,
    ViewDepth                                      = 1,
    ViewDistance                                   = 2,
    CustomAscending                                = 3,
    CustomDecending                                = 4,
    ENiagaraSortMode                               = 5

};


// Enum  Niagara.ENiagaraMeshLockedAxisSpace
enum class ENiagaraMeshLockedAxisSpace : uint8_t
{
    Simulation                                     = 0,
    World                                          = 1,
    Local                                          = 2,
    ENiagaraMeshLockedAxisSpace                    = 3

};


// Enum  Niagara.ENiagaraMeshPivotOffsetSpace
enum class ENiagaraMeshPivotOffsetSpace : uint8_t
{
    Mesh                                           = 0,
    Simulation                                     = 1,
    World                                          = 2,
    Local                                          = 3,
    ENiagaraMeshPivotOffsetSpace                   = 4

};


// Enum  Niagara.ENiagaraMeshFacingMode
enum class ENiagaraMeshFacingMode : uint8_t
{
    Default                                        = 0,
    Velocity                                       = 1,
    CameraPosition                                 = 2,
    CameraPlane                                    = 3,
    ENiagaraMeshFacingMode                         = 4

};


// Enum  Niagara.ENiagaraPlatformSetState
enum class ENiagaraPlatformSetState : uint8_t
{
    Disabled                                       = 0,
    Enabled                                        = 1,
    Active                                         = 2,
    Unknown                                        = 3,
    ENiagaraPlatformSetState                       = 4

};


// Enum  Niagara.ENiagaraPlatformSelectionState
enum class ENiagaraPlatformSelectionState : uint8_t
{
    Default                                        = 0,
    Enabled                                        = 1,
    Disabled                                       = 2,
    ENiagaraPlatformSelectionState                 = 3

};


// Enum  Niagara.ENiagaraPreviewGridResetMode
enum class ENiagaraPreviewGridResetMode : uint8_t
{
    Never                                          = 0,
    Individual                                     = 1,
    All                                            = 2,
    ENiagaraPreviewGridResetMode                   = 3

};


// Enum  Niagara.ENiagaraRibbonUVDistributionMode
enum class ENiagaraRibbonUVDistributionMode : uint8_t
{
    ScaledUniformly                                = 0,
    ScaledUsingRibbonSegmentLength                 = 1,
    TiledOverRibbonLength                          = 2,
    TiledFromStartOverRibbonLength                 = 3,
    ENiagaraRibbonUVDistributionMode               = 4

};


// Enum  Niagara.ENiagaraRibbonUVEdgeMode
enum class ENiagaraRibbonUVEdgeMode : uint8_t
{
    SmoothTransition                               = 0,
    Locked                                         = 1,
    ENiagaraRibbonUVEdgeMode                       = 2

};


// Enum  Niagara.ENiagaraRibbonTessellationMode
enum class ENiagaraRibbonTessellationMode : uint8_t
{
    Automatic                                      = 0,
    Custom                                         = 1,
    Disabled                                       = 2,
    ENiagaraRibbonTessellationMode                 = 3

};


// Enum  Niagara.ENiagaraRibbonShapeMode
enum class ENiagaraRibbonShapeMode : uint8_t
{
    Plane                                          = 0,
    MultiPlane                                     = 1,
    Tube                                           = 2,
    Custom                                         = 3,
    ENiagaraRibbonShapeMode                        = 4

};


// Enum  Niagara.ENiagaraRibbonDrawDirection
enum class ENiagaraRibbonDrawDirection : uint8_t
{
    FrontToBack                                    = 0,
    BackToFront                                    = 1,
    ENiagaraRibbonDrawDirection                    = 2

};


// Enum  Niagara.ENiagaraRibbonAgeOffsetMode
enum class ENiagaraRibbonAgeOffsetMode : uint8_t
{
    Scale                                          = 0,
    Clip                                           = 1,
    ENiagaraRibbonAgeOffsetMode                    = 2

};


// Enum  Niagara.ENiagaraRibbonFacingMode
enum class ENiagaraRibbonFacingMode : uint8_t
{
    Screen                                         = 0,
    Custom                                         = 1,
    CustomSideVector                               = 2,
    ENiagaraRibbonFacingMode                       = 3

};


// Enum  Niagara.ENiagaraScriptTemplateSpecification
enum class ENiagaraScriptTemplateSpecification : uint8_t
{
    None                                           = 0,
    Template                                       = 1,
    Behavior                                       = 2,
    ENiagaraScriptTemplateSpecification            = 3

};


// Enum  Niagara.ENiagaraScriptLibraryVisibility
enum class ENiagaraScriptLibraryVisibility : uint8_t
{
    Invalid                                        = 0,
    Unexposed                                      = 1,
    Library                                        = 2,
    Hidden                                         = 3,
    ENiagaraScriptLibraryVisibility                = 4

};


// Enum  Niagara.ENiagaraModuleDependencyScriptConstraint
enum class ENiagaraModuleDependencyScriptConstraint : uint8_t
{
    SameScript                                     = 0,
    AllScripts                                     = 1,
    ENiagaraModuleDependencyScriptConstraint       = 2

};


// Enum  Niagara.ENiagaraModuleDependencyType
enum class ENiagaraModuleDependencyType : uint8_t
{
    PreDependency                                  = 0,
    PostDependency                                 = 1,
    ENiagaraModuleDependencyType                   = 2

};


// Enum  Niagara.EUnusedAttributeBehaviour
enum class EUnusedAttributeBehaviour : uint8_t
{
    Copy                                           = 0,
    Zero                                           = 1,
    None                                           = 2,
    MarkInvalid                                    = 3,
    PassThrough                                    = 4,
    EUnusedAttributeBehaviour                      = 5

};


// Enum  Niagara.ENDISkelMesh
enum class ENDISkelMesh : uint8_t
{
    ENDISkelMesh                                   = 0,
    ENDISkelMesh                                   = 1,
    ENDISkelMesh                                   = 2

};


// Enum  Niagara.ENDISkelMesh
enum class ENDISkelMesh : uint8_t
{
    ENDISkelMesh                                   = 0,
    ENDISkelMesh                                   = 1,
    ENDISkelMesh                                   = 2,
    ENDISkelMesh                                   = 3

};


// Enum  Niagara.ENDISkelMesh
enum class ENDISkelMesh : uint8_t
{
    ENDISkelMesh                                   = 0,
    ENDISkelMesh                                   = 1,
    ENDISkelMesh                                   = 2,
    ENDISkelMesh                                   = 3

};


// Enum  Niagara.ENiagaraSpriteFacingMode
enum class ENiagaraSpriteFacingMode : uint8_t
{
    FaceCamera                                     = 0,
    FaceCameraPlane                                = 1,
    CustomFacingVector                             = 2,
    FaceCameraPosition                             = 3,
    FaceCameraDistanceBlend                        = 4,
    ENiagaraSpriteFacingMode                       = 5

};


// Enum  Niagara.ENiagaraSpriteAlignment
enum class ENiagaraSpriteAlignment : uint8_t
{
    Unaligned                                      = 0,
    VelocityAligned                                = 1,
    CustomAlignment                                = 2,
    ENiagaraSpriteAlignment                        = 3

};


// Enum  Niagara.ENiagaraOrientationAxis
enum class ENiagaraOrientationAxis : uint8_t
{
    XAxis                                          = 0,
    YAxis                                          = 1,
    ZAxis                                          = 2,
    ENiagaraOrientationAxis                        = 3

};


// Enum  Niagara.ENiagaraPythonUpdateScriptReference
enum class ENiagaraPythonUpdateScriptReference : uint8_t
{
    None                                           = 0,
    ScriptAsset                                    = 1,
    DirectTextEntry                                = 2,
    ENiagaraPythonUpdateScriptReference            = 3

};


// Enum  Niagara.ENiagaraCoordinateSpace
enum class ENiagaraCoordinateSpace : uint8_t
{
    Simulation                                     = 0,
    World                                          = 1,
    Local                                          = 2,
    ENiagaraCoordinateSpace                        = 3

};


// Enum  Niagara.ENiagaraExecutionState
enum class ENiagaraExecutionState : uint8_t
{
    Active                                         = 0,
    Inactive                                       = 1,
    InactiveClear                                  = 2,
    Complete                                       = 3,
    Disabled                                       = 4,
    Num                                            = 5,
    ENiagaraExecutionState                         = 6

};


// Enum  Niagara.ENiagaraExecutionStateSource
enum class ENiagaraExecutionStateSource : uint8_t
{
    Scalability                                    = 0,
    Internal                                       = 1,
    Owner                                          = 2,
    InternalCompletion                             = 3,
    ENiagaraExecutionStateSource                   = 4

};


// Enum  Niagara.ENiagaraNumericOutputTypeSelectionMode
enum class ENiagaraNumericOutputTypeSelectionMode : uint8_t
{
    None                                           = 0,
    Largest                                        = 1,
    Smallest                                       = 2,
    Scalar                                         = 3,
    ENiagaraNumericOutputTypeSelectionMode         = 4

};


// Enum  Niagara.ENiagaraVariantMode
enum class ENiagaraVariantMode : uint8_t
{
    None                                           = 0,
    Object                                         = 1,
    DataInterface                                  = 2,
    Bytes                                          = 3,
    ENiagaraVariantMode                            = 4

};


// Enum  NiagaraShader.FNiagaraCompileEventSeverity
enum class FNiagaraCompileEventSeverity : uint8_t
{
    Log                                            = 0,
    Warning                                        = 1,
    Error                                          = 2,
    FNiagaraCompileEventSeverity                   = 3

};


// Enum  RGIFriends.ERGIFriendsPlatform
enum class ERGIFriendsPlatform : uint8_t
{
    NotFirstParty                                  = 0,
    FirstPartyB                                    = 1,
    FirstPartyA                                    = 2,
    FirstPartyC                                    = 3,
    Unknown                                        = 4,
    ERGIFriendsPlatform                            = 5

};


// Enum  RGIFriends.ERGIFriendRequestType
enum class ERGIFriendRequestType : uint8_t
{
    Inbound                                        = 0,
    Outbound                                       = 1,
    ERGIFriendRequestType                          = 2

};


// Enum  RGIFriends.ERGIFriendsFriendStatus
enum class ERGIFriendsFriendStatus : uint8_t
{
    Chat                                           = 0,
    Away                                           = 1,
    Dnd                                            = 2,
    FirstPartyOnline                               = 3,
    Offline                                        = 4,
    ERGIFriendsFriendStatus                        = 5

};


// Enum  RGIFriends.ERGIFriendsBlockPlayerResponseErrors
enum class ERGIFriendsBlockPlayerResponseErrors : uint8_t
{
    NoPuuidProvided                                = 0,
    MissingPuuidOrName                             = 1,
    AlreadyBlocked                                 = 2,
    TargetingSelf                                  = 3,
    InternalError                                  = 4,
    ERGIFriendsBlockPlayerResponseErrors           = 5

};


// Enum  RGIFriends.ERGIFriendsUnblockPlayerResponseErrors
enum class ERGIFriendsUnblockPlayerResponseErrors : uint8_t
{
    NoPuuidProvided                                = 0,
    NotBlocked                                     = 1,
    TargetingSelf                                  = 2,
    InternalError                                  = 3,
    ERGIFriendsUnblockPlayerResponseErrors         = 4

};


// Enum  RGIFriends.ERGIFriendsDisplayFirstPartyProfileResponseErrors
enum class ERGIFriendsDisplayFirstPartyProfileResponseErrors : uint8_t
{
    FirstPartyAPINotReady                          = 0,
    UserNotLoggedIn                                = 1,
    FirstPartyProfileNotFound                      = 2,
    InvalidIdFormat                                = 3,
    InternalError                                  = 4,
    ERGIFriendsDisplayFirstPartyProfileResponseErrors = 5

};


// Enum  RGIFriends.ERGIFriendsUpdateFriendsResponseErrors
enum class ERGIFriendsUpdateFriendsResponseErrors : uint8_t
{
    FriendGroupEmpty                               = 0,
    MetaGroupName                                  = 1,
    FriendNotFound                                 = 2,
    StatusAlreadyTrue                              = 3,
    InternalError                                  = 4,
    ERGIFriendsUpdateFriendsResponseErrors         = 5

};


// Enum  RGIFriends.ERGIFriendsRemoveFriendErrors
enum class ERGIFriendsRemoveFriendErrors : uint8_t
{
    FriendNotFound                                 = 0,
    InternalError                                  = 1,
    ERGIFriendsRemoveFriendErrors                  = 2

};


// Enum  RGIFriends.ERGIFriendsDeclineRequestErrors
enum class ERGIFriendsDeclineRequestErrors : uint8_t
{
    RequestNotFound                                = 0,
    InternalError                                  = 1,
    ERGIFriendsDeclineRequestErrors                = 2

};


// Enum  RGIFriends.ERGIFriendsRequestResponseErrors
enum class ERGIFriendsRequestResponseErrors : uint8_t
{
    NoGameNameAndTagLineProvided                   = 0,
    InvalidNameTagFormatting                       = 1,
    RequestSentToFriend                            = 2,
    RequestSentToBlockedPlayer                     = 3,
    RequestSentToBlockingPlayer                    = 4,
    RequestSentToSelf                              = 5,
    RequestedPlayerNotFound                        = 6,
    FriendListFull                                 = 7,
    MaxOutgoingInvites                             = 8,
    MaxIncomingInvites                             = 9,
    InternalError                                  = 10,
    ERGIFriendsRequestResponseErrors               = 11

};


// Enum  RGIFriends.ERGIFriendsUsersCommunicationPermissionsResponseErrors
enum class ERGIFriendsUsersCommunicationPermissionsResponseErrors : uint8_t
{
    RiotGamesApiUpdateRequired                     = 0,
    InternalError                                  = 1,
    NotAvailable                                   = 2,
    PlatformUserNotConnected                       = 3,
    ERGIFriendsUsersCommunicationPermissionsResponseErrors = 4

};


// Enum  RGIFriends.ERGIFriendsSetCrossPlatformSocialPermissionErrors
enum class ERGIFriendsSetCrossPlatformSocialPermissionErrors : uint8_t
{
    InternalError                                  = 0,
    ERGIFriendsSetCrossPlatformSocialPermissionErrors = 1

};


// Enum  RGIFriends.FRGIFriendsCommunicationPermissionType
enum class FRGIFriendsCommunicationPermissionType : uint8_t
{
    Unknown                                        = 0,
    Text                                           = 1,
    Voice                                          = 2,
    FRGIFriendsCommunicationPermissionType         = 3

};


// Enum  RGIFriends.FRGIFriendsCommunicationPermissionState
enum class FRGIFriendsCommunicationPermissionState : uint8_t
{
    NotAllowed                                     = 0,
    Allowed                                        = 1,
    FRGIFriendsCommunicationPermissionState        = 2

};


// Enum  RGIFriends.ERGIFriendsUsersCommunicationPermissionsDenyReasons
enum class ERGIFriendsUsersCommunicationPermissionsDenyReasons : uint8_t
{
    Unknown                                        = 0,
    NotAllowed                                     = 1,
    MissingPrivilege                               = 2,
    PrivilegeRestrictsTarget                       = 3,
    BlockListRestrictsTarget                       = 4,
    MuteListRestrictsTarget                        = 5,
    PrivacySettingRestrictsTarget                  = 6,
    CrossNetworkUserMustBeFriend                   = 7,
    ERGIFriendsUsersCommunicationPermissionsDenyReasons = 8

};


// Enum  ControlRig.EControlRigComponentMapDirection
enum class EControlRigComponentMapDirection : uint8_t
{
    Input                                          = 0,
    Output                                         = 1,
    EControlRigComponentMapDirection               = 2

};


// Enum  ControlRig.EControlRigComponentSpace
enum class EControlRigComponentSpace : uint8_t
{
    WorldSpace                                     = 0,
    ActorSpace                                     = 1,
    ComponentSpace                                 = 2,
    RigSpace                                       = 3,
    LocalSpace                                     = 4,
    Max                                            = 5,
    EControlRigComponentSpace                      = 6

};


// Enum  ControlRig.ERigExecutionType
enum class ERigExecutionType : uint8_t
{
    Runtime                                        = 0,
    Editing                                        = 1,
    Max                                            = 2,
    ERigExecutionType                              = 3

};


// Enum  ControlRig.EBoneGetterSetterMode
enum class EBoneGetterSetterMode : uint8_t
{
    LocalSpace                                     = 0,
    GlobalSpace                                    = 1,
    Max                                            = 2,
    EBoneGetterSetterMode                          = 3

};


// Enum  ControlRig.ETransformGetterType
enum class ETransformGetterType : uint8_t
{
    Initial                                        = 0,
    Current                                        = 1,
    Max                                            = 2,
    ETransformGetterType                           = 3

};


// Enum  ControlRig.EControlRigClampSpatialMode
enum class EControlRigClampSpatialMode : uint8_t
{
    Plane                                          = 0,
    Cylinder                                       = 1,
    Sphere                                         = 2,
    EControlRigClampSpatialMode                    = 3

};


// Enum  ControlRig.ETransformSpaceMode
enum class ETransformSpaceMode : uint8_t
{
    LocalSpace                                     = 0,
    GlobalSpace                                    = 1,
    BaseSpace                                      = 2,
    BaseJoint                                      = 3,
    Max                                            = 4,
    ETransformSpaceMode                            = 5

};


// Enum  ControlRig.EControlRigDrawSettings
enum class EControlRigDrawSettings : uint8_t
{
    Points                                         = 0,
    Lines                                          = 1,
    LineStrip                                      = 2,
    DynamicMesh                                    = 3,
    EControlRigDrawSettings                        = 4

};


// Enum  ControlRig.EControlRigDrawHierarchyMode
enum class EControlRigDrawHierarchyMode : uint8_t
{
    Axes                                           = 0,
    Max                                            = 1,
    EControlRigDrawHierarchyMode                   = 2

};


// Enum  ControlRig.EControlRigAnimEasingType
enum class EControlRigAnimEasingType : uint8_t
{
    Linear                                         = 0,
    QuadraticEaseIn                                = 1,
    QuadraticEaseOut                               = 2,
    QuadraticEaseInOut                             = 3,
    CubicEaseIn                                    = 4,
    CubicEaseOut                                   = 5,
    CubicEaseInOut                                 = 6,
    QuarticEaseIn                                  = 7,
    QuarticEaseOut                                 = 8,
    QuarticEaseInOut                               = 9,
    QuinticEaseIn                                  = 10,
    QuinticEaseOut                                 = 11,
    QuinticEaseInOut                               = 12,
    SineEaseIn                                     = 13,
    SineEaseOut                                    = 14,
    SineEaseInOut                                  = 15,
    CircularEaseIn                                 = 16,
    CircularEaseOut                                = 17,
    CircularEaseInOut                              = 18,
    ExponentialEaseIn                              = 19,
    ExponentialEaseOut                             = 20,
    ExponentialEaseInOut                           = 21,
    ElasticEaseIn                                  = 22,
    ElasticEaseOut                                 = 23,
    ElasticEaseInOut                               = 24,
    BackEaseIn                                     = 25,
    BackEaseOut                                    = 26,
    BackEaseInOut                                  = 27,
    BounceEaseIn                                   = 28,
    BounceEaseOut                                  = 29,
    BounceEaseInOut                                = 30,
    EControlRigAnimEasingType                      = 31

};


// Enum  ControlRig.EControlRigRotationOrder
enum class EControlRigRotationOrder : uint8_t
{
    XYZ                                            = 0,
    XZY                                            = 1,
    YXZ                                            = 2,
    YZX                                            = 3,
    ZXY                                            = 4,
    ZYX                                            = 5,
    EControlRigRotationOrder                       = 6

};


// Enum  ControlRig.ECRSimPointIntegrateType
enum class ECRSimPointIntegrateType : uint8_t
{
    Verlet                                         = 0,
    SemiExplicitEuler                              = 1,
    ECRSimPointIntegrateType                       = 2

};


// Enum  ControlRig.ECRSimConstraintType
enum class ECRSimConstraintType : uint8_t
{
    Distance                                       = 0,
    DistanceFromA                                  = 1,
    DistanceFromB                                  = 2,
    Plane                                          = 3,
    ECRSimConstraintType                           = 4

};


// Enum  ControlRig.ECRSimPointForceType
enum class ECRSimPointForceType : uint8_t
{
    Direction                                      = 0,
    ECRSimPointForceType                           = 1

};


// Enum  ControlRig.ECRSimSoftCollisionType
enum class ECRSimSoftCollisionType : uint8_t
{
    Plane                                          = 0,
    Sphere                                         = 1,
    Cone                                           = 2,
    ECRSimSoftCollisionType                        = 3

};


// Enum  ControlRig.EControlRigFKRigExecuteMode
enum class EControlRigFKRigExecuteMode : uint8_t
{
    Replace                                        = 0,
    Additive                                       = 1,
    Max                                            = 2,
    EControlRigFKRigExecuteMode                    = 3

};


// Enum  ControlRig.ERigBoneType
enum class ERigBoneType : uint8_t
{
    Imported                                       = 0,
    User                                           = 1,
    ERigBoneType                                   = 2

};


// Enum  ControlRig.ERigControlAxis
enum class ERigControlAxis : uint8_t
{
    X                                              = 0,
    Y                                              = 1,
    Z                                              = 2,
    ERigControlAxis                                = 3

};


// Enum  ControlRig.ERigControlValueType
enum class ERigControlValueType : uint8_t
{
    Initial                                        = 0,
    Current                                        = 1,
    Minimum                                        = 2,
    Maximum                                        = 3,
    ERigControlValueType                           = 4

};


// Enum  ControlRig.ERigControlType
enum class ERigControlType : uint8_t
{
    Bool                                           = 0,
    Float                                          = 1,
    Integer                                        = 2,
    Vector2D                                       = 3,
    Position                                       = 4,
    Scale                                          = 5,
    Rotator                                        = 6,
    Transform                                      = 7,
    TransformNoScale                               = 8,
    EulerTransform                                 = 9,
    ERigControlType                                = 10

};


// Enum  ControlRig.ERigHierarchyImportMode
enum class ERigHierarchyImportMode : uint8_t
{
    Append                                         = 0,
    Replace                                        = 1,
    ReplaceLocalTransform                          = 2,
    ReplaceGlobalTransform                         = 3,
    Max                                            = 4,
    ERigHierarchyImportMode                        = 5

};


// Enum  ControlRig.EControlRigSetKey
enum class EControlRigSetKey : uint8_t
{
    DoNotCare                                      = 0,
    Always                                         = 1,
    Never                                          = 2,
    EControlRigSetKey                              = 3

};


// Enum  ControlRig.ERigEvent
enum class ERigEvent : uint8_t
{
    None                                           = 0,
    RequestAutoKey                                 = 1,
    Max                                            = 2,
    ERigEvent                                      = 3

};


// Enum  ControlRig.ERigElementType
enum class ERigElementType : uint8_t
{
    None                                           = 0,
    Bone                                           = 1,
    Space                                          = 2,
    Control                                        = 4,
    Curve                                          = 8,
    All                                            = 15,
    ERigElementType                                = 16

};


// Enum  ControlRig.ERigSpaceType
enum class ERigSpaceType : uint8_t
{
    Global                                         = 0,
    Bone                                           = 1,
    Control                                        = 2,
    Space                                          = 3,
    ERigSpaceType                                  = 4

};


// Enum  ControlRig.EAimMode
enum class EAimMode : uint8_t
{
    AimAtTarget                                    = 0,
    OrientToTarget                                 = 1,
    MAX                                            = 2

};


// Enum  ControlRig.EApplyTransformMode
enum class EApplyTransformMode : uint8_t
{
    Override                                       = 0,
    Additive                                       = 1,
    Max                                            = 2,
    EApplyTransformMode                            = 3

};


// Enum  ControlRig.ERigUnitDebugPointMode
enum class ERigUnitDebugPointMode : uint8_t
{
    Point                                          = 0,
    Vector                                         = 1,
    Max                                            = 2,
    ERigUnitDebugPointMode                         = 3

};


// Enum  ControlRig.ERigUnitDebugTransformMode
enum class ERigUnitDebugTransformMode : uint8_t
{
    Point                                          = 0,
    Axes                                           = 1,
    Box                                            = 2,
    Max                                            = 3,
    ERigUnitDebugTransformMode                     = 4

};


// Enum  ControlRig.EControlRigCurveAlignment
enum class EControlRigCurveAlignment : uint8_t
{
    Front                                          = 0,
    Stretched                                      = 1,
    EControlRigCurveAlignment                      = 2

};


// Enum  ControlRig.EControlRigVectorKind
enum class EControlRigVectorKind : uint8_t
{
    Direction                                      = 0,
    Location                                       = 1,
    EControlRigVectorKind                          = 2

};


// Enum  ControlRig.ERBFVectorDistanceType
enum class ERBFVectorDistanceType : uint8_t
{
    Euclidean                                      = 0,
    Manhattan                                      = 1,
    ArcLength                                      = 2,
    ERBFVectorDistanceType                         = 3

};


// Enum  ControlRig.ERBFQuatDistanceType
enum class ERBFQuatDistanceType : uint8_t
{
    Euclidean                                      = 0,
    ArcLength                                      = 1,
    SwingAngle                                     = 2,
    TwistAngle                                     = 3,
    ERBFQuatDistanceType                           = 4

};


// Enum  ControlRig.ERBFKernelType
enum class ERBFKernelType : uint8_t
{
    Gaussian                                       = 0,
    Exponential                                    = 1,
    Linear                                         = 2,
    Cubic                                          = 3,
    Quintic                                        = 4,
    ERBFKernelType                                 = 5

};


// Enum  ControlRig.EControlRigModifyBoneMode
enum class EControlRigModifyBoneMode : uint8_t
{
    OverrideLocal                                  = 0,
    OverrideGlobal                                 = 1,
    AdditiveLocal                                  = 2,
    AdditiveGlobal                                 = 3,
    Max                                            = 4,
    EControlRigModifyBoneMode                      = 5

};


// Enum  ControlRig.ERigUnitVisualDebugPointMode
enum class ERigUnitVisualDebugPointMode : uint8_t
{
    Point                                          = 0,
    Vector                                         = 1,
    Max                                            = 2,
    ERigUnitVisualDebugPointMode                   = 3

};


// Enum  ControlRig.EControlRigState
enum class EControlRigState : uint8_t
{
    Init                                           = 0,
    Update                                         = 1,
    Invalid                                        = 2,
    EControlRigState                               = 3

};


// Enum  VTSPlugin.EVTSPlayerSynchronizationEventType
enum class EVTSPlayerSynchronizationEventType : uint8_t
{
    AutonomousHeartbeat                            = 0,
    RemoteHeartbeat                                = 1,
    TimeShift                                      = 2,
    FixedTimeStepSizeChange                        = 3,
    Count                                          = 4,
    EVTSPlayerSynchronizationEventType             = 5

};


// Enum  VTSPlugin.EVTSSerializeResult
enum class EVTSSerializeResult : uint8_t
{
    SuccessWithPayload                             = 0,
    SuccessEmptyPayload                            = 1,
    SerializationError                             = 2,
    EVTSSerializeResult                            = 3

};


// Enum  VTSPlugin.EVTSTSerializationChannel
enum class EVTSTSerializationChannel : uint8_t
{
    Reliable                                       = 0,
    Unreliable                                     = 1,
    EVTSTSerializationChannel                      = 2

};


// Enum  VTSPlugin.EVTSTInstructionType
enum class EVTSTInstructionType : uint8_t
{
    Delivery                                       = 0,
    Tick                                           = 1,
    EVTSTInstructionType                           = 2

};


// Enum  VTSPlugin.EVTSVALHeartbeatDequeueHealth
enum class EVTSVALHeartbeatDequeueHealth : uint8_t
{
    Good                                           = 0,
    ForwardPredictedGap                            = 1,
    ForwardPredicted                               = 2,
    NoBasis                                        = 3,
    EVTSVALHeartbeatDequeueHealth                  = 4

};


// Enum  VTSPlugin.EVTSVALHeartbeatEnqueueHealth
enum class EVTSVALHeartbeatEnqueueHealth : uint8_t
{
    Perfect                                        = 0,
    Good                                           = 1,
    Outdated                                       = 2,
    Duplicate                                      = 3,
    OverCapacity                                   = 4,
    EVTSVALHeartbeatEnqueueHealth                  = 5

};


// Enum  VTSPlugin.EVTSVALTimeShiftMonitorRemoteDelayCondition
enum class EVTSVALTimeShiftMonitorRemoteDelayCondition : uint8_t
{
    Optimal                                        = 0,
    Average                                        = 1,
    Poor                                           = 2,
    EVTSVALTimeShiftMonitorRemoteDelayCondition    = 3

};


// Enum  DynamicVolume.EGroundVolumeFragmentStatus
enum class EGroundVolumeFragmentStatus : uint8_t
{
    AllInside                                      = 0,
    PartiallyOutside                               = 1,
    PartiallyBlocked                               = 2,
    Invalid                                        = 3,
    Count                                          = 4,
    EGroundVolumeFragmentStatus                    = 5

};


// Enum  DynamicVolume.EDynamicVolumeBuildStatus
enum class EDynamicVolumeBuildStatus : uint8_t
{
    BuildNotStarted                                = 0,
    BuildInProgress                                = 1,
    BuildComplete                                  = 2,
    BuildError                                     = 3,
    Count                                          = 4,
    EDynamicVolumeBuildStatus                      = 5

};


// Enum  KawaiiPhysics.ECollisionLimitType
enum class ECollisionLimitType : uint8_t
{
    None                                           = 0,
    Spherical                                      = 1,
    Capsule                                        = 2,
    Planar                                         = 3,
    ECollisionLimitType                            = 4

};


// Enum  KawaiiPhysics.EBoneForwardAxis
enum class EBoneForwardAxis : uint8_t
{
    X                                              = 0,
    X                                              = 1,
    Y                                              = 2,
    Y                                              = 3,
    Z                                              = 4,
    Z                                              = 5,
    EBoneForwardAxis                               = 6

};


// Enum  KawaiiPhysics.EPlanarConstraint
enum class EPlanarConstraint : uint8_t
{
    None                                           = 0,
    X                                              = 1,
    Y                                              = 2,
    Z                                              = 3,
    EPlanarConstraint                              = 4

};


// Enum  Paper2D.EFlipbookCollisionMode
enum class EFlipbookCollisionMode : uint8_t
{
    NoCollision                                    = 0,
    FirstFrameCollision                            = 1,
    EachFrameCollision                             = 2,
    EFlipbookCollisionMode                         = 3

};


// Enum  Paper2D.EPaperSpriteAtlasPadding
enum class EPaperSpriteAtlasPadding : uint8_t
{
    DilateBorder                                   = 0,
    PadWithZero                                    = 1,
    EPaperSpriteAtlasPadding                       = 2

};


// Enum  Paper2D.ETileMapProjectionMode
enum class ETileMapProjectionMode : uint8_t
{
    Orthogonal                                     = 0,
    IsometricDiamond                               = 1,
    IsometricStaggered                             = 2,
    HexagonalStaggered                             = 3,
    ETileMapProjectionMode                         = 4

};


// Enum  Paper2D.ESpritePivotMode
enum class ESpritePivotMode : uint8_t
{
    Top                                            = 0,
    Top                                            = 1,
    Top                                            = 2,
    Center                                         = 3,
    Center                                         = 4,
    Center                                         = 5,
    Bottom                                         = 6,
    Bottom                                         = 7,
    Bottom                                         = 8,
    Custom                                         = 9,
    ESpritePivotMode                               = 10

};


// Enum  Paper2D.ESpritePolygonMode
enum class ESpritePolygonMode : uint8_t
{
    SourceBoundingBox                              = 0,
    TightBoundingBox                               = 1,
    ShrinkWrapped                                  = 2,
    FullyCustom                                    = 3,
    Diced                                          = 4,
    ESpritePolygonMode                             = 5

};


// Enum  Paper2D.ESpriteShapeType
enum class ESpriteShapeType : uint8_t
{
    Box                                            = 0,
    Circle                                         = 1,
    Polygon                                        = 2,
    ESpriteShapeType                               = 3

};


// Enum  Paper2D.ESpriteCollisionMode
enum class ESpriteCollisionMode : uint8_t
{
    None                                           = 0,
    Use2DPhysics                                   = 1,
    Use3DPhysics                                   = 2,
    ESpriteCollisionMode                           = 3

};


// Enum  ACLPlugin.ACLCompressionLevel
enum class ACLCompressionLevel : uint8_t
{
    ACLCL                                          = 0,
    ACLCL                                          = 1,
    ACLCL                                          = 2,
    ACLCL                                          = 3,
    ACLCL                                          = 4,
    ACLCL                                          = 5

};


// Enum  ACLPlugin.ACLVectorFormat
enum class ACLVectorFormat : uint8_t
{
    ACLVF                                          = 0,
    ACLVF                                          = 1,
    ACLVF                                          = 2

};


// Enum  ACLPlugin.ACLRotationFormat
enum class ACLRotationFormat : uint8_t
{
    ACLRF                                          = 0,
    ACLRF                                          = 1,
    ACLRF                                          = 2,
    ACLRF                                          = 3

};


// Enum  ACLPlugin.ACLVisualFidelityChangeResult
enum class ACLVisualFidelityChangeResult : uint8_t
{
    Dispatched                                     = 0,
    Completed                                      = 1,
    Failed                                         = 2,
    ACLVisualFidelityChangeResult                  = 3

};


// Enum  ACLPlugin.ACLVisualFidelity
enum class ACLVisualFidelity : uint8_t
{
    Highest                                        = 0,
    Medium                                         = 1,
    Lowest                                         = 2,
    ACLVisualFidelity                              = 3

};


// Enum  GameplayCameras.EInitialOscillatorOffset
enum class EInitialOscillatorOffset : uint8_t
{
    EOO                                            = 0,
    EOO                                            = 1,
    EOO                                            = 2,
    EOO                                            = 3

};


// Enum  GameplayCameras.EOscillatorWaveform
enum class EOscillatorWaveform : uint8_t
{
    SineWave                                       = 0,
    PerlinNoise                                    = 1,
    EOscillatorWaveform                            = 2

};


// Enum  GameplayCameras.EInitialWaveOscillatorOffsetType
enum class EInitialWaveOscillatorOffsetType : uint8_t
{
    Random                                         = 0,
    Zero                                           = 1,
    EInitialWaveOscillatorOffsetType               = 2

};


// Enum  TemplateSequence.ETemplateSectionPropertyScaleType
enum class ETemplateSectionPropertyScaleType : uint8_t
{
    FloatProperty                                  = 0,
    TransformPropertyLocationOnly                  = 1,
    TransformPropertyRotationOnly                  = 2,
    ETemplateSectionPropertyScaleType              = 3

};


// Enum  VariantManagerContent.EPropertyValueCategory
enum class EPropertyValueCategory : uint8_t
{
    Undefined                                      = 0,
    Generic                                        = 1,
    RelativeLocation                               = 2,
    RelativeRotation                               = 4,
    RelativeScale3D                                = 8,
    Visibility                                     = 16,
    Material                                       = 32,
    Color                                          = 64,
    Option                                         = 128,
    EPropertyValueCategory                         = 129

};


// Enum  ChaosCloth.EChaosClothTetherMode
enum class EChaosClothTetherMode : uint8_t
{
    FastTetherFastLength                           = 0,
    AccurateTetherFastLength                       = 1,
    AccurateTetherAccurateLength                   = 2,
    MaxChaosClothTetherMode                        = 3,
    EChaosClothTetherMode                          = 4

};


// Enum  ChaosCloth.EChaosWeightMapTarget
enum class EChaosWeightMapTarget : uint8_t
{
    None                                           = 0,
    MaxDistance                                    = 1,
    BackstopDistance                               = 2,
    BackstopRadius                                 = 3,
    AnimDriveStiffness                             = 4,
    AnimDriveDamping                               = 5,
    TetherStiffness                                = 6,
    EChaosWeightMapTarget                          = 7

};


// Enum  EditableMesh.ETriangleTessellationMode
enum class ETriangleTessellationMode : uint8_t
{
    ThreeTriangles                                 = 0,
    FourTriangles                                  = 1,
    ETriangleTessellationMode                      = 2

};


// Enum  EditableMesh.EInsetPolygonsMode
enum class EInsetPolygonsMode : uint8_t
{
    All                                            = 0,
    CenterPolygonOnly                              = 1,
    SidePolygonsOnly                               = 2,
    EInsetPolygonsMode                             = 3

};


// Enum  EditableMesh.EPolygonEdgeHardness
enum class EPolygonEdgeHardness : uint8_t
{
    NewEdgesSoft                                   = 0,
    NewEdgesHard                                   = 1,
    AllEdgesSoft                                   = 2,
    AllEdgesHard                                   = 3,
    EPolygonEdgeHardness                           = 4

};


// Enum  EditableMesh.EMeshElementAttributeType
enum class EMeshElementAttributeType : uint8_t
{
    None                                           = 0,
    FVector4                                       = 1,
    FVector                                        = 2,
    FVector2D                                      = 3,
    Float                                          = 4,
    Int                                            = 5,
    Bool                                           = 6,
    FName                                          = 7,
    EMeshElementAttributeType                      = 8

};


// Enum  EditableMesh.EMeshTopologyChange
enum class EMeshTopologyChange : uint8_t
{
    NoTopologyChange                               = 0,
    TopologyChange                                 = 1,
    EMeshTopologyChange                            = 2

};


// Enum  EditableMesh.EMeshModificationType
enum class EMeshModificationType : uint8_t
{
    FirstInterim                                   = 0,
    Interim                                        = 1,
    Final                                          = 2,
    EMeshModificationType                          = 3

};


// Enum  ProceduralMeshComponent.EProcMeshSliceCapOption
enum class EProcMeshSliceCapOption : uint8_t
{
    NoCap                                          = 0,
    CreateNewSectionForCap                         = 1,
    UseLastSectionForCap                           = 2,
    EProcMeshSliceCapOption                        = 3

};


// Enum  GameplayMessageRuntime.EGameplayMessageMatch
enum class EGameplayMessageMatch : uint8_t
{
    ExactMatch                                     = 0,
    PartialMatch                                   = 1,
    EGameplayMessageMatch                          = 2

};


// Enum  UdpMessaging.EUdpMessageFormat
enum class EUdpMessageFormat : uint8_t
{
    None                                           = 0,
    Json                                           = 1,
    TaggedProperty                                 = 2,
    CborPlatformEndianness                         = 3,
    CborStandardEndianness                         = 4,
    EUdpMessageFormat                              = 5

};


// Enum  ActorSequence.EActorSequenceObjectReferenceType
enum class EActorSequenceObjectReferenceType : uint8_t
{
    ContextActor                                   = 0,
    ExternalActor                                  = 1,
    Component                                      = 2,
    EActorSequenceObjectReferenceType              = 3

};


// Enum  PlayerFeedbackToolModule.EPlayerFeedbackQuestionType
enum class EPlayerFeedbackQuestionType : uint8_t
{
    UNKNOWN                                        = 0,
    LIKERT                                         = 1,
    FREE                                           = 2,
    EPlayerFeedbackQuestionType                    = 3

};


// Enum  AssetTags.ECollectionScriptingShareType
enum class ECollectionScriptingShareType : uint8_t
{
    Local                                          = 0,
    Private                                        = 1,
    Shared                                         = 2,
    ECollectionScriptingShareType                  = 3

};


// Enum  GooglePAD.EGooglePADCellularDataConfirmStatus
enum class EGooglePADCellularDataConfirmStatus : uint8_t
{
    AssetPack                                      = 0,
    AssetPack                                      = 1,
    AssetPack                                      = 2,
    AssetPack                                      = 3,
    AssetPack                                      = 4

};


// Enum  GooglePAD.EGooglePADStorageMethod
enum class EGooglePADStorageMethod : uint8_t
{
    AssetPack                                      = 0,
    AssetPack                                      = 1,
    AssetPack                                      = 2,
    AssetPack                                      = 3,
    AssetPack                                      = 4

};


// Enum  GooglePAD.EGooglePADDownloadStatus
enum class EGooglePADDownloadStatus : uint8_t
{
    AssetPack                                      = 0,
    AssetPack                                      = 1,
    AssetPack                                      = 2,
    AssetPack                                      = 3,
    AssetPack                                      = 4,
    AssetPack                                      = 5,
    AssetPack                                      = 6,
    AssetPack                                      = 7,
    AssetPack                                      = 8,
    AssetPack                                      = 9,
    AssetPack                                      = 10,
    AssetPack                                      = 11,
    AssetPack                                      = 12,
    AssetPack                                      = 13

};


// Enum  GooglePAD.EGooglePADErrorCode
enum class EGooglePADErrorCode : uint8_t
{
    AssetPack                                      = 0,
    AssetPack                                      = 1,
    AssetPack                                      = 2,
    AssetPack                                      = 3,
    AssetPack                                      = 4,
    AssetPack                                      = 5,
    AssetPack                                      = 6,
    AssetPack                                      = 7,
    AssetPack                                      = 8,
    AssetPack                                      = 9,
    AssetPack                                      = 10,
    AssetPack                                      = 11,
    AssetPack                                      = 12,
    AssetPack                                      = 13,
    AssetPack                                      = 14

};


// Enum  Synthesis.ESynth1PatchDestination
enum class ESynth1PatchDestination : uint8_t
{
    Osc1Gain                                       = 0,
    Osc1Frequency                                  = 1,
    Osc1Pulsewidth                                 = 2,
    Osc2Gain                                       = 3,
    Osc2Frequency                                  = 4,
    Osc2Pulsewidth                                 = 5,
    FilterFrequency                                = 6,
    FilterQ                                        = 7,
    Gain                                           = 8,
    Pan                                            = 9,
    LFO1Frequency                                  = 10,
    LFO1Gain                                       = 11,
    LFO2Frequency                                  = 12,
    LFO2Gain                                       = 13,
    Count                                          = 14,
    ESynth1PatchDestination                        = 15

};


// Enum  Synthesis.ESynth1PatchSource
enum class ESynth1PatchSource : uint8_t
{
    LFO1                                           = 0,
    LFO2                                           = 1,
    Envelope                                       = 2,
    BiasEnvelope                                   = 3,
    Count                                          = 4,
    ESynth1PatchSource                             = 5

};


// Enum  Synthesis.ESynthStereoDelayMode
enum class ESynthStereoDelayMode : uint8_t
{
    Normal                                         = 0,
    Cross                                          = 1,
    PingPong                                       = 2,
    Count                                          = 3,
    ESynthStereoDelayMode                          = 4

};


// Enum  Synthesis.ESynthFilterAlgorithm
enum class ESynthFilterAlgorithm : uint8_t
{
    OnePole                                        = 0,
    StateVariable                                  = 1,
    Ladder                                         = 2,
    Count                                          = 3,
    ESynthFilterAlgorithm                          = 4

};


// Enum  Synthesis.ESynthFilterType
enum class ESynthFilterType : uint8_t
{
    LowPass                                        = 0,
    HighPass                                       = 1,
    BandPass                                       = 2,
    BandStop                                       = 3,
    Count                                          = 4,
    ESynthFilterType                               = 5

};


// Enum  Synthesis.ESynthModEnvBiasPatch
enum class ESynthModEnvBiasPatch : uint8_t
{
    PatchToNone                                    = 0,
    PatchToOscFreq                                 = 1,
    PatchToFilterFreq                              = 2,
    PatchToFilterQ                                 = 3,
    PatchToLFO1Gain                                = 4,
    PatchToLFO2Gain                                = 5,
    PatchToLFO1Freq                                = 6,
    PatchToLFO2Freq                                = 7,
    Count                                          = 8,
    ESynthModEnvBiasPatch                          = 9

};


// Enum  Synthesis.ESynthModEnvPatch
enum class ESynthModEnvPatch : uint8_t
{
    PatchToNone                                    = 0,
    PatchToOscFreq                                 = 1,
    PatchToFilterFreq                              = 2,
    PatchToFilterQ                                 = 3,
    PatchToLFO1Gain                                = 4,
    PatchToLFO2Gain                                = 5,
    PatchToLFO1Freq                                = 6,
    PatchToLFO2Freq                                = 7,
    Count                                          = 8,
    ESynthModEnvPatch                              = 9

};


// Enum  Synthesis.ESynthLFOPatchType
enum class ESynthLFOPatchType : uint8_t
{
    PatchToNone                                    = 0,
    PatchToGain                                    = 1,
    PatchToOscFreq                                 = 2,
    PatchToFilterFreq                              = 3,
    PatchToFilterQ                                 = 4,
    PatchToOscPulseWidth                           = 5,
    PatchToOscPan                                  = 6,
    PatchLFO1ToLFO2Frequency                       = 7,
    PatchLFO1ToLFO2Gain                            = 8,
    Count                                          = 9,
    ESynthLFOPatchType                             = 10

};


// Enum  Synthesis.ESynthLFOMode
enum class ESynthLFOMode : uint8_t
{
    Sync                                           = 0,
    OneShot                                        = 1,
    Free                                           = 2,
    Count                                          = 3,
    ESynthLFOMode                                  = 4

};


// Enum  Synthesis.ESynthLFOType
enum class ESynthLFOType : uint8_t
{
    Sine                                           = 0,
    UpSaw                                          = 1,
    DownSaw                                        = 2,
    Square                                         = 3,
    Triangle                                       = 4,
    Exponential                                    = 5,
    RandomSampleHold                               = 6,
    Count                                          = 7,
    ESynthLFOType                                  = 8

};


// Enum  Synthesis.ESynth1OscType
enum class ESynth1OscType : uint8_t
{
    Sine                                           = 0,
    Saw                                            = 1,
    Triangle                                       = 2,
    Square                                         = 3,
    Noise                                          = 4,
    Count                                          = 5,
    ESynth1OscType                                 = 6

};


// Enum  Synthesis.ESourceEffectDynamicsPeakMode
enum class ESourceEffectDynamicsPeakMode : uint8_t
{
    MeanSquared                                    = 0,
    RootMeanSquared                                = 1,
    Peak                                           = 2,
    Count                                          = 3,
    ESourceEffectDynamicsPeakMode                  = 4

};


// Enum  Synthesis.ESourceEffectDynamicsProcessorType
enum class ESourceEffectDynamicsProcessorType : uint8_t
{
    Compressor                                     = 0,
    Limiter                                        = 1,
    Expander                                       = 2,
    Gate                                           = 3,
    Count                                          = 4,
    ESourceEffectDynamicsProcessorType             = 5

};


// Enum  Synthesis.EEnvelopeFollowerPeakMode
enum class EEnvelopeFollowerPeakMode : uint8_t
{
    MeanSquared                                    = 0,
    RootMeanSquared                                = 1,
    Peak                                           = 2,
    Count                                          = 3,
    EEnvelopeFollowerPeakMode                      = 4

};


// Enum  Synthesis.ESourceEffectFilterParam
enum class ESourceEffectFilterParam : uint8_t
{
    FilterFrequency                                = 0,
    FilterResonance                                = 1,
    Count                                          = 2,
    ESourceEffectFilterParam                       = 3

};


// Enum  Synthesis.ESourceEffectFilterType
enum class ESourceEffectFilterType : uint8_t
{
    LowPass                                        = 0,
    HighPass                                       = 1,
    BandPass                                       = 2,
    BandStop                                       = 3,
    Count                                          = 4,
    ESourceEffectFilterType                        = 5

};


// Enum  Synthesis.ESourceEffectFilterCircuit
enum class ESourceEffectFilterCircuit : uint8_t
{
    OnePole                                        = 0,
    StateVariable                                  = 1,
    Ladder                                         = 2,
    Count                                          = 3,
    ESourceEffectFilterCircuit                     = 4

};


// Enum  Synthesis.EStereoChannelMode
enum class EStereoChannelMode : uint8_t
{
    MidSide                                        = 0,
    LeftRight                                      = 1,
    count                                          = 2,
    EStereoChannelMode                             = 3

};


// Enum  Synthesis.EPhaserLFOType
enum class EPhaserLFOType : uint8_t
{
    Sine                                           = 0,
    UpSaw                                          = 1,
    DownSaw                                        = 2,
    Square                                         = 3,
    Triangle                                       = 4,
    Exponential                                    = 5,
    RandomSampleHold                               = 6,
    Count                                          = 7,
    EPhaserLFOType                                 = 8

};


// Enum  Synthesis.ERingModulatorTypeSourceEffect
enum class ERingModulatorTypeSourceEffect : uint8_t
{
    Sine                                           = 0,
    Saw                                            = 1,
    Triangle                                       = 2,
    Square                                         = 3,
    Count                                          = 4,
    ERingModulatorTypeSourceEffect                 = 5

};


// Enum  Synthesis.EStereoDelayFiltertype
enum class EStereoDelayFiltertype : uint8_t
{
    Lowpass                                        = 0,
    Highpass                                       = 1,
    Bandpass                                       = 2,
    Notch                                          = 3,
    Count                                          = 4,
    EStereoDelayFiltertype                         = 5

};


// Enum  Synthesis.EStereoDelaySourceEffect
enum class EStereoDelaySourceEffect : uint8_t
{
    Normal                                         = 0,
    Cross                                          = 1,
    PingPong                                       = 2,
    Count                                          = 3,
    EStereoDelaySourceEffect                       = 4

};


// Enum  Synthesis.ESubmixEffectConvolutionReverbBlockSize
enum class ESubmixEffectConvolutionReverbBlockSize : uint8_t
{
    BlockSize256                                   = 0,
    BlockSize512                                   = 1,
    BlockSize1024                                  = 2,
    ESubmixEffectConvolutionReverbBlockSize        = 3

};


// Enum  Synthesis.ESubmixFilterAlgorithm
enum class ESubmixFilterAlgorithm : uint8_t
{
    OnePole                                        = 0,
    StateVariable                                  = 1,
    Ladder                                         = 2,
    Count                                          = 3,
    ESubmixFilterAlgorithm                         = 4

};


// Enum  Synthesis.ESubmixFilterType
enum class ESubmixFilterType : uint8_t
{
    LowPass                                        = 0,
    HighPass                                       = 1,
    BandPass                                       = 2,
    BandStop                                       = 3,
    Count                                          = 4,
    ESubmixFilterType                              = 5

};


// Enum  Synthesis.ETapLineMode
enum class ETapLineMode : uint8_t
{
    SendToChannel                                  = 0,
    Panning                                        = 1,
    Disabled                                       = 2,
    ETapLineMode                                   = 3

};


// Enum  Synthesis.EGranularSynthSeekType
enum class EGranularSynthSeekType : uint8_t
{
    FromBeginning                                  = 0,
    FromCurrentPosition                            = 1,
    Count                                          = 2,
    EGranularSynthSeekType                         = 3

};


// Enum  Synthesis.EGranularSynthEnvelopeType
enum class EGranularSynthEnvelopeType : uint8_t
{
    Rectangular                                    = 0,
    Triangle                                       = 1,
    DownwardTriangle                               = 2,
    UpwardTriangle                                 = 3,
    ExponentialDecay                               = 4,
    ExponentialIncrease                            = 5,
    Gaussian                                       = 6,
    Hanning                                        = 7,
    Lanczos                                        = 8,
    Cosine                                         = 9,
    CosineSquared                                  = 10,
    Welch                                          = 11,
    Blackman                                       = 12,
    BlackmanHarris                                 = 13,
    Count                                          = 14,
    EGranularSynthEnvelopeType                     = 15

};


// Enum  Synthesis.CurveInterpolationType
enum class CurveInterpolationType : uint8_t
{
    AUTOINTERP                                     = 0,
    LINEAR                                         = 1,
    CONSTANT                                       = 2,
    CurveInterpolationType                         = 3

};


// Enum  Synthesis.ESamplePlayerSeekType
enum class ESamplePlayerSeekType : uint8_t
{
    FromBeginning                                  = 0,
    FromCurrentPosition                            = 1,
    FromEnd                                        = 2,
    Count                                          = 3,
    ESamplePlayerSeekType                          = 4

};


// Enum  Synthesis.ESynthKnobSize
enum class ESynthKnobSize : uint8_t
{
    Medium                                         = 0,
    Large                                          = 1,
    Count                                          = 2,
    ESynthKnobSize                                 = 3

};


// Enum  Synthesis.ESynthSlateColorStyle
enum class ESynthSlateColorStyle : uint8_t
{
    Light                                          = 0,
    Dark                                           = 1,
    Count                                          = 2,
    ESynthSlateColorStyle                          = 3

};


// Enum  Synthesis.ESynthSlateSizeType
enum class ESynthSlateSizeType : uint8_t
{
    Small                                          = 0,
    Medium                                         = 1,
    Large                                          = 2,
    Count                                          = 3,
    ESynthSlateSizeType                            = 4

};


// Enum  AudioSynesthesia.EConstantQFFTSizeEnum
enum class EConstantQFFTSizeEnum : uint8_t
{
    Min                                            = 0,
    XXSmall                                        = 1,
    XSmall                                         = 2,
    Small                                          = 3,
    Medium                                         = 4,
    Large                                          = 5,
    XLarge                                         = 6,
    XXLarge                                        = 7,
    Max                                            = 8,
    EConstantQFFTSizeEnum                          = 9

};


// Enum  AudioSynesthesia.EConstantQNormalizationEnum
enum class EConstantQNormalizationEnum : uint8_t
{
    EqualEuclideanNorm                             = 0,
    EqualEnergy                                    = 1,
    EqualAmplitude                                 = 2,
    EConstantQNormalizationEnum                    = 3

};


// Enum  AudioSynesthesia.ELoudnessNRTCurveTypeEnum
enum class ELoudnessNRTCurveTypeEnum : uint8_t
{
    A                                              = 0,
    B                                              = 1,
    C                                              = 2,
    D                                              = 3,
    None                                           = 4,
    ELoudnessNRTCurveTypeEnum                      = 5

};


// Enum  SlackPlugin.ESlackPriority
enum class ESlackPriority : uint8_t
{
    Low                                            = 0,
    Normal                                         = 1,
    High                                           = 2,
    Critical                                       = 3,
    Max                                            = 4,
    ESlackPriority                                 = 5

};


// Enum  ShooterGame.EConnectionStatus
enum class EConnectionStatus : uint8_t
{
    Uninitialized                                  = 0,
    Disconnected                                   = 1,
    Unresponsive                                   = 2,
    Connecting                                     = 3,
    Connected                                      = 4,
    Count                                          = 5,
    EConnectionStatus                              = 6

};


// Enum  ShooterGame.EGameFlowStateType
enum class EGameFlowStateType : uint8_t
{
    Initialization                                 = 0,
    TransitionToMainMenu                           = 1,
    MainMenu                                       = 2,
    TransitionToPregame                            = 3,
    Pregame                                        = 4,
    TransitionToInGame                             = 5,
    InGame                                         = 6,
    TransitionToPlatformFaulted                    = 7,
    PlatformFaulted                                = 8,
    Invalid                                        = 9,
    Count                                          = 10,
    EGameFlowStateType                             = 11

};


// Enum  ShooterGame.EPlatformFaultReason
enum class EPlatformFaultReason : uint8_t
{
    None                                           = 0,
    RNetUnhealthy                                  = 1,
    RNetDisconnected                               = 2,
    WrongSessionClientID                           = 3,
    SessionHeartbeatFail                           = 4,
    SessionRefreshFail                             = 5,
    VanguardFail                                   = 6,
    VanguardNeedsReboot                            = 7,
    SessionPlatformDowntime                        = 8,
    AntiAddictionShutdown                          = 9,
    CNAntiAddictionShutdown                        = 10,
    NativePlatformFailure                          = 11,
    Count                                          = 12,
    EPlatformFaultReason                           = 13

};


// Enum  ShooterGame.EAresClientGameInstanceInitStatus
enum class EAresClientGameInstanceInitStatus : uint8_t
{
    NotStarted                                     = 0,
    Initializing                                   = 1,
    AwaitingFirstTimeUserInfo                      = 2,
    WaitingForLogin                                = 3,
    AttemptingLogin                                = 4,
    PatchPreview                                   = 5,
    WaitingForPatch                                = 6,
    Initialized                                    = 7,
    InitFailure                                    = 8,
    Count                                          = 9,
    EAresClientGameInstanceInitStatus              = 10

};


// Enum  ShooterGame.ESoftResetReason
enum class ESoftResetReason : uint8_t
{
    Unknown                                        = 0,
    StandardReset                                  = 1,
    EnvironmentMismatch                            = 2,
    UserLoginStatusChanged                         = 3,
    SessionHeartbeatFailure                        = 4,
    NetworkConnectionRestored                      = 5,
    ESoftResetReason                               = 6

};


// Enum  ShooterGame.EAresEquippableState
enum class EAresEquippableState : uint8_t
{
    Unknown                                        = 0,
    Idle                                           = 1,
    Equipping                                      = 2,
    Inspecting                                     = 3,
    Attacking                                      = 4,
    Firing                                         = 5,
    Reloading                                      = 6,
    ADS                                            = 7,
    ADS                                            = 8,
    Count                                          = 9,
    EAresEquippableState                           = 10

};


// Enum  ShooterGame.EEquippableRejectInputReason
enum class EEquippableRejectInputReason : uint8_t
{
    NoResources                                    = 0,
    OutsideGameplay                                = 1,
    OnCooldown                                     = 2,
    BlockedByCurrentEquippable                     = 3,
    EquipSlotDisabled                              = 4,
    EEquippableRejectInputReason                   = 5

};


// Enum  ShooterGame.EAresGamePhase
enum class EAresGamePhase : uint8_t
{
    NotStarted                                     = 0,
    GameStarted                                    = 1,
    BetweenRounds                                  = 2,
    RoundStarting                                  = 3,
    InRound                                        = 4,
    RoundEnding                                    = 5,
    SwitchingTeams                                 = 6,
    GameEnded                                      = 7,
    Count                                          = 8,
    Invalid                                        = 254,
    EAresGamePhase                                 = 255

};


// Enum  ShooterGame.EAresAssistType
enum class EAresAssistType : uint8_t
{
    None                                           = 0,
    Damage                                         = 1,
    Resurrection                                   = 2,
    Heal                                           = 3,
    CombatBuff                                     = 4,
    Detain                                         = 5,
    Blind                                          = 6,
    Concussion                                     = 7,
    Vulnerable                                     = 8,
    Decay                                          = 9,
    Reveal                                         = 10,
    Gravity                                        = 11,
    Slow                                           = 12,
    Suppression                                    = 13,
    Smoke                                          = 14,
    Other                                          = 15,
    Count                                          = 16,
    EAresAssistType                                = 17

};


// Enum  ShooterGame.EShooterHUDWidgetCategory
enum class EShooterHUDWidgetCategory : uint8_t
{
    Ability                                        = 0,
    AbilityUpperKeybinds                           = 1,
    AbilityLowerKeybinds                           = 2,
    Health                                         = 3,
    Ammo                                           = 4,
    Minimap                                        = 5,
    Announcements                                  = 6,
    KillFeed                                       = 7,
    KillBanners                                    = 8,
    TopBar                                         = 9,
    RoundTimer                                     = 10,
    Econ                                           = 11,
    WeaponInventory                                = 12,
    StatusEffects                                  = 13,
    Chat                                           = 14,
    UsablePrompts                                  = 15,
    ClientVersion                                  = 16,
    UsableIcons                                    = 17,
    UsableHighlights                               = 18,
    WeaponGlow                                     = 19,
    All                                            = 20,
    None                                           = 21,
    EShooterHUDWidgetCategory                      = 22

};


// Enum  ShooterGame.EAresMovementType
enum class EAresMovementType : uint8_t
{
    Walking                                        = 0,
    Running                                        = 1,
    Jumping                                        = 2,
    Crouching                                      = 3,
    OnAscender                                     = 4,
    Flying                                         = 5,
    Count                                          = 6,
    Invalid                                        = 254,
    EAresMovementType                              = 255

};


// Enum  ShooterGame.EStopEffectType
enum class EStopEffectType : uint8_t
{
    Normal                                         = 0,
    ForceKill                                      = 1,
    EStopEffectType                                = 2

};


// Enum  ShooterGame.EAresEquippableInputAction
enum class EAresEquippableInputAction : uint8_t
{
    EquippableInputAction                          = 0,
    EquippableInputAction                          = 1,
    EquippableInputAction                          = 2,
    EquippableInputAction                          = 3,
    EquippableInputAction                          = 4,
    EquippableInputAction                          = 5

};


// Enum  ShooterGame.EAresEquippableInput
enum class EAresEquippableInput : uint8_t
{
    EquippableInput                                = 0,
    EquippableInput                                = 1,
    EquippableInput                                = 2,
    EquippableInput                                = 3,
    EquippableInput                                = 4,
    EquippableInput                                = 5,
    EquippableInput                                = 6,
    EquippableInput                                = 7,
    EquippableInput                                = 8,
    EquippableInput                                = 9,
    EquippableInput                                = 10,
    EquippableInput                                = 11,
    EquippableInput                                = 12,
    EquippableInput                                = 13,
    EquippableInput                                = 14,
    EquippableInput                                = 15,
    EquippableInput                                = 16,
    EquippableInput                                = 254,
    EquippableInput                                = 255

};


// Enum  ShooterGame.EUsableCancelReason
enum class EUsableCancelReason : uint8_t
{
    CharacterDead                                  = 0,
    Unusable                                       = 1,
    Cancelled                                      = 2,
    EUsableCancelReason                            = 3

};


// Enum  ShooterGame.EAresFloatSettingName
enum class EAresFloatSettingName : uint8_t
{
    Gamma                                          = 0,
    MouseSensitivity                               = 1,
    MouseSensitivityZoomed                         = 2,
    MouseSensitivityADS                            = 3,
    MinimapSize                                    = 4,
    MinimapZoom                                    = 5,
    OverallVolume                                  = 6,
    SoundEffectsVolume                             = 7,
    VoiceOverVolume                                = 8,
    VideoVolume                                    = 9,
    AllMusicOverallVolume                          = 10,
    MenuAndLobbyMusicVolume                        = 11,
    CharacterSelectMusicVolume                     = 12,
    MaxFramerateOnBattery                          = 13,
    MaxFramerateInMenu                             = 14,
    MaxFramerateInBackground                       = 15,
    MaxFramerateAlways                             = 16,
    PingWheelHoldDelayMS                           = 17,
    AESWheelHoldDelayMS                            = 18,
    CrosshairOutlineThickness                      = 19,
    CrosshairOutlineOpacity                        = 20,
    CrosshairCenterDotSize                         = 21,
    CrosshairCenterDotOpacity                      = 22,
    CrosshairInnerLinesLineThickness               = 23,
    CrosshairInnerLinesLineLength                  = 24,
    CrosshairInnerLinesLineLengthVertical          = 25,
    CrosshairInnerLinesLineOffset                  = 26,
    CrosshairInnerLinesOpacity                     = 27,
    CrosshairInnerLinesFiringErrorScale            = 28,
    CrosshairInnerLinesMovementErrorScale          = 29,
    CrosshairOuterLinesLineThickness               = 30,
    CrosshairOuterLinesLineLength                  = 31,
    CrosshairOuterLinesLineLengthVertical          = 32,
    CrosshairOuterLinesLineOffset                  = 33,
    CrosshairOuterLinesOpacity                     = 34,
    CrosshairOuterLinesFiringErrorScale            = 35,
    CrosshairOuterLinesMovementErrorScale          = 36,
    CrosshairADSOutlineThickness                   = 37,
    CrosshairADSOutlineOpacity                     = 38,
    CrosshairADSCenterDotSize                      = 39,
    CrosshairADSCenterDotOpacity                   = 40,
    CrosshairADSInnerLinesLineThickness            = 41,
    CrosshairADSInnerLinesLineLength               = 42,
    CrosshairADSInnerLinesLineLengthVertical       = 43,
    CrosshairADSInnerLinesLineOffset               = 44,
    CrosshairADSInnerLinesOpacity                  = 45,
    CrosshairADSInnerLinesFiringErrorScale         = 46,
    CrosshairADSInnerLinesMovementErrorScale       = 47,
    CrosshairADSOuterLinesLineThickness            = 48,
    CrosshairADSOuterLinesLineLength               = 49,
    CrosshairADSOuterLinesLineLengthVertical       = 50,
    CrosshairADSOuterLinesLineOffset               = 51,
    CrosshairADSOuterLinesOpacity                  = 52,
    CrosshairADSOuterLinesFiringErrorScale         = 53,
    CrosshairADSOuterLinesMovementErrorScale       = 54,
    CrosshairFocusModeOutlineThickness             = 55,
    CrosshairFocusModeOutlineOpacity               = 56,
    CrosshairFocusModeCenterDotSize                = 57,
    CrosshairFocusModeCenterDotOpacity             = 58,
    CrosshairFocusModeInnerLinesLineThickness      = 59,
    CrosshairFocusModeInnerLinesLineLength         = 60,
    CrosshairFocusModeInnerLinesLineLengthVertical = 61,
    CrosshairFocusModeInnerLinesLineOffset         = 62,
    CrosshairFocusModeInnerLinesOpacity            = 63,
    CrosshairFocusModeInnerLinesFiringErrorScale   = 64,
    CrosshairFocusModeInnerLinesMovementErrorScale = 65,
    CrosshairFocusModeOuterLinesLineThickness      = 66,
    CrosshairFocusModeOuterLinesLineLength         = 67,
    CrosshairFocusModeOuterLinesLineLengthVertical = 68,
    CrosshairFocusModeOuterLinesLineOffset         = 69,
    CrosshairFocusModeOuterLinesOpacity            = 70,
    CrosshairFocusModeOuterLinesFiringErrorScale   = 71,
    CrosshairFocusModeOuterLinesMovementErrorScale = 72,
    CrosshairSniperCenterDotSize                   = 73,
    CrosshairSniperCenterDotOpacity                = 74,
    TouchAimSensitivityX                           = 75,
    TouchAimSensitivityY                           = 76,
    TouchAimSensitivityADSX                        = 77,
    TouchAimSensitivityADSY                        = 78,
    TouchAimSensitivitySniperX                     = 79,
    TouchAimSensitivitySniperY                     = 80,
    TouchAimAccelerationSensitivity                = 81,
    TouchAimAccelerationSensitivityX               = 82,
    TouchAimAccelerationSensitivityY               = 83,
    TouchAimAccelerationADSSensitivityX            = 84,
    TouchAimAccelerationADSSensitivityY            = 85,
    TouchAimAccelerationSniperSensitivityX         = 86,
    TouchAimAccelerationSniperSensitivityY         = 87,
    TouchAimAccelerationTargetRampUp               = 88,
    TouchAimOneEuroMinCutoff                       = 89,
    TouchAimOneEuroCutoffSlope                     = 90,
    TouchAimOneEuroDeltaCutoff                     = 91,
    TouchAimTrackballActivationVelocityX           = 92,
    TouchAimTrackballActivationVelocityY           = 93,
    TouchAimTrackballMinXVelocity                  = 94,
    TouchAimTrackballMinYVelocity                  = 95,
    TouchAimTrackballMaxXVelocity                  = 96,
    TouchAimTrackballMaxYVelocity                  = 97,
    TouchAimTrackballActivationVelocityWeightX     = 98,
    TouchAimTrackballActivationVelocityWeightY     = 99,
    TouchAimTrackballMaxDecelerationX              = 100,
    TouchAimTrackballMaxDecelerationY              = 101,
    TouchGyroAimSensitivityX                       = 102,
    TouchGyroAimSensitivityY                       = 103,
    TouchGyroADSSensitivityX                       = 104,
    TouchGyroADSSensitivityY                       = 105,
    TouchGyroSniperSensitivityX                    = 106,
    TouchGyroSniperSensitivityY                    = 107,
    TouchGyroAimOneEuroMinCutoff                   = 108,
    TouchGyroAimOneEuroCutoffSlope                 = 109,
    TouchGyroAimOneEuroDeltaCutoff                 = 110,
    TouchSensitivityZoomed                         = 111,
    TouchSensitivitySniper                         = 112,
    TouchTapMaxTime                                = 113,
    TouchExperimentalAnchoredButtonOffset          = 114,
    TouchExperimentalMaxWalkSpeed                  = 115,
    TouchAccelMinDeltaX                            = 116,
    TouchAccelMinDeltaY                            = 117,
    TouchAccelMaxDeltaX                            = 118,
    TouchAccelMaxDeltaY                            = 119,
    TouchDoubleTapTime                             = 120,
    TouchDoubleTapDistance                         = 121,
    TouchTrackballLinearDragCoefficient            = 122,
    TouchTrackballLinearDragMinimum                = 123,
    TouchTabletLayoutWidthThreshold                = 124,
    TouchJoystickInnerDeadzone                     = 125,
    TouchJoystickAngularInnerDeadzoneDeg           = 126,
    TouchJoystickAngularOuterDeadzoneDeg           = 127,
    TouchJoystickAxialHorizontalDeadzone           = 128,
    TouchJoystickAxialVerticalDeadzone             = 129,
    TouchJoystickWalkThreshold                     = 130,
    TouchJoystickRunLockThreshold                  = 131,
    TouchJoystickRunLockActivationAngleDeg         = 132,
    TouchJoystickRunLockDisplayThreshold           = 133,
    TouchJoystickFollowDistance                    = 134,
    TouchJoystickOneEuroMinCutoff                  = 135,
    TouchJoystickOneEuroCutoffSlope                = 136,
    TouchJoystickOneEuroDeltaCutoff                = 137,
    TouchSniperHoldCyclingSpeed                    = 138,
    GamepadBaseRotationSpeedX                      = 139,
    GamepadBaseRotationSpeedY                      = 140,
    GamepadFocusRotationSpeedX                     = 141,
    GamepadFocusRotationSpeedY                     = 142,
    GamepadADSRotationSpeedX                       = 143,
    GamepadADSRotationSpeedY                       = 144,
    GamepadScopedRotationSpeedX                    = 145,
    GamepadScopedRotationSpeedY                    = 146,
    GamepadBaseSpeedMultiplierX                    = 147,
    GamepadBaseSpeedMultiplierY                    = 148,
    GamepadMaxSpeedMultiplierX                     = 149,
    GamepadMaxSpeedMultiplierY                     = 150,
    GamepadMaxAccelerationThreshold                = 151,
    GamepadAimAccelDelaySeconds                    = 152,
    GamepadAimAccelRampUpSeconds                   = 153,
    GamepadLookStickInnerDeadzone                  = 154,
    GamepadLookStickOuterDeadzone                  = 155,
    GamepadLookStickAngularInnerDeadzoneDeg        = 156,
    GamepadLookStickAngularOuterDeadzoneDeg        = 157,
    GamepadLookStickAxialHorizontalDeadzone        = 158,
    GamepadLookStickAxialVerticalDeadzone          = 159,
    GamepadWalkStickInnerDeadzone                  = 160,
    GamepadWalkStickAngularInnerDeadzoneDeg        = 161,
    GamepadWalkStickAngularOuterDeadzoneDeg        = 162,
    GamepadWalkStickAxialHorizontalDeadzone        = 163,
    GamepadWalkStickAxialVerticalDeadzone          = 164,
    GamepadTriggerDeadzone                         = 165,
    GamepadAnalogWalkThreshold                     = 166,
    GamepadShootingSensitivityScaleX               = 167,
    GamepadShootingSensitivityScaleY               = 168,
    GamepadShootSensScaleEaseInTime                = 169,
    GamepadShootSensScaleEaseOutTime               = 170,
    GamepadShootSensScaleEaseOutDelay              = 171,
    GamepadShootSensRotationSpeedX                 = 172,
    GamepadShootSensRotationSpeedY                 = 173,
    GamepadMegamapSizeMultiplier                   = 174,
    GamepadRotationIncreaseAccelFocusModeMultiplier = 175,
    GamepadRotationIncreaseAccelADSMultiplier      = 176,
    GamepadRotationIncreaseAccelScopedMultiplier   = 177,
    GamepadSimpleAimSensitivity                    = 178,
    GamepadBaseSpeedMultiplierXADS                 = 179,
    GamepadBaseSpeedMultiplierYADS                 = 180,
    GamepadBaseSpeedMultiplierXScoped              = 181,
    GamepadBaseSpeedMultiplierYScoped              = 182,
    GamepadBaseSpeedMultiplierXFocusMode           = 183,
    GamepadBaseSpeedMultiplierYFocusMode           = 184,
    AimToolingTFPlayerScale                        = 185,
    AimToolingFORPlayerScale                       = 186,
    AimToolingSAPlayerScale                        = 187,
    AimToolingPTCPlayerScale                       = 188,
    ObserverRunSpeedModifier                       = 189,
    ObserverWalkSpeedModifier                      = 190,
    GyroShootingThresholdTap                       = 191,
    GyroShootingThresholdHold                      = 192,
    GyroShootingVisualBarMax                       = 193,
    GyroMovementWalkThresholdHorizontal            = 194,
    GyroMovementWalkThresholdVertical              = 195,
    GyroMovementRunThresholdHorizontal             = 196,
    GyroMovementRunThresholdVertical               = 197,
    GyroShotMovementDeadzoneThreshold              = 198,
    GyroShotMovementDeadzoneValue                  = 199,
    GamepadAggroBotMoshPitSensitivity              = 200,
    GamepadAggroBotThrashSensitivity               = 201,
    GamepadBountyHunterPrecisionModeSensitivity    = 202,
    GamepadBountyHunterProwlerSensitivity          = 203,
    GamepadBountyHunterSeizeSensitivity            = 204,
    GamepadBreachAftershockSensitivity             = 205,
    GamepadBreachFaultLineSensitivity              = 206,
    GamepadBreachFlashpointSensitivity             = 207,
    GamepadCableAnnihilationSensitivity            = 208,
    GamepadCableGravNetSensitivity                 = 209,
    GamepadClayPaintShellSensitivity               = 210,
    GamepadClayShowstopperSensitivity              = 211,
    GamepadCloudburstSensitivity                   = 212,
    GamepadGrenadierFlashDriveSensitivity          = 213,
    GamepadGrenadierFragmentSensitivity            = 214,
    GamepadGrenadierZeroPointSensitivity           = 215,
    GamepadGuideGuidingLightSensitivity            = 216,
    GamepadGuideTrailblazerSensitivity             = 217,
    GamepadGumshoePrecisionModeSensitivity         = 218,
    GamepadGumshoeSpycamSensitivity                = 219,
    GamepadHunterHuntersFurySensitivity            = 220,
    GamepadHunterReconBoltSensitivity              = 221,
    GamepadHunterShockBoltSensitivity              = 222,
    GamepadMageHighTideSensitivity                 = 223,
    GamepadPandemicPoisonCloudSensitivity          = 224,
    GamepadPandemicSnakeBiteSensitivity            = 225,
    GamepadPhoenixBlazeSensitivity                 = 226,
    GamepadSargeAbilityTabletSensitivity           = 227,
    GamepadSargePrecisionModeSensitivity           = 228,
    GamepadSequoiaUndercutSensitivity              = 229,
    GamepadSmonkButterflyKnifeSensitivity          = 230,
    GamepadStealthBlindsideSensitivity             = 231,
    GamepadWraithDarkCoverSensitivity              = 232,
    GamepadWraithFromTheShadowsSensitivity         = 233,
    GamepadWraithShroudedStepSensitivity           = 234,
    GamepadHapticsIntensityModifier                = 235,
    Count                                          = 236,
    EAresFloatSettingName                          = 237

};


// Enum  ShooterGame.EAresIntSettingName
enum class EAresIntSettingName : uint8_t
{
    AntiAliasing                                   = 0,
    GraphicsQuality                                = 1,
    TextureQuality                                 = 2,
    UIQuality                                      = 3,
    MaterialQuality                                = 4,
    DetailQuality                                  = 5,
    AnisotropicFiltering                           = 6,
    BloomQuality                                   = 7,
    VoiceVolume                                    = 8,
    MicVolume                                      = 9,
    MicSensitivityThreshold                        = 10,
    SpeakerConfiguration                           = 11,
    ColorBlindMode                                 = 12,
    MegamapCalloutVisibility                       = 13,
    NvidiaReflexLowLatencySetting                  = 14,
    PlayerPerf                                     = 15,
    PlayerPerfShowFrameTime                        = 16,
    PlayerPerfShowIdleFrameTime                    = 17,
    PlayerPerfShowCPUFrameTime                     = 18,
    PlayerPerfShowGPUFrameTime                     = 19,
    PlayerPerfShowRHIFrameTime                     = 20,
    PlayerPerfShowFrameRate                        = 21,
    PlayerPerfShowServerFrameRate                  = 22,
    PlayerPerfShowAvailablePhysicalMemory          = 23,
    PlayerPerfShowUsedPhysicalMemory               = 24,
    PlayerPerfShowNetworkRtt                       = 25,
    PlayerPerfShowPacketsLostTotal                 = 26,
    PlayerPerfShowPacketLossPercentage             = 27,
    PlayerPerfShowIncomingPacketLossPercentage     = 28,
    PlayerPerfShowOutgoingPacketLossPercentage     = 29,
    PlayerPerfShowPacketsReceived                  = 30,
    PlayerPerfShowPacketsSent                      = 31,
    PlayerPerfShowInputLatencyCpuPlusGpu           = 32,
    PlayerPerfShowInputLatencyCpu                  = 33,
    PlayerPerfShowInputLatencyGpu                  = 34,
    PlayerPerfShowRenderWait                       = 35,
    PlayerPerfShowGpuRenderFrameTime               = 36,
    PlayerPerfShowRHIPresentTime                   = 37,
    PlayerPerfShowRemoteInterpDelayMs              = 38,
    PlayerPerfShowQueuedRemoteMoveCount            = 39,
    PlayerPerfShowConsecutiveRemoteForwardPredictions = 40,
    PlayerPerfShowPacketsLostIncoming              = 41,
    PlayerPerfShowPacketsLostOutgoing              = 42,
    PlayerPerfShowUploadedData                     = 43,
    PlayerPerfShowDownloadedData                   = 44,
    PlayerPerfShowTotalTransferredData             = 45,
    PlayerPerfShowIncomingPacketSize               = 46,
    PlayerPerfShowOutgoingPacketSize               = 47,
    PlayerPerfShowMoveCorrectionDistance           = 48,
    PlayerPerfShowMoveTimelineShiftMs              = 49,
    PlayerPerfShowReceivedEquippableCorrection     = 50,
    PlayerPerfShowOutgoingInputQueueLength         = 51,
    PlayerPerfShowOutgoingMoveQueueLength          = 52,
    PlayerPerfShowClientIncomingMoveProcessingDelay = 53,
    PlayerPerfShowServerIncomingMoveProcessingDelay = 54,
    PlayerPerfShowATB                              = 55,
    PlayerPerfShowFrameCount                       = 56,
    PlayerPerfShowNetworkJitter                    = 57,
    PlayerPerfShowEndToEndLatency                  = 58,
    PlayerPerfShowFiringErrors                     = 59,
    PlayerPerfShow                                 = 60,
    PlayerPerfShow                                 = 61,
    PlayerPerfShow                                 = 62,
    PlayerPerfPresetInfo                           = 63,
    PlayerPerf                                     = 64,
    NetworkSmoothing                               = 65,
    ShootingRangeSkillTestSetting                  = 66,
    ShootingRangeSkillTestDifficulty               = 67,
    ShootingRangePlantModuleDifficultySetting      = 68,
    ShootingRangeDefuseModuleDifficultySetting     = 69,
    GamepadSavedPreset                             = 70,
    GamepadSavedAimCurve                           = 71,
    GamepadSavedAimCurveADS                        = 72,
    GamepadSavedAimCurveScoped                     = 73,
    GamepadSavedAimCurveFocusMode                  = 74,
    GamepadSavedAimCurveAngularDeadzone            = 75,
    GamepadAnalogMoveThresholdMode                 = 76,
    GamepadForceDesiredAngleMode                   = 77,
    GamepadWeaponSwapMode                          = 78,
    GamepadWeaponSwapInputType                     = 79,
    GamepadJettGlidePressBehavior                  = 80,
    GamepadDefaultAimMode                          = 81,
    GamepadGuideToggleHawkAbility                  = 82,
    GamepadMageToggleWallAbility                   = 83,
    GamepadPhoenixToggleFireWallAbility            = 84,
    TouchDoubleTapRight                            = 85,
    TouchHUDPreset                                 = 86,
    TouchDoubleTapLeft                             = 87,
    TouchAimAccelerationCurveX                     = 88,
    TouchAimAccelerationCurveY                     = 89,
    TouchAimADSAccelerationCurveX                  = 90,
    TouchAimADSAccelerationCurveY                  = 91,
    TouchAimSniperAccelerationCurveX               = 92,
    TouchAimSniperAccelerationCurveY               = 93,
    TouchJoystickStyle                             = 94,
    TouchSniperZoomLevelSetting                    = 95,
    TouchOperatorZoomCycleStyle                    = 96,
    TouchOperatorZoomCycleStyle                    = 97,
    TouchOperatorZoomCycleStyle                    = 98,
    TouchOperatorZoomCycleStyle                    = 99,
    TouchAimSensitivityPreset                      = 100,
    TouchGyroSensitivityPreset                     = 101,
    TouchTrackballSensitivityPreset                = 102,
    TouchDoubleTapTopLeft                          = 103,
    TouchDoubleTapTopMiddle                        = 104,
    TouchDoubleTapTopRight                         = 105,
    TouchDoubleTapMiddleLeft                       = 106,
    TouchDoubleTapMiddle                           = 107,
    TouchDoubleTapMiddleRight                      = 108,
    TouchDoubleTapBottomLeft                       = 109,
    TouchDoubleTapBottomMiddle                     = 110,
    TouchDoubleTapBottomRight                      = 111,
    TouchNumVerticalRegions                        = 112,
    TouchNumHorizontalRegions                      = 113,
    MaxFramerateInBuyPhase                         = 114,
    MaxFramerateInGamePhase                        = 115,
    MaxFramerateInSpectatorView                    = 116,
    ShootingRangeBotMode                           = 117,
    ShootingRangeBotAmount                         = 118,
    ShootingRangeTargetPracticeDistance            = 119,
    LastSeenRoamingSettingsVersion                 = 120,
    VoiceSpeakingChannel                           = 121,
    Count                                          = 122,
    EAresIntSettingName                            = 123

};


// Enum  ShooterGame.EAresBoolSettingName
enum class EAresBoolSettingName : uint32_t
{
    MouseInverted                                  = 0,
    MouseWheelWrapsInventory                       = 1,
    MouseWheelIncludesLevelSlot                    = 2,
    ClientMuted                                    = 3,
    RawMouseEnabled                                = 4,
    RawInputBufferEnabled                          = 5,
    MinimapRotates                                 = 6,
    MinimapFixedRotation                           = 7,
    MinimapTranslates                              = 8,
    EnableMinimapVisionCones                       = 9,
    EnableInstabilityIndicators                    = 10,
    ShowBulletTracers                              = 11,
    ImproveClarity                                 = 12,
    AdaptiveSharpenEnabled                         = 13,
    DisableDistortion                              = 14,
    ShadowsEnabled                                 = 15,
    VoiceChatEnabled                               = 16,
    TeamVoiceChatEnabled                           = 17,
    CustomPartyVoiceChatEnabled                    = 18,
    VoiceChat                                      = 19,
    VoiceChat                                      = 20,
    VoiceChat                                      = 21,
    VoiceChat                                      = 22,
    VoiceChat                                      = 23,
    VoiceChat                                      = 24,
    LoopbackTestEnabled                            = 25,
    PushToTalkEnabled                              = 26,
    DisableEnhanced3DAudio                         = 27,
    GameplayVoiceEnabled                           = 28,
    CharacterVoiceEnabled                          = 29,
    TacticalCalloutsEnabled                        = 30,
    AllyAbilityEquipAudioEnabled                   = 31,
    VocalEmotesEnabled                             = 32,
    AnnouncerEnabled                               = 33,
    VignetteEnabled                                = 34,
    AutoRescopeSniper                              = 35,
    HoldInputForADS                                = 36,
    HoldInputForSniperScopes                       = 37,
    CycleThroughSniperZoomLevels                   = 38,
    SniperToggleHoldInputCycles                    = 39,
    LimitFramerateOnBattery                        = 40,
    LimitFramerateInMenu                           = 41,
    LimitFramerateInBackground                     = 42,
    LimitFramerateAlways                           = 43,
    DisplayFPS                                     = 44,
    ShowSpecatedPlayerCrosshair                    = 45,
    FadeCrosshairWithFiringError                   = 46,
    ShowBlood                                      = 47,
    ShowCorpses                                    = 48,
    ToggleCrouch                                   = 49,
    ToggleWalk                                     = 50,
    DefaultToWalk                                  = 51,
    VoipDucksMusicVolume                           = 52,
    VoipDucksVOFlavor                              = 53,
    MuteMusicOnAppWindowDeactivate                 = 54,
    EnableHRTF                                     = 55,
    EnableForceFeedback                            = 56,
    ShootingRangeBotArmorEnabled                   = 57,
    ShootingRangeBotStrafeEnabled                  = 58,
    ShootingRangeBotInfiniteAmmoEnabled            = 59,
    ShootingRangePracticeModeEnabled               = 60,
    ShootingRangeTargetPracticeBotEnabled          = 61,
    SpectatorCountWidgetVisible                    = 62,
    ToggleReturnToStrongestWeapon                  = 63,
    AutoEquipPrioritizeStrongest                   = 64,
    AutoEquipSkipsMelee                            = 65,
    ToggleLiveDiagnostics                          = 66,
    AESWheelHoldEnabled                            = 67,
    CrosshairHasOutline                            = 68,
    CrosshairDisplayCenterDot                      = 69,
    CrosshairUseCustomColor                        = 70,
    CrosshairFixMinErrorAcrossWeapons              = 71,
    CrosshairUseAdvancedOptions                    = 72,
    CrosshairScaleToResolution                     = 73,
    CrosshairInnerLinesShowMovementError           = 74,
    CrosshairInnerLinesShowShootingError           = 75,
    CrosshairInnerLinesShowMinError                = 76,
    CrosshairInnerLinesShowLines                   = 77,
    CrosshairInnerLinesAllowVertScaling            = 78,
    CrosshairOuterLinesShowMovementError           = 79,
    CrosshairOuterLinesShowShootingError           = 80,
    CrosshairOuterLinesShowMinError                = 81,
    CrosshairOuterLinesShowLines                   = 82,
    CrosshairOuterLinesAllowVertScaling            = 83,
    CrosshairUseCustomCrosshairOnAllPrimary        = 84,
    CrosshairUsePrimaryCrosshairForADS             = 85,
    CrosshairADSHasOutline                         = 86,
    CrosshairADSDisplayCenterDot                   = 87,
    CrosshairADSUseCustomColor                     = 88,
    CrosshairADSFixMinErrorAcrossWeapons           = 89,
    CrosshairADSInnerLinesShowMovementError        = 90,
    CrosshairADSInnerLinesShowShootingError        = 91,
    CrosshairADSInnerLinesShowMinError             = 92,
    CrosshairADSInnerLinesShowLines                = 93,
    CrosshairADSInnerLinesAllowVertScaling         = 94,
    CrosshairADSOuterLinesShowMovementError        = 95,
    CrosshairADSOuterLinesShowShootingError        = 96,
    CrosshairADSOuterLinesShowMinError             = 97,
    CrosshairADSOuterLinesShowLines                = 98,
    CrosshairADSOuterLinesAllowVertScaling         = 99,
    CrosshairUsePrimaryCrosshairForFocusMode       = 100,
    CrosshairFocusModeHasOutline                   = 101,
    CrosshairFocusModeDisplayCenterDot             = 102,
    CrosshairFocusModeUseCustomColor               = 103,
    CrosshairFocusModeFixMinErrorAcrossWeapons     = 104,
    CrosshairFocusModeInnerLinesShowMovementError  = 105,
    CrosshairFocusModeInnerLinesShowShootingError  = 106,
    CrosshairFocusModeInnerLinesShowMinError       = 107,
    CrosshairFocusModeInnerLinesShowLines          = 108,
    CrosshairFocusModeInnerLinesAllowVertScaling   = 109,
    CrosshairFocusModeOuterLinesShowMovementError  = 110,
    CrosshairFocusModeOuterLinesShowShootingError  = 111,
    CrosshairFocusModeOuterLinesShowMinError       = 112,
    CrosshairFocusModeOuterLinesShowLines          = 113,
    CrosshairFocusModeOuterLinesAllowVertScaling   = 114,
    CrosshairSniperDisplayCenterDot                = 115,
    CrosshairSniperUseCustomColor                  = 116,
    AlwaysShowInventoryWidgets                     = 117,
    LeftHanded                                     = 118,
    TeamColorCrosshair                             = 119,
    AllyLoadoutInfoAlwaysVisibile                  = 120,
    TacticalCalloutsInChat                         = 121,
    TouchAimInvertX                                = 122,
    TouchAimInvertY                                = 123,
    TouchAimOneEuroFilteringEnabled                = 124,
    TouchAimMultiTouchFilteringEnabled             = 125,
    TouchAimContinueFilteringAfterRelease          = 126,
    TouchAimTrackballEnabled                       = 127,
    TouchGyroAimOneEuroFilteringEnabled            = 128,
    TouchGyroAimEnabled                            = 129,
    TouchGyroAimInvertX                            = 130,
    TouchGyroAimInvertY                            = 131,
    TouchGyroDroneAimEnabled                       = 132,
    TouchCustomAbilityUI                           = 133,
    TouchAbilityRestoreLastEquippable              = 134,
    TouchUseSprintToggle                           = 135,
    TouchUseHalfScreenMovementArea                 = 136,
    TouchMovementUncrouchOnRun                     = 137,
    TouchAbilityMapRotation                        = 138,
    TouchEnableAutoRun                             = 139,
    TouchAutoRunEquipsKnife                        = 140,
    TouchCrosshairHighlightEnabled                 = 141,
    TouchSprintInputFromBottomOnly                 = 142,
    ToughMagnetismEnabled                          = 143,
    TouchRunBuffer                                 = 144,
    TouchAimSnappingEnabled                        = 145,
    TouchMarshalCycleZoomOnHold                    = 146,
    TouchTrackballEnableLinearDrag                 = 147,
    TouchQuickCastingEnabled                       = 148,
    TouchJoystickFollowHorizontalOnly              = 149,
    GamepadInvertLookStickY                        = 150,
    GamepadInvertLookStickX                        = 151,
    GamepadMapControlsInvertLookStickY             = 152,
    GamepadMapControlsInvertLookStickX             = 153,
    GamepadToggleDropSpikeHold                     = 154,
    StanceIndicatorEnabled                         = 155,
    GamepadTapToCycleIncompleteInventory           = 156,
    GamepadJettAutomaticGlide                      = 157,
    GamepadRotationIncreaseAccelEnabled            = 158,
    GamepadApplyPartialSquaring                    = 159,
    GamepadForceWalkWhileFocusedOrZoomed           = 160,
    GamepadUseBaseSpeedMultipliers                 = 161,
    GamepadUseShootingSensMultipliers              = 162,
    GamepadShootingSensDampening                   = 163,
    GamepadUseAgentAbilitySensMultipliers          = 164,
    GamepadUseAdvancedAimSensitivity               = 165,
    GamepadDampenShootingSensitivity               = 166,
    MultithreadedRenderingEnabled                  = 167,
    AimToolingDCPlayerEnabled                      = 168,
    AimToolingGRPlayerEnabled                      = 169,
    HasEverStartedAMatch                           = 170,
    HasAcceptedCodeOfConduct                       = 171,
    HasSeenNewPlayerSettings                       = 172,
    HasSeenNPEContractTutorial                     = 173,
    HasSeenUPWTutorial                             = 174,
    HasSeenSettingsTutorial                        = 175,
    HasSeenWelcomeScreen                           = 176,
    HasSeenMenuTutorial                            = 177,
    HasSeenPhotoSensitivityWarning                 = 178,
    HasSeenInitSelectPresetScreen                  = 179,
    HasSeenTournamentsScreen                       = 180,
    HasSeenXGPActivationModal                      = 181,
    HasSeenTrainingPrompt                          = 182,
    HasSeenBTEModal                                = 183,
    CollectionShowOwnedOnly                        = 184,
    IncognitoHideMatchmadePlayerNames              = 185,
    IncognitoRejectFriendRequests                  = 186,
    IncognitoRejectPartyInvitesByDisplayName       = 187,
    PlayerBehavior                                 = 188,
    PlayerBehavior                                 = 189,
    HideUI                                         = 190,
    HideCrosshair                                  = 191,
    Hide1P                                         = 192,
    HideOutlinesAndFresnel                         = 193,
    ObserversSeeBlinds                             = 194,
    TeamColorAffectsHUD                            = 195,
    ShowKeybindsOnMinimap                          = 196,
    ShowKeybindsOnMegamap                          = 197,
    FullscreenMegamap                              = 198,
    HandednessByTeam                               = 199,
    HideSpectatedAgentPortrait                     = 200,
    ObserverToggleScoreboard                       = 201,
    HasEverAppliedRoamingSettings                  = 202,
    HasEverAppliedRoamingSettingsGamepad           = 203,
    GyroTapShoot                                   = 204,
    GyroShootingAxisSwap                           = 205,
    GyroShootingAxisInvert                         = 206,
    GyroShootingDisplayBar                         = 207,
    GyroMovementAxisInvertVertical                 = 208,
    GyroMovementAxisInvertHorizontal               = 209,
    ShowColoredMuzzleFlashes                       = 210,
    MaxbotGameplayVO                               = 211,
    MaxbotFlavorVO                                 = 212,
    RGIInputLatencyEnabled                         = 213,
    VoiceSelfMuteEnabled                           = 214,
    MatureContentFilter                            = 215,
    ShowBloodVisual                                = 216,
    ShowCorpsesVisual                              = 217,
    AllowCrossPlay                                 = 218,
    ShowCrossPlayWarning                           = 219,
    ShowNewPlayerTips                              = 220,
    ContextAwareModuleComplete                     = 221,
    EnableToggleableUsables                        = 222,
    GamepadRiftCosmicDivideOffset                  = 223,
    GamepadClayAutomatedBackthrow                  = 224,
    GamepadHapticsEnabled                          = 225,
    Count                                          = 226,
    EAresBoolSettingName                           = 227

};


// Enum  ShooterGame.EAresStringSettingName
enum class EAresStringSettingName : uint8_t
{
    VoiceDeviceCaptureHandle                       = 0,
    VoiceDeviceRenderHandle                        = 1,
    CrosshairSettings                              = 2,
    PushToTalkKey                                  = 3,
    TeamPushToTalkKey                              = 4,
    CrosshairColor                                 = 5,
    CrosshairColorCustom                           = 6,
    CrosshairOutlineColor                          = 7,
    CrosshairADSColor                              = 8,
    CrosshairADSColorCustom                        = 9,
    CrosshairADSOutlineColor                       = 10,
    CrosshairFocusModeColor                        = 11,
    CrosshairFocusModeColorCustom                  = 12,
    CrosshairFocusModeOutlineColor                 = 13,
    CrosshairSniperCenterDotColor                  = 14,
    CrosshairSniperCenterDotColorCustom            = 15,
    CrosshairProfileName                           = 16,
    SavedCrosshairProfileData                      = 17,
    LastSeenSeasonalPopup                          = 18,
    LastSeenAdHocPopup                             = 19,
    PreferredGamePods                              = 20,
    TouchWidgetLayouts                             = 21,
    TouchCrosshairHighlightColor                   = 22,
    MutedWords                                     = 23,
    CheatEOGMatchID                                = 24,
    PlayerPerfPresetType                           = 25,
    NativePlatformSelectedLanguage                 = 26,
    PremierPromotionNotice                         = 27,
    Count                                          = 28,
    EAresStringSettingName                         = 29

};


// Enum  ShooterGame.EAresCameraStyle
enum class EAresCameraStyle : uint8_t
{
    UseViewTargetPerspective                       = 0,
    ThirdPersonCamera                              = 1,
    WatchGameStateObject                           = 2,
    ThirdPersonDebugCamera                         = 3,
    None                                           = 4,
    Count                                          = 5,
    EAresCameraStyle                               = 6

};


// Enum  ShooterGame.EAresCameraPerspective
enum class EAresCameraPerspective : uint8_t
{
    FirstPerson                                    = 0,
    ThirdPerson                                    = 1,
    Count                                          = 2,
    EAresCameraPerspective                         = 3

};


// Enum  ShooterGame.EAresCharacterPosture
enum class EAresCharacterPosture : uint8_t
{
    Standing                                       = 0,
    Crouching                                      = 1,
    UnCrouching                                    = 2,
    Crouched                                       = 3,
    EAresCharacterPosture                          = 4

};


// Enum  ShooterGame.EAresPlayerViewTargetMode
enum class EAresPlayerViewTargetMode : uint8_t
{
    None                                           = 0,
    WatchPossessed                                 = 1,
    SpectateAllies                                 = 2,
    SpectateEveryone                               = 4,
    SpectateFreeCam                                = 8,
    WatchGameStateFocusObject                      = 16,
    NoValidViewTarget                              = 32,
    SpectateProjectile                             = 64,
    WatchSpawned                                   = 128,
    Count                                          = 8,
    All                                            = 255,
    EAresPlayerViewTargetMode                      = 256

};


// Enum  ShooterGame.EActionBindChangeSource
enum class EActionBindChangeSource : uint8_t
{
    UserRebind                                     = 0,
    Init                                           = 1,
    RoamingDownload                                = 2,
    Reset                                          = 3,
    Apply                                          = 4,
    ResetOne                                       = 5,
    Copy                                           = 6,
    Count                                          = 7,
    EActionBindChangeSource                        = 8

};


// Enum  ShooterGame.EActionChordTapHoldType
enum class EActionChordTapHoldType : uint8_t
{
    None                                           = 0,
    Tap                                            = 1,
    Hold                                           = 2,
    DoubleTap                                      = 3,
    Count                                          = 4,
    EActionChordTapHoldType                        = 5

};


// Enum  ShooterGame.EGameFeatureToggleName
enum class EGameFeatureToggleName : uint8_t
{
    FootIK                                         = 0,
    FootIKUseDownhillTrace                         = 1,
    FootIKEyeHeightAdjustment                      = 2,
    FootIKDebug                                    = 3,
    Harvester                                      = 4,
    WeaponThroughWallClipping                      = 5,
    WallClipping3PDebug                            = 6,
    AbilityMinimapIndicators                       = 7,
    StrictRealTimeServerMovementChecks             = 8,
    DesignPlaytest                                 = 9,
    ServerAnimEvalOnDemand                         = 10,
    ExperimentalTagging                            = 11,
    SimulateDegradedNetworkConditions              = 12,
    ToggleGore                                     = 13,
    CalloutRegionsDebug                            = 14,
    DesignerToggleA                                = 15,
    DesignerToggleB                                = 16,
    DesignerToggleC                                = 17,
    DowntickPreround                               = 18,
    ReuseActorOnRespawn                            = 19,
    LookDirectionKeys                              = 20,
    DevInstabilityHUD                              = 21,
    GameplayQualityLogging                         = 22,
    LogMarkers                                     = 23,
    EnableSlashCommands                            = 24,
    NiagaraTest                                    = 25,
    ShowDrawVoteInCustom                           = 26,
    ShowLeftHandedSetting                          = 27,
    AllowShoppingWhileDead                         = 28,
    DeathmatchRepeatingUAV                         = 29,
    DeathmatchEncourageFarSpawning                 = 30,
    DatadogEventing                                = 31,
    GameDataExport                                 = 32,
    ReuseCharacterHUDWidgets                       = 33,
    RegisterEquippableVisibility                   = 34,
    FixedColorTeams                                = 35,
    RoundStateLog                                  = 36,
    DisableEquippableAnimationInFXCs               = 37,
    RequestViewTargetModeUpdate                    = 38,
    Ep2TacVO                                       = 39,
    EnableHRTFSetting                              = 40,
    Coaches                                        = 41,
    TaggingAccuracyOverride                        = 42,
    ForceUpdateProblematicMinimapComponents        = 43,
    GameplayNotificationsV2                        = 44,
    EnableBehaviorScoreTrackers                    = 45,
    TencentSecuritySDK                             = 46,
    PlayerThroughWallClipping                      = 47,
    PlayerThroughWallBackClipping                  = 48,
    PlayerMultipleClipping                         = 49,
    PlayerCorpseClipping                           = 50,
    GameDataEventPipelineRefactor                  = 51,
    RoundRestore                                   = 52,
    MatchRecovery                                  = 53,
    Hovercards                                     = 54,
    ModesToggleA                                   = 55,
    ModesToggleB                                   = 56,
    ModesToggleC                                   = 57,
    MobileLimitedSkinLoading                       = 58,
    RoamingSettingsLocalCache                      = 59,
    EnableCharacterScaling                         = 60,
    Totems                                         = 61,
    FXCPoolWarming                                 = 62,
    TopHUDV2                                       = 63,
    MultipleProjectileTuning                       = 64,
    ProjectileJumpThrowNormalization               = 65,
    ReplaySystem                                   = 66,
    ReflexLatencyAnalyzer                          = 67,
    EnableDynamicSpawnAlternateRotations           = 68,
    SpawnAlternateRotationsPathfindToNearestEnemy  = 69,
    FoWDebugCheats                                 = 70,
    AgentMastery                                   = 71,
    EnableSpawnPointLookAheadBox                   = 72,
    DeathDistanceScoring                           = 73,
    ScoreLowVisibilityPointsMoreOften              = 74,
    MoveProcessingDelayDebug                       = 75,
    SpawnPointLookAheadDynamicAdjustment           = 76,
    UseMegamapTextureOverrides                     = 77,
    NVCUpdates                                     = 78,
    RationalMoveQueueTarget                        = 79,
    SprayV2                                        = 80,
    WheelShowupDelay                               = 81,
    SeparateQuickSpray                             = 82,
    CleanPlayerStateOnDisassociate                 = 83,
    EnableCypherGameObject                         = 84,
    FireButtonCustomization                        = 85,
    DevOnlyShop                                    = 86,
    EnableJumpCrouch                               = 87,
    AllowGameplayTagFastReplication                = 88,
    MoveDistributionTargeting                      = 89,
    RPCValidationWithDisconnect                    = 90,
    SendPerRoundNetworkTelemetryEvents             = 91,
    DeathMatchPlayerSpawnedTelemetryEnabled        = 92,
    LiveDiagnostics                                = 93,
    ExpandedGestures                               = 94,
    GyroShooting                                   = 95,
    EnableCombatReportEventDeferral                = 96,
    UseAbilityTrackingComponent                    = 97,
    GyroMovement                                   = 98,
    RelativeTriggerEnabled                         = 99,
    AudioVisualization                             = 100,
    AudioVisualizationIconFootstep                 = 101,
    AudioVisualizationLOS                          = 102,
    AudioVisualizationMaterialFootstep             = 103,
    MultichannelAudioVisualization                 = 104,
    RevertMobileFiringError                        = 105,
    BurstFire                                      = 106,
    MobileAllySendRateLimiting                     = 107,
    PremiumContentToggle0                          = 108,
    PremiumContentToggle1                          = 109,
    PremiumContentToggle2                          = 110,
    PremiumContentToggle3                          = 111,
    PremiumContentToggle4                          = 112,
    PremiumContentToggle5                          = 113,
    PremiumContentToggle6                          = 114,
    PremiumContentToggle7                          = 115,
    PremiumContentToggle8                          = 116,
    PremiumContentToggle9                          = 117,
    GradualMovementCorrections                     = 118,
    DebugMenuEnabledDefault                        = 119,
    UseMeshMaterialManager                         = 120,
    OmenWallToggle                                 = 121,
    RateLimitClientInputs                          = 122,
    AccoladesEnabled                               = 123,
    PremierGameEvents                              = 124,
    EquippableCacheRecycling                       = 125,
    ViperPitIgnoreCrawlspaceToggle                 = 126,
    EsportsGameEvents                              = 127,
    ScaledHeadshotFX                               = 128,
    MinimapFloors                                  = 129,
    ShortTermNPEUpdates                            = 130,
    FootstepDecayWhileWalking                      = 131,
    SystemicAbilityUpdates                         = 132,
    BombDestroysAllDestructibles                   = 133,
    OnlyDropCurrentEquippable                      = 134,
    CellularPatchMultipleNodeOverlapCheck          = 135,
    UseExtendedCombatReport                        = 136,
    AllowSkipRestrictionsForCurrentEquippable      = 137,
    DisableFogOfWar                                = 138,
    RemoveClientPredictionDataForAI                = 139,
    EsportsHub                                     = 140,
    EnsureReplicationPauseSend                     = 141,
    PureTracers                                    = 142,
    AbilityRechargeCooldownMulticastAll            = 143,
    UsePlayerloadoutsInWeaponSpawners              = 144,
    KnifeOnlyFastFOV                               = 145,
    AllowPatchRunAlongGround                       = 146,
    SetOrbTickRateLow                              = 147,
    ReplayTimeScrubbing                            = 148,
    EnableTapHoldActionBindings                    = 149,
    BotMovementDowntickingEnabled                  = 150,
    BotInterleaveMovementDowntickingEnabled        = 151,
    AxialTracesCanUseComplexCollisionForEndpoints  = 152,
    LimitedTrustedTargetingOnAbilities             = 153,
    WraithSmokeInputPrototype                      = 154,
    RemoveDeletedFXCsFromPool                      = 155,
    DisassociateAFKPlayers                         = 156,
    ReplayDataGameServerCompression                = 157,
    GamepadAimAccelResetEnabled                    = 158,
    GamepadAimAccelDelayResetEnabled               = 159,
    GamepadUseFOVSensitivityMultiplier             = 160,
    GamepadCommonUISelectMenuEnabled               = 161,
    HapticDPTPrototyping                           = 162,
    ShootingRangeBotPoolingRefactor                = 163,
    GamepadMegamapCommInput                        = 164,
    AccoladesTelemetryEnabled                      = 165,
    DDoSDetection                                  = 166,
    AIToggleA                                      = 167,
    AIToggleB                                      = 168,
    TimeShiftByMoveBundles                         = 169,
    LockedMapControlType                           = 170,
    SwapViewTargetModeToWatchSpawnedOnDeath        = 171,
    DisableCharacterTickOnRangeBots                = 172,
    UseCachedBaseTeamComponentOnAresPlayerState    = 173,
    ContextAwareModuleConsoleEnabled               = 174,
    UnifyBaseAndRegionalDamageCalculation          = 175,
    AllyMapEdgePortraits                           = 176,
    UseAIJobCoordinationBehavior                   = 177,
    VTSPluginEnabled                               = 178,
    VTSPluginObserverEnabled                       = 179,
    ContextAwareModuleVisualsEnabled               = 180,
    AIUseDistanceRoomPathfindingCosting            = 181,
    EnableDoubleSniperOnAltModes                   = 182,
    ClientAuthBlinds                               = 183,
    EquippableReplicationImprovements              = 184,
    ValidPurchasableForItemClassCheck              = 185,
    AnimationOptimizationBTM                       = 186,
    AnimationOptimizationBTMAllies                 = 187,
    UseNewInformationScreen                        = 188,
    AimToolingCloseRangeTuningEnabled              = 189,
    DisableNonGamepadKeyBinds                      = 190,
    EnableGamepadVotingUI                          = 191,
    MinimapVisionConesWaitForTasks                 = 192,
    WallCollisionV2                                = 193,
    MuzzleFlashCulling                             = 194,
    EnableCalculateWallPenetrationEnergyWhenDamaged = 195,
    NonVerbalCommsTelemetryEnabled                 = 196,
    DisableLaunchVelocityOnProjectile              = 197,
    SelectMenuTimerEnabled                         = 198,
    UseMeshMaterialManagerAlt                      = 199,
    LoopedFxcAudioCompsResetStopPlayed             = 200,
    UseEnemyAudioLocalViewTarget                   = 201,
    MouseKeyboardInputsTriggerPopUpWarning         = 202,
    HideAbilityInCombatReport                      = 203,
    BotSpawningModifier                            = 204,
    FiringRatePreservesSprayPattern                = 205,
    AgentSelectV3                                  = 206,
    PhoenixUltOverlaps                             = 207,
    AlwaysUseSharedAudioEmitter                    = 208,
    UsableScoringConsistencyUpdates                = 209,
    ContextAwareModulePCEnabled                    = 210,
    LiveDesignToggle                               = 211,
    SkipAutoRescopeOnEmpty                         = 212,
    Count                                          = 213,
    Invalid                                        = 254,
    EGameFeatureToggleName                         = 255

};


// Enum  ShooterGame.EGameRuleBoolName
enum class EGameRuleBoolName : uint8_t
{
    IsOvertimeWinByTwo                             = 0,
    IsOvertimeWinByTwoCapped                       = 1,
    AllowOvertimePriorityVote                      = 2,
    AllowOvertimeDrawVote                          = 3,
    AllowLenientSurrender                          = 4,
    AllowFlexibleTimeoutVote                       = 5,
    AllowDropOut                                   = 6,
    SkipPregame                                    = 7,
    AssignRandomAgents                             = 8,
    AllowGameModifiers                             = 9,
    TournamentMode                                 = 10,
    MajorityVoteAgents                             = 11,
    PlayOutAllRounds                               = 12,
    SkipMatchHistory                               = 13,
    FillWithBots                                   = 14,
    AllowDropIn                                    = 15,
    UseMobileServerTickRate                        = 16,
    DestroyAbilitiesOnDeath                        = 17,
    PreventAbilityRecharge                         = 18,
    ReplayRecordMatch                              = 19,
    UseMapPicksAndBans                             = 20,
    AllowMatchTimeouts                             = 21,
    AimToolingModule                               = 22,
    AimToolingBending                              = 23,
    AimToolingPullToCenter                         = 24,
    AimToolingAimAccelerationDelay                 = 25,
    AimToolingDeceleration                         = 26,
    AimToolingFrameOfReference                     = 27,
    AimToolingStrafeAssist                         = 28,
    AimToolingTargetFriction                       = 29,
    AimToolingGuardrails                           = 30,
    MovementToolingModule                          = 31,
    MovementToolingShotRooting                     = 32,
    MovementToolingFastStrafing                    = 33,
    MovementToolingFastRelease                     = 34,
    PipAbilityCasting                              = 35,
    CombatReportOnlyShowLastLife                   = 36,
    MobileDefaultFoV                               = 37,
    UsePrototypePurchasables                       = 38,
    MobileGunStability                             = 39,
    MobileDesignPrototype                          = 40,
    FootstepABTest                                 = 41,
    UseAllAbilityCooldowns                         = 42,
    DownedCharactersCanGiveUp                      = 43,
    SpawnTurtleProtection                          = 44,
    PrototypeStability                             = 45,
    AccoladesEnabled                               = 46,
    PremierTournamentMode                          = 47,
    UseInDevWeapons                                = 48,
    DisableShopSelling                             = 49,
    ContextAwareModuleEnabled                      = 50,
    Count                                          = 51,
    Invalid                                        = 254,
    EGameRuleBoolName                              = 255

};


// Enum  ShooterGame.EGameFeatureFloatConfigName
enum class EGameFeatureFloatConfigName : uint8_t
{
    InitialConnectTimeout                          = 0,
    ConnectionTimeout                              = 1,
    SoftDisconnectTimeout                          = 2,
    MaxAllowableRewindTime                         = 3,
    RemoteMoveDelayTimeMillisecondsOptimal         = 4,
    RemoteMoveDelayTimeMillisecondsAverage         = 5,
    RemoteMoveDelayTimeMillisecondsPoor            = 6,
    MaxUnacknowledgedDuration                      = 7,
    WarmupMaximumDuration                          = 8,
    MaxScoreLimitOverride                          = 9,
    MaxOvertimeRounds                              = 10,
    MinimapVisibilityTickInterval                  = 11,
    ObserverMovementMinQueueSize                   = 12,
    JohnsLatteRate                                 = 13,
    PainAuxRaisinsRate                             = 14,
    UsablesPredictionTimeout                       = 15,
    ForceModulesPredictionTimeout                  = 16,
    LogsPerSecondThreshold                         = 17,
    LogsPerSecondCriticalThreshold                 = 18,
    LogsPerSecondMeasurementWindow                 = 19,
    AimToolingTrackerHighRecoilThreshold           = 20,
    AimToolingTelemetryEventCadenceSeconds         = 21,
    AimToolingTelemetryEventPercentChanceToPost    = 22,
    SilentFramesBeforeBurstLoss                    = 23,
    GamepadMaxFramerateAlways                      = 24,
    EndToEndLatencyJitter                          = 25,
    ABFootstepTestControlPercent                   = 26,
    RelativeTriggerThreshold                       = 27,
    RelativeTriggerDeltaSensitivity                = 28,
    GameDataWorldSnapshotIntervalSec               = 29,
    GameDataWorldConfigurationIntervalSec          = 30,
    GameDataTimeseriesIntervalSec                  = 31,
    ShortTermNPEUpdatesChance                      = 32,
    MaxSnapshotCountForShortGames                  = 33,
    GamepadAimAccelResetAngle                      = 34,
    DesignerFloatA                                 = 35,
    DesignerFloatB                                 = 36,
    DesignerFloatC                                 = 37,
    DesignerFloatD                                 = 38,
    DesignerFloatE                                 = 39,
    AwakeReplicationFrequency                      = 40,
    AimToolingDelayedZoomAlphaValue                = 41,
    Count                                          = 42,
    Invalid                                        = 254,
    EGameFeatureConfigName                         = 255,
    EGameFeatureFloatConfigName                    = 256

};


// Enum  ShooterGame.EAresMatchTimeoutState
enum class EAresMatchTimeoutState : uint8_t
{
    None                                           = 0,
    TimeoutCountdown                               = 1,
    Timeout                                        = 2,
    Count                                          = 3,
    EAresMatchTimeoutState                         = 4

};


// Enum  ShooterGame.EMatchCompletionState
enum class EMatchCompletionState : uint8_t
{
    InProgress                                     = 0,
    Completed                                      = 1,
    All                                            = 2,
    Team                                           = 3,
    Hacking                                        = 4,
    Surrendered                                    = 5,
    VoteDraw                                       = 6,
    ForceDraw                                      = 7,
    Remake                                         = 8,
    Unknown                                        = 9,
    Count                                          = 10,
    EMatchCompletionState                          = 11

};


// Enum  ShooterGame.EAresInputState
enum class EAresInputState : uint8_t
{
    Released                                       = 0,
    Pressed                                        = 1,
    Count                                          = 2,
    Invalid                                        = 254,
    EAresInputState                                = 255

};


// Enum  ShooterGame.EAresNotificationResponseType
enum class EAresNotificationResponseType : uint8_t
{
    Dismiss                                        = 0,
    ActionA                                        = 1,
    ActionB                                        = 2,
    NoResponse                                     = 3,
    EAresNotificationResponseType                  = 4

};


// Enum  AIModule.EPathFollowingResult
enum class EPathFollowingResult : uint8_t
{
    Success                                        = 0,
    Blocked                                        = 1,
    OffPath                                        = 2,
    Aborted                                        = 3,
    Skipped                                        = 4,
    Invalid                                        = 5,
    EPathFollowingResult                           = 6

};


// Enum  AIModule.EEnvQueryStatus
enum class EEnvQueryStatus : uint8_t
{
    Processing                                     = 0,
    Success                                        = 1,
    Failed                                         = 2,
    Aborted                                        = 3,
    OwnerLost                                      = 4,
    MissingParam                                   = 5,
    EEnvQueryStatus                                = 6

};


// Enum  ShooterGame.ERewardSource
enum class ERewardSource : uint8_t
{
    Other                                          = 0,
    Kill                                           = 1,
    Death                                          = 2,
    Spike                                          = 3,
    Orb                                            = 4,
    Count                                          = 5,
    ERewardSource                                  = 6

};


// Enum  ShooterGame.EAresRewardGrantStrategy
enum class EAresRewardGrantStrategy : uint8_t
{
    GrantImmediately                               = 0,
    DelayUntilRoundEnd                             = 1,
    Count                                          = 2,
    EAresRewardGrantStrategy                       = 3

};


// Enum  ShooterGame.EInventoryTransaction
enum class EInventoryTransaction : uint8_t
{
    Purchase                                       = 0,
    PickUp                                         = 1,
    FulfillRequest                                 = 2,
    RefundRequest                                  = 3,
    Drop                                           = 4,
    Sell                                           = 5,
    Transfer                                       = 6,
    Trash                                          = 7,
    Store                                          = 8,
    Retrieve                                       = 9,
    Default                                        = 10,
    Other                                          = 11,
    OtherGrant                                     = 12,
    OtherRemove                                    = 13,
    Count                                          = 14,
    EInventoryTransaction                          = 15

};


// Enum  ShooterGame.EAresEquippableRestrictionType
enum class EAresEquippableRestrictionType : uint8_t
{
    None                                           = 0,
    CantSwitchEquippables                          = 1,
    PrimaryWeaponsDisabled                         = 2,
    HeavyWeaponsDisabled                           = 3,
    WeaponsDisabled                                = 4,
    AbilityDisabled                                = 5,
    Suppressed                                     = 6,
    Count                                          = 7,
    EAresEquippableRestrictionType                 = 8

};


// Enum  ShooterGame.EMissionStatus
enum class EMissionStatus : uint8_t
{
    Inactive                                       = 0,
    Active                                         = 1,
    Completed                                      = 2,
    Failed                                         = 3,
    Count                                          = 4,
    Invalid                                        = 254,
    EMissionStatus                                 = 255

};


// Enum  ShooterGame.EObjectiveStatus
enum class EObjectiveStatus : uint8_t
{
    Hidden                                         = 0,
    Active                                         = 1,
    Completed                                      = 2,
    Failed                                         = 3,
    Count                                          = 4,
    Invalid                                        = 254,
    EObjectiveStatus                               = 255

};


// Enum  ShooterGame.EObjectiveType
enum class EObjectiveType : uint8_t
{
    Required                                       = 0,
    Optional                                       = 1,
    Count                                          = 2,
    Invalid                                        = 254,
    EObjectiveType                                 = 255

};


// Enum  ShooterGame.EDestructionType
enum class EDestructionType : uint8_t
{
    AreaDestruct                                   = 0,
    EDestructionType                               = 1

};


// Enum  ShooterGame.EDestructionEffectPlayType
enum class EDestructionEffectPlayType : uint8_t
{
    PlayAtLocation                                 = 0,
    PlayOnActor                                    = 1,
    EDestructionEffectPlayType                     = 2

};


// Enum  ShooterGame.EAresTeamRole
enum class EAresTeamRole : uint8_t
{
    None                                           = 0,
    Attacker                                       = 1,
    Defender                                       = 2,
    FreeForAll                                     = 3,
    Any                                            = 4,
    Role                                           = 5,
    EAresTeamRole                                  = 6

};


// Enum  ShooterGame.EObjectiveEventType
enum class EObjectiveEventType : uint8_t
{
    Objective                                      = 0,
    Mission                                        = 1,
    Module                                         = 2,
    EObjectiveEventType                            = 3

};


// Enum  ShooterGame.EAresGunRequestState
enum class EAresGunRequestState : uint8_t
{
    Empty                                          = 0,
    Open                                           = 1,
    EAresGunRequestState                           = 2

};


// Enum  ShooterGame.EUseKeyType
enum class EUseKeyType : uint8_t
{
    None                                           = 0,
    Alternate                                      = 1,
    AgentAbility                                   = 2,
    OrbPickup                                      = 4,
    Ascender                                       = 8,
    WeaponPickup                                   = 16,
    GenericMap                                     = 32,
    RemoveCleanse                                  = 64,
    AnotherCharacter                               = 128,
    All                                            = 255,
    Count                                          = 8,
    EUseKeyType                                    = 256

};


// Enum  ShooterGame.EAresRegionalDamage
enum class EAresRegionalDamage : uint8_t
{
    RegionalDamage                                 = 0,
    RegionalDamage                                 = 1,
    RegionalDamage                                 = 2,
    RegionalDamage                                 = 3,
    RegionalDamage                                 = 4,
    RegionalDamage                                 = 5,
    RegionalDamage                                 = 6,
    EAresRegionalDamage                            = 255

};


// Enum  ShooterGame.EAresDirectionalDamage
enum class EAresDirectionalDamage : uint8_t
{
    DirectionalDamage                              = 0,
    DirectionalDamage                              = 1,
    DirectionalDamage                              = 2,
    DirectionalDamage                              = 3,
    DirectionalDamage                              = 4,
    DirectionalDamage                              = 254,
    EAresDirectionalDamage                         = 255

};


// Enum  ShooterGame.EStealthState
enum class EStealthState : uint8_t
{
    Inactive                                       = 0,
    Concealed                                      = 1,
    Revealed                                       = 2,
    Count                                          = 3,
    EStealthState                                  = 4

};


// Enum  ShooterGame.ETrapState
enum class ETrapState : uint8_t
{
    Created                                        = 0,
    Deploying                                      = 1,
    Arming                                         = 2,
    Armed                                          = 3,
    Disarmed                                       = 4,
    Triggered                                      = 5,
    Destroyed                                      = 6,
    ETrapState                                     = 7

};


// Enum  ShooterGame.EEarnedStatus
enum class EEarnedStatus : uint8_t
{
    PremiumRequiredToEarn                          = 0,
    Unearned                                       = 1,
    Earned                                         = 2,
    EEarnedStatus                                  = 3

};


// Enum  ShooterGame.EMmrErrorEnum
enum class EMmrErrorEnum : uint8_t
{
    ErrRateExceeded                                = 0,
    ErrInvalid                                     = 1,
    EMmrErrorEnum                                  = 2

};


// Enum  ShooterGame.EOnboardingStatus
enum class EOnboardingStatus : uint8_t
{
    OnboardingUnknown                              = 0,
    NPEIncomplete                                  = 1,
    BTMRequired                                    = 2,
    BTMOptional                                    = 3,
    BTMRetriable                                   = 4,
    OnboardingComplete                             = 5,
    BTMUnavailable                                 = 6,
    COUNT                                          = 7,
    INVALID                                        = 8,
    EOnboardingStatus                              = 9

};


// Enum  ShooterGame.EProvisioningFlowID
enum class EProvisioningFlowID : uint8_t
{
    Invalid                                        = 0,
    ShootingRange                                  = 1,
    SkillTest                                      = 2,
    CustomGame                                     = 3,
    Matchmaking                                    = 4,
    NewPlayerExperience                            = 5,
    ReplayNewPlayerExperience                      = 6,
    BotTrainingMatch                               = 7,
    Tournament                                     = 8,
    Count                                          = 9,
    EProvisioningFlowID                            = 10

};


// Enum  ShooterGame.EPartyErrorEnum
enum class EPartyErrorEnum : uint8_t
{
    ErrUnparsableState                             = 0,
    ErrUnparsableTeam                              = 1,
    ErrJoinTypeNotRecognized                       = 2,
    ErrJoinPartyWithoutOwnership                   = 3,
    ErrJoinPartyGotBlocked                         = 4,
    ErrPartyTooLargeToJoin                         = 5,
    ErrPlayerDoesNotExist                          = 6,
    ErrPlayerNoCurrentParty                        = 7,
    ErrJoinPlayerNilParty                          = 8,
    ErrPlayerExistsInParty                         = 9,
    ErrJoiningPlayerNotInMenus                     = 10,
    ErrPartyMemberNotInMenus                       = 11,
    ErrPartyStateCantEnterMatchmaking              = 12,
    ErrPartyNotInMatchmaking                       = 13,
    ErrPlayerInGame                                = 14,
    ErrNilSessionNotification                      = 15,
    ErrPartyCleaned                                = 16,
    ErrPartyTooLargeToConvertMM                    = 17,
    ErrClientVersionMismatchWithSession            = 18,
    ErrPartyDoesNotExist                           = 19,
    ErrNotACustomGame                              = 20,
    ErrPartyStateCantEnterQuickCustomGame          = 21,
    ErrTooManyPlayersForQuickCustomGame            = 22,
    ErrInviteNotAllowed                            = 23,
    ErrCheatsDisabled                              = 24,
    ErrEmptyName                                   = 25,
    ErrPartyStateCantEnterCustomGame               = 26,
    ErrEmptyQueue                                  = 27,
    ErrOldPartyIDMismatch                          = 28,
    ErrPartyIDInvalid                              = 29,
    ErrPlayerAlreadyInited                         = 30,
    ErrPlayerNotInited                             = 31,
    ErrNewPartyIDIsNotNew                          = 32,
    ErrInviteNotFound                              = 33,
    ErrInviteExists                                = 34,
    ErrPartyNil                                    = 35,
    ErrPartyAlreadyExists                          = 36,
    ErrPartyIDMismatch                             = 37,
    ErrCannotModifyPlayerNotInParty                = 38,
    ErrAlreadyInParty                              = 39,
    ErrPartyFull                                   = 40,
    ErrIncorrectPartyState                         = 41,
    ErrPlayerClientVersionMismatch                 = 42,
    ErrInvalidPreviousState                        = 43,
    ErrNotPartyOwner                               = 44,
    ErrMatchmakingError                            = 45,
    ErrRequestOnOpenError                          = 46,
    ErrRequestOnFullParty                          = 47,
    ErrRequestTooManySubjects                      = 48,
    ErrQueueNotEnabled                             = 49,
    ErrQueueRestricted                             = 50,
    ErrInviteCodeMappingNil                        = 51,
    ErrInviterCrossPlayIncompatible                = 52,
    ErrInviteeCrossPlayIncompatible                = 53,
    ErrRequestingPlayerCrossPlayIncompatible       = 54,
    ErrRequestToJoinPartyCrossPlayIncompatible     = 55,
    ErrJoiningPlayerCrossPlayIncompatible          = 56,
    ErrPartyToJoinCrossPlayIncompatible            = 57,
    ErrPartyCrossPlayIncompatible                  = 58,
    ErrNativePlatformInviteError                   = 59,
    ErrGenericPlatformInviteError                  = 60,
    ErrPSNCrossPlayGameInvitationsNotAllowed       = 61,
    ErrPSNPrivacySettingsNotCompatible             = 62,
    ErrPlatformSessionJoin                         = 63,
    ErrNativePlatformInsufficientPermissions       = 64,
    ErrInvalid                                     = 65,
    EPartyErrorEnum                                = 66

};


// Enum  ShooterGame.EPartyManagerInviteAction
enum class EPartyManagerInviteAction : uint8_t
{
    Accepted                                       = 0,
    Declined                                       = 1,
    Count                                          = 2,
    EPartyManagerInviteAction                      = 3

};


// Enum  ShooterGame.ERosterPartyMemberEligibility
enum class ERosterPartyMemberEligibility : uint8_t
{
    Eligible                                       = 0,
    IneligibleAccountUnverified                    = 1,
    IneligibleNotOnRoster                          = 2,
    IneligibleHitMatchLimit                        = 3,
    Invalid                                        = 4,
    ERosterPartyMemberEligibility                  = 5

};


// Enum  ShooterGame.ECustomGameTeam
enum class ECustomGameTeam : uint8_t
{
    Defenders                                      = 0,
    Attackers                                      = 1,
    Spectate                                       = 2,
    DefendersCoaches                               = 3,
    AttackersCoaches                               = 4,
    Count                                          = 5,
    Invalid                                        = 6,
    ECustomGameTeam                                = 7

};


// Enum  ShooterGame.EPartyViewState
enum class EPartyViewState : uint8_t
{
    Default                                        = 0,
    CustomGame                                     = 1,
    Tournament                                     = 2,
    Invalid                                        = 3,
    EPartyViewState                                = 4

};


// Enum  ShooterGame.EAresPartyAccessibility
enum class EAresPartyAccessibility : uint8_t
{
    INVALID                                        = 0,
    OPEN                                           = 1,
    CLOSED                                         = 2,
    EAresPartyAccessibility                        = 3

};


// Enum  ShooterGame.ESocialXPState
enum class ESocialXPState : uint8_t
{
    FeatureInactive                                = 0,
    PartyNotEligible                               = 1,
    PartyEligible                                  = 2,
    ModeNotEligible                                = 3,
    ESocialXPState                                 = 4

};


// Enum  ShooterGame.EAresTouchMode
enum class EAresTouchMode : uint8_t
{
    Interaction                                    = 0,
    Edit                                           = 1,
    EAresTouchMode                                 = 2

};


// Enum  ShooterGame.EAresTouchState
enum class EAresTouchState : uint8_t
{
    Unknown                                        = 0,
    Pressed                                        = 1,
    Active                                         = 2,
    Released                                       = 3,
    Entered                                        = 4,
    Exited                                         = 5,
    EAresTouchState                                = 6

};


// Enum  ShooterGame.EAresTouchSwipeDirection
enum class EAresTouchSwipeDirection : uint8_t
{
    Up                                             = 0,
    Down                                           = 1,
    Left                                           = 2,
    Right                                          = 3,
    EAresTouchSwipeDirection                       = 4

};


// Enum  ShooterGame.EWidgetLayoutPresetType
enum class EWidgetLayoutPresetType : uint8_t
{
    Simple                                         = 0,
    Advanced                                       = 1,
    Experimental                                   = 2,
    Custom                                         = 3,
    None                                           = 255,
    EWidgetLayoutPresetType                        = 256

};


// Enum  ShooterGame.EAresTouchSwipeType
enum class EAresTouchSwipeType : uint8_t
{
    None                                           = 0,
    Up                                             = 1,
    Down                                           = 2,
    Left                                           = 3,
    Right                                          = 4,
    EAresTouchSwipeType                            = 5

};


// Enum  ShooterGame.EForceModuleType
enum class EForceModuleType : uint8_t
{
    ServerCreated                                  = 0,
    ClientSimulated                                = 1,
    ClientSynced                                   = 2,
    ClientPredicted                                = 3,
    EForceModuleType                               = 4

};


// Enum  ShooterGame.EWalletType
enum class EWalletType : uint8_t
{
    DEFAULT                                        = 0,
    JUICE                                          = 1,
    ALL                                            = 2,
    COUNT                                          = 3,
    EWalletType                                    = 4

};


// Enum  ShooterGame.EAVSConfirmationResponseType
enum class EAVSConfirmationResponseType : uint8_t
{
    ConfirmationPinIncorrect                       = 0,
    ConfirmationPinValid                           = 1,
    DeactivationPinSent                            = 2,
    ActivationPinSent                              = 3,
    Count                                          = 4,
    Invalid                                        = 5,
    EAVSConfirmationResponseType                   = 6

};


// Enum  ShooterGame.EAVSErrorType
enum class EAVSErrorType : uint8_t
{
    PhoneNumberUnavailable                         = 0,
    AccountAlreadyVerified                         = 1,
    VerificationPinNotFound                        = 2,
    InvalidVerificationTransactionType             = 3,
    InvalidPhoneType                               = 4,
    InvalidPhoneNumber                             = 5,
    PUUIDNotFound                                  = 6,
    AccountNotVerified                             = 7,
    ValidationError                                = 8,
    AuthPayloadDeserializationError                = 9,
    DataStoreError                                 = 10,
    RateLimitError                                 = 11,
    OTPRateLimitError                              = 12,
    LongTermOTPRateLimitError                      = 13,
    SMSServiceError                                = 14,
    UnknownServerError                             = 15,
    ConfirmationPinIncorrect                       = 16,
    Default                                        = 17,
    Count                                          = 18,
    Invalid                                        = 19,
    EAVSErrorType                                  = 20

};


// Enum  ShooterGame.EEsportsPickemAutosaveState
enum class EEsportsPickemAutosaveState : uint8_t
{
    HasPendingChanges                              = 0,
    Saving                                         = 1,
    Saved                                          = 2,
    Error                                          = 3,
    EEsportsPickemAutosaveState                    = 4

};


// Enum  ShooterGame.EPickemRegistrationStatus
enum class EPickemRegistrationStatus : uint8_t
{
    Unknown                                        = 0,
    Unregistered                                   = 1,
    Registered                                     = 2,
    EPickemRegistrationStatus                      = 3

};


// Enum  ShooterGame.EEsportsGameOutcome
enum class EEsportsGameOutcome : uint8_t
{
    Win                                            = 0,
    Loss                                           = 1,
    Undetermined                                   = 2,
    Invalid                                        = 3,
    EEsportsGameOutcome                            = 4

};


// Enum  ShooterGame.EEsportsMatchStatus
enum class EEsportsMatchStatus : uint8_t
{
    InProgress                                     = 0,
    Complete                                       = 1,
    Unstarted                                      = 2,
    Invalid                                        = 3,
    EEsportsMatchStatus                            = 4

};


// Enum  ShooterGame.EEsportsSubBracketType
enum class EEsportsSubBracketType : uint8_t
{
    Upper                                          = 0,
    Lower                                          = 1,
    Final                                          = 2,
    Invalid                                        = 3,
    EEsportsSubBracketType                         = 4

};


// Enum  ShooterGame.EPickemBlockSlug
enum class EPickemBlockSlug : uint8_t
{
    Groups                                         = 0,
    Playoffs                                       = 1,
    Invalid                                        = 2,
    EPickemBlockSlug                               = 3

};


// Enum  ShooterGame.EPresenceProduct
enum class EPresenceProduct : uint8_t
{
    Ares                                           = 0,
    Bacon                                          = 1,
    Keystone                                       = 2,
    LeagueOfLegends                                = 3,
    Invalid                                        = 4,
    EPresenceProduct                               = 5

};


// Enum  ShooterGame.EPlayerAliasError
enum class EPlayerAliasError : uint8_t
{
    NoError                                        = 0,
    NameChangeForbidden                            = 1,
    NameNotAvailable                               = 2,
    RateLimited                                    = 3,
    UnknownError                                   = 4,
    EPlayerAliasError                              = 5

};


// Enum  ShooterGame.EAvoidListError
enum class EAvoidListError : uint8_t
{
    ErrAvoidListFull                               = 0,
    ErrOther                                       = 1,
    EAvoidListError                                = 2

};


// Enum  ShooterGame.EAresTempType
enum class EAresTempType : uint8_t
{
    Temp                                           = 0,
    Temp                                           = 1,
    Temp                                           = 2,
    Temp                                           = 4,
    Temp                                           = 8,
    All                                            = 15,
    EAresTempType                                  = 16

};


// Enum  ShooterGame.EAresSocialPartyCompatibility
enum class EAresSocialPartyCompatibility : uint8_t
{
    Compatible                                     = 0,
    CrossplayUnsupported                           = 1,
    CrossplayDisallowed                            = 2,
    VersionMismatch                                = 3,
    MultiplayerDisallowed                          = 4,
    Error                                          = 5,
    EAresSocialPartyCompatibility                  = 6

};


// Enum  ShooterGame.EAresSocialStatusTemplate
enum class EAresSocialStatusTemplate : uint8_t
{
    Available                                      = 0,
    MapName                                        = 1,
    InParty                                        = 2,
    InPartyPremier                                 = 3,
    Matchmaking                                    = 4,
    AgentSelect                                    = 5,
    MatchScore                                     = 6,
    InTournament                                   = 7,
    VersionMismatch                                = 8,
    Generic                                        = 9,
    Blocked                                        = 10,
    EAresSocialStatusTemplate                      = 11

};


// Enum  ShooterGame.EAresSocialPresenceType
enum class EAresSocialPresenceType : uint8_t
{
    Online                                         = 0,
    Busy                                           = 1,
    Away                                           = 2,
    Offline                                        = 3,
    Error                                          = 4,
    EAresSocialPresenceType                        = 5

};


// Enum  ShooterGame.EPartyMessageType
enum class EPartyMessageType : uint8_t
{
    INVALID                                        = 0,
    Invite                                         = 1,
    Request                                        = 2,
    EPartyMessageType                              = 3

};


// Enum  ShooterGame.EAresSocialTransitionType
enum class EAresSocialTransitionType : uint8_t
{
    Animate                                        = 0,
    Instant                                        = 1,
    EAresSocialTransitionType                      = 2

};


// Enum  ShooterGame.EAresSocialFolderExpansionState
enum class EAresSocialFolderExpansionState : uint8_t
{
    Expanded                                       = 0,
    Collapsed                                      = 1,
    EAresSocialFolderExpansionState                = 2

};


// Enum  ShooterGame.EAresSocialFolderVisibilityState
enum class EAresSocialFolderVisibilityState : uint8_t
{
    Visible                                        = 0,
    Hidden                                         = 1,
    EAresSocialFolderVisibilityState               = 2

};


// Enum  ShooterGame.EAresCommonButtonVisibleState
enum class EAresCommonButtonVisibleState : uint8_t
{
    Default                                        = 0,
    Disabled                                       = 1,
    Pressed                                        = 2,
    Hovered                                        = 3,
    Selected                                       = 4,
    SelectedHovered                                = 5,
    Max                                            = 6,
    EAresCommonButtonVisibleState                  = 7

};


// Enum  ShooterGame.ESocialTriggerState
enum class ESocialTriggerState : uint8_t
{
    Default                                        = 0,
    FriendRequests                                 = 1,
    PartyMessages                                  = 2,
    ESocialTriggerState                            = 3

};


// Enum  ShooterGame.EPurchaseState
enum class EPurchaseState : uint8_t
{
    Initializing                                   = 0,
    SubmittingOrder                                = 1,
    ProcessingOrder                                = 2,
    UpdatingLocalInventory                         = 3,
    Complete                                       = 4,
    Failed                                         = 5,
    Cancelled                                      = 6,
    Timeout                                        = 7,
    Count                                          = 8,
    EPurchaseState                                 = 9

};


// Enum  ShooterGame.ETextChatRoomType
enum class ETextChatRoomType : uint8_t
{
    GroupChat                                      = 0,
    FriendChat                                     = 1,
    DirectMessage                                  = 2,
    Invalid                                        = 3,
    System                                         = 4,
    ETextChatRoomType                              = 5

};


// Enum  ShooterGame.EMessageSendErrorType
enum class EMessageSendErrorType : uint8_t
{
    PlayerNotFound                                 = 0,
    RoomUnavailable                                = 1,
    Unknown                                        = 2,
    Invalid                                        = 3,
    Count                                          = 4,
    EMessageSendErrorType                          = 5

};


// Enum  ShooterGame.EChatRoomType
enum class EChatRoomType : uint8_t
{
    Party                                          = 0,
    Pregame                                        = 1,
    All                                            = 2,
    Team                                           = 3,
    InGameSystem                                   = 4,
    System                                         = 5,
    Whisper                                        = 6,
    Count                                          = 7,
    EChatRoomType                                  = 8

};


// Enum  ShooterGame.EAresAlliance
enum class EAresAlliance : uint8_t
{
    Alliance                                       = 0,
    Alliance                                       = 1,
    Alliance                                       = 2,
    Alliance                                       = 3,
    Alliance                                       = 4,
    Alliance                                       = 5

};


// Enum  ShooterGame.EMessagePartType
enum class EMessagePartType : uint8_t
{
    Text                                           = 0,
    Notification                                   = 1,
    Emoji                                          = 2,
    AntiAddiction                                  = 3,
    UntrustedText                                  = 4,
    EMessagePartType                               = 5

};


// Enum  ShooterGame.EMessageContentType
enum class EMessageContentType : uint8_t
{
    Text                                           = 0,
    MatchDetails                                   = 1,
    EMessageContentType                            = 2

};


// Enum  ShooterGame.EChatMode
enum class EChatMode : uint8_t
{
    None                                           = 0,
    Team                                           = 1,
    All                                            = 2,
    Ping                                           = 3,
    Count                                          = 4,
    EChatMode                                      = 5

};


// Enum  ShooterGame.ETournamentPlacement
enum class ETournamentPlacement : uint8_t
{
    FIRST                                          = 99,
    SECOND                                         = 98,
    THIRD                                          = 97,
    FOURTH                                         = 96,
    FIFTH                                          = 95,
    SIXTH                                          = 94,
    SEVENTH                                        = 93,
    EIGHTH                                         = 92,
    INPROGRESS                                     = 1,
    NOPLACEMENT                                    = 0,
    Count                                          = 1,
    ETournamentPlacement                           = 100

};


// Enum  ShooterGame.EPremierRosterEnrollErrorType
enum class EPremierRosterEnrollErrorType : uint8_t
{
    MinumumRequiredMembers                         = 0,
    Default                                        = 1,
    Count                                          = 2,
    Invalid                                        = 3,
    EPremierRosterEnrollErrorType                  = 4

};


// Enum  ShooterGame.EPremierCrestType
enum class EPremierCrestType : uint8_t
{
    INVALID                                        = 0,
    NONE                                           = 1,
    COMPETITOR                                     = 2,
    QUALIFIED                                      = 3,
    PLAYOFFS                                       = 4,
    SECOND                                         = 5,
    FIRST                                          = 6,
    FLAWLESS                                       = 7,
    Count                                          = 8,
    EPremierCrestType                              = 9

};


// Enum  ShooterGame.EPremierEventType
enum class EPremierEventType : uint8_t
{
    INVALID                                        = 0,
    LEAGUE                                         = 1,
    TOURNAMENT                                     = 2,
    SCRIM                                          = 3,
    Count                                          = 4,
    EPremierEventType                              = 5

};


// Enum  ShooterGame.ERosterMemberRole
enum class ERosterMemberRole : uint8_t
{
    Owner                                          = 0,
    Captain                                        = 1,
    Member                                         = 2,
    Count                                          = 3,
    Invalid                                        = 4,
    ERosterMemberRole                              = 5

};


// Enum  ShooterGame.ECreateRosterErrorType
enum class ECreateRosterErrorType : uint8_t
{
    NameTaken                                      = 0,
    NameLength                                     = 1,
    TagLength                                      = 2,
    InappropriateName                              = 3,
    Default                                        = 4,
    Count                                          = 5,
    Invalid                                        = 6,
    ECreateRosterErrorType                         = 7

};


// Enum  ShooterGame.ECreateRosterInviteErrorType
enum class ECreateRosterInviteErrorType : uint8_t
{
    RosterLocked                                   = 0,
    PlayerMaxRosterLimitReached                    = 1,
    RosterNonProvisional                           = 2,
    PlayerIneligibleRanked                         = 3,
    PlayerIneligibleAVS                            = 4,
    PlayerIneligibleRestrictionIneligible          = 5,
    PlayerIneligibleRestrictionDisqualified        = 6,
    PlayerIneligibleContenderEligibility           = 7,
    InviteeChangesRosterDivisionTier               = 8,
    InviteeNotEligibleAVS                          = 9,
    InviteeNotEligibleRanked                       = 10,
    InviteeNotEligibleRestrictionIneligible        = 11,
    InviteeNotEligibleRestrictionDisqualified      = 12,
    Default                                        = 13,
    Count                                          = 14,
    Invalid                                        = 15,
    ECreateRosterInviteErrorType                   = 16

};


// Enum  ShooterGame.EEnrollRosterErrorType
enum class EEnrollRosterErrorType : uint8_t
{
    MinumumRequiredMembers                         = 0,
    Default                                        = 1,
    Count                                          = 2,
    Invalid                                        = 3,
    EEnrollRosterErrorType                         = 4

};


// Enum  ShooterGame.ERosterCreateErrorType
enum class ERosterCreateErrorType : uint8_t
{
    NameTaken                                      = 0,
    NameLength                                     = 1,
    TagLength                                      = 2,
    InappropriateName                              = 3,
    Default                                        = 4,
    Count                                          = 5,
    Invalid                                        = 6,
    ERosterCreateErrorType                         = 7

};


// Enum  ShooterGame.ERosterInviteErrorType
enum class ERosterInviteErrorType : uint8_t
{
    RosterLocked                                   = 0,
    PlayerMaxRosterLimitReached                    = 1,
    RosterNonProvisional                           = 2,
    PlayerIneligibleRanked                         = 3,
    PlayerIneligibleAVS                            = 4,
    PlayerIneligibleRestrictionIneligible          = 5,
    PlayerIneligibleRestrictionDisqualified        = 6,
    PlayerIneligibleContenderEligibility           = 7,
    InviteeChangesRosterDivisionTier               = 8,
    InviteeNotEligibleAVS                          = 9,
    InviteeNotEligibleRanked                       = 10,
    InviteeNotEligibleRestrictionIneligible        = 11,
    InviteeNotEligibleRestrictionDisqualified      = 12,
    Default                                        = 13,
    Count                                          = 14,
    Invalid                                        = 15,
    ERosterInviteErrorType                         = 16

};


// Enum  ShooterGame.ERosterChangeRoleErrorType
enum class ERosterChangeRoleErrorType : uint8_t
{
    MaxCaptainLimitReached                         = 0,
    Default                                        = 1,
    Count                                          = 2,
    Invalid                                        = 3,
    ERosterChangeRoleErrorType                     = 4

};


// Enum  ShooterGame.EMatchupStatus
enum class EMatchupStatus : uint8_t
{
    CREATED                                        = 0,
    READY                                          = 1,
    STARTED                                        = 2,
    FINISHED                                       = 3,
    EXCLUDED                                       = 4,
    CANCELED                                       = 5,
    Count                                          = 6,
    Invalid                                        = 7,
    EMatchupStatus                                 = 8

};


// Enum  ShooterGame.EMatchupParticipantOutcome
enum class EMatchupParticipantOutcome : uint8_t
{
    WIN                                            = 0,
    LOSS                                           = 1,
    NONE                                           = 2,
    Count                                          = 3,
    Invalid                                        = 4,
    EMatchupParticipantOutcome                     = 5

};


// Enum  ShooterGame.EMatchupBracketType
enum class EMatchupBracketType : uint8_t
{
    WINNERS                                        = 0,
    LOSERS                                         = 1,
    Count                                          = 2,
    Invalid                                        = 3,
    EMatchupBracketType                            = 4

};


// Enum  ShooterGame.ETournamentStatus
enum class ETournamentStatus : uint8_t
{
    CREATED                                        = 0,
    STARTED                                        = 1,
    FINISHED                                       = 2,
    CANCELED                                       = 3,
    Count                                          = 4,
    Invalid                                        = 5,
    ETournamentStatus                              = 6

};


// Enum  ShooterGame.ETournamentType
enum class ETournamentType : uint8_t
{
    ELIMINATION                                    = 0,
    CONSOLATION                                    = 1,
    Count                                          = 2,
    Invalid                                        = 3,
    ETournamentType                                = 4

};


// Enum  ShooterGame.EVoiceSessionType
enum class EVoiceSessionType : uint8_t
{
    Invalid                                        = 0,
    Party                                          = 1,
    Team                                           = 2,
    Count                                          = 3,
    EVoiceSessionType                              = 4

};


// Enum  Engine.EViewTargetBlendFunction
enum class EViewTargetBlendFunction : uint8_t
{
    VTBlend                                        = 0,
    VTBlend                                        = 1,
    VTBlend                                        = 2,
    VTBlend                                        = 3,
    VTBlend                                        = 4,
    VTBlend                                        = 5,
    VTBlend                                        = 6

};


// Enum  ShooterGame.EPregameMatchState
enum class EPregameMatchState : uint8_t
{
    MapSelectReady                                 = 0,
    MapSelectActive                                = 1,
    MapSelectFinished                              = 2,
    CharacterSelectActive                          = 3,
    CharacterSelectFinished                        = 4,
    Provisioned                                    = 5,
    Invalid                                        = 6,
    Count                                          = 7,
    EPregameMatchState                             = 8

};


// Enum  ShooterGame.EPregameLockInState
enum class EPregameLockInState : uint8_t
{
    NotSelected                                    = 0,
    CanLockIn                                      = 1,
    CannotLockIn                                   = 2,
    LockingIn                                      = 3,
    LockedIn                                       = 4,
    EPregameLockInState                            = 5

};


// Enum  ShooterGame.EPregameCharacterState
enum class EPregameCharacterState : uint8_t
{
    Free                                           = 0,
    SelectedByOther                                = 1,
    SelectedByMe                                   = 2,
    LockedByMe                                     = 3,
    LockedByOther                                  = 4,
    EPregameCharacterState                         = 5

};


// Enum  ShooterGame.EStepType
enum class EStepType : uint8_t
{
    MapBan                                         = 0,
    MapPick                                        = 1,
    SidePick                                       = 2,
    EStepType                                      = 3

};


// Enum  ShooterGame.EJanusStreamerUsed
enum class EJanusStreamerUsed : uint8_t
{
    None                                           = 0,
    LocalFile                                      = 1,
    RiotHTTP                                       = 2,
    EJanusStreamerUsed                             = 3

};


// Enum  ShooterGame.EProgressModelStage
enum class EProgressModelStage : uint8_t
{
    NotStarted                                     = 0,
    Paused                                         = 1,
    Running                                        = 2,
    Completed                                      = 3,
    Count                                          = 4,
    EProgressModelStage                            = 5

};


// Enum  ShooterGame.EAnimationConductorNodeResetType
enum class EAnimationConductorNodeResetType : uint8_t
{
    Normal                                         = 0,
    ForceReset                                     = 1,
    EAnimationConductorNodeResetType               = 2

};


// Enum  ShooterGame.EAresWidgetDependentState
enum class EAresWidgetDependentState : uint8_t
{
    Enabled                                        = 0,
    Disabled                                       = 1,
    Locked                                         = 2,
    Collapsed                                      = 3,
    None                                           = 4,
    EAresWidgetDependentState                      = 5

};


// Enum  ShooterGame.EVisualizedSoundTypes
enum class EVisualizedSoundTypes : uint8_t
{
    None                                           = 0,
    FootSteps                                      = 1,
    JumpLaunch                                     = 2,
    JumpLand                                       = 3,
    BombPlant                                      = 4,
    BombTick                                       = 5,
    BombDefuse                                     = 6,
    BombDrop                                       = 7,
    Orb                                            = 8,
    BasePistolFire                                 = 9,
    SlimPistolFire                                 = 10,
    AutoPistolFire                                 = 11,
    LugerPistolFire                                = 12,
    RevolverPistolFire                             = 13,
    VectorSMGFire                                  = 14,
    MP5SMGFire                                     = 15,
    PumpShotgunFire                                = 16,
    AutoShotgunFire                                = 17,
    BurstRifleFire                                 = 18,
    DMRRifleFire                                   = 19,
    CarbineRifleFire                               = 20,
    AKRifleFire                                    = 21,
    LeverSniperFire                                = 22,
    BoltSniperFire                                 = 23,
    LMGFire                                        = 24,
    HMGFire                                        = 25,
    WeaponDrop                                     = 26,
    Reload                                         = 27,
    EVisualizedSoundTypes                          = 28

};


// Enum  ShooterGame.EBracketType
enum class EBracketType : uint8_t
{
    SingleElimination                              = 0,
    DoubleElimination                              = 1,
    Swiss                                          = 2,
    EBracketType                                   = 3

};


// Enum  ShooterGame.E2024VCTEvent
enum class E2024VCTEvent : uint8_t
{
    None                                           = 0,
    LeagueKickoff                                  = 1,
    LeagueKickoff                                  = 2,
    LeagueKickoff                                  = 3,
    LeagueKickoff                                  = 4,
    LeagueKickoff                                  = 5,
    Masters1                                       = 6,
    Stage1                                         = 7,
    Stage1                                         = 8,
    Stage1                                         = 9,
    Stage1                                         = 10,
    Stage1                                         = 11,
    Masters2                                       = 12,
    Stage2                                         = 13,
    Stage2                                         = 14,
    Stage2                                         = 15,
    Stage2                                         = 16,
    Stage2                                         = 17,
    Champions                                      = 18,
    E2024VCTEvent                                  = 19

};


// Enum  ShooterGame.EAresFlyoutOpenState
enum class EAresFlyoutOpenState : uint8_t
{
    Closed                                         = 0,
    Opening                                        = 1,
    Opened                                         = 2,
    Closing                                        = 3,
    EAresFlyoutOpenState                           = 4

};


// Enum  ShooterGame.EWidgetVisibilityOption
enum class EWidgetVisibilityOption : uint8_t
{
    Inherit                                        = 0,
    Visible                                        = 1,
    Hidden                                         = 2,
    COUNT                                          = 3,
    EWidgetVisibilityOption                        = 4

};


// Enum  ShooterGame.EUIConfirmationModalResponse
enum class EUIConfirmationModalResponse : uint8_t
{
    None                                           = 0,
    Confirm                                        = 1,
    Cancel                                         = 2,
    EUIConfirmationModalResponse                   = 3

};


// Enum  ShooterGame.EUIConfirmationModalType
enum class EUIConfirmationModalType : uint8_t
{
    None                                           = 0,
    Confirm                                        = 1,
    ConfirmCancel                                  = 2,
    EUIConfirmationModalType                       = 3

};


// Enum  ShooterGame.EUIConfirmationModalVisualType
enum class EUIConfirmationModalVisualType : uint8_t
{
    Generic                                        = 0,
    SystemError                                    = 1,
    Warning                                        = 2,
    RestrictionsWarning                            = 3,
    EUIConfirmationModalVisualType                 = 4

};


// Enum  ShooterGame.EListItemDisplayEntryActivationType
enum class EListItemDisplayEntryActivationType : uint8_t
{
    Highlighted                                    = 0,
    Committed                                      = 1,
    EListItemDisplayEntryActivationType            = 2

};


// Enum  ShooterGame.ESimpleSectionHeadersListModelBase
enum class ESimpleSectionHeadersListModelBase : uint8_t
{
    ESimpleSectionHeadersListModelBase             = 0,
    ESimpleSectionHeadersListModelBase             = 1,
    ESimpleSectionHeadersListModelBase             = 2,
    ESimpleSectionHeadersListModelBase             = 3

};


// Enum  ShooterGame.EJuiceTrayMessage
enum class EJuiceTrayMessage : uint8_t
{
    NONE                                           = 0,
    ENERGY                                         = 1,
    MAX                                            = 2,
    METER                                          = 3,
    EXTRANEOUS                                     = 4,
    COUNT                                          = 5,
    EJuiceTrayMessage                              = 6

};


// Enum  ShooterGame.EJuiceBoxAnimation
enum class EJuiceBoxAnimation : uint8_t
{
    NONE                                           = 0,
    CLOSE                                          = 1,
    CLOSED                                         = 2,
    OPEN                                           = 3,
    OPEN                                           = 4,
    OPENED                                         = 5,
    COUNT                                          = 6,
    EJuiceBoxAnimation                             = 7

};


// Enum  ShooterGame.ECrosshairsGridMode
enum class ECrosshairsGridMode : uint8_t
{
    Create                                         = 0,
    Modify                                         = 1,
    None                                           = 2,
    ECrosshairsGridMode                            = 3

};


// Enum  ShooterGame.ETransitionScreenState
enum class ETransitionScreenState : uint8_t
{
    Loading                                        = 0,
    NonInteractive                                 = 1,
    Interactive                                    = 2,
    Invalid                                        = 3,
    Count                                          = 4,
    ETransitionScreenState                         = 5

};


// Enum  Slate.ESelectionMode
enum class ESelectionMode : uint8_t
{
    None                                           = 0,
    Single                                         = 1,
    SingleToggle                                   = 2,
    Multi                                          = 3,
    ESelectionMode                                 = 4

};


// Enum  SlateCore.EConsumeMouseWheel
enum class EConsumeMouseWheel : uint8_t
{
    WhenScrollingPossible                          = 0,
    Always                                         = 1,
    Never                                          = 2,
    EConsumeMouseWheel                             = 3

};


// Enum  SlateCore.EOrientation
enum class EOrientation : uint8_t
{
    Orient                                         = 0,
    Orient                                         = 1,
    Orient                                         = 2

};


// Enum  ShooterGame.EUserActionState
enum class EUserActionState : uint8_t
{
    Hidden                                         = 0,
    Disabled                                       = 1,
    Enabled                                        = 2,
    EUserActionState                               = 3

};


// Enum  ShooterGame.EUserActionTriggerResponse
enum class EUserActionTriggerResponse : uint8_t
{
    Handled                                        = 0,
    Rejected                                       = 1,
    Ignored                                        = 2,
    EUserActionTriggerResponse                     = 3

};


// Enum  ShooterGame.EMatchupTeamState
enum class EMatchupTeamState : uint8_t
{
    Unassigned                                     = 0,
    Assigned                                       = 1,
    Winner                                         = 2,
    Loser                                          = 3,
    EMatchupTeamState                              = 4

};


// Enum  ShooterGame.EPickemBracketResult
enum class EPickemBracketResult : uint8_t
{
    UNKOWN                                         = 0,
    CORRECT                                        = 1,
    INCORRECT                                      = 2,
    Count                                          = 3,
    Invalid                                        = 4,
    EPickemBracketResult                           = 5

};


// Enum  ShooterGame.EWinningTeam
enum class EWinningTeam : uint8_t
{
    None                                           = 0,
    TeamOne                                        = 1,
    TeamTwo                                        = 2,
    EWinningTeam                                   = 3

};


// Enum  ShooterGame.EVCTLeague
enum class EVCTLeague : uint8_t
{
    None                                           = 0,
    Champions                                      = 1,
    Masters                                        = 2,
    Americas                                       = 3,
    EMEA                                           = 4,
    Pacific                                        = 5,
    China                                          = 6,
    EVCTLeague                                     = 7

};


// Enum  ShooterGame.EVCTRegion
enum class EVCTRegion : uint8_t
{
    International                                  = 0,
    Americas                                       = 1,
    EMEA                                           = 2,
    Pacific                                        = 3,
    CN                                             = 4,
    None                                           = 5,
    EVCTRegion                                     = 6

};


// Enum  ShooterGame.EAresPickemStage
enum class EAresPickemStage : uint8_t
{
    Upcoming                                       = 0,
    Open                                           = 1,
    Closed                                         = 2,
    EAresPickemStage                               = 3

};


// Enum  ShooterGame.EAresPickemResult
enum class EAresPickemResult : uint8_t
{
    None                                           = 0,
    Incorrect                                      = 1,
    PartiallyCorrect                               = 2,
    Correct                                        = 3,
    Perfect                                        = 4,
    EAresPickemResult                              = 5

};


// Enum  ShooterGame.EAresPlayerRestrictionType
enum class EAresPlayerRestrictionType : uint8_t
{
    TEXT                                           = 0,
    VOICE                                          = 1,
    COMPETITIVE                                    = 2,
    EAresPlayerRestrictionType                     = 3

};


// Enum  ShooterGame.ETickerSeverity
enum class ETickerSeverity : uint8_t
{
    Ok                                             = 0,
    Warning                                        = 1,
    Error                                          = 2,
    ETickerSeverity                                = 3,
    ETickerSeverity                                = 4

};


// Enum  ShooterGame.EVoteState
enum class EVoteState : uint8_t
{
    Inactive                                       = 0,
    ActivateOnceReplicated                         = 1,
    Active                                         = 2,
    Concluded                                      = 3,
    Expired                                        = 4,
    EVoteState                                     = 5

};


// Enum  ShooterGame.EUpgradeCostType
enum class EUpgradeCostType : uint8_t
{
    Money                                          = 0,
    Energy                                         = 1,
    UltimateHighWater                              = 2,
    Count                                          = 3,
    EUpgradeCostType                               = 4

};


// Enum  ShooterGame.EAccountXPXPSourceID
enum class EAccountXPXPSourceID : uint8_t
{
    MatchWin                                       = 0,
    TimePlayed                                     = 1,
    FirstWinOfTheDay                               = 2,
    EAccountXPXPSourceID                           = 3

};


// Enum  ShooterGame.EActionBindSetUserLayer
enum class EActionBindSetUserLayer : uint8_t
{
    Default                                        = 0,
    CustomBase                                     = 1,
    Character                                      = 2,
    Top                                            = 2,
    Count                                          = 3,
    Invalid                                        = 254,
    EActionBindSetUserLayer                        = 255

};


// Enum  ShooterGame.EActionBindResetType
enum class EActionBindResetType : uint8_t
{
    All                                            = 0,
    PendingOnly                                    = 1,
    Count                                          = 2,
    EActionBindResetType                           = 3

};


// Enum  ShooterGame.EActionBindPendingMode
enum class EActionBindPendingMode : uint8_t
{
    Applied                                        = 0,
    Pending                                        = 1,
    EActionBindPendingMode                         = 2

};


// Enum  ShooterGame.EActionBindSetAxisDirection
enum class EActionBindSetAxisDirection : uint8_t
{
    NoDirection                                    = 0,
    Positive                                       = 1,
    Negative                                       = 2,
    Count                                          = 3,
    EActionBindSetAxisDirection                    = 4

};


// Enum  ShooterGame.EActionChordKeyType
enum class EActionChordKeyType : uint8_t
{
    KeyboardMouse                                  = 0,
    Gamepad                                        = 1,
    Count                                          = 2,
    EActionChordKeyType                            = 3

};


// Enum  ShooterGame.EActionBindRestrictions
enum class EActionBindRestrictions : uint8_t
{
    Free                                           = 0,
    Locked                                         = 1,
    Restricted                                     = 2,
    Count                                          = 3,
    EActionBindRestrictions                        = 4

};


// Enum  ShooterGame.EActionSettingsContext
enum class EActionSettingsContext : uint8_t
{
    None                                           = 0,
    InGame                                         = 1,
    Menus                                          = 2,
    Shop                                           = 3,
    Minimap                                        = 4,
    Spectator                                      = 5,
    Observer                                       = 6,
    CommMenu                                       = 7,
    AlternateMovement                              = 8,
    AlternateInGame                                = 9,
    Count                                          = 10,
    EActionSettingsContext                         = 11

};


// Enum  ShooterGame.EAIAimTargetType
enum class EAIAimTargetType : uint8_t
{
    Invalid                                        = 0,
    MovementDirection                              = 1,
    DefenseWatchLocation                           = 2,
    OutOfCombatPreaim                              = 3,
    PreaimCombatTarget                             = 4,
    CombatTarget                                   = 5,
    Override                                       = 6,
    ShootablePathBlocker                           = 7,
    Count                                          = 8,
    EAIAimTargetType                               = 9

};


// Enum  ShooterGame.EAnimationConductorNodePropagationMode
enum class EAnimationConductorNodePropagationMode : uint8_t
{
    SingleNode                                     = 0,
    Recursive                                      = 1,
    EAnimationConductorNodePropagationMode         = 2

};


// Enum  ShooterGame.EAnimArrayDirtyFlags
enum class EAnimArrayDirtyFlags : uint8_t
{
    None                                           = 0,
    FirstPerson                                    = 1,
    ThirdPerson                                    = 2,
    HitReaction                                    = 4,
    EAnimArrayDirtyFlags                           = 5

};


// Enum  ShooterGame.EAresShooterAnimMovementState
enum class EAresShooterAnimMovementState : uint8_t
{
    Idle                                           = 0,
    Walk                                           = 1,
    Run                                            = 2,
    CrouchIdle                                     = 3,
    CrouchWalk                                     = 4,
    Jump                                           = 5,
    Dead                                           = 6,
    EAresShooterAnimMovementState                  = 7

};


// Enum  ShooterGame.EAresShooterAnimMovementDirection
enum class EAresShooterAnimMovementDirection : uint8_t
{
    None                                           = 0,
    North                                          = 1,
    East                                           = 2,
    South                                          = 3,
    West                                           = 4,
    NorthEast                                      = 5,
    SouthEast                                      = 6,
    SouthWest                                      = 7,
    NorthWest                                      = 8,
    EAresShooterAnimMovementDirection              = 9

};


// Enum  ShooterGame.EAnimMovementStateMachineState
enum class EAnimMovementStateMachineState : uint8_t
{
    Idle                                           = 0,
    Walk                                           = 1,
    Run                                            = 2,
    Crouch                                         = 3,
    CrouchIdle                                     = 4,
    CrouchWalk                                     = 5,
    StandUp                                        = 6,
    Jump                                           = 7,
    JumpLand                                       = 8,
    MovementConduit                                = 9,
    Count                                          = 10,
    EAnimMovementStateMachineState                 = 11

};


// Enum  ShooterGame.EPolicyType
enum class EPolicyType : uint8_t
{
    None                                           = 0,
    Shutdown                                       = 1,
    PlayTime                                       = 2,
    WarningMessage                                 = 3,
    MatchmakingDisable                             = 4,
    HopeWarning                                    = 5,
    HopeShutdown                                   = 6,
    HopeHeartbeat                                  = 7,
    Invalid                                        = 8,
    EPolicyType                                    = 9

};


// Enum  ShooterGame.EDisplayType
enum class EDisplayType : uint8_t
{
    None                                           = 0,
    PassiveDisplay                                 = 1,
    ModalDialog                                    = 2,
    Invalid                                        = 3,
    EDisplayType                                   = 4

};


// Enum  ShooterGame.EApplyBuffTarget
enum class EApplyBuffTarget : uint8_t
{
    Self                                           = 0,
    OtherActor                                     = 1,
    EApplyBuffTarget                               = 2

};


// Enum  ShooterGame.EActionButtonActivationMode
enum class EActionButtonActivationMode : uint8_t
{
    ActivateOnEngage                               = 0,
    ActivateOnDisengage                            = 1,
    ActiveWhileEngaged                             = 2,
    CustomDefinedActivation                        = 3,
    DoNotActivate                                  = 4,
    EActionButtonActivationMode                    = 5

};


// Enum  ShooterGame.EActionButtonStateTransitionMethod
enum class EActionButtonStateTransitionMethod : uint8_t
{
    TransitionOnPressAndRelease                    = 0,
    TransitionOnPressOnly                          = 1,
    TransitionOnReleaseOnly                        = 2,
    DoNotTransition                                = 3,
    EActionButtonStateTransitionMethod             = 4

};


// Enum  ShooterGame.EAnalogPlayerState
enum class EAnalogPlayerState : uint8_t
{
    Default                                        = 0,
    FocusMode                                      = 1,
    ADS                                            = 2,
    Scoped                                         = 3,
    Count                                          = 4,
    EAnalogPlayerState                             = 5

};


// Enum  ShooterGame.EAresImpactEffectAllies
enum class EAresImpactEffectAllies : uint8_t
{
    AllyHit                                        = 0,
    EnemyHit                                       = 1,
    NUM                                            = 2,
    EAresImpactEffectAllies                        = 3

};


// Enum  ShooterGame.EAresImpactEffectWithArmor
enum class EAresImpactEffectWithArmor : uint8_t
{
    WithoutArmor                                   = 0,
    WithArmor                                      = 1,
    WithShield                                     = 2,
    NUM                                            = 3,
    EAresImpactEffectWithArmor                     = 4

};


// Enum  ShooterGame.EAIAimPlayerCharacterOffset
enum class EAIAimPlayerCharacterOffset : uint8_t
{
    Body                                           = 0,
    Head                                           = 1,
    Leg                                            = 2,
    Count                                          = 3,
    EAIAimPlayerCharacterOffset                    = 4

};


// Enum  ShooterGame.ECalloutSuperRegion
enum class ECalloutSuperRegion : uint8_t
{
    Unspecified                                    = 0,
    AttackerSide                                   = 1,
    DefenderSide                                   = 2,
    Mid                                            = 3,
    A                                              = 4,
    B                                              = 5,
    C                                              = 6,
    ECalloutSuperRegion                            = 7,
    ECalloutSuperRegion                            = 8

};


// Enum  ShooterGame.EAresCeremonyTriggerType
enum class EAresCeremonyTriggerType : uint8_t
{
    Kill                                           = 0,
    Respawn                                        = 1,
    Invalid                                        = 2,
    EAresCeremonyTriggerType                       = 3

};


// Enum  ShooterGame.ECharacterAbilitySlot
enum class ECharacterAbilitySlot : uint8_t
{
    Passive                                        = 0,
    Ability1                                       = 1,
    Ability2                                       = 2,
    Grenade                                        = 3,
    Ultimate                                       = 4,
    Backpack                                       = 5,
    Invalid                                        = 6,
    Count                                          = 6,
    ECharacterAbilitySlot                          = 7

};


// Enum  ShooterGame.EOnlineMode
enum class EOnlineMode : uint8_t
{
    Offline                                        = 0,
    LAN                                            = 1,
    Online                                         = 2,
    EOnlineMode                                    = 3

};


// Enum  ShooterGame.EAresButtonTransitionType
enum class EAresButtonTransitionType : uint8_t
{
    None                                           = 0,
    Hovered                                        = 1,
    Unhovered                                      = 2,
    Pressed                                        = 3,
    Released                                       = 4,
    Selected                                       = 5,
    Deselected                                     = 6,
    Enabled                                        = 7,
    Disabled                                       = 8,
    Max                                            = 9,
    EAresButtonTransitionType                      = 10

};


// Enum  ShooterGame.ETileDisplayMode
enum class ETileDisplayMode : uint8_t
{
    Normal                                         = 0,
    NoScrollBar                                    = 1,
    Restricted                                     = 2,
    ETileDisplayMode                               = 3

};


// Enum  ShooterGame.AresDamageEventClassIDs
enum class AresDamageEventClassIDs : uint8_t
{
    AresDamageEventClassID                         = 128,
    AresDamageEventClassID                         = 129

};


// Enum  ShooterGame.EAresDoorTransition
enum class EAresDoorTransition : uint8_t
{
    MoveTo                                         = 0,
    PopTo                                          = 1,
    EAresDoorTransition                            = 2

};


// Enum  ShooterGame.EAresInitialDoorState
enum class EAresInitialDoorState : uint8_t
{
    Open                                           = 0,
    Closed                                         = 1,
    EAresInitialDoorState                          = 2

};


// Enum  ShooterGame.EAresDoorState
enum class EAresDoorState : uint8_t
{
    Open                                           = 0,
    Opening                                        = 1,
    Closing                                        = 2,
    Closed                                         = 3,
    Invalid                                        = 4,
    EAresDoorState                                 = 5

};


// Enum  ShooterGame.EEjectableType
enum class EEjectableType : uint8_t
{
    Unknown                                        = 0,
    ShellCasing                                    = 1,
    Magazine                                       = 2,
    EEjectableType                                 = 3

};


// Enum  ShooterGame.EEquippableTickState
enum class EEquippableTickState : uint8_t
{
    TickFromActorTickGraph                         = 0,
    TickFromInventory                              = 1,
    Disabled                                       = 2,
    Count                                          = 3,
    EEquippableTickState                           = 4

};


// Enum  ShooterGame.EAresDropOnDeath
enum class EAresDropOnDeath : uint8_t
{
    Never                                          = 0,
    IfNoPrimary                                    = 1,
    Always                                         = 2,
    Count                                          = 3,
    Invalid                                        = 254,
    EAresDropOnDeath                               = 255

};


// Enum  ShooterGame.EAresEquippableCanUseResult
enum class EAresEquippableCanUseResult : uint8_t
{
    CanUse                                         = 0,
    CantUse                                        = 1,
    NotEnoughCharges                               = 2,
    Count                                          = 3,
    EAresEquippableCanUseResult                    = 4

};


// Enum  ShooterGame.EZoomOutShowOption
enum class EZoomOutShowOption : uint8_t
{
    OnUnZoomStarted                                = 0,
    WhenFullyZoomedOut                             = 1,
    Count                                          = 2,
    EZoomOutShowOption                             = 3

};


// Enum  ShooterGame.EZoomInHideOption
enum class EZoomInHideOption : uint8_t
{
    LeaveVisible                                   = 0,
    OnZoomInStarted                                = 1,
    WhenFullyZoomedIn                              = 2,
    Count                                          = 3,
    EZoomInHideOption                              = 4

};


// Enum  ShooterGame.EFirstPersonHideOption
enum class EFirstPersonHideOption : uint8_t
{
    None                                           = 0,
    ForceVisible                                   = 1,
    ForceInvisible                                 = 2,
    Count                                          = 3,
    EFirstPersonHideOption                         = 4

};


// Enum  ShooterGame.EEquippableSuppressionBehavior
enum class EEquippableSuppressionBehavior : uint8_t
{
    Suppressible                                   = 0,
    NonSuppressible                                = 1,
    Count                                          = 2,
    EEquippableSuppressionBehavior                 = 3

};


// Enum  ShooterGame.EEquippableEquipBehavior
enum class EEquippableEquipBehavior : uint8_t
{
    RequireResources                               = 0,
    AlwaysEquip                                    = 1,
    NeverEquip                                     = 2,
    Count                                          = 3,
    EEquippableEquipBehavior                       = 4

};


// Enum  ShooterGame.EAutoEquipPriority
enum class EAutoEquipPriority : uint8_t
{
    NeverAutoEquip                                 = 0,
    Melee                                          = 1,
    Secondary                                      = 2,
    Primary                                        = 3,
    EAutoEquipPriority                             = 4

};


// Enum  ShooterGame.EAresActivationInputType
enum class EAresActivationInputType : uint8_t
{
    StandardInput                                  = 0,
    AlternateInput                                 = 1,
    AlternateInput2                                = 2,
    AlternateInput3                                = 3,
    AlternateInput4                                = 4,
    ActivationInputType                            = 5,
    EAresActivationInputType                       = 6

};


// Enum  ShooterGame.EAresEquippableSlotViewType
enum class EAresEquippableSlotViewType : uint8_t
{
    Show                                           = 0,
    HideIfEmpty                                    = 1,
    Hide                                           = 2,
    EAresEquippableSlotViewType                    = 3

};


// Enum  ShooterGame.EAresGameEventLogSampleState
enum class EAresGameEventLogSampleState : uint8_t
{
    SamplingDisabled                               = 0,
    SamplingEnabled                                = 1,
    EAresGameEventLogSampleState                   = 2

};


// Enum  ShooterGame.ETeleporterEventType
enum class ETeleporterEventType : uint8_t
{
    Player                                         = 0,
    Item                                           = 1,
    Count                                          = 2,
    ETeleporterEventType                           = 3

};


// Enum  ShooterGame.EMVPCriteria
enum class EMVPCriteria : uint8_t
{
    Score                                          = 0,
    Kills                                          = 1,
    EMVPCriteria                                   = 2

};


// Enum  ShooterGame.EEconomyTypes
enum class EEconomyTypes : uint8_t
{
    Standard                                       = 0,
    SwiftPips                                      = 1,
    Other                                          = 2,
    EEconomyTypes                                  = 3

};


// Enum  ShooterGame.EBuffEffectContext
enum class EBuffEffectContext : uint8_t
{
    Instigator                                     = 0,
    Causer                                         = 1,
    BuffEffectContext                              = 2,
    EBuffEffectContext                             = 3

};


// Enum  ShooterGame.EAresHitConfirmLocality
enum class EAresHitConfirmLocality : uint8_t
{
    HitConfirm                                     = 0,
    HitConfirm                                     = 1,
    HitConfirm                                     = 2,
    HitConfirm                                     = 3,
    HitConfirm                                     = 4

};


// Enum  ShooterGame.EDirectionFilter
enum class EDirectionFilter : uint8_t
{
    FrontBack                                      = 0,
    FourWay                                        = 1,
    EDirectionFilter                               = 255

};


// Enum  ShooterGame.EAresHudTextExtentsMode
enum class EAresHudTextExtentsMode : uint8_t
{
    UseMaxHeight                                   = 0,
    UseBaseline                                    = 1,
    Count                                          = 2,
    EAresHudTextExtentsMode                        = 3

};


// Enum  ShooterGame.EAresHudAnchorPoint
enum class EAresHudAnchorPoint : uint8_t
{
    TopLeft                                        = 0,
    Top                                            = 1,
    TopRight                                       = 2,
    CenterLeft                                     = 3,
    Center                                         = 4,
    CenterRight                                    = 5,
    BottomLeft                                     = 6,
    Bottom                                         = 7,
    BottomRight                                    = 8,
    EAresHudAnchorPoint                            = 9

};


// Enum  ShooterGame.ELocalPlayerAffinity
enum class ELocalPlayerAffinity : uint8_t
{
    Self                                           = 0,
    Ally                                           = 1,
    Enemy                                          = 2,
    Neutral                                        = 3,
    Count                                          = 4,
    ELocalPlayerAffinity                           = 5

};


// Enum  ShooterGame.EAresDrawOrigin
enum class EAresDrawOrigin : uint8_t
{
    UpperLeft                                      = 0,
    Center                                         = 1,
    Top                                            = 2,
    UpperRight                                     = 3,
    CenterLeft                                     = 4,
    CenterRight                                    = 5,
    BottomLeft                                     = 6,
    Bottom                                         = 7,
    BottomRight                                    = 8,
    Count                                          = 9,
    EAresDrawOrigin                                = 10

};


// Enum  ShooterGame.EAresHudElementBlendLogic
enum class EAresHudElementBlendLogic : uint8_t
{
    Automatic                                      = 0,
    Opaque                                         = 1,
    Count                                          = 2,
    EAresHudElementBlendLogic                      = 3

};


// Enum  ShooterGame.EAresIconButtonOverrides
enum class EAresIconButtonOverrides : uint8_t
{
    IconTexture                                    = 0,
    IconColor                                      = 1,
    IconScale                                      = 2,
    ButtonColor                                    = 3,
    ButtonSize                                     = 4,
    ButtonText                                     = 5,
    MAX                                            = 6

};


// Enum  ShooterGame.EAresIconButtonState
enum class EAresIconButtonState : uint8_t
{
    Disengaged                                     = 0,
    Engaged                                        = 1,
    EAresIconButtonState                           = 2

};


// Enum  ShooterGame.EAresIconButtonSize
enum class EAresIconButtonSize : uint8_t
{
    Small                                          = 0,
    Medium                                         = 1,
    Large                                          = 2,
    Custom                                         = 3,
    EAresIconButtonSize                            = 4

};


// Enum  ShooterGame.EImpactEffectAudioCreationState
enum class EImpactEffectAudioCreationState : uint8_t
{
    ShouldNotCreate                                = 0,
    ShouldCreate                                   = 1,
    Creating                                       = 2,
    Done                                           = 3,
    EImpactEffectAudioCreationState                = 4

};


// Enum  ShooterGame.EAresImpactOrder
enum class EAresImpactOrder : uint8_t
{
    FirstImpact                                    = 0,
    FirstTerminating                               = 1,
    WallEntryImpact                                = 2,
    WallEntryTerminatingImpact                     = 3,
    WallExitImpact                                 = 4,
    ImpactOrder                                    = 5,
    EAresImpactOrder                               = 6

};


// Enum  ShooterGame.EAresInputEventDebugStatus
enum class EAresInputEventDebugStatus : uint8_t
{
    Uninitialized                                  = 0,
    ClientDropped                                  = 1,
    ClientSent                                     = 2,
    ClientDisagreement                             = 3,
    ServerReceived                                 = 4,
    ServerPending                                  = 5,
    ServerProcessed                                = 6,
    ServerDisagreement                             = 7,
    Count                                          = 8,
    EAresInputEventDebugStatus                     = 9

};


// Enum  ShooterGame.EAresMoveInput
enum class EAresMoveInput : uint8_t
{
    AlternateMovement                              = 0,
    Crouch                                         = 1,
    Count                                          = 2,
    Invalid                                        = 254,
    EAresMoveInput                                 = 255

};


// Enum  ShooterGame.EInputEventType
enum class EInputEventType : uint8_t
{
    EquippableInput                                = 0,
    ActivationInput                                = 1,
    UnequipCurrentEquippable                       = 2,
    MovementInput                                  = 3,
    EquippableChange                               = 4,
    AimVector                                      = 5,
    CorrectionIndex                                = 6,
    FrameBoundary                                  = 7,
    EquippableDrop                                 = 8,
    CorrectionBaseline                             = 9,
    UseInteractableObject                          = 10,
    AimToolingTargetChange                         = 11,
    AimToolingAimPastTarget                        = 12,
    Count                                          = 13,
    Invalid                                        = 254,
    EInputEventType                                = 255

};


// Enum  ShooterGame.EStorageClashBehavior
enum class EStorageClashBehavior : uint8_t
{
    None                                           = 0,
    DestroyStored                                  = 1,
    DestroyEquipped                                = 2,
    Count                                          = 3,
    EStorageClashBehavior                          = 4

};


// Enum  ShooterGame.EItemWrap
enum class EItemWrap : uint8_t
{
    Wrap                                           = 0,
    DoNotWrap                                      = 1,
    EItemWrap                                      = 2

};


// Enum  ShooterGame.EServerCorrectionState
enum class EServerCorrectionState : uint8_t
{
    Agreement                                      = 0,
    MonitorDisagreement                            = 1,
    PendingEquippableReplication                   = 2,
    CorrectionIssued                               = 3,
    Count                                          = 4,
    EServerCorrectionState                         = 5

};


// Enum  ShooterGame.EInventoryInputStreamResponse
enum class EInventoryInputStreamResponse : uint8_t
{
    Process                                        = 0,
    Skip                                           = 1,
    EInventoryInputStreamResponse                  = 2

};


// Enum  ShooterGame.EEquippableInInventory
enum class EEquippableInInventory : uint8_t
{
    No                                             = 0,
    Yes                                            = 1,
    EEquippableInInventory                         = 2

};


// Enum  ShooterGame.EAresItemSlot
enum class EAresItemSlot : uint8_t
{
    Primary                                        = 0,
    Secondary                                      = 1,
    Melee                                          = 2,
    GrenadeAbility                                 = 3,
    Ability1                                       = 4,
    Ability2                                       = 5,
    Passive                                        = 6,
    Level                                          = 7,
    Invisible                                      = 8,
    Ultimate                                       = 9,
    Unarmed                                        = 10,
    Armor                                          = 11,
    Backpack                                       = 12,
    Totem                                          = 13,
    PrimaryStorage                                 = 14,
    SecondaryStorage                               = 15,
    Count                                          = 16,
    Any                                            = 253,
    Invalid                                        = 254,
    EAresItemSlot                                  = 255

};


// Enum  ShooterGame.EListenerTrackerHeightOverride
enum class EListenerTrackerHeightOverride : uint8_t
{
    Aud                                            = 0,
    Aud                                            = 1,
    Aud                                            = 2,
    Aud                                            = 3

};


// Enum  ShooterGame.EListenerTrackerType
enum class EListenerTrackerType : uint8_t
{
    Aud                                            = 0,
    Aud                                            = 1,
    Aud                                            = 2,
    Aud                                            = 3

};


// Enum  ShooterGame.EAresDateTimeStyle
enum class EAresDateTimeStyle : uint8_t
{
    Default                                        = 0,
    Short                                          = 1,
    Medium                                         = 2,
    Long                                           = 3,
    Full                                           = 4,
    EAresDateTimeStyle                             = 5

};


// Enum  ShooterGame.DeltaBarToAnimate
enum class DeltaBarToAnimate : uint8_t
{
    Delta                                          = 0,
    Delta                                          = 1,
    Delta                                          = 2,
    Delta                                          = 3,
    Delta                                          = 4,
    Delta                                          = 5

};


// Enum  ShooterGame.EAresMinimapRotationSource
enum class EAresMinimapRotationSource : uint8_t
{
    AMRSRC                                         = 0,
    AMRSRC                                         = 1,
    AMRSRC                                         = 2,
    AMRSRC                                         = 3,
    AMRSRC                                         = 4,
    AMRSRC                                         = 5,
    AMRSRC                                         = 6

};


// Enum  ShooterGame.EAresMinimapPositionSource
enum class EAresMinimapPositionSource : uint8_t
{
    AMPSRC                                         = 0,
    AMPSRC                                         = 1,
    AMPSRC                                         = 2,
    AMPSRC                                         = 3,
    AMPSRC                                         = 4,
    AMPSRC                                         = 5,
    AMPSRC                                         = 6,
    AMPSRC                                         = 7

};


// Enum  ShooterGame.EAresMapIdentifier
enum class EAresMapIdentifier : uint8_t
{
    Minimap                                        = 0,
    Megamap                                        = 1,
    AbilityMapTargeting                            = 2,
    Count                                          = 3,
    EAresMapIdentifier                             = 4

};


// Enum  ShooterGame.EAresMissionTag
enum class EAresMissionTag : uint8_t
{
    Combat                                         = 0,
    Econ                                           = 1,
    Invalid                                        = 2,
    Count                                          = 3,
    EAresMissionTag                                = 4

};


// Enum  ShooterGame.EAresMissionType
enum class EAresMissionType : uint8_t
{
    None                                           = 0,
    Daily                                          = 1,
    Weekly                                         = 2,
    NPE                                            = 3,
    BTE                                            = 4,
    Tutorial                                       = 5,
    Accord                                         = 6,
    Invalid                                        = 7,
    Count                                          = 8,
    EAresMissionType                               = 9

};


// Enum  ShooterGame.EAresNetworkErrorType
enum class EAresNetworkErrorType : uint8_t
{
    MovementQueueOverflow                          = 0,
    InputQueueOverflow                             = 1,
    Count                                          = 2,
    EAresNetworkErrorType                          = 3

};


// Enum  ShooterGame.EAresPersistBehavior
enum class EAresPersistBehavior : uint8_t
{
    Destroy                                        = 0,
    Ignore                                         = 1,
    EAresPersistBehavior                           = 2

};


// Enum  ShooterGame.EAresPlatformWidgetFamily
enum class EAresPlatformWidgetFamily : uint8_t
{
    INVALID                                        = 0,
    LevelTransitionScreens                         = 1,
    EndOfGame                                      = 2,
    MainMenuGlobalElements                         = 3,
    NPEHUDElements                                 = 4,
    Premier                                        = 5,
    DailyRewards                                   = 6,
    Store                                          = 7,
    Social                                         = 8,
    EsportsHub                                     = 9,
    Janus                                          = 10,
    COUNT                                          = 11,
    EAresPlatformWidgetFamily                      = 12

};


// Enum  ShooterGame.EAresPlatformFilter
enum class EAresPlatformFilter : uint8_t
{
    Exact                                          = 0,
    PreferExact                                    = 1,
    Count                                          = 2,
    EAresPlatformFilter                            = 3

};


// Enum  ShooterGame.EAresNetworkConnectionQuality
enum class EAresNetworkConnectionQuality : uint8_t
{
    Unknown                                        = 0,
    Poor                                           = 1,
    Good                                           = 2,
    Excellent                                      = 3,
    EAresNetworkConnectionQuality                  = 4

};


// Enum  ShooterGame.EAresNetworkConnectionType
enum class EAresNetworkConnectionType : uint8_t
{
    Unknown                                        = 0,
    WiFi                                           = 1,
    Cell                                           = 2,
    None                                           = 3,
    EAresNetworkConnectionType                     = 4

};


// Enum  ShooterGame.EAresDeviceQuality
enum class EAresDeviceQuality : uint8_t
{
    Unknown                                        = 0,
    Low                                            = 1,
    Med                                            = 2,
    High                                           = 3,
    Ultra                                          = 4,
    PC                                             = 5,
    Count                                          = 6,
    EAresDeviceQuality                             = 7

};


// Enum  ShooterGame.EAresIdentitySource
enum class EAresIdentitySource : uint8_t
{
    Default                                        = 0,
    Alternative1                                   = 1,
    Alternative2                                   = 2,
    EAresIdentitySource                            = 3

};


// Enum  ShooterGame.EAresPlatformType
enum class EAresPlatformType : uint8_t
{
    EAresPlatformType                              = 0,
    EAresPlatformType                              = 1,
    EAresPlatformType                              = 2,
    EAresPlatformType                              = 3,
    EAresPlatformType                              = 4

};


// Enum  ShooterGame.EAresPlatformType
enum class EAresPlatformType : uint8_t
{
    None                                           = 0,
    Desktop                                        = 1,
    Mobile                                         = 2,
    Console                                        = 4,
    All                                            = 7,
    EAresPlatformType                              = 8

};


// Enum  ShooterGame.EAresAutomationMovement
enum class EAresAutomationMovement : uint8_t
{
    Forward                                        = 0,
    Back                                           = 1,
    Left                                           = 2,
    Right                                          = 3,
    Jump                                           = 4,
    Crouch                                         = 5,
    Walk                                           = 6,
    Count                                          = 7,
    EAresAutomationMovement                        = 8

};


// Enum  ShooterGame.EGamepadForceDesiredAngleMode
enum class EGamepadForceDesiredAngleMode : uint8_t
{
    Off                                            = 0,
    OneToOne                                       = 1,
    CustomCurve                                    = 2,
    EGamepadForceDesiredAngleMode                  = 3

};


// Enum  ShooterGame.EAresClientDemoState
enum class EAresClientDemoState : uint8_t
{
    Inactive                                       = 0,
    Recording                                      = 1,
    Playback                                       = 2,
    EAresClientDemoState                           = 3

};


// Enum  ShooterGame.EAresClientDemoPlaybackState
enum class EAresClientDemoPlaybackState : uint8_t
{
    Inactive                                       = 0,
    Playback                                       = 1,
    InactiveInvalidData                            = 2,
    EAresClientDemoPlaybackState                   = 3

};


// Enum  ShooterGame.EAresPurchasableType
enum class EAresPurchasableType : uint8_t
{
    Equippable                                     = 0,
    Ammo                                           = 1,
    Upgrade                                        = 2,
    Count                                          = 3,
    EAresPurchasableType                           = 4

};


// Enum  ShooterGame.EAresCostType
enum class EAresCostType : uint8_t
{
    Cost                                           = 0,
    Cost                                           = 1,
    Cost                                           = 2,
    Cost                                           = 3

};


// Enum  ShooterGame.EAresPurchasableReplaceType
enum class EAresPurchasableReplaceType : uint8_t
{
    Sell                                           = 0,
    Drop                                           = 1,
    Destroy                                        = 2,
    CannotReplace                                  = 3,
    Count                                          = 4,
    EAresPurchasableReplaceType                    = 5

};


// Enum  ShooterGame.ERadialMenuContextIndicator
enum class ERadialMenuContextIndicator : uint8_t
{
    Default                                        = 0,
    Contextual                                     = 1,
    ERadialMenuContextIndicator                    = 2

};


// Enum  ShooterGame.RadialMenuSlotDisplayType
enum class RadialMenuSlotDisplayType : uint8_t
{
    None                                           = 0,
    Icon                                           = 1,
    Text                                           = 2,
    RadialMenuSlotDisplayType                      = 3

};


// Enum  ShooterGame.EAresPlatformRequirements
enum class EAresPlatformRequirements : uint8_t
{
    None                                           = 0,
    Mouse                                          = 1,
    Keyboard                                       = 2,
    Touch                                          = 4,
    Controller                                     = 8,
    Gyro                                           = 16,
    EAresPlatformRequirements                      = 17

};


// Enum  ShooterGame.EAresAntiAliasing
enum class EAresAntiAliasing : uint8_t
{
    None                                           = 0,
    MSAA2x                                         = 1,
    MSAA4x                                         = 2,
    MSAA8x                                         = 3,
    FXAA                                           = 4,
    Count                                          = 5,
    EAresAntiAliasing                              = 6

};


// Enum  ShooterGame.EAresVoidSettingName
enum class EAresVoidSettingName : uint8_t
{
    KeyboardKeyBind                                = 0,
    TextChatFiltered                               = 1,
    Incognito                                      = 2,
    CrosshairColor                                 = 3,
    VideoDisplayMode                               = 4,
    VideoResolution                                = 5,
    MonitorSelection                               = 6,
    Letterbox                                      = 7,
    Vsync                                          = 8,
    AntiAliasing                                   = 9,
    EAresVoidSettingName                           = 10

};


// Enum  ShooterGame.ESettingStorageType
enum class ESettingStorageType : uint8_t
{
    Local                                          = 0,
    Roaming                                        = 1,
    External                                       = 2,
    ESettingStorageType                            = 3

};


// Enum  ShooterGame.ESocialPartyCategory
enum class ESocialPartyCategory : uint8_t
{
    Invalid                                        = 0,
    OnlineConsole                                  = 1,
    OnlinePC                                       = 2,
    LocalParty                                     = 3,
    ESocialPartyCategory                           = 4

};


// Enum  ShooterGame.EAresSocialCrossplayMessage
enum class EAresSocialCrossplayMessage : uint8_t
{
    Compatible                                     = 0,
    ObservedPlayerCrossplayDisabledAndConflictsWithLocalPlayer = 1,
    ObservedPlayerCrossplayDisabledAndConflictsWithLocalParty = 2,
    ObservedPartyCrossplayDisabledAndConflictsWithLocalPlayer = 3,
    LocalPlayerCrossplayDisabledAndConflictsWithObservedPlayer = 4,
    LocalPlayerCrossplayDisabledAndConflictsWithObservedParty = 5,
    LocalPartyCrossplayDisabledAndConflictsWithObservedPlayer = 6,
    LocalPlayerAndObservedPlayerCrossplayDisabledAndConflicting = 7,
    LocalPartyAndObservedPartyCrossplayDisabledAndConflicting = 8,
    EAresSocialCrossplayMessage                    = 9

};


// Enum  ShooterGame.EAresSocialCrossplayState
enum class EAresSocialCrossplayState : uint8_t
{
    Compatible                                     = 0,
    CrossplayDisabledPlayer                        = 1,
    CrossplayDisabledParty                         = 2,
    EAresSocialCrossplayState                      = 3

};


// Enum  ShooterGame.EAresSocialPartyAccessibility
enum class EAresSocialPartyAccessibility : uint8_t
{
    OpenParty                                      = 0,
    ClosedParty                                    = 1,
    Error                                          = 2,
    EAresSocialPartyAccessibility                  = 3

};


// Enum  ShooterGame.ESocialCategory
enum class ESocialCategory : uint8_t
{
    Invalid                                        = 0,
    Online                                         = 1,
    OtherGame                                      = 2,
    Offline                                        = 3,
    PartyCompatible                                = 4,
    PartyIncompatible                              = 5,
    Invited                                        = 6,
    Blocked                                        = 7,
    LocalPartyMember                               = 8,
    ActivePlatformOnline                           = 9,
    ActivePlatformOnlineNoProduct                  = 10,
    ActivePlatformOtherGame                        = 11,
    ActivePlatformOffline                          = 12,
    ESocialCategory                                = 13

};


// Enum  ShooterGame.EAddToStringSettingListResult
enum class EAddToStringSettingListResult : uint8_t
{
    Success                                        = 0,
    NoMatchingFunction                             = 1,
    StringExceedsMaxCharLimit                      = 2,
    ListExceedsMaxSizeLimit                        = 3,
    StringAlreadyExists                            = 4,
    InvalidString                                  = 5,
    EAddToStringSettingListResult                  = 6

};


// Enum  ShooterGame.EAresAutomationEventType
enum class EAresAutomationEventType : uint8_t
{
    GameFlowStateChanged                           = 0,
    JoinedMatch                                    = 1,
    LeftMatch                                      = 2,
    Count                                          = 3,
    EAresAutomationEventType                       = 4

};


// Enum  ShooterGame.EAresTestAutomationStatus
enum class EAresTestAutomationStatus : uint8_t
{
    Uninitialized                                  = 0,
    Loaded                                         = 1,
    Running                                        = 2,
    Failed                                         = 3,
    Passed                                         = 4,
    Aborted                                        = 5,
    Count                                          = 6,
    EAresTestAutomationStatus                      = 7

};


// Enum  ShooterGame.EAresTouchBoundsShape
enum class EAresTouchBoundsShape : uint8_t
{
    Rectangle                                      = 0,
    Circle                                         = 1,
    Triangle                                       = 2,
    EAresTouchBoundsShape                          = 3

};


// Enum  ShooterGame.EJoystickStyle
enum class EJoystickStyle : uint8_t
{
    FloatingFollowing                              = 0,
    Floating                                       = 1,
    FixedFollowing                                 = 2,
    Fixed                                          = 3,
    Absolute                                       = 4,
    EJoystickStyle                                 = 5

};


// Enum  ShooterGame.FAresTouchWidgetInputChannel
enum class FAresTouchWidgetInputChannel : uint8_t
{
    None                                           = 0,
    Edit                                           = 1,
    Movement                                       = 2,
    Aiming                                         = 4,
    Wheel                                          = 8,
    TestMode                                       = 16,
    FAresTouchWidgetInputChannel                   = 17

};


// Enum  ShooterGame.EAresTouchDoubleTapMode
enum class EAresTouchDoubleTapMode : uint8_t
{
    None                                           = 0,
    ADS                                            = 1,
    Scope                                          = 2,
    ScopeAndADS                                    = 3,
    Ping                                           = 4,
    Crouch                                         = 5,
    Jump                                           = 6,
    SprintToggle                                   = 7,
    WalkToggle                                     = 8,
    WeaponSwap                                     = 9,
    Cancel                                         = 10,
    Use                                            = 11,
    PrimaryFire                                    = 12,
    AltFire                                        = 13,
    SecondaryFire                                  = 14,
    Reload                                         = 15,
    GrenadeAbility                                 = 16,
    AbilityOne                                     = 17,
    AbilityTwo                                     = 18,
    UltimateAbility                                = 19,
    EAresTouchDoubleTapMode                        = 20

};


// Enum  ShooterGame.EAresTouchWidgetMode
enum class EAresTouchWidgetMode : uint8_t
{
    Interaction                                    = 0,
    Edit                                           = 1,
    Hidden                                         = 2,
    Visible                                        = 3,
    EAresTouchWidgetMode                           = 4

};


// Enum  ShooterGame.EAresTouchTrackingMode
enum class EAresTouchTrackingMode : uint8_t
{
    Local                                          = 0,
    Global                                         = 1,
    LocalExclusive                                 = 2,
    EAresTouchTrackingMode                         = 3

};


// Enum  ShooterGame.EAresTouchWidgetDisabledInputMode
enum class EAresTouchWidgetDisabledInputMode : uint8_t
{
    Passthrough                                    = 0,
    Blocking                                       = 1,
    EAresTouchWidgetDisabledInputMode              = 2

};


// Enum  ShooterGame.EWidgetEnabledState
enum class EWidgetEnabledState : uint8_t
{
    Enabled                                        = 0,
    Disabled                                       = 1,
    EWidgetEnabledState                            = 2

};


// Enum  ShooterGame.FAresTouchWidgetSwipeOptions
enum class FAresTouchWidgetSwipeOptions : uint8_t
{
    AllowSwipesOnTouchRelease                      = 1,
    AllowSwipesOnTouchMove                         = 2,
    AllowMultipleSwipesInSinglePress               = 4,
    FAresTouchWidgetSwipeOptions                   = 5

};


// Enum  ShooterGame.EWidgetCallToActionState
enum class EWidgetCallToActionState : uint8_t
{
    Active                                         = 0,
    Inactive                                       = 1,
    Pulse                                          = 2,
    EWidgetCallToActionState                       = 3

};


// Enum  ShooterGame.ETrailDrawRule
enum class ETrailDrawRule : uint8_t
{
    NeverDraw                                      = 0,
    DrawForFriendlies                              = 1,
    DrawForEnemies                                 = 2,
    AlwaysDraw                                     = 3,
    ETrailDrawRule                                 = 4

};


// Enum  ShooterGame.EUIFocus
enum class EUIFocus : uint8_t
{
    GiveToGame                                     = 0,
    AllowUI                                        = 1,
    EUIFocus                                       = 2

};


// Enum  ShooterGame.EUIMouseMode
enum class EUIMouseMode : uint8_t
{
    Game                                           = 0,
    InWorldUI                                      = 1,
    UI                                             = 2,
    OverriddenMouseUI                              = 3,
    EUIMouseMode                                   = 4

};


// Enum  ShooterGame.EHandleUserBackActionOption
enum class EHandleUserBackActionOption : uint8_t
{
    Enable                                         = 0,
    Inherit                                        = 1,
    Disable                                        = 2,
    EHandleUserBackActionOption                    = 3

};


// Enum  ShooterGame.EMenuShellGameLoop
enum class EMenuShellGameLoop : uint8_t
{
    INVALID                                        = 0,
    PreInit                                        = 1,
    Init                                           = 2,
    MainMenu                                       = 3,
    Pregame                                        = 4,
    InGame                                         = 5,
    COUNT                                          = 6,
    EMenuShellGameLoop                             = 7

};


// Enum  ShooterGame.EAresScreenVibility
enum class EAresScreenVibility : uint8_t
{
    Hidden                                         = 0,
    Visible                                        = 1,
    EAresScreenVibility                            = 2

};


// Enum  ShooterGame.EAresButtonInteractionState
enum class EAresButtonInteractionState : uint8_t
{
    Idle                                           = 0,
    Hovered                                        = 1,
    Pressed                                        = 2,
    Disabled                                       = 3,
    EAresButtonInteractionState                    = 4

};


// Enum  ShooterGame.EAngleTrackerType
enum class EAngleTrackerType : uint8_t
{
    Aud                                            = 0,
    Aud                                            = 1,
    Aud                                            = 2,
    Aud                                            = 3,
    Aud                                            = 4

};


// Enum  ShooterGame.EAresWidgetPlayerVisibility
enum class EAresWidgetPlayerVisibility : uint8_t
{
    All                                            = 0,
    AlliesAndObserver                              = 1,
    AlliesOnly                                     = 2,
    LocalPlayerOnly                                = 3,
    Count                                          = 4,
    EAresWidgetPlayerVisibility                    = 5

};


// Enum  ShooterGame.EBasicAssistType
enum class EBasicAssistType : uint8_t
{
    Buff                                           = 0,
    Debuff                                         = 1,
    EBasicAssistType                               = 2

};


// Enum  ShooterGame.ERemovalType
enum class ERemovalType : uint8_t
{
    Destroy                                        = 0,
    Detach                                         = 1,
    ERemovalType                                   = 2

};


// Enum  ShooterGame.EAttachmentVisibility
enum class EAttachmentVisibility : uint8_t
{
    Hidden                                         = 0,
    Shown                                          = 1,
    Count                                          = 2,
    EAttachmentVisibility                          = 3

};


// Enum  ShooterGame.EAttachmentPerspective
enum class EAttachmentPerspective : uint8_t
{
    First                                          = 0,
    Third                                          = 1,
    Count                                          = 2,
    EAttachmentPerspective                         = 3

};


// Enum  ShooterGame.EAudioOcclusionType
enum class EAudioOcclusionType : uint8_t
{
    Fixed                                          = 0,
    DistanceBased                                  = 1,
    Count                                          = 2,
    EAudioOcclusionType                            = 3

};


// Enum  ShooterGame.EAudioOcclusionOperation
enum class EAudioOcclusionOperation : uint8_t
{
    SetMinimum                                     = 0,
    Additive                                       = 1,
    Count                                          = 2,
    EAudioOcclusionOperation                       = 3

};


// Enum  ShooterGame.ECrosshairShapeType
enum class ECrosshairShapeType : uint8_t
{
    LineShape                                      = 0,
    CircleShape                                    = 1,
    Count                                          = 2,
    ECrosshairShapeType                            = 3

};


// Enum  ShooterGame.ECrosshairEnvironment
enum class ECrosshairEnvironment : uint8_t
{
    Gameplay                                       = 0,
    Preview                                        = 1,
    ECrosshairEnvironment                          = 2

};


// Enum  ShooterGame.EVisualInterpolationState
enum class EVisualInterpolationState : uint8_t
{
    Steady                                         = 0,
    OvershootTarget                                = 1,
    FallbackToTarget                               = 2,
    EVisualInterpolationState                      = 3

};


// Enum  ShooterGame.EAresHudCrosshairPoints
enum class EAresHudCrosshairPoints : uint8_t
{
    CrosshairPoint                                 = 0,
    CrosshairPoint                                 = 1,
    CrosshairPoint                                 = 2,
    CrosshairPoint                                 = 3,
    CrosshairPoint                                 = 4,
    Count                                          = 5,
    EAresHudCrosshairPoints                        = 6

};


// Enum  ShooterGame.EProjectileEventType
enum class EProjectileEventType : uint8_t
{
    Stop                                           = 0,
    Destroy                                        = 1,
    Hit                                            = 2,
    Count                                          = 3,
    EProjectileEventType                           = 4

};


// Enum  ShooterGame.EScoreboardModifierStatType
enum class EScoreboardModifierStatType : uint8_t
{
    Kills                                          = 0,
    Deaths                                         = 1,
    Assists                                        = 2,
    Count                                          = 3,
    Invalid                                        = 4,
    EScoreboardModifierStatType                    = 5

};


// Enum  ShooterGame.EAresTeam
enum class EAresTeam : uint8_t
{
    AresTeam                                       = 0,
    AresTeam                                       = 1,
    AresTeam                                       = 254,
    EAresTeam                                      = 255

};


// Enum  ShooterGame.ECustomPathFollowMoveType
enum class ECustomPathFollowMoveType : uint8_t
{
    Full3D                                         = 0,
    Count                                          = 1,
    ECustomPathFollowMoveType                      = 2

};


// Enum  ShooterGame.ECustomPathFollowStartBehavior
enum class ECustomPathFollowStartBehavior : uint8_t
{
    StartPathAtClosestPointOnPath                  = 0,
    StartPathAtBeginning                           = 1,
    Count                                          = 2,
    ECustomPathFollowStartBehavior                 = 3

};


// Enum  ShooterGame.ECapID
enum class ECapID : uint8_t
{
    AresPointID                                    = 0,
    UpgradeTokenID                                 = 1,
    RecruitmentTokenID                             = 2,
    JuiceEnergyCurrencyID                          = 3,
    JuiceMaxEnergyCurrencyID                       = 4,
    DoughID                                        = 5,
    EquippableContentTypeID                        = 6,
    EquippableSkinContentTypeID                    = 7,
    EquippableSkinLevelContentTypeID               = 8,
    EquippableSkinChromaContentTypeID              = 9,
    EquippableCharmContentTypeID                   = 10,
    EquippableCharmLevelContentTypeID              = 11,
    EquippableAttachmentContentTypeID              = 12,
    CharacterContentTypeID                         = 13,
    SprayContentTypeID                             = 14,
    SprayLevelContentTypeID                        = 15,
    PlayerCardContentTypeID                        = 16,
    MissionContentTypeID                           = 17,
    PlayerTitleContentTypeID                       = 18,
    ContractContentTypeID                          = 19,
    PremiumContractContentTypeID                   = 20,
    TotemContentTypeID                             = 21,
    PermanentEntitlementTypeID                     = 22,
    LoyaltyEntitlementTypeID                       = 23,
    XGPEntitlementTypeID                           = 24,
    CurrencyRewardTypeID                           = 25,
    ContractXPCurrencyID                           = 26,
    F2PEntitlementTypeID                           = 27,
    Count                                          = 28,
    ECapID                                         = 29

};


// Enum  ShooterGame.EPatchPhase
enum class EPatchPhase : uint8_t
{
    NotBegun                                       = 0,
    Searching                                      = 1,
    PostProcessing                                 = 2,
    MarkingEdges                                   = 3,
    MakingCellVolumes                              = 4,
    PatchSuccessful                                = 5,
    PatchFailed                                    = 6,
    Count                                          = 7,
    EPatchPhase                                    = 8

};


// Enum  ShooterGame.EEdgeStatus
enum class EEdgeStatus : uint8_t
{
    OutsidePatch                                   = 0,
    InsidePatch                                    = 1,
    EdgeOfPatch                                    = 2,
    Count                                          = 3,
    EEdgeStatus                                    = 4

};


// Enum  ShooterGame.ECellStatus
enum class ECellStatus : uint8_t
{
    AllInside                                      = 0,
    PartiallyOutside                               = 1,
    PartiallyBlocked                               = 2,
    Count                                          = 3,
    ECellStatus                                    = 4

};


// Enum  ShooterGame.ENodeStatus
enum class ENodeStatus : uint8_t
{
    Unsearched                                     = 0,
    Pending                                        = 1,
    Blocked                                        = 2,
    Inside                                         = 3,
    Outside                                        = 4,
    Count                                          = 5,
    ENodeStatus                                    = 6

};


// Enum  ShooterGame.EPatchType
enum class EPatchType : uint8_t
{
    Cells                                          = 0,
    Nodes                                          = 1,
    Volumes                                        = 2,
    Count                                          = 3,
    EPatchType                                     = 4

};


// Enum  ShooterGame.EPatchSpreadStyle
enum class EPatchSpreadStyle : uint8_t
{
    Air                                            = 0,
    Ground                                         = 1,
    Count                                          = 2,
    EPatchSpreadStyle                              = 3

};


// Enum  ShooterGame.EChatMessageFormatType
enum class EChatMessageFormatType : uint8_t
{
    Author                                         = 0,
    NoAuthor                                       = 1,
    NoChannel                                      = 2,
    NoAuthorNoChannel                              = 3,
    Count                                          = 4,
    EChatMessageFormatType                         = 5

};


// Enum  ShooterGame.ECloudSectionPhase
enum class ECloudSectionPhase : uint8_t
{
    Uninitalized                                   = 0,
    Generating                                     = 1,
    Smoothing                                      = 2,
    Normalizing                                    = 3,
    Finalizing                                     = 4,
    Finished                                       = 5,
    Count                                          = 6,
    ECloudSectionPhase                             = 7

};


// Enum  ShooterGame.ECNPolicyType
enum class ECNPolicyType : uint8_t
{
    None                                           = 0,
    Shutdown                                       = 1,
    PlayTime                                       = 2,
    WarningMessage                                 = 3,
    MatchmakingDisable                             = 4,
    HopeWarning                                    = 5,
    HopeTips                                       = 6,
    HopeShutdown                                   = 7,
    HopeHeartbeat                                  = 8,
    Invalid                                        = 9,
    ECNPolicyType                                  = 10

};


// Enum  ShooterGame.ECoachDebugErrorType
enum class ECoachDebugErrorType : uint8_t
{
    ViewingEnemy                                   = 0,
    InvalidNullViewTarget                          = 1,
    IllegalViewTargetMode                          = 2,
    Count                                          = 3,
    ECoachDebugErrorType                           = 4

};


// Enum  ShooterGame.ERoundReportEventType
enum class ERoundReportEventType : uint8_t
{
    DealtDamage                                    = 0,
    ReceivedDamage                                 = 1,
    Respawned                                      = 2,
    ScoredAssist                                   = 3,
    ScoredKill                                     = 4,
    ScoredDeath                                    = 5,
    Count                                          = 6,
    ERoundReportEventType                          = 7

};


// Enum  ShooterGame.EAresMuteMethod
enum class EAresMuteMethod : uint8_t
{
    Unknown                                        = 0,
    Toggle                                         = 1,
    Volume                                         = 2,
    ReportModal                                    = 3,
    EAresMuteMethod                                = 4

};


// Enum  ShooterGame.EAresCommsMethod
enum class EAresCommsMethod : uint8_t
{
    Unknown                                        = 0,
    Voice                                          = 1,
    Ping                                           = 2,
    Text                                           = 3,
    EAresCommsMethod                               = 4

};


// Enum  ShooterGame.ECompetitiveTierIconSize
enum class ECompetitiveTierIconSize : uint8_t
{
    Small                                          = 0,
    Large                                          = 1,
    ECompetitiveTierIconSize                       = 2

};


// Enum  ShooterGame.ECompetitiveDivision
enum class ECompetitiveDivision : uint8_t
{
    INVALID                                        = 0,
    UNRANKED                                       = 1,
    IRON                                           = 2,
    BRONZE                                         = 3,
    SILVER                                         = 4,
    GOLD                                           = 5,
    PLATINUM                                       = 6,
    DIAMOND                                        = 7,
    ASCENDANT                                      = 8,
    IMMORTAL                                       = 9,
    RADIANT                                        = 10,
    Count                                          = 11,
    ECompetitiveDivision                           = 12

};


// Enum  ShooterGame.ECompetitiveTier
enum class ECompetitiveTier : uint8_t
{
    Iron1                                          = 3,
    Iron2                                          = 4,
    Iron3                                          = 5,
    Bronze1                                        = 6,
    Bronze2                                        = 7,
    Bronze3                                        = 8,
    Silver1                                        = 9,
    Silver2                                        = 10,
    Silver3                                        = 11,
    Gold1                                          = 12,
    Gold2                                          = 13,
    Gold3                                          = 14,
    Platinum1                                      = 15,
    Platinum2                                      = 16,
    Platinum3                                      = 17,
    Diamond1                                       = 18,
    Diamond2                                       = 19,
    Diamond3                                       = 20,
    Immortal1                                      = 21,
    Immortal2                                      = 22,
    Immortal3                                      = 23,
    Radiant                                        = 24,
    ECompetitiveTier                               = 25

};


// Enum  ShooterGame.ECheatEntryType
enum class ECheatEntryType : uint8_t
{
    Simple                                         = 0,
    Toggle                                         = 1,
    Complex                                        = 2,
    ECheatEntryType                                = 3

};


// Enum  ShooterGame.ECheatSubCategory
enum class ECheatSubCategory : uint8_t
{
    TestingTools                                   = 0,
    PingPacketLossAndJitter                        = 1,
    InfiniteStuff                                  = 2,
    BombGameModeCheats                             = 3,
    AutomaticMovingAndShooting                     = 4,
    SpawningPlayersAndMannequins                   = 5,
    DisablingStuff                                 = 6,
    MovementSystem                                 = 7,
    VisualizationsAndDebugging                     = 8,
    HitRegistration                                = 9,
    HUDAndUI                                       = 10,
    InputsAndEquippables                           = 11,
    FogOfWar                                       = 12,
    Misc                                           = 13,
    SkinsSpraysAndMore                             = 14,
    ECheatSubCategory                              = 15

};


// Enum  ShooterGame.ECheatCategory
enum class ECheatCategory : uint8_t
{
    GeneralCommands                                = 0,
    GameplayTech                                   = 1,
    PremiumContent                                 = 2,
    ECheatCategory                                 = 3

};


// Enum  ShooterGame.EActionType
enum class EActionType : uint8_t
{
    OpenModal                                      = 0,
    CloseModal                                     = 1,
    ApplyFilters                                   = 2,
    Count                                          = 3,
    EActionType                                    = 4

};


// Enum  ShooterGame.EAresContentType
enum class EAresContentType : uint8_t
{
    EquippableSkin                                 = 0,
    EquippableSkinLevel                            = 1,
    EquippableSkinChroma                           = 2,
    EquippableCharm                                = 3,
    Character                                      = 4,
    CharacterRole                                  = 5,
    Contract                                       = 6,
    EquippableAttachment                           = 7,
    Equippable                                     = 8,
    Map                                            = 9,
    Socket                                         = 10,
    Spray                                          = 11,
    GameMode                                       = 12,
    Currency                                       = 13,
    EquippableCharmLevel                           = 14,
    SprayLevel                                     = 15,
    PlayerCard                                     = 16,
    PremiumContract                                = 17,
    Mission                                        = 18,
    StorefrontItem                                 = 19,
    PlayerTitle                                    = 20,
    Season                                         = 21,
    ActRankBorder                                  = 22,
    ContractChapter                                = 23,
    ContentTier                                    = 24,
    CompetitiveSeason                              = 25,
    PremierSeason                                  = 26,
    MatchmakingQueue                               = 27,
    LevelBorder                                    = 28,
    Event                                          = 29,
    JuiceBox                                       = 30,
    Ceremony                                       = 31,
    TournamentsTeamIcon                            = 32,
    MassRewardsCeremony                            = 33,
    Archive                                        = 34,
    Subscription                                   = 35,
    Accolade                                       = 36,
    PremierConference                              = 37,
    Totem                                          = 38,
    Tip                                            = 39,
    PowderedToast                                  = 40,
    BTE                                            = 41,
    Invalid                                        = 42,
    Count                                          = 43,
    EAresContentType                               = 44

};


// Enum  ShooterGame.ETipPossibleDisplayTimes
enum class ETipPossibleDisplayTimes : uint8_t
{
    BuyPhase                                       = 0,
    TheRange                                       = 1,
    DeathCam                                       = 2,
    BuyPhaseFollowUp                               = 3,
    ShopClosedFollowUp                             = 4,
    ETipPossibleDisplayTimes                       = 5

};


// Enum  ShooterGame.EEducationArea
enum class EEducationArea : uint8_t
{
    Economy                                        = 0,
    Abilities                                      = 1,
    AttackDefend                                   = 2,
    Weapon                                         = 3,
    Settings                                       = 4,
    Movement                                       = 5,
    Fights                                         = 6,
    Crosshair                                      = 7,
    Lore                                           = 8,
    ShootingRange                                  = 9,
    Count                                          = 10,
    EEducationArea                                 = 11

};


// Enum  ShooterGame.EContractType
enum class EContractType : uint8_t
{
    Special                                        = 0,
    Story                                          = 1,
    Event                                          = 2,
    Accord                                         = 3,
    Invalid                                        = 4,
    Count                                          = 5,
    EContractType                                  = 6

};


// Enum  ShooterGame.EXPModifier
enum class EXPModifier : uint8_t
{
    AntiAddiction                                  = 0,
    AntiAddiction                                  = 1,
    Loyalty                                        = 2,
    XP                                             = 3,
    Restrictions                                   = 4,
    Social                                         = 5,
    PREMIUM                                        = 6,
    XGP                                            = 7,
    Invalid                                        = 8,
    Count                                          = 9,
    EXPModifier                                    = 10

};


// Enum  ShooterGame.EContractUpgradeState
enum class EContractUpgradeState : uint8_t
{
    CUS                                            = 0,
    CUS                                            = 1,
    CUS                                            = 2,
    CUS                                            = 3,
    CUS                                            = 4

};


// Enum  ShooterGame.ECoreGameMatchState
enum class ECoreGameMatchState : uint8_t
{
    PREPROVISION                                   = 0,
    PROVISIONING                                   = 1,
    IN                                             = 2,
    POST                                           = 3,
    CLOSED                                         = 4,
    PENDING                                        = 5,
    INVALID                                        = 6,
    COUNT                                          = 6,
    ECoreGameMatchState                            = 7

};


// Enum  ShooterGame.EInstructionSet
enum class EInstructionSet : uint8_t
{
    UNKNOWN                                        = 0,
    SSE                                            = 1,
    SSE2                                           = 2,
    SSE3                                           = 3,
    SSE41                                          = 4,
    SSE42                                          = 5,
    AVX                                            = 6,
    AVX2                                           = 7,
    EInstructionSet                                = 8

};


// Enum  ShooterGame.ECrosshairLocation
enum class ECrosshairLocation : uint8_t
{
    Inner                                          = 0,
    Outer                                          = 1,
    Count                                          = 2,
    ECrosshairLocation                             = 3

};


// Enum  ShooterGame.ECrosshairPreviewSettingsType
enum class ECrosshairPreviewSettingsType : uint8_t
{
    Primary                                        = 0,
    ADS                                            = 1,
    FocusMode                                      = 2,
    ECrosshairPreviewSettingsType                  = 3

};


// Enum  ShooterGame.EAresCustomGameSelectionType
enum class EAresCustomGameSelectionType : uint8_t
{
    Map                                            = 0,
    Mode                                           = 1,
    Options                                        = 2,
    EAresCustomGameSelectionType                   = 3

};


// Enum  ShooterGame.ECauserType
enum class ECauserType : uint8_t
{
    Projectile                                     = 0,
    Equippable                                     = 1,
    Pawn                                           = 2,
    Count                                          = 3,
    ECauserType                                    = 4

};


// Enum  ShooterGame.DamageSectionType
enum class DamageSectionType : uint8_t
{
    Health                                         = 0,
    Shield                                         = 1,
    Temporary                                      = 2,
    Count                                          = 3,
    DamageSectionType                              = 4

};


// Enum  ShooterGame.EDebugCharacterMovementCurves
enum class EDebugCharacterMovementCurves : uint8_t
{
    None                                           = 0,
    TotalSpeed                                     = 1,
    AxialSpeed                                     = 2,
    Acceleration                                   = 3,
    JumpHeight                                     = 4,
    RotationDegreesPerSecond                       = 5,
    Count                                          = 6,
    EDebugCharacterMovementCurves                  = 7

};


// Enum  ShooterGame.EDebugCharacterMovementTimingFlags
enum class EDebugCharacterMovementTimingFlags : uint8_t
{
    None                                           = 0,
    Self                                           = 1,
    RemoteClient                                   = 2,
    Count                                          = 3,
    EDebugCharacterMovementTimingFlags             = 4

};


// Enum  ShooterGame.EDebugNetSource
enum class EDebugNetSource : uint8_t
{
    LocalClient                                    = 0,
    Server                                         = 1,
    Count                                          = 2,
    EDebugNetSource                                = 3

};


// Enum  ShooterGame.EFiringTimeEntryType
enum class EFiringTimeEntryType : uint8_t
{
    Normal                                         = 0,
    Refire                                         = 1,
    Burst                                          = 2,
    Future                                         = 3,
    Count                                          = 4,
    EFiringTimeEntryType                           = 5

};


// Enum  ShooterGame.EDebugWeaponCurves
enum class EDebugWeaponCurves : uint8_t
{
    None                                           = 0,
    WeaponError                                    = 1,
    WeaponPitchAndYaw                              = 2,
    Count                                          = 3,
    EDebugWeaponCurves                             = 4

};


// Enum  ShooterGame.ECreateDecalOptions
enum class ECreateDecalOptions : uint8_t
{
    DecalOrProxy                                   = 0,
    NeverProxy                                     = 1,
    AlwaysDecal                                    = 2,
    ECreateDecalOptions                            = 3

};


// Enum  ShooterGame.EDestructionResponse
enum class EDestructionResponse : uint8_t
{
    DoNothing                                      = 0,
    ActorDestroy                                   = 1,
    TakeDamage                                     = 2,
    DamageOrDestroy                                = 3,
    Custom                                         = 4,
    Count                                          = 5,
    EDestructionResponse                           = 6

};


// Enum  ShooterGame.EMovementSyncType
enum class EMovementSyncType : uint8_t
{
    Always                                         = 0,
    Never                                          = 1,
    SpectatorOnly                                  = 2,
    Count                                          = 3,
    EMovementSyncType                              = 4

};


// Enum  ShooterGame.ECosmeticEffectType
enum class ECosmeticEffectType : uint8_t
{
    Undefined                                      = 0,
    Cosmetic                                       = 1,
    Gameplay                                       = 2,
    ECosmeticEffectType                            = 3

};


// Enum  ShooterGame.ESpawnEffectType
enum class ESpawnEffectType : uint8_t
{
    Spawned                                        = 0,
    Pooled                                         = 1,
    Pure                                           = 2,
    ESpawnEffectType                               = 3

};


// Enum  ShooterGame.EEffectAttachType
enum class EEffectAttachType : uint8_t
{
    NotAttached                                    = 0,
    RootComponent                                  = 1,
    Attach1P                                       = 2,
    Attach3P                                       = 3,
    Count                                          = 4,
    EEffectAttachType                              = 5

};


// Enum  ShooterGame.EWeaponAltFireDisplayType
enum class EWeaponAltFireDisplayType : uint8_t
{
    None                                           = 0,
    ADS                                            = 1,
    AirBurst                                       = 2,
    Shotgun                                        = 3,
    EWeaponAltFireDisplayType                      = 4

};


// Enum  ShooterGame.EWeaponStatsFeature
enum class EWeaponStatsFeature : uint8_t
{
    None                                           = 0,
    Silenced                                       = 1,
    ROFIncrease                                    = 2,
    DualZoom                                       = 3,
    EWeaponStatsFeature                            = 4

};


// Enum  ShooterGame.EWallPenetrationDisplayType
enum class EWallPenetrationDisplayType : uint8_t
{
    None                                           = 0,
    Low                                            = 1,
    Medium                                         = 2,
    High                                           = 3,
    Count                                          = 4,
    EWallPenetrationDisplayType                    = 5

};


// Enum  ShooterGame.EWeaponFireModeDisplayType
enum class EWeaponFireModeDisplayType : uint8_t
{
    FullyAutomatic                                 = 0,
    Burst                                          = 1,
    SemiAutomatic                                  = 2,
    Count                                          = 3,
    EWeaponFireModeDisplayType                     = 4

};


// Enum  ShooterGame.EEquippableCategory
enum class EEquippableCategory : uint8_t
{
    Invalid                                        = 0,
    Heavy                                          = 1,
    Rifle                                          = 2,
    Shotgun                                        = 3,
    Sidearm                                        = 4,
    SMG                                            = 5,
    Sniper                                         = 6,
    Melee                                          = 7,
    Hidden                                         = 8,
    Count                                          = 9,
    EEquippableCategory                            = 10

};


// Enum  ShooterGame.EEquippableEventHistoryEntryMode
enum class EEquippableEventHistoryEntryMode : uint8_t
{
    ClientOnly                                     = 0,
    ServerOnly                                     = 1,
    ClientAndServer                                = 2,
    EEquippableEventHistoryEntryMode               = 3

};


// Enum  ShooterGame.EEquippableEventEmitMode
enum class EEquippableEventEmitMode : uint8_t
{
    ServerAndClient                                = 0,
    ServerOnly                                     = 1,
    ClientOnly                                     = 2,
    EEquippableEventEmitMode                       = 3

};


// Enum  ShooterGame.EModificationType
enum class EModificationType : uint8_t
{
    None                                           = 0,
    Permanent                                      = 1,
    Temporary                                      = 2,
    EModificationType                              = 3

};


// Enum  ShooterGame.EEquippableRestrictions
enum class EEquippableRestrictions : uint8_t
{
    Apply                                          = 0,
    SkipForDesired                                 = 1,
    SkipForDesiredAndCurrent                       = 2,
    Count                                          = 3,
    EEquippableRestrictions                        = 4

};


// Enum  ShooterGame.EMeleeArchetypeCategory
enum class EMeleeArchetypeCategory : uint8_t
{
    NonMelee                                       = 0,
    Tactical                                       = 1,
    Assassin                                       = 2,
    Assassin2                                      = 3,
    Aggressive                                     = 4,
    Wand                                           = 5,
    Fury                                           = 6,
    Karambit                                       = 7,
    Karambit2                                      = 8,
    Uncommon                                       = 9,
    CQC                                            = 10,
    TwoHanded                                      = 11,
    Fan                                            = 12,
    Butterfly                                      = 13,
    Staff                                          = 14,
    Heavy                                          = 15,
    Katana                                         = 16,
    Katana2                                        = 17,
    DualWield                                      = 18,
    ChainKunai                                     = 19,
    DualFist                                       = 20,
    Count                                          = 21,
    EMeleeArchetypeCategory                        = 22

};


// Enum  ShooterGame.EMeleeCategory
enum class EMeleeCategory : uint8_t
{
    New                                            = 0,
    ActionsetMod                                   = 1,
    Repeat                                         = 2,
    NonMelee                                       = 3,
    Count                                          = 4,
    EMeleeCategory                                 = 5

};


// Enum  ShooterGame.EFinisherCategory
enum class EFinisherCategory : uint8_t
{
    Base                                           = 0,
    Light                                          = 1,
    Medium                                         = 2,
    Heavy                                          = 3,
    Count                                          = 4,
    EFinisherCategory                              = 5

};


// Enum  ShooterGame.EAnimationCategory
enum class EAnimationCategory : uint8_t
{
    None                                           = 0,
    Gun                                            = 1,
    LightHand                                      = 2,
    HeavyHand                                      = 3,
    Count                                          = 4,
    EAnimationCategory                             = 5

};


// Enum  ShooterGame.EFXCategory
enum class EFXCategory : uint8_t
{
    Base                                           = 0,
    Light                                          = 1,
    Medium                                         = 2,
    Heavy                                          = 3,
    Count                                          = 4,
    EFXCategory                                    = 5

};


// Enum  ShooterGame.EModelCategory
enum class EModelCategory : uint8_t
{
    Base                                           = 0,
    Light                                          = 1,
    Medium                                         = 2,
    Heavy                                          = 3,
    Count                                          = 4,
    EModelCategory                                 = 5

};


// Enum  ShooterGame.EEquippableSkinLevelItem
enum class EEquippableSkinLevelItem : uint8_t
{
    None                                           = 0,
    VFX                                            = 1,
    Animation                                      = 2,
    Finisher                                       = 3,
    KillBanner                                     = 4,
    Buddy                                          = 5,
    Randomizer                                     = 6,
    KillCounter                                    = 7,
    TopFrag                                        = 8,
    InspectAndKill                                 = 9,
    Voiceover                                      = 10,
    KillEffect                                     = 11,
    FishAnimation                                  = 12,
    HeartbeatAndMapSensor                          = 13,
    SoundEffects                                   = 14,
    KillEffects                                    = 15,
    AttackerDefenderSwap                           = 16,
    Transformation                                 = 17,
    EEquippableSkinLevelItem                       = 18

};


// Enum  ShooterGame.EStateBehaviorOnUnpossess
enum class EStateBehaviorOnUnpossess : uint8_t
{
    DoNothing                                      = 0,
    GoToState                                      = 1,
    Count                                          = 2,
    EStateBehaviorOnUnpossess                      = 3

};


// Enum  ShooterGame.EStateBehaviorOnUnequip
enum class EStateBehaviorOnUnequip : uint8_t
{
    DoNothing                                      = 0,
    GoToStartState                                 = 1,
    PreventUnequip                                 = 2,
    PreventEquip                                   = 3,
    Count                                          = 4,
    EStateBehaviorOnUnequip                        = 5

};


// Enum  ShooterGame.EReplacementStateType
enum class EReplacementStateType : uint8_t
{
    None                                           = 0,
    DisabledFallback                               = 1,
    Count                                          = 2,
    EReplacementStateType                          = 3

};


// Enum  ShooterGame.ESourceInputConsumptionOnEnterEquippableState
enum class ESourceInputConsumptionOnEnterEquippableState : uint8_t
{
    ConsumeSourceInput                             = 0,
    AllowSourceInputToBeQueued                     = 1,
    Count                                          = 2,
    ESourceInputConsumptionOnEnterEquippableState  = 3

};


// Enum  ShooterGame.EHandleInputResponse
enum class EHandleInputResponse : uint8_t
{
    Consume                                        = 0,
    Unhandled                                      = 1,
    Count                                          = 2,
    EHandleInputResponse                           = 3

};


// Enum  ShooterGame.EStateBehaviorOnDeath
enum class EStateBehaviorOnDeath : uint8_t
{
    DoNothing                                      = 0,
    GoToState                                      = 1,
    ClearState                                     = 2,
    Count                                          = 3,
    EStateBehaviorOnDeath                          = 4

};


// Enum  ShooterGame.EEquipSource
enum class EEquipSource : uint8_t
{
    ActivationInput                                = 0,
    UnequipEquippable                              = 1,
    GrantEquippable                                = 2,
    ServerCorrection                               = 3,
    RemoveItem                                     = 4,
    UpdateInvalidDesiredEquippable                 = 5,
    PossessedBy                                    = 6,
    ServerUpdateForServerOwnedActor                = 7,
    ServerUpdateForRemotePlayerOwnedActor          = 8,
    Script                                         = 9,
    Automation                                     = 10,
    ServerCheat                                    = 11,
    Invalid                                        = 12,
    Count                                          = 13,
    EEquipSource                                   = 14

};


// Enum  ShooterGame.EEquipSpeed
enum class EEquipSpeed : uint8_t
{
    Normal                                         = 0,
    Fast                                           = 1,
    Instant                                        = 2,
    Count                                          = 3,
    EEquipSpeed                                    = 4

};


// Enum  ShooterGame.EStandingsType
enum class EStandingsType : uint8_t
{
    Group                                          = 0,
    Alpha                                          = 1,
    Omega                                          = 2,
    EStandingsType                                 = 3

};


// Enum  ShooterGame.EEsportsSectionType
enum class EEsportsSectionType : uint8_t
{
    Group                                          = 0,
    Bracket                                        = 1,
    CrossGroup                                     = 2,
    Invalid                                        = 3,
    EEsportsSectionType                            = 4

};


// Enum  ShooterGame.EPickemMatchResultState
enum class EPickemMatchResultState : uint8_t
{
    UNKOWN                                         = 0,
    TIE                                            = 1,
    KNOWN                                          = 2,
    Count                                          = 3,
    Invalid                                        = 4,
    EPickemMatchResultState                        = 5

};


// Enum  ShooterGame.EEsportsMatchOriginType
enum class EEsportsMatchOriginType : uint8_t
{
    Seeding                                        = 0,
    Match                                          = 1,
    DecisionPoint                                  = 2,
    Invalid                                        = 3,
    EEsportsMatchOriginType                        = 4

};


// Enum  ShooterGame.EEsportsEntryPickCorrectness
enum class EEsportsEntryPickCorrectness : uint8_t
{
    Unknown                                        = 0,
    Incorrect                                      = 1,
    Correct                                        = 2,
    Invalid                                        = 3,
    EEsportsEntryPickCorrectness                   = 4

};


// Enum  ShooterGame.EEsportsSectionPickCorrectness
enum class EEsportsSectionPickCorrectness : uint8_t
{
    Imperfect                                      = 0,
    Perfect                                        = 1,
    Invalid                                        = 2,
    EEsportsSectionPickCorrectness                 = 3

};


// Enum  ShooterGame.EEsportsTeamMemberRole
enum class EEsportsTeamMemberRole : uint8_t
{
    Player                                         = 0,
    IGL                                            = 1,
    Substitute                                     = 2,
    Coach                                          = 3,
    Manager                                        = 4,
    Invalid                                        = 5,
    EEsportsTeamMemberRole                         = 6

};


// Enum  ShooterGame.EVCTTournament
enum class EVCTTournament : uint8_t
{
    None                                           = 0,
    Champions                                      = 1,
    MastersOne                                     = 2,
    MastersTwo                                     = 3,
    Americas                                       = 4,
    EMEA                                           = 5,
    Pacific                                        = 6,
    China                                          = 7,
    EVCTTournament                                 = 8

};


// Enum  ShooterGame.EEULAAcceptanceState
enum class EEULAAcceptanceState : uint8_t
{
    WAITING                                        = 0,
    ACCEPTANCE                                     = 1,
    ACCEPTED                                       = 2,
    INVALID                                        = 3,
    COUNT                                          = 3,
    EEULAAcceptanceState                           = 4

};


// Enum  ShooterGame.EAresExpressionType
enum class EAresExpressionType : uint8_t
{
    Spray                                          = 0,
    Totem                                          = 1,
    EAresExpressionType                            = 2

};


// Enum  ShooterGame.EFavoritesActionType
enum class EFavoritesActionType : uint8_t
{
    AddFavorite                                    = 0,
    RemoveFavorite                                 = 1,
    EFavoritesActionType                           = 2

};


// Enum  ShooterGame.EShellCasingEjectableBehavior
enum class EShellCasingEjectableBehavior : uint8_t
{
    None                                           = 0,
    EjectOnShoot                                   = 1,
    EShellCasingEjectableBehavior                  = 2

};


// Enum  ShooterGame.ECanFireCooldownCheckOption
enum class ECanFireCooldownCheckOption : uint8_t
{
    CheckCooldown                                  = 0,
    SkipCooldownCheck                              = 1,
    ECanFireCooldownCheckOption                    = 2

};


// Enum  ShooterGame.EFiringStateTransitionContext
enum class EFiringStateTransitionContext : uint8_t
{
    None                                           = 0,
    Refire                                         = 1,
    Burst                                          = 2,
    Count                                          = 3,
    EFiringStateTransitionContext                  = 4

};


// Enum  ShooterGame.EAresFlyoutCategory
enum class EAresFlyoutCategory : uint8_t
{
    SocialWindow                                   = 0,
    SocialHovercard                                = 1,
    ScoreboardHovercard                            = 2,
    EAresFlyoutCategory                            = 3

};


// Enum  ShooterGame.EFoWRelevancyResult
enum class EFoWRelevancyResult : uint8_t
{
    Invalid                                        = 0,
    NotRelevant                                    = 1,
    RelevantVision                                 = 2,
    RelevantAudio                                  = 3,
    RelevantOverride                               = 4,
    RelevantNoComponent                            = 5,
    RelevantTeam                                   = 6,
    RelevantDistance                               = 7,
    Count                                          = 8,
    EFoWRelevancyResult                            = 255

};


// Enum  ShooterGame.EGroundSoundType
enum class EGroundSoundType : uint8_t
{
    Step                                           = 0,
    Land                                           = 1,
    Jump                                           = 2,
    EGroundSoundType                               = 3

};


// Enum  ShooterGame.EForceModuleAttribute
enum class EForceModuleAttribute : uint8_t
{
    MaxSpeed                                       = 0,
    Friction                                       = 1,
    Braking                                        = 2,
    Acceleration                                   = 3,
    JumpVelocity                                   = 4,
    Gravity                                        = 5,
    JumpTime                                       = 6,
    TurnRate                                       = 7,
    CurrentSpeed                                   = 8,
    AboveMaxSpeedBraking                           = 9,
    Count                                          = 10,
    EForceModuleAttribute                          = 11

};


// Enum  ShooterGame.EShooterGameMode
enum class EShooterGameMode : uint8_t
{
    SpikeMode5v5                                   = 0,
    Unhandled                                      = 1,
    Count                                          = 2,
    EShooterGameMode                               = 3

};


// Enum  ShooterGame.EReplayRecordPIEMode
enum class EReplayRecordPIEMode : uint8_t
{
    DoNotRecord                                    = 0,
    RecordOnce                                     = 1,
    AlwaysRecord                                   = 2,
    Count                                          = 3,
    EReplayRecordPIEMode                           = 4

};


// Enum  ShooterGame.EModifierRoleConditionsBitMask
enum class EModifierRoleConditionsBitMask : uint8_t
{
    Observer                                       = 0,
    Moderator                                      = 1,
    Player                                         = 2,
    EModifierRoleConditionsBitMask                 = 3

};


// Enum  ShooterGame.EModifierUseConditionsBitMask
enum class EModifierUseConditionsBitMask : uint8_t
{
    Always                                         = 0,
    Cheats                                         = 1,
    Tournament                                     = 2,
    EModifierUseConditionsBitMask                  = 3

};


// Enum  ShooterGame.EGameUIFlag
enum class EGameUIFlag : uint8_t
{
    None                                           = 0,
    Scoreboard                                     = 1,
    Map                                            = 2,
    Shop                                           = 4,
    AgentTooltip                                   = 8,
    CombatReport                                   = 16,
    RadialMenu                                     = 32,
    CommMenu                                       = 64,
    EGameUIFlag                                    = 65

};


// Enum  ShooterGame.EGameplayFlag
enum class EGameplayFlag : uint8_t
{
    None                                           = 0,
    InGameUI                                       = 1,
    PlayerIsDead                                   = 2,
    InPreRoundPhase                                = 4,
    InOptionsScreen                                = 8,
    GameOutOfFocus                                 = 16,
    All                                            = 255,
    EGameplayFlag                                  = 256

};


// Enum  ShooterGame.EGameplayNotificationStatus
enum class EGameplayNotificationStatus : uint8_t
{
    Inactive                                       = 0,
    Queued                                         = 1,
    Active                                         = 2,
    EGameplayNotificationStatus                    = 3

};


// Enum  ShooterGame.EGameplayNotificationDurationType
enum class EGameplayNotificationDurationType : uint8_t
{
    Timed                                          = 0,
    EventBased                                     = 1,
    EGameplayNotificationDurationType              = 2

};


// Enum  ShooterGame.EGameplayNotificationWidgetSlot
enum class EGameplayNotificationWidgetSlot : uint8_t
{
    Banner                                         = 0,
    Ring                                           = 1,
    Icon                                           = 2,
    Background                                     = 3,
    Count                                          = 4,
    EGameplayNotificationWidgetSlot                = 5

};


// Enum  ShooterGame.EVoteReplicationState
enum class EVoteReplicationState : uint8_t
{
    Waiting                                        = 0,
    Complete                                       = 1,
    EVoteReplicationState                          = 2

};


// Enum  ShooterGame.EAresNotificationType
enum class EAresNotificationType : uint8_t
{
    Generic                                        = 0,
    Warning                                        = 1,
    RestrictionsWarning                            = 2,
    EAresNotificationType                          = 3

};


// Enum  ShooterGame.EGridAxis2D
enum class EGridAxis2D : uint8_t
{
    Horizontal                                     = 0,
    Vertical                                       = 1,
    EGridAxis2D                                    = 2

};


// Enum  ShooterGame.EHomingProjectileFacing
enum class EHomingProjectileFacing : uint8_t
{
    FiringDirection                                = 0,
    MovementDirection                              = 1,
    HomingTarget                                   = 2,
    EHomingProjectileFacing                        = 3

};


// Enum  ShooterGame.EAresListType
enum class EAresListType : uint8_t
{
    None                                           = 0,
    List                                           = 1,
    Tile                                           = 2,
    Tree                                           = 3,
    COUNT                                          = 4,
    EAresListType                                  = 5

};


// Enum  ShooterGame.EAresListScrollMode
enum class EAresListScrollMode : uint8_t
{
    Default                                        = 0,
    Restricted                                     = 1,
    Infinite                                       = 2,
    COUNT                                          = 3,
    EAresListScrollMode                            = 4

};


// Enum  ShooterGame.EButtonTextWidgetComponentType
enum class EButtonTextWidgetComponentType : uint8_t
{
    Standard                                       = 0,
    Primary                                        = 1,
    Secondary                                      = 2,
    EButtonTextWidgetComponentType                 = 3

};


// Enum  ShooterGame.EBound
enum class EBound : uint8_t
{
    UpperBound                                     = 0,
    LowerBound                                     = 1,
    ThesholdType                                   = 2,
    EBound                                         = 3

};


// Enum  ShooterGame.EUseFinishType
enum class EUseFinishType : uint8_t
{
    InUse                                          = 0,
    Complete                                       = 1,
    Cancel                                         = 2,
    EUseFinishType                                 = 3

};


// Enum  ShooterGame.EAresPreloadableAssetType
enum class EAresPreloadableAssetType : uint8_t
{
    Invalid                                        = 0,
    FirstPerson                                    = 1,
    ThirdPerson                                    = 2,
    Finisher                                       = 4,
    FirstAndFinisher                               = 5,
    All                                            = 7,
    EAresPreloadableAssetType                      = 8

};


// Enum  ShooterGame.ERiotLoginStrategy
enum class ERiotLoginStrategy : uint8_t
{
    Riot                                           = 0,
    Google                                         = 1,
    Facebook                                       = 2,
    Apple                                          = 3,
    Tencent                                        = 4,
    None                                           = 5,
    ERiotLoginStrategy                             = 6

};


// Enum  ShooterGame.ERiotLoginStatusState
enum class ERiotLoginStatusState : uint8_t
{
    Uninitialized                                  = 0,
    Initialized                                    = 1,
    Authenticating                                 = 2,
    Cancelled                                      = 3,
    Success                                        = 4,
    Error                                          = 5,
    Unknown                                        = 6,
    ERiotLoginStatusState                          = 7

};


// Enum  ShooterGame.EJamSlot
enum class EJamSlot : uint8_t
{
    NONE                                           = 0,
    Primary                                        = 1,
    Secondary                                      = 2,
    EJamSlot                                       = 3

};


// Enum  ShooterGame.EJuiceRewardType
enum class EJuiceRewardType : uint8_t
{
    NONE                                           = 0,
    SKIN                                           = 1,
    LEVEL                                          = 2,
    VARIANT                                        = 3,
    COUNT                                          = 4,
    EJuiceRewardType                               = 5

};


// Enum  ShooterGame.EJuiceContentViewModelLocation
enum class EJuiceContentViewModelLocation : uint8_t
{
    NONE                                           = 0,
    COLLECTION                                     = 1,
    TRAY                                           = 2,
    CONFIRM                                        = 3,
    COUNT                                          = 4,
    EJuiceContentViewModelLocation                 = 5

};


// Enum  ShooterGame.EJuiceContentViewModelType
enum class EJuiceContentViewModelType : uint8_t
{
    NONE                                           = 0,
    CONTENT                                        = 1,
    ENERGY                                         = 2,
    FILL                                           = 3,
    COUNT                                          = 4,
    EJuiceContentViewModelType                     = 5

};


// Enum  ShooterGame.EJuiceFilterViewType
enum class EJuiceFilterViewType : uint8_t
{
    DEFAULT                                        = 0,
    HAS                                            = 1,
    OWNED                                          = 2,
    ENERGY                                         = 3,
    COUNT                                          = 4,
    EJuiceFilterViewType                           = 5

};


// Enum  ShooterGame.EAresMultiKillLevel
enum class EAresMultiKillLevel : uint8_t
{
    None                                           = 0,
    DoubleKill                                     = 1,
    TripleKill                                     = 2,
    QuadraKill                                     = 3,
    PentaKill                                      = 4,
    OverKill                                       = 5,
    Count                                          = 6,
    Invalid                                        = 254,
    EAresMultiKillLevel                            = 255

};


// Enum  ShooterGame.EChildScreenRefreshKickOption
enum class EChildScreenRefreshKickOption : uint8_t
{
    None                                           = 0,
    NoKick                                         = 1,
    ForceKick                                      = 2,
    OnlyForceKickAtTopLevel                        = 3,
    EChildScreenRefreshKickOption                  = 4

};


// Enum  ShooterGame.EAresLevelBorderAppearance
enum class EAresLevelBorderAppearance : uint8_t
{
    LevelNumber                                    = 0,
    SmallPlayerCard                                = 1,
    EAresLevelBorderAppearance                     = 2

};


// Enum  ShooterGame.ELevelLoadingState
enum class ELevelLoadingState : uint8_t
{
    UNLOADED                                       = 0,
    LOADED                                         = 1,
    LOADING                                        = 2,
    UNLOADING                                      = 3,
    ELevelLoadingState                             = 4

};


// Enum  ShooterGame.EChordedBindingContext
enum class EChordedBindingContext : uint8_t
{
    NoContext                                      = 0,
    UltInput                                       = 1,
    Count                                          = 2,
    EChordedBindingContext                         = 3

};


// Enum  ShooterGame.EFilterInclude
enum class EFilterInclude : uint8_t
{
    Exclude                                        = 0,
    Include                                        = 1,
    AlwaysInclude                                  = 2,
    EFilterInclude                                 = 3

};


// Enum  ShooterGame.ESortOrder
enum class ESortOrder : uint8_t
{
    A                                              = 0,
    B                                              = 1,
    Same                                           = 2,
    ESortOrder                                     = 3

};


// Enum  ShooterGame.ELoginQueueTokenType
enum class ELoginQueueTokenType : uint8_t
{
    Login                                          = 0,
    Queue                                          = 1,
    Invalid                                        = 2,
    ELoginQueueTokenType                           = 3

};


// Enum  ShooterGame.EStartGameAvailability
enum class EStartGameAvailability : uint8_t
{
    Unavailable                                    = 0,
    Unavailable                                    = 1,
    Unavailable                                    = 2,
    Unavailable                                    = 3,
    Unavailable                                    = 4,
    Unavailable                                    = 5,
    Unavailable                                    = 6,
    Unavailable                                    = 7,
    Unavailable                                    = 8,
    Unavailable                                    = 9,
    Unavailable                                    = 10,
    Unavailable                                    = 11,
    Available                                      = 12,
    Available                                      = 13,
    Count                                          = 14,
    EStartGameAvailability                         = 15

};


// Enum  ShooterGame.EAresMainMenuTopNavigationState
enum class EAresMainMenuTopNavigationState : uint8_t
{
    Init                                           = 0,
    Home                                           = 1,
    PlayFlow                                       = 2,
    Arsenal                                        = 3,
    ShootingRange                                  = 4,
    Profile                                        = 5,
    EndOfGame                                      = 6,
    Debug                                          = 7,
    Collections                                    = 8,
    Store                                          = 9,
    BonusStore                                     = 10,
    Progression                                    = 11,
    Battlepass                                     = 12,
    Agents                                         = 13,
    Test3                                          = 14,
    Social                                         = 15,
    Tournaments                                    = 16,
    CustomGame                                     = 17,
    Rewards                                        = 18,
    EsportsHub                                     = 19,
    BTE                                            = 20,
    Pickem                                         = 21,
    None                                           = 22,
    EAresMainMenuTopNavigationState                = 23

};


// Enum  ShooterGame.EMapPingType
enum class EMapPingType : uint8_t
{
    EMP                                            = 0,
    EMP                                            = 1,
    EMP                                            = 2,
    EMP                                            = 3

};


// Enum  ShooterGame.ETargettingRotation
enum class ETargettingRotation : uint8_t
{
    Identity                                       = 0,
    PawnRotation                                   = 1,
    ControllerAim                                  = 2,
    Count                                          = 3,
    ETargettingRotation                            = 4

};


// Enum  ShooterGame.EMassRewardCeremonyType
enum class EMassRewardCeremonyType : uint8_t
{
    None                                           = 0,
    Ranked                                         = 1,
    Titled                                         = 2,
    EMassRewardCeremonyType                        = 3

};


// Enum  ShooterGame.EMatchDetailsEnemyInteractionSort
enum class EMatchDetailsEnemyInteractionSort : uint8_t
{
    Invalid                                        = 0,
    Rank                                           = 1,
    Kills                                          = 2,
    EMatchDetailsEnemyInteractionSort              = 3

};


// Enum  ShooterGame.EMatchDetailsInteractionType
enum class EMatchDetailsInteractionType : uint8_t
{
    Invalid                                        = 0,
    Kill                                           = 1,
    Death                                          = 2,
    Assist                                         = 3,
    EMatchDetailsInteractionType                   = 4

};


// Enum  ShooterGame.EMatchOutcome
enum class EMatchOutcome : uint8_t
{
    Win                                            = 0,
    Loss                                           = 1,
    Draw                                           = 2,
    EMatchOutcome                                  = 3

};


// Enum  ShooterGame.EAresPlayerRelationship
enum class EAresPlayerRelationship : uint8_t
{
    Invalid                                        = 0,
    Self                                           = 1,
    Ally                                           = 2,
    Enemy                                          = 3,
    EAresPlayerRelationship                        = 4

};


// Enum  ShooterGame.ELocalTeamAffinity
enum class ELocalTeamAffinity : uint8_t
{
    Friendly                                       = 0,
    Enemy                                          = 1,
    Count                                          = 2,
    ELocalTeamAffinity                             = 3

};


// Enum  ShooterGame.EMenuWidgetState
enum class EMenuWidgetState : uint8_t
{
    Closed                                         = 0,
    Open                                           = 1,
    Count                                          = 2,
    Invalid                                        = 254,
    EMenuWidgetState                               = 255

};


// Enum  ShooterGame.EMenuStackEntryFlags
enum class EMenuStackEntryFlags : uint8_t
{
    None                                           = 0,
    Dismissable                                    = 1,
    Popup                                          = 2,
    Modal                                          = 4,
    Letterbox                                      = 8,
    UnregisterOnClose                              = 16,
    LastFlagPlusOne                                = 17,
    EMenuStackEntryFlags                           = 18

};


// Enum  ShooterGame.EMenuStackWidget
enum class EMenuStackWidget : uint8_t
{
    EMenuStackWidget                               = 0,
    EMenuStackWidget                               = 1,
    EMenuStackWidget                               = 2

};


// Enum  ShooterGame.EMaterialPriority
enum class EMaterialPriority : uint8_t
{
    Normal                                         = 0,
    High                                           = 1,
    EMaterialPriority                              = 2

};


// Enum  ShooterGame.EMeshPlayerView
enum class EMeshPlayerView : uint8_t
{
    FirstPerson                                    = 0,
    ThirdPerson                                    = 1,
    EMeshPlayerView                                = 2

};


// Enum  ShooterGame.EDeviceType
enum class EDeviceType : uint8_t
{
    IPhone                                         = 0,
    IPad                                           = 1,
    Unknown                                        = 4294967295,
    eDeviceTypeMAX                                 = 0,
    EDeviceType                                    = 2

};


// Enum  ShooterGame.EMobileOverlayMenuID
enum class EMobileOverlayMenuID : uint8_t
{
    None                                           = 0,
    SocialPanel                                    = 1,
    TextChat                                       = 2,
    PartyControl                                   = 3,
    SquadBoost                                     = 4,
    PartyUp                                        = 5,
    Count                                          = 6,
    EMobileOverlayMenuID                           = 7

};


// Enum  ShooterGame.EModalContextType
enum class EModalContextType : uint8_t
{
    Contains                                       = 0,
    Exact                                          = 1,
    RestrictiveContains                            = 2,
    RestrictiveExact                               = 3,
    Block                                          = 4,
    EModalContextType                              = 5

};


// Enum  ShooterGame.ENetworkSerializeResult
enum class ENetworkSerializeResult : uint8_t
{
    SuccessWithPayload                             = 0,
    SuccessEmptyPayload                            = 1,
    SerializationError                             = 2,
    ENetworkSerializeResult                        = 3

};


// Enum  ShooterGame.ENonVerbalCommSubSystemName
enum class ENonVerbalCommSubSystemName : uint8_t
{
    None                                           = 0,
    Combat                                         = 1,
    Strategy                                       = 2,
    Tactical                                       = 3,
    Social                                         = 4,
    Map                                            = 5,
    ENonVerbalCommSubSystemName                    = 6

};


// Enum  ShooterGame.ENonVerbalCommSystemName
enum class ENonVerbalCommSystemName : uint8_t
{
    FirstPersonPingWheel                           = 0,
    FirstPersonCommWheel                           = 1,
    MegamapPingWheel                               = 2,
    Megamap                                        = 3,
    RadioCommMenu                                  = 4,
    ENonVerbalCommSystemName                       = 5

};


// Enum  ShooterGame.EAresObjectivePlatformVisibility
enum class EAresObjectivePlatformVisibility : uint8_t
{
    None                                           = 0,
    PC                                             = 1,
    Mobile                                         = 2,
    All                                            = 3,
    EAresObjectivePlatformVisibility               = 4

};


// Enum  ShooterGame.EObserverMovementMode
enum class EObserverMovementMode : uint8_t
{
    ObserverPawn                                   = 0,
    FocusObject                                    = 1,
    Invalid                                        = 2,
    EObserverMovementMode                          = 3

};


// Enum  ShooterGame.EOrderedListModelChangeEventType
enum class EOrderedListModelChangeEventType : uint8_t
{
    Reset                                          = 0,
    Inserted                                       = 1,
    Removed                                        = 2,
    Replaced                                       = 3,
    Reordered                                      = 4,
    EOrderedListModelChangeEventType               = 5

};


// Enum  ShooterGame.EPartyMessageStatus
enum class EPartyMessageStatus : uint8_t
{
    Unhandled                                      = 0,
    Accepted                                       = 1,
    Declined                                       = 2,
    Count                                          = 3,
    EPartyMessageStatus                            = 4

};


// Enum  ShooterGame.ERosterEventIneligiblityType
enum class ERosterEventIneligiblityType : uint8_t
{
    Eligible                                       = 0,
    Ineligible                                     = 1,
    Ineligible                                     = 2,
    Inelgible                                      = 3,
    Ineligible                                     = 4,
    Invalid                                        = 5,
    ERosterEventIneligiblityType                   = 6

};


// Enum  ShooterGame.EAresPartyErrorNotificationType
enum class EAresPartyErrorNotificationType : uint8_t
{
    INVALID                                        = 0,
    NONE                                           = 1,
    PREGAME                                        = 2,
    PREGAME                                        = 3,
    PREGAME                                        = 4,
    PREGAME                                        = 5,
    PREGAME                                        = 6,
    PREGAME                                        = 7,
    PREGAME                                        = 8,
    QUEUE                                          = 9,
    EAresPartyErrorNotificationType                = 10

};


// Enum  ShooterGame.EStateTransitionReason
enum class EStateTransitionReason : uint8_t
{
    NONE                                           = 0,
    GAME                                           = 1,
    INVALID                                        = 2,
    EStateTransitionReason                         = 3

};


// Enum  ShooterGame.EAresPartyState
enum class EAresPartyState : uint8_t
{
    DEFAULT                                        = 0,
    CUSTOM                                         = 1,
    CUSTOM                                         = 2,
    MATCHMAKING                                    = 3,
    STARTING                                       = 4,
    LEAVING                                        = 5,
    MATCHMADE                                      = 6,
    SOLO                                           = 7,
    TOURNAMENT                                     = 8,
    TOURNAMENT                                     = 9,
    ROSTER                                         = 10,
    ROSTER                                         = 11,
    TOURNAMENT                                     = 12,
    TOURNAMENT                                     = 13,
    TOURNAMENT                                     = 14,
    INVALID                                        = 15,
    EAresPartyState                                = 16

};


// Enum  ShooterGame.ETeam
enum class ETeam : uint8_t
{
    TEAM                                           = 0,
    TEAM                                           = 1,
    TEAM                                           = 2,
    TEAM                                           = 3,
    TEAM                                           = 4,
    COUNT                                          = 5,
    INVALID                                        = 6,
    ETeam                                          = 7

};


// Enum  ShooterGame.ESoloExperienceType
enum class ESoloExperienceType : uint8_t
{
    NewPlayerExperience                            = 0,
    ShootingRange                                  = 1,
    BotTrainingMatch                               = 2,
    ReplayNewPlayerExperience                      = 3,
    ESoloExperienceType                            = 4

};


// Enum  ShooterGame.EPatchState
enum class EPatchState : uint8_t
{
    Updating                                       = 0,
    OutOfDate                                      = 1,
    UpToDate                                       = 2,
    NotInstalled                                   = 3,
    PendingVerify                                  = 4,
    Unknown                                        = 5,
    EPatchState                                    = 6

};


// Enum  ShooterGame.EPatchPreviewState
enum class EPatchPreviewState : uint8_t
{
    Pending                                        = 0,
    Done                                           = 1,
    Unknown                                        = 2,
    EPatchPreviewState                             = 3

};


// Enum  ShooterGame.EAresPatchNoteType
enum class EAresPatchNoteType : uint8_t
{
    UNKNOWN                                        = 0,
    H1                                             = 1,
    H2                                             = 2,
    H3                                             = 3,
    H4                                             = 4,
    OL                                             = 5,
    UL                                             = 6,
    TextElement                                    = 7,
    INVALID                                        = 8,
    EAresPatchNoteType                             = 9

};


// Enum  ShooterGame.EEndpointState
enum class EEndpointState : uint8_t
{
    Measuring                                      = 0,
    Complete                                       = 1,
    Invalid                                        = 2,
    Count                                          = 2,
    Invalid                                        = 2,
    EEndpointState                                 = 255

};


// Enum  ShooterGame.EEndpointType
enum class EEndpointType : uint8_t
{
    GamePod                                        = 0,
    NetworkEdge                                    = 1,
    Invalid                                        = 2,
    Count                                          = 2,
    Invalid                                        = 2,
    EEndpointType                                  = 255

};


// Enum  ShooterGame.EEncroachCheckFailureMode
enum class EEncroachCheckFailureMode : uint8_t
{
    Reject                                         = 0,
    ProjectToNavmesh                               = 1,
    ProjectToNavmeshAndRecheck                     = 2,
    EEncroachCheckFailureMode                      = 3

};


// Enum  ShooterGame.ENavmeshProjection
enum class ENavmeshProjection : uint8_t
{
    None                                           = 0,
    IfPossible                                     = 1,
    Required                                       = 2,
    ENavmeshProjection                             = 3

};


// Enum  ShooterGame.EPlatformInitErrorReason
enum class EPlatformInitErrorReason : uint8_t
{
    None                                           = 0,
    RiotClientManagerDisabled                      = 1,
    NewUserSignupFailed                            = 2,
    FailedEntitlementGrant                         = 3,
    InvalidDisplayName                             = 4,
    AlreadyInitSessionInvalid                      = 5,
    SessionManagerDeleted                          = 6,
    SessionConnectFail                             = 7,
    RMSDependenciesNotInited                       = 8,
    RSOQueryTokenFail                              = 9,
    RSOManagerDeleted                              = 10,
    RSOSubscriptionFailed                          = 11,
    RSOQueryUserInfoFail                           = 12,
    RSOQueryEntitlementsFail                       = 13,
    RSOEntitlementsSubscriptionFailed              = 14,
    RMSManagerDeleted                              = 15,
    RNetClientFailedProcessInfoQuery               = 16,
    RNetClientDeleted                              = 17,
    RNetEventingClientNotReady                     = 18,
    RNetEventingClientConnectionFail               = 19,
    RNetQueryClientDeleted                         = 20,
    RNetQueryInitFail                              = 21,
    TestAccountsManagerDeleted                     = 22,
    UnableToFindUnusedAccount                      = 23,
    UnexpectedAccountQueryError                    = 24,
    AtlasAccountCreateFailed                       = 25,
    UnableToInitializeGameName                     = 26,
    TestAccountsEntitlementFailed                  = 27,
    ConfigManagerDeleted                           = 28,
    ConfigGetFail                                  = 29,
    PlayerAliasManagerDeleted                      = 30,
    PlayerAliasQueryError                          = 31,
    WeGameQueryFail                                = 32,
    RiotClientProcessTerminated                    = 33,
    RegionLocaleError                              = 34,
    CouldNotFetchDisplayName                       = 35,
    MinimumPlatformInit                            = 36,
    RMSSubscriptionFailed                          = 37,
    PregamePlayerFetchError                        = 38,
    CoreGamePlayerFetchError                       = 39,
    LoadoutFetchError                              = 40,
    ContractsFetchError                            = 41,
    ContractDefinitionsFetchError                  = 42,
    SystemTimedOut                                 = 43,
    VanguardInitFail                               = 44,
    VanguardNeedsReboot                            = 45,
    PlatformDowntime                               = 46,
    AntiAddictionInitFailed                        = 47,
    PlayerLegalShutdown                            = 48,
    ChatInitError                                  = 49,
    VoiceInitError                                 = 50,
    PartyInitFailure                               = 51,
    MMRInitFailure                                 = 52,
    PresenceInitFailure                            = 53,
    ContentInitFailure                             = 54,
    ApplicationRepairManagerInitFailure            = 55,
    LegalInfoInitFailure                           = 56,
    PlayerAffinityInitFailure                      = 57,
    RSOValidationFailure                           = 58,
    LoginQueueFetchTokenFailure                    = 59,
    PatchInitFailure                               = 60,
    LoginQueuePlayerBanned                         = 61,
    NoGamepodsToPingFailure                        = 62,
    ManagerDeleted                                 = 63,
    SessionFetchFailure                            = 64,
    PatchAvailabilityInitFailure                   = 65,
    ContentIndexInitFailure                        = 66,
    ChatFriendMetadataInitFailure                  = 67,
    CapEntitlementsFetchError                      = 68,
    CapWalletsFetchError                           = 69,
    StoreOffersFetchError                          = 70,
    MassRewardsInitFailure                         = 71,
    AccountXPInitFailure                           = 72,
    RosterInitFailure                              = 73,
    RiotClientConfigInitFailure                    = 74,
    SessionServiceLoginRestricted                  = 75,
    TournamentInitFailure                          = 76,
    EULAAcceptanceFailure                          = 77,
    ClientVersionUnsupported                       = 78,
    DailyTicketLoginFailure                        = 79,
    ModifiedClientBan                              = 80,
    RiotGamesApiInitFailure                        = 81,
    LaunchRiotClient                               = 82,
    FavoritesInitFailure                           = 83,
    DailyRewardsRenewFailure                       = 84,
    CNAntiAddictionInitFailed                      = 85,
    RecruitmentProgressFetchFailed                 = 86,
    RecruitmentEventDataFetchFailed                = 87,
    HotfixPatchsieveFailure                        = 88,
    HotfixFileRetrievalFailure                     = 89,
    HotfixApplyFailure                             = 90,
    RiotClientConfigEnvironmentMismatch            = 91,
    FRELoginManagerFailure                         = 92,
    PrivilegedActivityIneligible                   = 93,
    CNACESDKLoadFailure                            = 94,
    Count                                          = 95,
    EPlatformInitErrorReason                       = 96

};


// Enum  ShooterGame.EPlatformErrorComponent
enum class EPlatformErrorComponent : uint8_t
{
    VoiceLeave                                     = 0,
    VoiceJoin                                      = 1,
    VoicePTTPut                                    = 2,
    VoiceSettingsPut                               = 3,
    ChatJoin                                       = 4,
    ChatLeave                                      = 5,
    PlatformFault                                  = 6,
    PlatformInitFailure                            = 7,
    PaymentInitPurchase                            = 8,
    EPlatformErrorComponent                        = 9

};


// Enum  ShooterGame.EPlatformInitializerSystemState
enum class EPlatformInitializerSystemState : uint8_t
{
    Uninitialized                                  = 0,
    Initializing                                   = 1,
    Initialized                                    = 2,
    Failed                                         = 3,
    EPlatformInitializerSystemState                = 4

};


// Enum  ShooterGame.EPlatformInitializerTimeoutOptions
enum class EPlatformInitializerTimeoutOptions : uint8_t
{
    Ignore                                         = 0,
    Enforced                                       = 1,
    EPlatformInitializerTimeoutOptions             = 2

};


// Enum  ShooterGame.EPlatformInitializerSystemImportance
enum class EPlatformInitializerSystemImportance : uint8_t
{
    Optional                                       = 0,
    Required                                       = 1,
    EPlatformInitializerSystemImportance           = 2

};


// Enum  ShooterGame.EAresPlatformInitStatus
enum class EAresPlatformInitStatus : uint8_t
{
    NotStarted                                     = 0,
    Initialized                                    = 1,
    InitFailure                                    = 2,
    Initializing                                   = 3,
    Count                                          = 4,
    EAresPlatformInitStatus                        = 5

};


// Enum  ShooterGame.ESessionCXNState
enum class ESessionCXNState : uint8_t
{
    CONNECTED                                      = 0,
    EXPIRED                                        = 1,
    CLOSED                                         = 2,
    COUNT                                          = 3,
    ESessionCXNState                               = 4

};


// Enum  ShooterGame.ESessionLoopState
enum class ESessionLoopState : uint8_t
{
    MENUS                                          = 0,
    PREGAME                                        = 1,
    INGAME                                         = 2,
    INVALID                                        = 3,
    COUNT                                          = 4,
    ESessionLoopState                              = 5

};


// Enum  ShooterGame.EPlayerCardImageType
enum class EPlayerCardImageType : uint8_t
{
    Small                                          = 0,
    Wide                                           = 1,
    Large                                          = 2,
    EPlayerCardImageType                           = 3

};


// Enum  ShooterGame.EPlayerDebugFlags
enum class EPlayerDebugFlags : uint8_t
{
    None                                           = 0,
    TrackDroppedShots                              = 1,
    TrackMoveData                                  = 2,
    TrackInputEvents                               = 4,
    PreventAwayPenalty                             = 8,
    EPlayerDebugFlags                              = 9,
    EPlayerDebugFlags                              = 10

};


// Enum  ShooterGame.EPlayerPerfMetricUnitType
enum class EPlayerPerfMetricUnitType : uint8_t
{
    Bytes                                          = 0,
    Megabytes                                      = 1,
    UnitlessIntegral                               = 2,
    Milliseconds                                   = 3,
    Percentage                                     = 4,
    Degrees                                        = 5,
    EnumCount                                      = 6,
    EPlayerPerfMetricUnitType                      = 7

};


// Enum  ShooterGame.EPlayerPerfMetricCategory
enum class EPlayerPerfMetricCategory : uint8_t
{
    TotalFrameTime                                 = 0,
    GameFrameTime                                  = 1,
    RenderFrameTime                                = 2,
    FrameRate                                      = 3,
    ServerFrameRate                                = 4,
    AvailablePhysicalMemory                        = 5,
    UsedPhysicalMemory                             = 6,
    NetworkRtt                                     = 7,
    PacketsLostTotal                               = 8,
    PacketsLostIncoming                            = 9,
    PacketsLostOutgoing                            = 10,
    ReceivedPackets                                = 11,
    SentPackets                                    = 12,
    PacketLossPercentageTotal                      = 13,
    PacketLossPercentageIncoming                   = 14,
    PacketLossPercentageOutgoing                   = 15,
    RHIFrameTime                                   = 16,
    IdleFrameTime                                  = 17,
    InputLatencyCpuPlusGpu                         = 18,
    InputLatencyCpu                                = 19,
    InputLatencyGpu                                = 20,
    RenderWait                                     = 21,
    GpuRenderFrameTime                             = 22,
    RHIPresentTime                                 = 23,
    RemoteInterpDelayMs                            = 24,
    QueuedRemoteMoveCount                          = 25,
    ConsecutiveForwardPredictionTicks              = 26,
    UploadedData                                   = 27,
    DownloadedData                                 = 28,
    TotalTransferredData                           = 29,
    InPacketSize                                   = 30,
    OutPacketSize                                  = 31,
    MoveCorrectionDistance                         = 32,
    MoveTimelineShiftMs                            = 33,
    ReceivedEquippableCorrection                   = 34,
    OutgoingInputQueueLength                       = 35,
    OutgoingMoveQueueLength                        = 36,
    ClientIncomingMoveProcessingDelay              = 37,
    ServerIncomingMoveProcessingDelay              = 38,
    ATB                                            = 39,
    FrameCount                                     = 40,
    NetworkJitter                                  = 41,
    FullEndToEndLatency                            = 42,
    FiringError                                    = 43,
    RGILatencyMarkers                              = 44,
    RGILatencyMarkers                              = 45,
    RGILatencyMarkers                              = 46,
    EnumCount                                      = 47,
    EPlayerPerfMetricCategory                      = 48

};


// Enum  ShooterGame.EPlayerPerfStatField
enum class EPlayerPerfStatField : uint8_t
{
    CurrentTickMaximum                             = 0,
    CurrentTickMinimum                             = 1,
    CurrentTickAverage                             = 2,
    CurrentTickSum                                 = 3,
    WorldDurationSum                               = 4,
    MovingAverage                                  = 5,
    SumPerSecond                                   = 6,
    ExponentialSmooth                              = 7,
    EnumCount                                      = 8,
    EPlayerPerfStatField                           = 9

};


// Enum  ShooterGame.EGraphDisplayType
enum class EGraphDisplayType : uint8_t
{
    Line                                           = 0,
    Bar                                            = 1,
    EnumCount                                      = 2,
    EGraphDisplayType                              = 3

};


// Enum  ShooterGame.EGraphMetricTextPlacement
enum class EGraphMetricTextPlacement : uint8_t
{
    Top                                            = 0,
    Middle                                         = 1,
    Bottom                                         = 2,
    EnumCount                                      = 3,
    EGraphMetricTextPlacement                      = 4

};


// Enum  ShooterGame.EPlayerFeedbackSurveySource
enum class EPlayerFeedbackSurveySource : uint8_t
{
    UNKNOWN                                        = 0,
    END                                            = 1,
    STORE                                          = 2,
    LOGIN                                          = 3,
    TUTORIAL                                       = 4,
    COUNT                                          = 5,
    EPlayerFeedbackSurveySource                    = 6

};


// Enum  ShooterGame.EPlayerFeedbackToolSurveyType
enum class EPlayerFeedbackToolSurveyType : uint8_t
{
    ExternalLink                                   = 0,
    HostedBrowser                                  = 1,
    EPlayerFeedbackToolSurveyType                  = 2

};


// Enum  ShooterGame.EFeedbackMessageType
enum class EFeedbackMessageType : uint8_t
{
    Invalid                                        = 0,
    System                                         = 1,
    Model                                          = 2,
    EFeedbackMessageType                           = 3

};


// Enum  ShooterGame.EPlayerReportReason
enum class EPlayerReportReason : uint8_t
{
    COMMS                                          = 0,
    COMMS                                          = 1,
    CHEATING                                       = 2,
    AFK                                            = 3,
    OFFENSIVE                                      = 4,
    SABOTAGING                                     = 5,
    DISRESPECTFUL                                  = 6,
    THREATS                                        = 7,
    BOTTING                                        = 8,
    ABUSING                                        = 9,
    Invalid                                        = 10,
    Count                                          = 11,
    EPlayerReportReason                            = 12

};


// Enum  ShooterGame.EPregameTeamID
enum class EPregameTeamID : uint8_t
{
    Blue                                           = 0,
    Red                                            = 1,
    Neutral                                        = 2,
    Invalid                                        = 3,
    EPregameTeamID                                 = 4

};


// Enum  ShooterGame.EPremierRestrictionsState
enum class EPremierRestrictionsState : uint8_t
{
    Eligible                                       = 0,
    Ineligible                                     = 1,
    Disqualified                                   = 2,
    Count                                          = 3,
    Invalid                                        = 4,
    EPremierRestrictionsState                      = 5

};


// Enum  ShooterGame.EPremierEligibilityState
enum class EPremierEligibilityState : uint8_t
{
    Eligible                                       = 0,
    IneligibleRestrictions                         = 1,
    IneligibleAVS                                  = 2,
    IneligibleRanked                               = 3,
    Count                                          = 4,
    Invalid                                        = 5,
    EPremierEligibilityState                       = 6

};


// Enum  ShooterGame.ERosterMemberChangeRoleErrorType
enum class ERosterMemberChangeRoleErrorType : uint8_t
{
    MaxCaptainLimitReached                         = 0,
    Default                                        = 1,
    Count                                          = 2,
    Invalid                                        = 3,
    ERosterMemberChangeRoleErrorType               = 4

};


// Enum  ShooterGame.EPremierRosterTextChatHandleState
enum class EPremierRosterTextChatHandleState : uint8_t
{
    Initial                                        = 0,
    Registering                                    = 1,
    RegisteringCancelling                          = 2,
    Registered                                     = 3,
    Unregistered                                   = 4,
    Count                                          = 5,
    Invalid                                        = 6,
    EPremierRosterTextChatHandleState              = 7

};


// Enum  ShooterGame.EAresPartyTournamentStartAvailability
enum class EAresPartyTournamentStartAvailability : uint8_t
{
    Unavailable                                    = 0,
    Unavailable                                    = 1,
    Unavailable                                    = 2,
    Unavailable                                    = 3,
    Unavailable                                    = 4,
    Unavailable                                    = 5,
    Unavailable                                    = 6,
    Unavailable                                    = 7,
    Unavailable                                    = 8,
    Unavailable                                    = 9,
    Unavailable                                    = 10,
    Available                                      = 11,
    Available                                      = 12,
    TournamentStarted                              = 13,
    EAresPartyTournamentStartAvailability          = 14

};


// Enum  ShooterGame.EPremierEventMapSelectionStrategy
enum class EPremierEventMapSelectionStrategy : uint8_t
{
    INVALID                                        = 0,
    RANDOM                                         = 1,
    PICKBAN                                        = 2,
    Count                                          = 3,
    EPremierEventMapSelectionStrategy              = 4

};


// Enum  ShooterGame.EPremierEventDayOfWeek
enum class EPremierEventDayOfWeek : uint8_t
{
    INVALID                                        = 0,
    MONDAY                                         = 1,
    TUESDAY                                        = 2,
    WEDNESDAY                                      = 3,
    THURSDAY                                       = 4,
    FRIDAY                                         = 5,
    SATURDAY                                       = 6,
    SUNDAY                                         = 7,
    Count                                          = 8,
    EPremierEventDayOfWeek                         = 9

};


// Enum  ShooterGame.EPremierDivisionGroup
enum class EPremierDivisionGroup : uint8_t
{
    INVALID                                        = 0,
    UNSEEDED                                       = 1,
    OPEN                                           = 2,
    INTERMEDIATE                                   = 3,
    ADVANCED                                       = 4,
    ELITE                                          = 5,
    CONTENDER                                      = 6,
    INVITE                                         = 7,
    Count                                          = 8,
    EPremierDivisionGroup                          = 9

};


// Enum  ShooterGame.EDivisionPromotionThreshold
enum class EDivisionPromotionThreshold : uint8_t
{
    INVALID                                        = 0,
    LEADERBOARD                                    = 1,
    PLAYOFF                                        = 2,
    NONE                                           = 3,
    Count                                          = 4,
    EDivisionPromotionThreshold                    = 5

};


// Enum  ShooterGame.EDivisionPlayoffThreshold
enum class EDivisionPlayoffThreshold : uint8_t
{
    INVALID                                        = 0,
    POINTS                                         = 1,
    LEADERBOARD                                    = 2,
    Count                                          = 3,
    EDivisionPlayoffThreshold                      = 4

};


// Enum  ShooterGame.EPremierMatchmakingStrategy
enum class EPremierMatchmakingStrategy : uint8_t
{
    INVALID                                        = 0,
    PATIENT                                        = 1,
    EAGER                                          = 2,
    Count                                          = 3,
    EPremierMatchmakingStrategy                    = 4

};


// Enum  ShooterGame.EDivisionGroup
enum class EDivisionGroup : uint8_t
{
    INVALID                                        = 0,
    UNSEEDED                                       = 1,
    OPEN                                           = 2,
    INTERMEDIATE                                   = 3,
    ADVANCED                                       = 4,
    ELITE                                          = 5,
    CONTENDER                                      = 6,
    INVITE                                         = 7,
    Count                                          = 8,
    EDivisionGroup                                 = 9

};


// Enum  ShooterGame.EChatPresenceProduct
enum class EChatPresenceProduct : uint8_t
{
    ARES                                           = 0,
    LEAGUE                                         = 1,
    BACON                                          = 2,
    KEYSTONE                                       = 3,
    WILDRIFT                                       = 4,
    TFT                                            = 5,
    LION                                           = 6,
    RIOT                                           = 7,
    UNKNOWN                                        = 8,
    NONE                                           = 9,
    EChatPresenceProduct                           = 10

};


// Enum  ShooterGame.EChatPresenceState
enum class EChatPresenceState : uint8_t
{
    CHAT                                           = 0,
    AWAY                                           = 1,
    DND                                            = 2,
    OFFLINE                                        = 3,
    UNKNOWN                                        = 4,
    EChatPresenceState                             = 5

};


// Enum  ShooterGame.ENumericProgressCalculationMode
enum class ENumericProgressCalculationMode : uint8_t
{
    CompletedCount                                 = 0,
    SumProgress                                    = 1,
    SumProgressValidOnly                           = 2,
    ENumericProgressCalculationMode                = 3

};


// Enum  ShooterGame.EChildActorIgnoreSetting
enum class EChildActorIgnoreSetting : uint8_t
{
    AutoAddIgnoredActorsChildren                   = 0,
    DoNothingAutomatically                         = 1,
    EChildActorIgnoreSetting                       = 2

};


// Enum  ShooterGame.EImpactEffectsOption
enum class EImpactEffectsOption : uint8_t
{
    EnableImpactEffects                            = 0,
    DisableImpactEffects                           = 1,
    EImpactEffectsOption                           = 2

};


// Enum  ShooterGame.ETracerOption
enum class ETracerOption : uint8_t
{
    EnableTracers                                  = 0,
    DisableTracers                                 = 1,
    ETracerOption                                  = 2

};


// Enum  ShooterGame.EProjectileStopAction
enum class EProjectileStopAction : uint8_t
{
    Destroy                                        = 0,
    Idle                                           = 1,
    DelayedDestroy                                 = 2,
    Count                                          = 3,
    EProjectileStopAction                          = 4

};


// Enum  ShooterGame.EProjectileSimulation
enum class EProjectileSimulation : uint8_t
{
    Owner                                          = 0,
    Server                                         = 1,
    OwnerAndServer                                 = 2,
    AllMachines                                    = 3,
    Count                                          = 4,
    EProjectileSimulation                          = 5

};


// Enum  ShooterGame.EProjectileCollisionProcessInstruction
enum class EProjectileCollisionProcessInstruction : uint8_t
{
    ContinueToNextComponent                        = 0,
    StopProcessingCollision                        = 1,
    StopProjectile                                 = 2,
    EProjectileCollisionProcessInstruction         = 3

};


// Enum  ShooterGame.EProjectilePerspective
enum class EProjectilePerspective : uint8_t
{
    FirstPerson                                    = 0,
    ThirdPerson                                    = 1,
    Count                                          = 2,
    EProjectilePerspective                         = 3

};


// Enum  ShooterGame.EPurchaseType
enum class EPurchaseType : uint8_t
{
    PurchaseType                                   = 0,
    PurchaseType                                   = 1,
    PurchaseType                                   = 2,
    PurchaseType                                   = 3,
    PurchaseType                                   = 4,
    PurchaseType                                   = 5,
    PurchaseType                                   = 6,
    PurchaseType                                   = 7,
    PurchaseType                                   = 8,
    PurchaseType                                   = 9,
    PurchaseType                                   = 10,
    PurchaseType                                   = 11,
    PurchaseType                                   = 12,
    Count                                          = 13,
    EPurchaseType                                  = 14

};


// Enum  ShooterGame.EPurchaseSource
enum class EPurchaseSource : uint8_t
{
    UNKNOWN                                        = 0,
    ROTATION                                       = 1,
    FEATURED                                       = 2,
    BUNDLE                                         = 3,
    BUNDLE                                         = 4,
    REWARD                                         = 5,
    CONTRACT                                       = 6,
    CURRENCY                                       = 7,
    ITEM                                           = 8,
    BATTLEPASS                                     = 9,
    BATTLEPASS                                     = 10,
    AGENT                                          = 11,
    BONUS                                          = 12,
    ITEM                                           = 13,
    JUICE                                          = 14,
    JUICE                                          = 15,
    JUICE                                          = 16,
    JUICE                                          = 17,
    ACCESSORY                                      = 18,
    AGENT                                          = 19,
    COUNT                                          = 20,
    EPurchaseSource                                = 21

};


// Enum  ShooterGame.ERadialTargetSourcePoint
enum class ERadialTargetSourcePoint : uint8_t
{
    PawnLocation                                   = 0,
    CameraLocation                                 = 1,
    TransformContext                               = 2,
    ActorContext                                   = 3,
    Count                                          = 4,
    ERadialTargetSourcePoint                       = 5

};


// Enum  ShooterGame.ERateLimiterMethod
enum class ERateLimiterMethod : uint8_t
{
    Cooldown                                       = 0,
    RollingWindow                                  = 1,
    RollingWindowExtendedCooldown                  = 2,
    Count                                          = 3,
    ERateLimiterMethod                             = 4

};


// Enum  ShooterGame.EMagazineEjectableBehavior
enum class EMagazineEjectableBehavior : uint8_t
{
    None                                           = 0,
    EjectOnLoad                                    = 1,
    EjectOnAnimationComplete                       = 2,
    EMagazineEjectableBehavior                     = 3

};


// Enum  ShooterGame.ECanReloadAmmoCheckOption
enum class ECanReloadAmmoCheckOption : uint8_t
{
    IncludeAmmoCheck                               = 0,
    ExcludeAmmoCheck                               = 1,
    Count                                          = 2,
    ECanReloadAmmoCheckOption                      = 3

};


// Enum  ShooterGame.ERemoteMovementScenario
enum class ERemoteMovementScenario : uint8_t
{
    Spectating                                     = 0,
    Playing                                        = 1,
    ERemoteMovementScenario                        = 2

};


// Enum  ShooterGame.EReplicationSleepState
enum class EReplicationSleepState : uint8_t
{
    Awake                                          = 0,
    GoingToSleep                                   = 1,
    Asleep                                         = 2,
    Count                                          = 3,
    EReplicationSleepState                         = 4

};


// Enum  ShooterGame.EReplicationSleepWhen
enum class EReplicationSleepWhen : uint8_t
{
    Never                                          = 0,
    Timer                                          = 1,
    OnRequest                                      = 2,
    Count                                          = 3,
    EReplicationSleepWhen                          = 4

};


// Enum  ShooterGame.EEquipType
enum class EEquipType : uint8_t
{
    Equip                                          = 0,
    Unequip                                        = 1,
    AutoEquip                                      = 2,
    Count                                          = 3,
    EEquipType                                     = 4

};


// Enum  ShooterGame.EActorCombination
enum class EActorCombination : uint8_t
{
    Any                                            = 0,
    All                                            = 1,
    Count                                          = 2,
    EActorCombination                              = 3

};


// Enum  ShooterGame.EActorEvent
enum class EActorEvent : uint8_t
{
    None                                           = 0,
    Destroyed                                      = 1,
    Killed                                         = 2,
    Count                                          = 3,
    EActorEvent                                    = 4

};


// Enum  ShooterGame.ERMSNotifyEffectBehavior
enum class ERMSNotifyEffectBehavior : uint8_t
{
    CommsAbuse                                     = 0,
    Count                                          = 1,
    ERMSNotifyEffectBehavior                       = 2

};


// Enum  ShooterGame.ERMSNotifyEffectIntervention
enum class ERMSNotifyEffectIntervention : uint8_t
{
    CommsMute10                                    = 0,
    CommsMute20                                    = 1,
    CommsMuteMatch                                 = 2,
    Count                                          = 3,
    ERMSNotifyEffectIntervention                   = 4

};


// Enum  ShooterGame.ERMSNotifyEffectRecipient
enum class ERMSNotifyEffectRecipient : uint8_t
{
    Self                                           = 0,
    Teammates                                      = 1,
    Opponents                                      = 2,
    Count                                          = 3,
    ERMSNotifyEffectRecipient                      = 4

};


// Enum  ShooterGame.ERMSNotifyEffectPenaltyEffectState
enum class ERMSNotifyEffectPenaltyEffectState : uint8_t
{
    PenaltyApplied                                 = 0,
    PenaltyReverted                                = 1,
    PenaltyExpired                                 = 2,
    Count                                          = 3,
    ERMSNotifyEffectPenaltyEffectState             = 4

};


// Enum  ShooterGame.EInfractionType
enum class EInfractionType : uint8_t
{
    Afk                                            = 0,
    FriendlyFire                                   = 1,
    TextAbuse                                      = 2,
    VoiceAbuse                                     = 3,
    Count                                          = 4,
    EInfractionType                                = 5

};


// Enum  ShooterGame.ERewindState
enum class ERewindState : uint8_t
{
    NotRewound                                     = 0,
    Rewound                                        = 1,
    ERewindState                                   = 2

};


// Enum  ShooterGame.ERiotClientStatus
enum class ERiotClientStatus : uint8_t
{
    Restarting                                     = 0,
    Disconnected                                   = 1,
    WaitingForPlugins                              = 2,
    CheckingRegionLocale                           = 3,
    WaitingForLogin                                = 4,
    WaitingForChat                                 = 5,
    RefreshingUserInfo                             = 6,
    WaitingForRMSSession                           = 7,
    DelayForSession                                = 8,
    Ready                                          = 9,
    PendingQueryResult                             = 10,
    Error                                          = 11,
    Count                                          = 12,
    ERiotClientStatus                              = 13

};


// Enum  ShooterGame.ERMSConnectionState
enum class ERMSConnectionState : uint8_t
{
    Connecting                                     = 0,
    Connected                                      = 1,
    Disconnecting                                  = 2,
    Disconnected                                   = 3,
    SwitchingServers                               = 4,
    Unknown                                        = 5,
    ERMSConnectionState                            = 6

};


// Enum  ShooterGame.ERNetProcessStatus
enum class ERNetProcessStatus : uint8_t
{
    Uninitialized                                  = 0,
    Alive                                          = 1,
    Terminated                                     = 2,
    ERNetProcessStatus                             = 3

};


// Enum  ShooterGame.ERNetConnectionStatus
enum class ERNetConnectionStatus : uint8_t
{
    Uninitialized                                  = 0,
    Disconnecting                                  = 1,
    Disconnected                                   = 2,
    Connecting                                     = 3,
    Connected                                      = 4,
    Count                                          = 5,
    ERNetConnectionStatus                          = 6

};


// Enum  ShooterGame.ERNetEventType
enum class ERNetEventType : uint8_t
{
    Create                                         = 0,
    Update                                         = 1,
    Delete                                         = 2,
    Invalid                                        = 3,
    ERNetEventType                                 = 4

};


// Enum  ShooterGame.ERiotClientHeartbeatPhase
enum class ERiotClientHeartbeatPhase : uint8_t
{
    None                                           = 0,
    Idle                                           = 1,
    Gameplay                                       = 2,
    Pending                                        = 3,
    ERiotClientHeartbeatPhase                      = 4

};


// Enum  ShooterGame.EChannelMuteReason
enum class EChannelMuteReason : uint8_t
{
    None                                           = 0,
    ClutchMute                                     = 1,
    MuteForMatchDuration                           = 2,
    LoadingScreen                                  = 4,
    EChannelMuteReason                             = 5

};


// Enum  ShooterGame.EVoiceSpeakingChannelSettingValue
enum class EVoiceSpeakingChannelSettingValue : uint8_t
{
    TeamChat                                       = 0,
    PartyChat                                      = 1,
    Count                                          = 2,
    EVoiceSpeakingChannelSettingValue              = 3

};


// Enum  ShooterGame.ETournamentRound
enum class ETournamentRound : uint8_t
{
    Groups                                         = 0,
    Semifinals                                     = 1,
    Finals                                         = 2,
    Count                                          = 3,
    Invalid                                        = 254,
    ETournamentRound                               = 255

};


// Enum  ShooterGame.EGameplayPersistenceBehavior
enum class EGameplayPersistenceBehavior : uint8_t
{
    DoNothing                                      = 0,
    Destroy                                        = 1,
    DestroyWithDamage                              = 2,
    CosmeticAwareDestroy                           = 3,
    EGameplayPersistenceBehavior                   = 4

};


// Enum  ShooterGame.ERoundPersistenceBehavior
enum class ERoundPersistenceBehavior : uint8_t
{
    DoNothing                                      = 0,
    Destroy                                        = 1,
    Persist                                        = 2,
    PersistIfOwnerAlive                            = 3,
    ERoundPersistenceBehavior                      = 4

};


// Enum  ShooterGame.EAresMinimapLayer
enum class EAresMinimapLayer : uint8_t
{
    AML                                            = 0,
    AML                                            = 1,
    AML                                            = 2,
    AML                                            = 3,
    AML                                            = 4,
    AML                                            = 5,
    AML                                            = 6,
    AML                                            = 7,
    AML                                            = 8,
    AML                                            = 9,
    AML                                            = 10,
    AML                                            = 11,
    AML                                            = 12

};


// Enum  ShooterGame.EAresMinimapRotationSpace
enum class EAresMinimapRotationSpace : uint8_t
{
    AMRS                                           = 0,
    AMRS                                           = 1,
    AMRS                                           = 2,
    AMRS                                           = 3,
    AMRS                                           = 4,
    AMRS                                           = 5

};


// Enum  ShooterGame.EAresMinimapSizeSpace
enum class EAresMinimapSizeSpace : uint8_t
{
    AMSS                                           = 0,
    AMSS                                           = 1,
    AMSS                                           = 2,
    AMSS                                           = 3,
    AMSS                                           = 4,
    AMSS                                           = 5

};


// Enum  ShooterGame.EAresMinimapPositionSpace
enum class EAresMinimapPositionSpace : uint8_t
{
    AMPS                                           = 0,
    AMPS                                           = 1,
    AMPS                                           = 2,
    AMPS                                           = 3,
    AMSS                                           = 4,
    EAresMinimapPositionSpace                      = 5

};


// Enum  ShooterGame.EAresSeasonType
enum class EAresSeasonType : uint8_t
{
    Episode                                        = 0,
    Act                                            = 1,
    Invalid                                        = 2,
    Count                                          = 3,
    EAresSeasonType                                = 4

};


// Enum  ShooterGame.ENPECheckpointStatus
enum class ENPECheckpointStatus : uint8_t
{
    Started                                        = 0,
    Completed                                      = 1,
    Abandoned                                      = 2,
    ENPECheckpointStatus                           = 3

};


// Enum  ShooterGame.EPlayerTelemetryDisconnectOutcome
enum class EPlayerTelemetryDisconnectOutcome : uint8_t
{
    Reconnected                                    = 0,
    DidNotReturn                                   = 1,
    Count                                          = 2,
    EPlayerTelemetryDisconnectOutcome              = 3

};


// Enum  ShooterGame.EAbilityUsageLocationType
enum class EAbilityUsageLocationType : uint8_t
{
    CastLocation                                   = 0,
    WallSegmentsSage                               = 1,
    ProjectileStopLocations                        = 2,
    YoruCloneStopLocation                          = 3,
    CastAndTargetLocations                         = 4,
    EAbilityUsageLocationType                      = 5

};


// Enum  ShooterGame.EAbilityUsageEventType
enum class EAbilityUsageEventType : uint8_t
{
    CombatReport                                   = 0,
    Telemetry                                      = 1,
    Count                                          = 2,
    EAbilityUsageEventType                         = 3

};


// Enum  ShooterGame.ERewindTimestampSource
enum class ERewindTimestampSource : uint8_t
{
    Equippable                                     = 0,
    Movement                                       = 1,
    Manual                                         = 2,
    ERewindTimestampSource                         = 3

};


// Enum  ShooterGame.EThrottleOutputPins
enum class EThrottleOutputPins : uint8_t
{
    Allowed                                        = 0,
    Throttled                                      = 1,
    EThrottleOutputPins                            = 2

};


// Enum  ShooterGame.EAresActorVisibilityTarget
enum class EAresActorVisibilityTarget : uint8_t
{
    CenterMass                                     = 0,
    Head                                           = 1,
    Feet                                           = 2,
    LeftEdge                                       = 3,
    RightEdge                                      = 4,
    LookVector                                     = 5,
    EAresActorVisibilityTarget                     = 6

};


// Enum  ShooterGame.EAresConeAngleCheckType
enum class EAresConeAngleCheckType : uint8_t
{
    TwoDimensional                                 = 0,
    ThreeDimensional                               = 1,
    EAresConeAngleCheckType                        = 2

};


// Enum  ShooterGame.EAresProjectileSearchType
enum class EAresProjectileSearchType : uint8_t
{
    DontFindProjectiles                            = 0,
    FindProjectiles                                = 1,
    EAresProjectileSearchType                      = 2

};


// Enum  ShooterGame.EAresGameObjectSearchType
enum class EAresGameObjectSearchType : uint8_t
{
    DontFindGameObjects                            = 0,
    FindGameObjects                                = 1,
    EAresGameObjectSearchType                      = 2

};


// Enum  ShooterGame.EAresShooterCharacterSearchType
enum class EAresShooterCharacterSearchType : uint8_t
{
    DontFindShooterCharacters                      = 0,
    FindShooterCharacters                          = 1,
    EAresShooterCharacterSearchType                = 2

};


// Enum  ShooterGame.EAresLineOfSightCheckType
enum class EAresLineOfSightCheckType : uint8_t
{
    NoLineOfSightCheck                             = 0,
    RequireLineOfSight                             = 1,
    RequireReverseLineOfSight                      = 2,
    EAresLineOfSightCheckType                      = 3

};


// Enum  ShooterGame.EAresRadialCheckType
enum class EAresRadialCheckType : uint8_t
{
    SimpleRangeCheck                               = 0,
    SimpleRangeCheck2D                             = 1,
    CollisionRangeCheck                            = 2,
    Count                                          = 3,
    EAresRadialCheckType                           = 4

};


// Enum  ShooterGame.ECoachMessageType
enum class ECoachMessageType : uint8_t
{
    Pregame                                        = 0,
    InGame                                         = 1,
    ECoachMessageType                              = 2

};


// Enum  ShooterGame.ERevealType
enum class ERevealType : uint8_t
{
    RevealBySight                                  = 0,
    RevealByHearing                                = 1,
    ERevealType                                    = 2,
    ERevealType                                    = 3

};


// Enum  ShooterGame.EShooterCharacterDebugCameraMode
enum class EShooterCharacterDebugCameraMode : uint8_t
{
    None                                           = 0,
    ThirdPersonDebugCamera                         = 1,
    ThirdPersonDebugCameraWithFirstPersonMesh      = 2,
    Count                                          = 3,
    EShooterCharacterDebugCameraMode               = 4

};


// Enum  ShooterGame.EShooterCharacterCameraState
enum class EShooterCharacterCameraState : uint8_t
{
    FollowRecoilCamera                             = 0,
    CustomCamera                                   = 1,
    DeathCamera                                    = 2,
    InvalidViewTarget                              = 3,
    Count                                          = 4,
    EShooterCharacterCameraState                   = 5

};


// Enum  ShooterGame.EAresDeathCamFocusPoint
enum class EAresDeathCamFocusPoint : uint8_t
{
    Body                                           = 0,
    Killer                                         = 1,
    EAresDeathCamFocusPoint                        = 2

};


// Enum  ShooterGame.EPersistInventoryMode
enum class EPersistInventoryMode : uint8_t
{
    PersistRoundPersistentPurchasables             = 0,
    PersistAllPurchasables                         = 1,
    PersistInventoryMode                           = 2,
    EPersistInventoryMode                          = 3

};


// Enum  ShooterGame.EDebugCharacterCapsule
enum class EDebugCharacterCapsule : uint8_t
{
    None                                           = 0,
    TP                                             = 1,
    TP                                             = 2,
    Count                                          = 3,
    EDebugCharacterCapsule                         = 4

};


// Enum  ShooterGame.DebugTeleportMode
enum class DebugTeleportMode : uint8_t
{
    Nearest                                        = 0,
    NearestFriend                                  = 1,
    NearestEnemy                                   = 2,
    Location                                       = 3,
    DebugTeleportMode                              = 4

};


// Enum  ShooterGame.EHitRegDiscrepancyType
enum class EHitRegDiscrepancyType : uint8_t
{
    NoDiscrepancy                                  = 0,
    CharactersHit                                  = 1,
    BonesHit                                       = 2,
    FiringLocation                                 = 3,
    FiringDirection                                = 4,
    InitialImpactLocation                          = 5,
    Count                                          = 6,
    Any                                            = 253,
    Invalid                                        = 254,
    EHitRegDiscrepancyType                         = 255

};


// Enum  ShooterGame.EMovementTimingType
enum class EMovementTimingType : uint8_t
{
    None                                           = 0,
    Move                                           = 1,
    Interpolation                                  = 2,
    ForwardPrediction                              = 3,
    Count                                          = 4,
    Green                                          = 2,
    EMovementTimingType                            = 5

};


// Enum  ShooterGame.EAresMovementDirections
enum class EAresMovementDirections : uint8_t
{
    Forward                                        = 0,
    ForwardStrafe                                  = 1,
    Strafe                                         = 2,
    BackwardStrafe                                 = 3,
    Backward                                       = 4,
    None                                           = 5,
    Count                                          = 6,
    EAresMovementDirections                        = 7

};


// Enum  ShooterGame.EAresMovementCardinalDirections
enum class EAresMovementCardinalDirections : uint8_t
{
    Forward                                        = 0,
    Backward                                       = 1,
    Strafe                                         = 2,
    Count                                          = 3,
    EAresMovementCardinalDirections                = 4

};


// Enum  ShooterGame.EDebugVTSHeartbeatQueues
enum class EDebugVTSHeartbeatQueues : uint8_t
{
    None                                           = 0,
    RemoteClients                                  = 1,
    AutonomousOnServer                             = 2,
    Count                                          = 3,
    EDebugVTSHeartbeatQueues                       = 4

};


// Enum  ShooterGame.EDebugMoveHistoryQueues
enum class EDebugMoveHistoryQueues : uint8_t
{
    None                                           = 0,
    RemoteClients                                  = 1,
    AutonomousOnServer                             = 2,
    Count                                          = 3,
    EDebugMoveHistoryQueues                        = 4

};


// Enum  ShooterGame.ENetMoveMode
enum class ENetMoveMode : uint8_t
{
    PlaybackClientMove                             = 0,
    ForwardPredict                                 = 1,
    Count                                          = 2,
    ENetMoveMode                                   = 3

};


// Enum  ShooterGame.EAresHitSoundPlayType
enum class EAresHitSoundPlayType : uint8_t
{
    AlwaysPlayHitSound                             = 0,
    NeverPlayHitSound                              = 1,
    Count                                          = 2,
    EAresHitSoundPlayType                          = 3

};


// Enum  ShooterGame.EAresHitIndicatorDisplayType
enum class EAresHitIndicatorDisplayType : uint8_t
{
    AlwaysShowHitIndicator                         = 0,
    NeverShowHitIndicator                          = 1,
    Count                                          = 2,
    EAresHitIndicatorDisplayType                   = 3

};


// Enum  ShooterGame.EAresDamageAnimationCategory
enum class EAresDamageAnimationCategory : uint8_t
{
    DamageAnimation                                = 0,
    DamageAnimation                                = 1,
    DamageAnimation                                = 254,
    EAresDamageAnimationCategory                   = 255

};


// Enum  ShooterGame.EAresDamageIndicationType
enum class EAresDamageIndicationType : uint8_t
{
    PrioritizeInstigator                           = 0,
    PrioritizeDamageCauser                         = 1,
    EAresDamageIndicationType                      = 2

};


// Enum  ShooterGame.EAresDamageCategory
enum class EAresDamageCategory : uint8_t
{
    DamageCategory                                 = 0,
    DamageCategory                                 = 1,
    DamageCategory                                 = 2,
    DamageCategory                                 = 3,
    DamageCategory                                 = 4,
    DamageCategory                                 = 254,
    EAresDamageCategory                            = 255

};


// Enum  ShooterGame.EFrontendUIGlobalsScreenType
enum class EFrontendUIGlobalsScreenType : uint8_t
{
    MainMenu                                       = 0,
    Pregame                                        = 1,
    Welcome                                        = 2,
    Count                                          = 3,
    EFrontendUIGlobalsScreenType                   = 4

};


// Enum  ShooterGame.EUIGlobalsScreenType
enum class EUIGlobalsScreenType : uint8_t
{
    SettingsScreen                                 = 0,
    ExitGameScreen                                 = 1,
    Count                                          = 2,
    EUIGlobalsScreenType                           = 3

};


// Enum  ShooterGame.EHUDGlobalsScreenType
enum class EHUDGlobalsScreenType : uint8_t
{
    Count                                          = 0,
    EHUDGlobalsScreenType                          = 1

};


// Enum  ShooterGame.EBlockedSpawnPointBehavior
enum class EBlockedSpawnPointBehavior : uint8_t
{
    Discard                                        = 0,
    Include                                        = 1,
    AddToListEnd                                   = 2,
    EBlockedSpawnPointBehavior                     = 3

};


// Enum  ShooterGame.EGameModeSublevelKey
enum class EGameModeSublevelKey : uint8_t
{
    None                                           = 0,
    BombMode                                       = 1,
    ShootingRange                                  = 2,
    Tutorial                                       = 3,
    AltMode1                                       = 4,
    AltMode2                                       = 5,
    AltMode3                                       = 6,
    AltMode4                                       = 7,
    AltMode5                                       = 8,
    AltMode6                                       = 9,
    AltMode7                                       = 10,
    AltMode8                                       = 11,
    AltMode9                                       = 12,
    AltMode10                                      = 13,
    AltMode11                                      = 14,
    AltMode12                                      = 15,
    AltMode13                                      = 16,
    AltMode14                                      = 17,
    AltMode15                                      = 18,
    DynamicSpawnPoints                             = 19,
    TeamSpawnPoints                                = 20,
    StandardGeoAndLighting                         = 21,
    Snowball                                       = 22,
    BotsEnabled                                    = 23,
    Count                                          = 24,
    EGameModeSublevelKey                           = 25

};


// Enum  ShooterGame.ESpawnPointAllowedInfo
enum class ESpawnPointAllowedInfo : uint8_t
{
    None                                           = 0,
    Allowed                                        = 1,
    Disabled                                       = 2,
    PendingKill                                    = 3,
    NotAlly                                        = 4,
    IncorrectSpawnSet                              = 5,
    InvalidPoint                                   = 6,
    BotOrPlayerNotAllowed                          = 7,
    Count                                          = 8,
    ESpawnPointAllowedInfo                         = 9

};


// Enum  ShooterGame.ECharacterColorationScheme
enum class ECharacterColorationScheme : uint8_t
{
    CharacterColors                                = 0,
    CharacterColors                                = 1,
    CharacterColors                                = 2,
    CharacterColors                                = 3,
    CharacterColors                                = 4,
    CharacterColors                                = 5

};


// Enum  ShooterGame.EIconJustification
enum class EIconJustification : uint8_t
{
    TopLeft                                        = 0,
    Centered                                       = 1,
    EIconJustification                             = 2

};


// Enum  ShooterGame.EDebugMessageOptionFlags
enum class EDebugMessageOptionFlags : uint8_t
{
    None                                           = 0,
    ReliableSend                                   = 1,
    WriteToLog                                     = 2,
    EDebugMessageOptionFlags                       = 3

};


// Enum  ShooterGame.EDebugMessagePosition
enum class EDebugMessagePosition : uint8_t
{
    TopLeft                                        = 0,
    TopRight                                       = 1,
    BottomLeft                                     = 2,
    Default                                        = 0,
    EDebugMessagePosition                          = 3

};


// Enum  ShooterGame.EGamepadHoldInputMode
enum class EGamepadHoldInputMode : uint8_t
{
    SwapHeldWeapon                                 = 0,
    DropHeldWeapon                                 = 1,
    ShopHeldOpen                                   = 2,
    UseHeld                                        = 3,
    MapHeld                                        = 4,
    SprayHeld                                      = 5,
    EGamepadHoldInputMode                          = 6

};


// Enum  ShooterGame.EGamepadWeaponSwapMode
enum class EGamepadWeaponSwapMode : uint8_t
{
    PressToCycle                                   = 0,
    TapForSecondary                                = 1,
    TapForMelee                                    = 2,
    EGamepadWeaponSwapMode                         = 3

};


// Enum  ShooterGame.EVisualizeSurfacesFilter
enum class EVisualizeSurfacesFilter : uint8_t
{
    Weapon                                         = 0,
    Player                                         = 1,
    EVisualizeSurfacesFilter                       = 2

};


// Enum  ShooterGame.EReconnectTelemetryType
enum class EReconnectTelemetryType : uint8_t
{
    Basic                                          = 0,
    NetworkFailure                                 = 1,
    ClientCrash                                    = 2,
    Count                                          = 3,
    EReconnectTelemetryType                        = 4

};


// Enum  ShooterGame.EPlayerDisconnectReason
enum class EPlayerDisconnectReason : uint8_t
{
    Unknown                                        = 0,
    ManualQuit                                     = 1,
    WindowClosed                                   = 2,
    PlatformFault                                  = 3,
    NetworkFailure                                 = 4,
    ClientCrash                                    = 5,
    Count                                          = 6,
    EPlayerDisconnectReason                        = 7

};


// Enum  ShooterGame.EDebugSubscription
enum class EDebugSubscription : uint8_t
{
    ServerActorTickTime                            = 0,
    ServerClassTickTime                            = 1,
    ReplicationOverview                            = 2,
    ReplicatingItems                               = 3,
    ServerSkeletalMeshTickTime                     = 4,
    ServerObjects                                  = 5,
    PendingKillServerObjects                       = 6,
    ServerClassTickCounts                          = 7,
    ServerMemory                                   = 8,
    ServerNetworkStats                             = 9,
    ForceNetUpdateOverview                         = 10,
    ReplicationTime                                = 11,
    StatSubsystems                                 = 12,
    Count                                          = 13,
    EDebugSubscription                             = 14

};


// Enum  ShooterGame.ENvidiaReflexMode
enum class ENvidiaReflexMode : uint8_t
{
    Disabled                                       = 0,
    Enabled                                        = 1,
    EnabledPlusBoost                               = 3,
    ENvidiaReflexMode                              = 4

};


// Enum  ShooterGame.ESpawnRestriction
enum class ESpawnRestriction : uint8_t
{
    None                                           = 0,
    PlayerOnly                                     = 1,
    NonPlayerBotOnly                               = 2,
    ESpawnRestriction                              = 3

};


// Enum  ShooterGame.EAresColorBlindMode
enum class EAresColorBlindMode : uint8_t
{
    Disabled                                       = 0,
    Tritanopia                                     = 1,
    Deuteranopia                                   = 2,
    Protanopia                                     = 3,
    Count                                          = 4,
    EAresColorBlindMode                            = 5

};


// Enum  ShooterGame.EAresDisplayMode
enum class EAresDisplayMode : uint8_t
{
    Fullscreen                                     = 0,
    WindowedFullscreen                             = 1,
    Windowed                                       = 2,
    Count                                          = 3,
    EAresDisplayMode                               = 4

};


// Enum  ShooterGame.EIsRefundable
enum class EIsRefundable : uint8_t
{
    Yes                                            = 0,
    No                                             = 1,
    EIsRefundable                                  = 2

};


// Enum  ShooterGame.EAllowedGameInputBlueprintBitMask
enum class EAllowedGameInputBlueprintBitMask : uint8_t
{
    Movement                                       = 0,
    Aiming                                         = 1,
    ItemUsing                                      = 2,
    Abilities                                      = 3,
    WorldUsing                                     = 4,
    EAllowedGameInputBlueprintBitMask              = 5

};


// Enum  ShooterGame.EUIScreen
enum class EUIScreen : uint8_t
{
    LoginUI                                        = 0,
    Chat                                           = 1,
    MapTargetting                                  = 2,
    Count                                          = 3,
    EUIScreen                                      = 4

};


// Enum  ShooterGame.EUIChannel
enum class EUIChannel : uint8_t
{
    GameDriven                                     = 0,
    UserDriven                                     = 1,
    Chat                                           = 2,
    Count                                          = 3,
    Invalid                                        = 254,
    EUIChannel                                     = 255

};


// Enum  ShooterGame.EEquippableAnimationCategory
enum class EEquippableAnimationCategory : uint8_t
{
    EquippableAnimationCategory                    = 0,
    EquippableAnimationCategory                    = 1,
    EquippableAnimationCategory                    = 2,
    EquippableAnimationCategory                    = 3,
    EquippableAnimationCategory                    = 4,
    EquippableAnimationCategory                    = 5,
    EquippableAnimationCategory                    = 6,
    EquippableAnimationCategory                    = 7,
    EquippableAnimationCategory                    = 8,
    EquippableAnimationCategory                    = 9,
    EquippableAnimationCategory                    = 10,
    EquippableAnimationCategory                    = 11,
    EquippableAnimationCategory                    = 12,
    EquippableAnimationCategory                    = 13,
    EquippableAnimationCategory                    = 14,
    EquippableAnimationCategory                    = 15,
    EquippableAnimationCategory                    = 16,
    EquippableAnimationCategory                    = 17,
    EquippableAnimationCategory                    = 18,
    EquippableAnimationCategory                    = 19,
    EquippableAnimationCategory                    = 20,
    EquippableAnimationCategory                    = 21,
    EquippableAnimationCategory                    = 22

};


// Enum  ShooterGame.ECharacterSelectAnimationState
enum class ECharacterSelectAnimationState : uint8_t
{
    CharacterSelectAnimationState                  = 0,
    CharacterSelectAnimationState                  = 1,
    CharacterSelectAnimationState                  = 2,
    CharacterSelectAnimationState                  = 3,
    CharacterSelectAnimationState                  = 4,
    CharacterSelectAnimationState                  = 5,
    CharacterSelectAnimationState                  = 6,
    CharacterSelectAnimationState                  = 7,
    CharacterSelectAnimationState                  = 8

};


// Enum  ShooterGame.EUsablePriority
enum class EUsablePriority : uint8_t
{
    Cosmetic                                       = 0,
    Door                                           = 1,
    ItemPickup                                     = 2,
    Default                                        = 3,
    High                                           = 4,
    Critical                                       = 5,
    EUsablePriority                                = 6

};


// Enum  ShooterGame.EEnemyVisibilityOption
enum class EEnemyVisibilityOption : uint8_t
{
    Always                                         = 0,
    Never                                          = 1,
    LineOfSight                                    = 2,
    Count                                          = 3,
    EEnemyVisibilityOption                         = 4

};


// Enum  ShooterGame.EAresSearchVisibilityType
enum class EAresSearchVisibilityType : uint8_t
{
    FindInvisibleUnits                             = 0,
    DontFindInvisibleUnits                         = 1,
    Count                                          = 2,
    EAresSearchVisibilityType                      = 3

};


// Enum  ShooterGame.EAresRewardShouldIncrementInstances
enum class EAresRewardShouldIncrementInstances : uint8_t
{
    IncrementInstances                             = 0,
    DontIncrementInstances                         = 1,
    Count                                          = 2,
    EAresRewardShouldIncrementInstances            = 3

};


// Enum  ShooterGame.EAresGameReward
enum class EAresGameReward : uint8_t
{
    Experience                                     = 0,
    Money                                          = 1,
    Energy                                         = 2,
    Health                                         = 3,
    SignatureAbilityPoints                         = 4,
    UltimatePoints                                 = 5,
    AbilityCharges                                 = 6,
    Gear                                           = 7,
    Experience                                     = 8,
    NUM                                            = 9,
    EAresGameReward                                = 10

};


// Enum  ShooterGame.EAresPlayerIntentionType
enum class EAresPlayerIntentionType : uint8_t
{
    Rush                                           = 0,
    Sneak                                          = 1,
    Hold                                           = 2,
    Distract                                       = 3,
    Count                                          = 4,
    EAresPlayerIntentionType                       = 5

};


// Enum  ShooterGame.EDecalFadeType
enum class EDecalFadeType : uint8_t
{
    FadeOutAfterDisplayDuration                    = 0,
    FadeOutAtEndOfRound                            = 1,
    Count                                          = 2,
    EDecalFadeType                                 = 3

};


// Enum  ShooterGame.EAresHitImpactParticleOrientation
enum class EAresHitImpactParticleOrientation : uint8_t
{
    Direction                                      = 0,
    ReverseDirection                               = 1,
    Normal                                         = 2,
    None                                           = 3,
    Count                                          = 4,
    EAresHitImpactParticleOrientation              = 5

};


// Enum  ShooterGame.EAresSurfaceType
enum class EAresSurfaceType : uint8_t
{
    Default                                        = 0,
    Concrete                                       = 1,
    Dirt                                           = 2,
    Gravel                                         = 3,
    Water                                          = 4,
    Metal                                          = 5,
    Wood                                           = 6,
    Grass                                          = 7,
    Glass                                          = 8,
    Flesh                                          = 9,
    Snow                                           = 10,
    MetalThin                                      = 11,
    BrokenGlass                                    = 12,
    Impenetrable                                   = 13,
    Linoleum                                       = 14,
    BubbleCage                                     = 15,
    MetalNonResonant                               = 16,
    CarpetOnWood                                   = 17,
    MetalPipe                                      = 18,
    ConcretePuddle                                 = 19,
    GarbageBag                                     = 20,
    Thorns                                         = 21,
    Sand                                           = 22,
    Mud                                            = 23,
    Tree                                           = 24,
    Ice                                            = 25,
    ShootinRangeTarget                             = 26,
    Cloth                                          = 27,
    CobbleStone                                    = 28,
    CeramicTile                                    = 29,
    CarpetOnConcrete                               = 30,
    EtherGlass                                     = 31,
    CosmicFabric                                   = 32,
    GoldenRipple                                   = 33,
    PlasticHollow                                  = 34,
    Shield                                         = 35,
    Count                                          = 36,
    EAresSurfaceType                               = 37

};


// Enum  ShooterGame.EAresAutomationInput
enum class EAresAutomationInput : uint8_t
{
    PrimaryTrigger                                 = 0,
    SecondaryTrigger                               = 1,
    Reload                                         = 2,
    ZoomToggle                                     = 3,
    FirstEquipInput                                = 4,
    EquipPrimary                                   = 4,
    EquipSecondary                                 = 5,
    EquipMelee                                     = 6,
    EquipGrenade                                   = 7,
    EquipQ                                         = 8,
    EquipE                                         = 9,
    EquipUltimate                                  = 10,
    EquipTotem                                     = 11,
    LastEquipInput                                 = 11,
    Count                                          = 12,
    EAresAutomationInput                           = 13

};


// Enum  ShooterGame.EAresInterpolationFunction
enum class EAresInterpolationFunction : uint8_t
{
    Linear                                         = 0,
    Logarithmic                                    = 1,
    EaseIn                                         = 2,
    EaseOut                                        = 3,
    EaseInEaseOut                                  = 4,
    EAresInterpolationFunction                     = 5

};


// Enum  ShooterGame.EAresEquippableAfterUseType
enum class EAresEquippableAfterUseType : uint8_t
{
    DoNothing                                      = 0,
    EquipFirstWeapon                               = 1,
    EquipLastEquippedWeapon                        = 2,
    Count                                          = 3,
    EAresEquippableAfterUseType                    = 4

};


// Enum  ShooterGame.EAresCoordinateSpace
enum class EAresCoordinateSpace : uint8_t
{
    WorldSpace                                     = 0,
    PlayerSpace                                    = 1,
    EAresCoordinateSpace                           = 2

};


// Enum  ShooterGame.EAresBodySection
enum class EAresBodySection : uint8_t
{
    BodySection                                    = 0,
    BodySection                                    = 1,
    BodySection                                    = 2,
    BodySection                                    = 3,
    BodySection                                    = 4,
    BodySection                                    = 5,
    BodySection                                    = 6,
    BodySection                                    = 7,
    BodySection                                    = 8,
    BodySection                                    = 254,
    EAresBodySection                               = 255

};


// Enum  ShooterGame.CharacterRange
enum class CharacterRange : uint8_t
{
    None                                           = 0,
    Short                                          = 1,
    Medium                                         = 2,
    Long                                           = 3,
    Count                                          = 4,
    CharacterRange                                 = 5

};


// Enum  ShooterGame.EMegamapCalloutsVisibility
enum class EMegamapCalloutsVisibility : uint8_t
{
    NeverVisible                                   = 0,
    VisibleInPreRound                              = 1,
    AlwaysVisible                                  = 2,
    Count                                          = 3,
    EMegamapCalloutsVisibility                     = 4

};


// Enum  ShooterGame.EAresBombStates
enum class EAresBombStates : uint8_t
{
    AresBombState                                  = 0,
    AresBombState                                  = 1,
    AresBombState                                  = 2,
    AresBombState                                  = 3,
    AresBombState                                  = 4,
    AresBombState                                  = 5,
    AresBombState                                  = 6,
    AresBombState                                  = 7,
    AresBombState                                  = 8

};


// Enum  ShooterGame.EAresTeamTargeting
enum class EAresTeamTargeting : uint8_t
{
    TeamTargeting                                  = 0,
    TeamTargeting                                  = 1,
    TeamTargeting                                  = 2,
    TeamTargeting                                  = 3,
    TeamTargeting                                  = 4,
    TeamTargeting                                  = 5,
    TeamTargeting                                  = 6

};


// Enum  ShooterGame.EAresProgressionType
enum class EAresProgressionType : uint8_t
{
    Money                                          = 0,
    XP                                             = 1,
    Energy                                         = 2,
    Count                                          = 3,
    EAresProgressionType                           = 4

};


// Enum  ShooterGame.ERoundKills
enum class ERoundKills : uint8_t
{
    None                                           = 0,
    Single                                         = 1,
    Double                                         = 2,
    Triple                                         = 3,
    Quadra                                         = 4,
    Penta                                          = 5,
    Overkill                                       = 6,
    Count                                          = 7,
    ERoundKills                                    = 8

};


// Enum  ShooterGame.EAresTeamRoundResult
enum class EAresTeamRoundResult : uint8_t
{
    Win                                            = 0,
    Loss                                           = 1,
    Tie                                            = 2,
    EAresTeamRoundResult                           = 3

};


// Enum  ShooterGame.EAresOrientation
enum class EAresOrientation : uint8_t
{
    AresOrientation                                = 0,
    AresOrientation                                = 1,
    AresOrientation                                = 2,
    AresOrientation                                = 3,
    AresOrientation                                = 4,
    AresOrientation                                = 254,
    AresOrientation                                = 255

};


// Enum  ShooterGame.EAresRoundOutcome
enum class EAresRoundOutcome : uint8_t
{
    Elimination                                    = 0,
    Defuse                                         = 1,
    Detonate                                       = 2,
    TimeExpired                                    = 3,
    Cheat                                          = 4,
    Surrendered                                    = 5,
    RoundOutcome                                   = 6,
    Invalid                                        = 7,
    EAresRoundOutcome                              = 8

};


// Enum  ShooterGame.EAresParamType
enum class EAresParamType : uint8_t
{
    Scalar                                         = 0,
    Vector                                         = 1,
    Attachments                                    = 2,
    Count                                          = 3,
    Invalid                                        = 254,
    EAresParamType                                 = 255

};


// Enum  ShooterGame.EAresImpactEffectHitspace
enum class EAresImpactEffectHitspace : uint8_t
{
    ShooterPerspective                             = 0,
    VictimPerspective                              = 1,
    ThirdPersonPerspective                         = 2,
    NUM                                            = 3,
    EAresImpactEffectHitspace                      = 4

};


// Enum  ShooterGame.EMinimapVisibleReason
enum class EMinimapVisibleReason : uint8_t
{
    ObserverToggle                                 = 0,
    Megamap                                        = 1,
    MapTargetting                                  = 2,
    Count                                          = 3,
    EMinimapVisibleReason                          = 4

};


// Enum  ShooterGame.EShopScreenInitOption
enum class EShopScreenInitOption : uint8_t
{
    Menu                                           = 0,
    Popup                                          = 1,
    Count                                          = 2,
    EShopScreenInitOption                          = 3

};


// Enum  ShooterGame.EProjectileMoveState
enum class EProjectileMoveState : uint8_t
{
    Moving                                         = 0,
    Stopped                                        = 1,
    Count                                          = 2,
    EProjectileMoveState                           = 3

};


// Enum  ShooterGame.ESkinUpgradeState
enum class ESkinUpgradeState : uint8_t
{
    SUS                                            = 0,
    SUS                                            = 1,
    SUS                                            = 2,
    SUS                                            = 3,
    SUS                                            = 4,
    SUS                                            = 5,
    SUS                                            = 6,
    SUS                                            = 7,
    SUS                                            = 8,
    SUS                                            = 9,
    SUS                                            = 10,
    SUS                                            = 11,
    SUS                                            = 12,
    SUS                                            = 13,
    SUS                                            = 14

};


// Enum  ShooterGame.ESniperCrosshairMaterialType
enum class ESniperCrosshairMaterialType : uint8_t
{
    Static                                         = 0,
    CenterDot                                      = 1,
    ESniperCrosshairMaterialType                   = 2

};


// Enum  ShooterGame.EAresSocialTriggerMode
enum class EAresSocialTriggerMode : uint8_t
{
    Friend                                         = 0,
    Party                                          = 1,
    EAresSocialTriggerMode                         = 2

};


// Enum  ShooterGame.EAresIdentityDisplay
enum class EAresIdentityDisplay : uint8_t
{
    Default                                        = 0,
    Alternative1                                   = 1,
    Alternative2                                   = 2,
    Alternative3                                   = 3,
    Alternative4                                   = 4,
    EAresIdentityDisplay                           = 5

};


// Enum  ShooterGame.ESocialPanelCategory
enum class ESocialPanelCategory : uint8_t
{
    Invalid                                        = 0,
    Online                                         = 1,
    Offline                                        = 2,
    Favorite                                       = 3,
    OtherGame                                      = 4,
    Count                                          = 5,
    ESocialPanelCategory                           = 6

};


// Enum  ShooterGame.EAresSocialPlayerCategory
enum class EAresSocialPlayerCategory : uint8_t
{
    Invalid                                        = 0,
    OnlineInParty                                  = 1,
    OnlineInOtherGame                              = 2,
    Offline                                        = 3,
    Hidden                                         = 4,
    Count                                          = 5,
    EAresSocialPlayerCategory                      = 6

};


// Enum  ShooterGame.ESocialViewControllerUpdatePolicy
enum class ESocialViewControllerUpdatePolicy : uint8_t
{
    Unlimited                                      = 0,
    Scheduled                                      = 1,
    Never                                          = 2,
    ESocialViewControllerUpdatePolicy              = 3

};


// Enum  ShooterGame.ESplineMovementSpeedUnit
enum class ESplineMovementSpeedUnit : uint8_t
{
    WorldUnitsPerSecond                            = 0,
    SplineInputKeysPerSecond                       = 1,
    Count                                          = 2,
    ESplineMovementSpeedUnit                       = 3

};


// Enum  ShooterGame.ESplitBodyRotationState
enum class ESplitBodyRotationState : uint8_t
{
    Inactive                                       = 0,
    RotatingUpperBody                              = 1,
    RecenteringLowerBody                           = 2,
    SpecialTurnState                               = 3,
    BlendingOut                                    = 4,
    ESplitBodyRotationState                        = 5

};


// Enum  ShooterGame.EAresSprayCategory
enum class EAresSprayCategory : uint8_t
{
    Default                                        = 0,
    Contextual                                     = 1,
    EAresSprayCategory                             = 2

};


// Enum  ShooterGame.EStabilityType
enum class EStabilityType : uint8_t
{
    Error                                          = 0,
    PitchRecoil                                    = 1,
    YawRecoil                                      = 2,
    Count                                          = 3,
    EStabilityType                                 = 4

};


// Enum  ShooterGame.EYawChangeDirection
enum class EYawChangeDirection : uint8_t
{
    Left                                           = 0,
    Right                                          = 1,
    Neutral                                        = 2,
    Count                                          = 3,
    EYawChangeDirection                            = 4

};


// Enum  ShooterGame.EDecayBehaviorBelowDesired
enum class EDecayBehaviorBelowDesired : uint8_t
{
    MatchDesired                                   = 0,
    StayAtCurrent                                  = 1,
    Decay                                          = 2,
    Count                                          = 3,
    EDecayBehaviorBelowDesired                     = 4

};


// Enum  ShooterGame.EStabilityInterpolationVariable
enum class EStabilityInterpolationVariable : uint8_t
{
    StabilityIndex                                 = 0,
    Error                                          = 1,
    PitchRecoil                                    = 2,
    YawRecoil                                      = 3,
    AccruedSwitchChance                            = 4,
    Count                                          = 5,
    EStabilityInterpolationVariable                = 6

};


// Enum  ShooterGame.EStabilityInterpolationType
enum class EStabilityInterpolationType : uint8_t
{
    Linear                                         = 0,
    QuadraticEaseIn                                = 1,
    QuadraticEaseOut                               = 2,
    QuadraticEaseInEaseOut                         = 3,
    Count                                          = 4,
    EStabilityInterpolationType                    = 5

};


// Enum  ShooterGame.EAresStabilityType
enum class EAresStabilityType : uint8_t
{
    Walking                                        = 0,
    Running                                        = 1,
    Jumping                                        = 2,
    Crouching                                      = 3,
    OnAscender                                     = 4,
    Flying                                         = 5,
    Count                                          = 6,
    Invalid                                        = 254,
    EAresStabilityType                             = 255

};


// Enum  ShooterGame.EMovementSync
enum class EMovementSync : uint8_t
{
    None                                           = 0,
    Start                                          = 1,
    Stop                                           = 2,
    StartAndStop                                   = 3,
    Count                                          = 4,
    EMovementSync                                  = 5

};


// Enum  ShooterGame.EStateContext
enum class EStateContext : uint8_t
{
    None                                           = 0,
    TriggeringState                                = 1,
    OwningEquippable                               = 2,
    OwningCharacter                                = 3,
    CustomContext                                  = 4,
    Count                                          = 5,
    EStateContext                                  = 6

};


// Enum  ShooterGame.EStateMachineDebugEntryMatchState
enum class EStateMachineDebugEntryMatchState : uint8_t
{
    Unconfirmed                                    = 0,
    HasMatch                                       = 1,
    NoMatch                                        = 2,
    EStateMachineDebugEntryMatchState              = 3

};


// Enum  ShooterGame.EEligibleForJuiceOverrideStatus
enum class EEligibleForJuiceOverrideStatus : uint8_t
{
    NOT                                            = 0,
    ELIGIBLE                                       = 1,
    NOT                                            = 2,
    EEligibleForJuiceOverrideStatus                = 3

};


// Enum  ShooterGame.ECAPOrderStatus
enum class ECAPOrderStatus : uint8_t
{
    UNKNOWN                                        = 0,
    FAILED                                         = 1,
    REFUNDED                                       = 2,
    ROLLED                                         = 3,
    FULFILLMENT                                    = 4,
    PAYMENT                                        = 5,
    ACCEPTED                                       = 6,
    VALIDATED                                      = 7,
    PAYMENT                                        = 8,
    FULFILLMENT                                    = 9,
    POST                                           = 10,
    COMPLETE                                       = 11,
    MERCHANT                                       = 12,
    COUNT                                          = 13,
    ECAPOrderStatus                                = 14

};


// Enum  ShooterGame.EPluginStorefrontType
enum class EPluginStorefrontType : uint8_t
{
    NONE                                           = 0,
    ESPORTS                                        = 1,
    EPluginStorefrontType                          = 2

};


// Enum  ShooterGame.EOfferDTOType
enum class EOfferDTOType : uint8_t
{
    NONE                                           = 0,
    CONTRACT                                       = 1,
    CONTRACT                                       = 2,
    ROTATING                                       = 3,
    ITEM                                           = 4,
    ITEM                                           = 5,
    BUNDLE                                         = 6,
    BUNDLE                                         = 7,
    AGENT                                          = 8,
    BONUS                                          = 9,
    ACCESSORY                                      = 10,
    UPGRADE                                        = 11,
    PLATFORM                                       = 12,
    AGENT                                          = 13,
    COUNT                                          = 14,
    EOfferDTOType                                  = 15

};


// Enum  ShooterGame.EJuiceOrderRequestType
enum class EJuiceOrderRequestType : uint8_t
{
    INVALID                                        = 0,
    CRAFT                                          = 1,
    CRAFT                                          = 2,
    CRAFT                                          = 3,
    COUNT                                          = 4,
    EJuiceOrderRequestType                         = 5

};


// Enum  ShooterGame.EEventType
enum class EEventType : uint8_t
{
    InspectItem                                    = 0,
    InspectItemLevels                              = 1,
    InspectItemChroma                              = 2,
    PurchaseStart                                  = 3,
    PurchaseConfirm                                = 4,
    PurchaseCancel                                 = 5,
    PurchaseComplete                               = 6,
    RevealOffer                                    = 7,
    Count                                          = 8,
    EEventType                                     = 9

};


// Enum  ShooterGame.EOfferType
enum class EOfferType : uint8_t
{
    Unknown                                        = 0,
    RotatingStore                                  = 1,
    FeaturedStandalone                             = 2,
    FeaturedBundle                                 = 3,
    NightMarket                                    = 4,
    Juice                                          = 5,
    Accessory                                      = 6,
    AgentStore                                     = 7,
    Count                                          = 8,
    EOfferType                                     = 9

};


// Enum  ShooterGame.ESpecialItemStatus
enum class ESpecialItemStatus : uint8_t
{
    DEFAULT                                        = 0,
    PROMO                                          = 1,
    COUNT                                          = 2,
    ESpecialItemStatus                             = 3

};


// Enum  ShooterGame.EStreamedVideoQuality
enum class EStreamedVideoQuality : uint8_t
{
    Default                                        = 0,
    High                                           = 1,
    Invalid                                        = 2,
    Count                                          = 3,
    EStreamedVideoQuality                          = 4

};


// Enum  ShooterGame.ESubDataBlueprintLibrary
enum class ESubDataBlueprintLibrary : uint8_t
{
    ESubDataBlueprintLibrary                       = 0,
    ESubDataBlueprintLibrary                       = 1,
    ESubDataBlueprintLibrary                       = 2

};


// Enum  ShooterGame.EXPBoostType
enum class EXPBoostType : uint8_t
{
    Invalid                                        = 0,
    BaseOnly                                       = 1,
    BaseAndMission                                 = 2,
    Count                                          = 3,
    EXPBoostType                                   = 4

};


// Enum  ShooterGame.ESubscriptionRewardType
enum class ESubscriptionRewardType : uint8_t
{
    Invalid                                        = 0,
    XpBoost                                        = 1,
    Agent                                          = 2,
    WeaponSkin                                     = 3,
    GunBuddy                                       = 4,
    Spray                                          = 5,
    PlayerCard                                     = 6,
    PlayerTitle                                    = 7,
    Count                                          = 8,
    ESubscriptionRewardType                        = 9

};


// Enum  ShooterGame.EQueuedMessageType
enum class EQueuedMessageType : uint8_t
{
    Event                                          = 0,
    Log                                            = 1,
    Metric                                         = 2,
    EQueuedMessageType                             = 3

};


// Enum  ShooterGame.ESampleLevel
enum class ESampleLevel : uint8_t
{
    Server                                         = 0,
    Client                                         = 1,
    ESampleLevel                                   = 2

};


// Enum  ShooterGame.ETextChatInitializationState
enum class ETextChatInitializationState : uint8_t
{
    NotInitialized                                 = 0,
    PendingSession                                 = 1,
    Ready                                          = 2,
    Failed                                         = 3,
    ETextChatInitializationState                   = 4

};


// Enum  ShooterGame.ETextChatRoomConnectionState
enum class ETextChatRoomConnectionState : uint8_t
{
    ShouldConnect                                  = 0,
    Connecting                                     = 1,
    Connected                                      = 2,
    NotConnecting                                  = 3,
    ETextChatRoomConnectionState                   = 4

};


// Enum  ShooterGame.EPromotionCategory
enum class EPromotionCategory : uint8_t
{
    None                                           = 0,
    Trailer                                        = 1,
    InfluencerBuild                                = 2,
    SocialTweets                                   = 3,
    Count                                          = 4,
    EPromotionCategory                             = 5

};


// Enum  ShooterGame.EThematicContinuationCategory
enum class EThematicContinuationCategory : uint8_t
{
    FirstGen                                       = 0,
    SecondGen                                      = 1,
    ThirdGen                                       = 2,
    FourthGen                                      = 3,
    Rerelease                                      = 4,
    Count                                          = 5,
    EThematicContinuationCategory                  = 6

};


// Enum  ShooterGame.EThematicCategory
enum class EThematicCategory : uint8_t
{
    None                                           = 0,
    Alien                                          = 1,
    Artistic                                       = 2,
    Clean                                          = 3,
    Cultural                                       = 4,
    Edgy                                           = 5,
    Elemental                                      = 6,
    ESports                                        = 7,
    Fantasy                                        = 8,
    Graphic                                        = 9,
    Gritty                                         = 10,
    LoreBased                                      = 11,
    RealWorld                                      = 12,
    Retro                                          = 13,
    SciFi                                          = 14,
    Stylish                                        = 15,
    Whimsical                                      = 16,
    Count                                          = 17,
    EThematicCategory                              = 18

};


// Enum  ShooterGame.EAresTimerDirection
enum class EAresTimerDirection : uint8_t
{
    AfterStateStart                                = 0,
    BeforeStateEnd                                 = 1,
    Count                                          = 2,
    Invalid                                        = 254,
    EAresTimerDirection                            = 255

};


// Enum  ShooterGame.ETipDebugState
enum class ETipDebugState : uint8_t
{
    Resolved                                       = 0,
    Invalid                                        = 1,
    Valid                                          = 2,
    Shown                                          = 3,
    ETipDebugState                                 = 4

};


// Enum  ShooterGame.EToggleableAbilitySetting
enum class EToggleableAbilitySetting : uint8_t
{
    Hold                                           = 0,
    Toggle                                         = 1,
    UseGlobalSetting                               = 2,
    Count                                          = 3,
    EToggleableAbilitySetting                      = 4

};


// Enum  ShooterGame.ECancellableInputType
enum class ECancellableInputType : uint8_t
{
    None                                           = 0,
    Weapon                                         = 1,
    Ability                                        = 2,
    Run                                            = 4,
    JumpCrouch                                     = 8,
    Camera                                         = 16,
    Settings                                       = 32,
    Pinging                                        = 64,
    All                                            = 127,
    Count                                          = 7,
    ECancellableInputType                          = 128

};


// Enum  ShooterGame.EMatchupNextSteps
enum class EMatchupNextSteps : uint8_t
{
    CONTINUE                                       = 0,
    KNOCKED                                        = 1,
    WIN                                            = 2,
    WIN                                            = 3,
    DROP                                           = 4,
    Count                                          = 5,
    Invalid                                        = 6,
    EMatchupNextSteps                              = 7

};


// Enum  ShooterGame.ETransitionWidgetType
enum class ETransitionWidgetType : uint8_t
{
    Invalid                                        = 0,
    None                                           = 1,
    Default                                        = 2,
    TransitionToPregame                            = 3,
    TransitionToInGame                             = 4,
    TransitionToMainMenu                           = 5,
    Count                                          = 6,
    ETransitionWidgetType                          = 7

};


// Enum  ShooterGame.EUIActionType
enum class EUIActionType : uint8_t
{
    Click                                          = 0,
    Invalid                                        = 1,
    EUIActionType                                  = 2

};


// Enum  ShooterGame.EIncrementType
enum class EIncrementType : uint8_t
{
    Increment                                      = 0,
    Decrement                                      = 1,
    None                                           = 2,
    EIncrementType                                 = 3

};


// Enum  ShooterGame.ECharacterRole
enum class ECharacterRole : uint8_t
{
    All                                            = 0,
    Initiator                                      = 1,
    Duelist                                        = 2,
    Sentinel                                       = 3,
    Controller                                     = 4,
    None                                           = 5,
    ECharacterRole                                 = 6

};


// Enum  ShooterGame.EAresCommonInputCondition
enum class EAresCommonInputCondition : uint8_t
{
    Never                                          = 0,
    Hover                                          = 1,
    Always                                         = 2,
    All                                            = 3,
    EAresCommonInputCondition                      = 4

};


// Enum  ShooterGame.EPingQuality
enum class EPingQuality : uint8_t
{
    None                                           = 0,
    Low                                            = 1,
    Med                                            = 2,
    High                                           = 3,
    Max                                            = 4,
    EPingQuality                                   = 5

};


// Enum  ShooterGame.EActivationPreference
enum class EActivationPreference : uint8_t
{
    ACTIVE                                         = 0,
    INACTIVE                                       = 1,
    NONE                                           = 2,
    EActivationPreference                          = 3

};


// Enum  ShooterGame.EUseKeyUIType
enum class EUseKeyUIType : uint8_t
{
    Default                                        = 0,
    Alternate                                      = 1,
    SecondaryDefault                               = 2,
    Count                                          = 3,
    EUseKeyUIType                                  = 4

};


// Enum  ShooterGame.EViewTargetSearchDirection
enum class EViewTargetSearchDirection : uint8_t
{
    Next                                           = 0,
    Previous                                       = 1,
    Count                                          = 2,
    EViewTargetSearchDirection                     = 3

};


// Enum  ShooterGame.EAttemptQueueVoteResult
enum class EAttemptQueueVoteResult : uint8_t
{
    Queued                                         = 0,
    Active                                         = 1,
    Invalid                                        = 2,
    AlreadyQueued                                  = 3,
    EAttemptQueueVoteResult                        = 4

};


// Enum  ShooterGame.EWallSectionPhase
enum class EWallSectionPhase : uint8_t
{
    Uninitalized                                   = 0,
    Sectioning                                     = 1,
    Extending                                      = 2,
    Building                                       = 3,
    Finalizing                                     = 4,
    Finished                                       = 5,
    Count                                          = 6,
    EWallSectionPhase                              = 7

};


// Enum  ShooterGame.EWidgetVisibilityState
enum class EWidgetVisibilityState : uint8_t
{
    Visible                                        = 0,
    Hidden                                         = 1,
    Collapsed                                      = 2,
    EWidgetVisibilityState                         = 3

};


// Enum  ShooterGame.EWidgetLayoutSettingName
enum class EWidgetLayoutSettingName : uint8_t
{
    WalkModeThreshold                              = 0,
    AimPassthrough                                 = 1,
    DeadZoneThreshold                              = 2,
    SprintLockThreshold                            = 3,
    SprintLockActivationConeAngle                  = 4,
    AutoADS                                        = 5,
    AutoScope                                      = 6,
    FireOnReleaseSnipers                           = 7,
    FireOnReleaseOther                             = 8,
    MovementPassthrough                            = 9,
    WalkWhileFiring                                = 10,
    AutoRefireOnHold                               = 11,
    UseButton                                      = 12,
    WeaponDropThreshold                            = 13,
    JumpCrouchJumpScale                            = 14,
    JumpCrouchCrouchScale                          = 15,
    JumpCrouchWidthScale                           = 16,
    JumpCrouchSwipeZoneHeight                      = 17,
    WS                                             = 18,
    WS                                             = 19,
    AlwaysShowUse                                  = 20,
    WS                                             = 21,
    WS                                             = 22,
    WS                                             = 23,
    WS                                             = 24,
    HideWhenInactive                               = 25,
    BurstFire                                      = 26,
    MinimapCalloutLocation                         = 27,
    EWidgetLayoutSettingName                       = 28

};


// Enum  ShooterGame.EWildcardBlueprintLibrary
enum class EWildcardBlueprintLibrary : uint8_t
{
    EWildcardBlueprintLibrary                      = 0,
    EWildcardBlueprintLibrary                      = 1,
    EWildcardBlueprintLibrary                      = 2

};


// Enum  ShooterGame.EZoomTimer
enum class EZoomTimer : uint8_t
{
    Transition                                     = 0,
    Cooldown                                       = 1,
    CosmeticZoomInPercentTrigger                   = 2,
    Count                                          = 3,
    EZoomTimer                                     = 4

};


// Enum  ShooterGame.EZoomTransitionState
enum class EZoomTransitionState : uint8_t
{
    Transitioning                                  = 0,
    OnCooldown                                     = 1,
    Completed                                      = 2,
    EZoomTransitionState                           = 3

};


// Enum  ShooterGame.EZoomCooldownOption
enum class EZoomCooldownOption : uint8_t
{
    ApplyCooldownAfterZoom                         = 0,
    NoCooldown                                     = 1,
    Count                                          = 2,
    EZoomCooldownOption                            = 3

};


// Enum  ShooterGame.EAimModeType
enum class EAimModeType : uint8_t
{
    PrioritizeFocus                                = 0,
    PrioritizeADS                                  = 1,
    Count                                          = 2,
    EAimModeType                                   = 3

};


// Enum  ShooterGame.EZoomComponentType
enum class EZoomComponentType : uint8_t
{
    CameraZoom                                     = 0,
    FirstPersonMesh                                = 1,
    Count                                          = 2,
    Invalid                                        = 254,
    EZoomComponentType                             = 255

};


// Enum  ShooterGame.EZoomFiringBehavior
enum class EZoomFiringBehavior : uint8_t
{
    None                                           = 0,
    FiringBlocks                                   = 1,
    FiringCooldownBlocks                           = 2,
    Count                                          = 3,
    EZoomFiringBehavior                            = 4

};


// Enum  ShooterGame.EZoomStateLevel
enum class EZoomStateLevel : uint8_t
{
    Disabled                                       = 0,
    Unzoomed                                       = 1,
    ZoomLevel1                                     = 2,
    ZoomLevel2                                     = 3,
    Count                                          = 4,
    EZoomStateLevel                                = 5

};


// Enum  ShooterGame.EZoomMultiplierType
enum class EZoomMultiplierType : uint8_t
{
    ADS                                            = 0,
    Sniper                                         = 1,
    EZoomMultiplierType                            = 2

};


// Enum  CoreUObject.ELifetimeCondition
enum class ELifetimeCondition : uint8_t
{
    COND                                           = 0,
    COND                                           = 1,
    COND                                           = 2,
    COND                                           = 3,
    COND                                           = 4,
    COND                                           = 5,
    COND                                           = 6,
    COND                                           = 7,
    COND                                           = 8,
    COND                                           = 9,
    COND                                           = 10,
    COND                                           = 11,
    COND                                           = 12,
    COND                                           = 13,
    COND                                           = 15,
    COND                                           = 16,
    COND                                           = 17

};


// Enum  CoreUObject.EDataValidationResult
enum class EDataValidationResult : uint8_t
{
    Invalid                                        = 0,
    Valid                                          = 1,
    NotValidated                                   = 2,
    EDataValidationResult                          = 3

};


// Enum  CoreUObject.EAppMsgType
enum class EAppMsgType : uint8_t
{
    Ok                                             = 0,
    YesNo                                          = 1,
    OkCancel                                       = 2,
    YesNoCancel                                    = 3,
    CancelRetryContinue                            = 4,
    YesNoYesAllNoAll                               = 5,
    YesNoYesAllNoAllCancel                         = 6,
    YesNoYesAll                                    = 7,
    EAppMsgType                                    = 8

};


// Enum  CoreUObject.EAppReturnType
enum class EAppReturnType : uint8_t
{
    No                                             = 0,
    Yes                                            = 1,
    YesAll                                         = 2,
    NoAll                                          = 3,
    Cancel                                         = 4,
    Ok                                             = 5,
    Retry                                          = 6,
    Continue                                       = 7,
    EAppReturnType                                 = 8

};


// Enum  CoreUObject.EPropertyAccessChangeNotifyMode
enum class EPropertyAccessChangeNotifyMode : uint8_t
{
    Default                                        = 0,
    Never                                          = 1,
    Always                                         = 2,
    EPropertyAccessChangeNotifyMode                = 3

};


// Enum  CoreUObject.EUnit
enum class EUnit : uint8_t
{
    Micrometers                                    = 0,
    Millimeters                                    = 1,
    Centimeters                                    = 2,
    Meters                                         = 3,
    Kilometers                                     = 4,
    Inches                                         = 5,
    Feet                                           = 6,
    Yards                                          = 7,
    Miles                                          = 8,
    Lightyears                                     = 9,
    Degrees                                        = 10,
    Radians                                        = 11,
    MetersPerSecond                                = 12,
    KilometersPerHour                              = 13,
    MilesPerHour                                   = 14,
    Celsius                                        = 15,
    Farenheit                                      = 16,
    Kelvin                                         = 17,
    Micrograms                                     = 18,
    Milligrams                                     = 19,
    Grams                                          = 20,
    Kilograms                                      = 21,
    MetricTons                                     = 22,
    Ounces                                         = 23,
    Pounds                                         = 24,
    Stones                                         = 25,
    Newtons                                        = 26,
    PoundsForce                                    = 27,
    KilogramsForce                                 = 28,
    Hertz                                          = 29,
    Kilohertz                                      = 30,
    Megahertz                                      = 31,
    Gigahertz                                      = 32,
    RevolutionsPerMinute                           = 33,
    Bytes                                          = 34,
    Kilobytes                                      = 35,
    Megabytes                                      = 36,
    Gigabytes                                      = 37,
    Terabytes                                      = 38,
    Lumens                                         = 39,
    Milliseconds                                   = 43,
    Seconds                                        = 44,
    Minutes                                        = 45,
    Hours                                          = 46,
    Days                                           = 47,
    Months                                         = 48,
    Years                                          = 49,
    Multiplier                                     = 52,
    Percentage                                     = 51,
    Unspecified                                    = 53,
    EUnit                                          = 54

};


// Enum  CoreUObject.EPixelFormat
enum class EPixelFormat : uint8_t
{
    PF                                             = 0,
    PF                                             = 1,
    PF                                             = 2,
    PF                                             = 3,
    PF                                             = 4,
    PF                                             = 5,
    PF                                             = 6,
    PF                                             = 7,
    PF                                             = 8,
    PF                                             = 9,
    PF                                             = 10,
    PF                                             = 11,
    PF                                             = 12,
    PF                                             = 13,
    PF                                             = 14,
    PF                                             = 15,
    PF                                             = 16,
    PF                                             = 17,
    PF                                             = 18,
    PF                                             = 19,
    PF                                             = 20,
    PF                                             = 21,
    PF                                             = 22,
    PF                                             = 23,
    PF                                             = 24,
    PF                                             = 25,
    PF                                             = 26,
    PF                                             = 27,
    PF                                             = 28,
    PF                                             = 29,
    PF                                             = 30,
    PF                                             = 31,
    PF                                             = 32,
    PF                                             = 33,
    PF                                             = 34,
    PF                                             = 35,
    PF                                             = 36,
    PF                                             = 37,
    PF                                             = 38,
    PF                                             = 39,
    PF                                             = 40,
    PF                                             = 41,
    PF                                             = 42,
    PF                                             = 43,
    PF                                             = 44,
    PF                                             = 45,
    PF                                             = 46,
    PF                                             = 47,
    PF                                             = 48,
    PF                                             = 49,
    PF                                             = 50,
    PF                                             = 51,
    PF                                             = 52,
    PF                                             = 53,
    PF                                             = 54,
    PF                                             = 55,
    PF                                             = 56,
    PF                                             = 57,
    PF                                             = 58,
    PF                                             = 59,
    PF                                             = 60,
    PF                                             = 61,
    PF                                             = 62,
    PF                                             = 63,
    PF                                             = 64,
    PF                                             = 65,
    PF                                             = 66,
    PF                                             = 67,
    PF                                             = 68,
    PF                                             = 69,
    PF                                             = 70,
    PF                                             = 72

};


// Enum  CoreUObject.EAxis
enum class EAxis : uint8_t
{
    None                                           = 0,
    X                                              = 1,
    Y                                              = 2,
    Z                                              = 3,
    EAxis                                          = 4

};


// Enum  CoreUObject.ELogTimes
enum class ELogTimes : uint8_t
{
    None                                           = 0,
    UTC                                            = 1,
    SinceGStartTime                                = 2,
    Local                                          = 3,
    ELogTimes                                      = 4

};


// Enum  CoreUObject.ESearchDir
enum class ESearchDir : uint8_t
{
    FromStart                                      = 0,
    FromEnd                                        = 1,
    ESearchDir                                     = 2

};


// Enum  CoreUObject.ESearchCase
enum class ESearchCase : uint8_t
{
    CaseSensitive                                  = 0,
    IgnoreCase                                     = 1,
    ESearchCase                                    = 2

};


// Enum  InputCore.ETouchType
enum class ETouchType : uint8_t
{
    Began                                          = 0,
    Moved                                          = 1,
    Stationary                                     = 2,
    ForceChanged                                   = 3,
    FirstMove                                      = 4,
    Ended                                          = 5,
    NumTypes                                       = 6,
    ETouchType                                     = 7

};


// Enum  InputCore.EConsoleForGamepadLabels
enum class EConsoleForGamepadLabels : uint8_t
{
    None                                           = 0,
    XBoxOne                                        = 1,
    PS4                                            = 2,
    EConsoleForGamepadLabels                       = 3

};


// Enum  InputCore.EControllerHand
enum class EControllerHand : uint8_t
{
    Left                                           = 0,
    Right                                          = 1,
    AnyHand                                        = 2,
    Pad                                            = 3,
    ExternalCamera                                 = 4,
    Gun                                            = 5,
    Special                                        = 6,
    Special                                        = 7,
    Special                                        = 8,
    Special                                        = 9,
    Special                                        = 10,
    Special                                        = 11,
    Special                                        = 12,
    Special                                        = 13,
    Special                                        = 14,
    Special                                        = 15,
    Special                                        = 16,
    ControllerHand                                 = 17,
    EControllerHand                                = 18

};


// Enum  SlateCore.EFontLayoutMethod
enum class EFontLayoutMethod : uint8_t
{
    Metrics                                        = 0,
    BoundingBox                                    = 1,
    EFontLayoutMethod                              = 2

};


// Enum  SlateCore.EFontLoadingPolicy
enum class EFontLoadingPolicy : uint8_t
{
    LazyLoad                                       = 0,
    Stream                                         = 1,
    Inline                                         = 2,
    EFontLoadingPolicy                             = 3

};


// Enum  SlateCore.EFontHinting
enum class EFontHinting : uint8_t
{
    Default                                        = 0,
    Auto                                           = 1,
    AutoLight                                      = 2,
    Monochrome                                     = 3,
    None                                           = 4,
    EFontHinting                                   = 5

};


// Enum  SlateCore.EFocusCause
enum class EFocusCause : uint8_t
{
    Mouse                                          = 0,
    Navigation                                     = 1,
    SetDirectly                                    = 2,
    Cleared                                        = 3,
    OtherWidgetLostFocus                           = 4,
    WindowActivate                                 = 5,
    EFocusCause                                    = 6

};


// Enum  SlateCore.ESlateDebuggingFocusEvent
enum class ESlateDebuggingFocusEvent : uint8_t
{
    FocusChanging                                  = 0,
    FocusLost                                      = 1,
    FocusReceived                                  = 2,
    MAX                                            = 3

};


// Enum  SlateCore.ESlateDebuggingNavigationMethod
enum class ESlateDebuggingNavigationMethod : uint8_t
{
    Unknown                                        = 0,
    Explicit                                       = 1,
    CustomDelegateBound                            = 2,
    CustomDelegateUnbound                          = 3,
    NextOrPrevious                                 = 4,
    HitTestGrid                                    = 5,
    ESlateDebuggingNavigationMethod                = 6

};


// Enum  SlateCore.ESlateDebuggingStateChangeEvent
enum class ESlateDebuggingStateChangeEvent : uint8_t
{
    MouseCaptureGained                             = 0,
    MouseCaptureLost                               = 1,
    ESlateDebuggingStateChangeEvent                = 2

};


// Enum  SlateCore.ESlateDebuggingInputEvent
enum class ESlateDebuggingInputEvent : uint8_t
{
    MouseMove                                      = 0,
    MouseEnter                                     = 1,
    MouseLeave                                     = 2,
    PreviewMouseButtonDown                         = 3,
    MouseButtonDown                                = 4,
    MouseButtonUp                                  = 5,
    MouseButtonDoubleClick                         = 6,
    MouseWheel                                     = 7,
    TouchStart                                     = 8,
    TouchEnd                                       = 9,
    TouchForceChanged                              = 10,
    TouchFirstMove                                 = 11,
    TouchMoved                                     = 12,
    DragDetected                                   = 13,
    DragEnter                                      = 14,
    DragLeave                                      = 15,
    DragOver                                       = 16,
    DragDrop                                       = 17,
    DropMessage                                    = 18,
    PreviewKeyDown                                 = 19,
    KeyDown                                        = 20,
    KeyUp                                          = 21,
    KeyChar                                        = 22,
    AnalogInput                                    = 23,
    TouchGesture                                   = 24,
    MotionDetected                                 = 25,
    MAX                                            = 26

};


// Enum  SlateCore.EScrollDirection
enum class EScrollDirection : uint8_t
{
    Scroll                                         = 0,
    Scroll                                         = 1,
    Scroll                                         = 2

};


// Enum  SlateCore.ENavigationGenesis
enum class ENavigationGenesis : uint8_t
{
    Keyboard                                       = 0,
    Controller                                     = 1,
    User                                           = 2,
    ENavigationGenesis                             = 3

};


// Enum  SlateCore.ENavigationSource
enum class ENavigationSource : uint8_t
{
    FocusedWidget                                  = 0,
    WidgetUnderCursor                              = 1,
    ENavigationSource                              = 2

};


// Enum  SlateCore.EUINavigationAction
enum class EUINavigationAction : uint8_t
{
    Accept                                         = 0,
    Back                                           = 1,
    Num                                            = 2,
    Invalid                                        = 3,
    EUINavigationAction                            = 4

};


// Enum  SlateCore.EButtonInputPriority
enum class EButtonInputPriority : uint8_t
{
    AfterChildren                                  = 0,
    BeforeChildren                                 = 1,
    Never                                          = 2,
    EButtonInputPriority                           = 3

};


// Enum  SlateCore.EButtonPressMethod
enum class EButtonPressMethod : uint8_t
{
    DownAndUp                                      = 0,
    ButtonPress                                    = 1,
    ButtonRelease                                  = 2,
    EButtonPressMethod                             = 3

};


// Enum  SlateCore.EButtonTouchMethod
enum class EButtonTouchMethod : uint8_t
{
    DownAndUp                                      = 0,
    Down                                           = 1,
    PreciseTap                                     = 2,
    EButtonTouchMethod                             = 3

};


// Enum  SlateCore.EButtonClickMethod
enum class EButtonClickMethod : uint8_t
{
    DownAndUp                                      = 0,
    MouseDown                                      = 1,
    MouseUp                                        = 2,
    PreciseClick                                   = 3,
    EButtonClickMethod                             = 4

};


// Enum  SlateCore.ESlateCheckBoxType
enum class ESlateCheckBoxType : uint8_t
{
    CheckBox                                       = 0,
    ToggleButton                                   = 1,
    ESlateCheckBoxType                             = 2

};


// Enum  SlateCore.ESlateParentWindowSearchMethod
enum class ESlateParentWindowSearchMethod : uint8_t
{
    ActiveWindow                                   = 0,
    MainWindow                                     = 1,
    ESlateParentWindowSearchMethod                 = 2

};


// Enum  ImageWrapper.EBitmapCSType
enum class EBitmapCSType : uint8_t
{
    BCST                                           = 0,
    BCST                                           = 1934772034,
    BCST                                           = 1466527264,
    BCST                                           = 1279872587,
    BCST                                           = 1296188740,
    BCST                                           = 1934772035

};


// Enum  ImageWrapper.EBitmapHeaderVersion
enum class EBitmapHeaderVersion : uint8_t
{
    BHV                                            = 0,
    BHV                                            = 1,
    BHV                                            = 2,
    BHV                                            = 3,
    BHV                                            = 4,
    BHV                                            = 5

};


// Enum  Slate.ETableViewMode
enum class ETableViewMode : uint8_t
{
    List                                           = 0,
    Tile                                           = 1,
    Tree                                           = 2,
    ETableViewMode                                 = 3

};


// Enum  Slate.EMultiBlockType
enum class EMultiBlockType : uint8_t
{
    None                                           = 0,
    ButtonRow                                      = 1,
    EditableText                                   = 2,
    Heading                                        = 3,
    MenuEntry                                      = 4,
    Separator                                      = 5,
    ToolBarButton                                  = 6,
    ToolBarComboButton                             = 7,
    Widget                                         = 8,
    EMultiBlockType                                = 9

};


// Enum  Slate.EMultiBoxType
enum class EMultiBoxType : uint8_t
{
    MenuBar                                        = 0,
    ToolBar                                        = 1,
    VerticalToolBar                                = 2,
    UniformToolBar                                 = 3,
    Menu                                           = 4,
    ButtonRow                                      = 5,
    EMultiBoxType                                  = 6

};


// Enum  Slate.EProgressBarFillType
enum class EProgressBarFillType : uint8_t
{
    LeftToRight                                    = 0,
    RightToLeft                                    = 1,
    FillFromCenter                                 = 2,
    TopToBottom                                    = 3,
    BottomToTop                                    = 4,
    EProgressBarFillType                           = 5

};


// Enum  Slate.EStretch
enum class EStretch : uint8_t
{
    None                                           = 0,
    Fill                                           = 1,
    ScaleToFit                                     = 2,
    ScaleToFitX                                    = 3,
    ScaleToFitY                                    = 4,
    ScaleToFill                                    = 5,
    ScaleBySafeZone                                = 6,
    UserSpecified                                  = 7,
    EStretch                                       = 8

};


// Enum  Slate.EStretchDirection
enum class EStretchDirection : uint8_t
{
    Both                                           = 0,
    DownOnly                                       = 1,
    UpOnly                                         = 2,
    EStretchDirection                              = 3

};


// Enum  Slate.EScrollWhenFocusChanges
enum class EScrollWhenFocusChanges : uint8_t
{
    NoScroll                                       = 0,
    InstantScroll                                  = 1,
    AnimatedScroll                                 = 2,
    EScrollWhenFocusChanges                        = 3

};


// Enum  Slate.EDescendantScrollDestination
enum class EDescendantScrollDestination : uint8_t
{
    IntoView                                       = 0,
    TopOrLeft                                      = 1,
    Center                                         = 2,
    BottomOrRight                                  = 3,
    EDescendantScrollDestination                   = 4

};


// Enum  Slate.EListItemAlignment
enum class EListItemAlignment : uint8_t
{
    EvenlyDistributed                              = 0,
    EvenlySize                                     = 1,
    EvenlyWide                                     = 2,
    LeftAligned                                    = 3,
    RightAligned                                   = 4,
    CenterAligned                                  = 5,
    Fill                                           = 6,
    EListItemAlignment                             = 7

};


// Enum  Slate.ECustomizedToolMenuVisibility
enum class ECustomizedToolMenuVisibility : uint8_t
{
    None                                           = 0,
    Visible                                        = 1,
    Hidden                                         = 2,
    ECustomizedToolMenuVisibility                  = 3

};


// Enum  Slate.EMultipleKeyBindingIndex
enum class EMultipleKeyBindingIndex : uint8_t
{
    Primary                                        = 0,
    Secondary                                      = 1,
    NumChords                                      = 2,
    EMultipleKeyBindingIndex                       = 3

};


// Enum  Slate.EUserInterfaceActionType
enum class EUserInterfaceActionType : uint8_t
{
    None                                           = 0,
    Button                                         = 1,
    ToggleButton                                   = 2,
    RadioButton                                    = 3,
    Check                                          = 4,
    CollapsedButton                                = 5,
    EUserInterfaceActionType                       = 6

};


// Enum  RGILatencyMarkers.ERGILatencyIntervalType
enum class ERGILatencyIntervalType : uint8_t
{
    Work                                           = 0,
    Slack                                          = 1,
    Slop                                           = 2,
    Count                                          = 3,
    ERGILatencyIntervalType                        = 4

};


// Enum  RGILatencyMarkers.ERGILatencyMarkerType
enum class ERGILatencyMarkerType : uint8_t
{
    SimulationStart                                = 0,
    SimulationEnd                                  = 1,
    RenderSubmitStart                              = 2,
    RenderSubmitEnd                                = 3,
    PresentStart                                   = 4,
    PresentEnd                                     = 5,
    InputSample                                    = 6,
    TriggerFlash                                   = 7,
    DrawSceneCommandEnqueued                       = 8,
    DrawSceneCommandStart                          = 9,
    DrawSceneCommandEnd                            = 10,
    SlateDrawWindowCommandStart                    = 11,
    EndDrawingViewportRHICommandEnqueued           = 12,
    VALRenderSyncStart                             = 13,
    VALRenderSyncEnd                               = 14,
    Count                                          = 15,
    ERGILatencyMarkerType                          = 16

};


// Enum  ImageWriteQueue.EDesiredImageFormat
enum class EDesiredImageFormat : uint8_t
{
    PNG                                            = 0,
    JPG                                            = 1,
    BMP                                            = 2,
    EXR                                            = 3,
    EDesiredImageFormat                            = 4

};


// Enum  MaterialShaderQualitySettings.EMobileShadowQuality
enum class EMobileShadowQuality : uint8_t
{
    NoFiltering                                    = 0,
    PCF                                            = 1,
    PCF                                            = 2,
    PCF                                            = 3,
    EMobileShadowQuality                           = 4

};


// Enum  EyeTracker.EEyeTrackerStatus
enum class EEyeTrackerStatus : uint8_t
{
    NotConnected                                   = 0,
    NotTracking                                    = 1,
    Tracking                                       = 2,
    EEyeTrackerStatus                              = 3

};


// Enum  EngineSettings.ESubLevelStripMode
enum class ESubLevelStripMode : uint8_t
{
    ExactClass                                     = 0,
    IsChildOf                                      = 1,
    ESubLevelStripMode                             = 2

};


// Enum  EngineSettings.EFourPlayerSplitScreenType
enum class EFourPlayerSplitScreenType : uint8_t
{
    Grid                                           = 0,
    Vertical                                       = 1,
    Horizontal                                     = 2,
    EFourPlayerSplitScreenType                     = 3

};


// Enum  EngineSettings.EThreePlayerSplitScreenType
enum class EThreePlayerSplitScreenType : uint8_t
{
    FavorTop                                       = 0,
    FavorBottom                                    = 1,
    Vertical                                       = 2,
    Horizontal                                     = 3,
    EThreePlayerSplitScreenType                    = 4

};


// Enum  EngineSettings.ETwoPlayerSplitScreenType
enum class ETwoPlayerSplitScreenType : uint8_t
{
    Horizontal                                     = 0,
    Vertical                                       = 1,
    ETwoPlayerSplitScreenType                      = 2

};


// Enum  Chaos.EClusterUnionMethod
enum class EClusterUnionMethod : uint8_t
{
    PointImplicit                                  = 0,
    DelaunayTriangulation                          = 1,
    MinimalSpanningSubsetDelaunayTriangulation     = 2,
    PointImplicitAugmentedWithMinimalDelaunay      = 3,
    None                                           = 4,
    EClusterUnionMethod                            = 5

};


// Enum  Chaos.EFieldPhysicsDefaultFields
enum class EFieldPhysicsDefaultFields : uint8_t
{
    Field                                          = 0,
    Field                                          = 1,
    Field                                          = 2,
    Field                                          = 3,
    Field                                          = 4,
    Field                                          = 5,
    Field                                          = 6

};


// Enum  Chaos.EFieldOutputType
enum class EFieldOutputType : uint8_t
{
    Field                                          = 0,
    Field                                          = 1,
    Field                                          = 2,
    Field                                          = 3,
    Field                                          = 4

};


// Enum  Chaos.EFieldIntegerType
enum class EFieldIntegerType : uint8_t
{
    Integer                                        = 0,
    Integer                                        = 1,
    Integer                                        = 2,
    Integer                                        = 3,
    Integer                                        = 4,
    Integer                                        = 5,
    Integer                                        = 6

};


// Enum  Chaos.EFieldScalarType
enum class EFieldScalarType : uint8_t
{
    Scalar                                         = 0,
    Scalar                                         = 1,
    Scalar                                         = 2,
    Scalar                                         = 3,
    Scalar                                         = 4,
    Scalar                                         = 5,
    Scalar                                         = 6,
    Scalar                                         = 7

};


// Enum  Chaos.EFieldVectorType
enum class EFieldVectorType : uint8_t
{
    Vector                                         = 0,
    Vector                                         = 1,
    Vector                                         = 2,
    Vector                                         = 3,
    Vector                                         = 4,
    Vector                                         = 5,
    Vector                                         = 6

};


// Enum  Chaos.EFieldPhysicsType
enum class EFieldPhysicsType : uint8_t
{
    Field                                          = 0,
    Field                                          = 1,
    Field                                          = 2,
    Field                                          = 3,
    Field                                          = 4,
    Field                                          = 5,
    Field                                          = 6,
    Field                                          = 7,
    Field                                          = 8,
    Field                                          = 9,
    Field                                          = 10,
    Field                                          = 11,
    Field                                          = 12,
    Field                                          = 13,
    Field                                          = 14,
    Field                                          = 15,
    Field                                          = 16,
    Field                                          = 17

};


// Enum  Chaos.EFieldFalloffType
enum class EFieldFalloffType : uint8_t
{
    Field                                          = 0,
    Field                                          = 1,
    Field                                          = 2,
    Field                                          = 3,
    Field                                          = 4,
    Field                                          = 5

};


// Enum  Chaos.EFieldFilterType
enum class EFieldFilterType : uint8_t
{
    Field                                          = 0,
    Field                                          = 1,
    Field                                          = 2,
    Field                                          = 3,
    Field                                          = 4,
    Field                                          = 5

};


// Enum  Chaos.EFieldResolutionType
enum class EFieldResolutionType : uint8_t
{
    Field                                          = 0,
    Field                                          = 1,
    Field                                          = 2,
    Field                                          = 3,
    Field                                          = 4

};


// Enum  Chaos.EFieldCullingOperationType
enum class EFieldCullingOperationType : uint8_t
{
    Field                                          = 0,
    Field                                          = 1,
    Field                                          = 2,
    Field                                          = 3

};


// Enum  Chaos.EFieldOperationType
enum class EFieldOperationType : uint8_t
{
    Field                                          = 0,
    Field                                          = 1,
    Field                                          = 2,
    Field                                          = 3,
    Field                                          = 4

};


// Enum  Chaos.EWaveFunctionType
enum class EWaveFunctionType : uint8_t
{
    Field                                          = 0,
    Field                                          = 1,
    Field                                          = 2,
    Field                                          = 3,
    Field                                          = 4,
    Field                                          = 5

};


// Enum  Chaos.ESetMaskConditionType
enum class ESetMaskConditionType : uint8_t
{
    Field                                          = 0,
    Field                                          = 1,
    Field                                          = 2,
    Field                                          = 3

};


// Enum  Chaos.EEmissionPatternTypeEnum
enum class EEmissionPatternTypeEnum : uint8_t
{
    Chaos                                          = 0,
    Chaos                                          = 1,
    Chaos                                          = 2,
    Chaos                                          = 3

};


// Enum  Chaos.EInitialVelocityTypeEnum
enum class EInitialVelocityTypeEnum : uint8_t
{
    Chaos                                          = 0,
    Chaos                                          = 1,
    Chaos                                          = 2,
    Chaos                                          = 3

};


// Enum  Chaos.EGeometryCollectionPhysicsTypeEnum
enum class EGeometryCollectionPhysicsTypeEnum : uint8_t
{
    Chaos                                          = 0,
    Chaos                                          = 1,
    Chaos                                          = 2,
    Chaos                                          = 3,
    Chaos                                          = 4,
    Chaos                                          = 5,
    Chaos                                          = 6,
    Chaos                                          = 7,
    Chaos                                          = 8,
    Chaos                                          = 9

};


// Enum  Chaos.EObjectStateTypeEnum
enum class EObjectStateTypeEnum : uint8_t
{
    Chaos                                          = 0,
    Chaos                                          = 1,
    Chaos                                          = 2,
    Chaos                                          = 3,
    Chaos                                          = 4,
    Chaos                                          = 100,
    Chaos                                          = 101,
    Chaos                                          = 102

};


// Enum  Chaos.EImplicitTypeEnum
enum class EImplicitTypeEnum : uint8_t
{
    Chaos                                          = 0,
    Chaos                                          = 1,
    Chaos                                          = 2,
    Chaos                                          = 3,
    Chaos                                          = 4,
    Chaos                                          = 5,
    Chaos                                          = 6

};


// Enum  Chaos.ECollisionTypeEnum
enum class ECollisionTypeEnum : uint8_t
{
    Chaos                                          = 0,
    Chaos                                          = 1,
    Chaos                                          = 2,
    Chaos                                          = 3

};


// Enum  Chaos.EChaosBufferMode
enum class EChaosBufferMode : uint8_t
{
    Double                                         = 0,
    Triple                                         = 1,
    Num                                            = 2,
    Invalid                                        = 3,
    EChaosBufferMode                               = 4

};


// Enum  Chaos.EChaosThreadingMode
enum class EChaosThreadingMode : uint8_t
{
    DedicatedThread                                = 0,
    TaskGraph                                      = 1,
    SingleThread                                   = 2,
    Num                                            = 3,
    Invalid                                        = 4,
    EChaosThreadingMode                            = 5

};


// Enum  Chaos.EChaosSolverTickMode
enum class EChaosSolverTickMode : uint8_t
{
    Fixed                                          = 0,
    Variable                                       = 1,
    VariableCapped                                 = 2,
    VariableCappedWithTarget                       = 3,
    EChaosSolverTickMode                           = 4

};


// Enum  Chaos.EGeometryCollectionCacheType
enum class EGeometryCollectionCacheType : uint8_t
{
    None                                           = 0,
    Record                                         = 1,
    Play                                           = 2,
    RecordAndPlay                                  = 3,
    EGeometryCollectionCacheType                   = 4

};


// Enum  PhysicsCore.EBodyCollisionResponse
enum class EBodyCollisionResponse : uint8_t
{
    BodyCollision                                  = 0,
    BodyCollision                                  = 1,
    BodyCollision                                  = 2

};


// Enum  PhysicsCore.EPhysicsType
enum class EPhysicsType : uint8_t
{
    PhysType                                       = 0,
    PhysType                                       = 1,
    PhysType                                       = 2,
    PhysType                                       = 3

};


// Enum  PhysicsCore.ECollisionTraceFlag
enum class ECollisionTraceFlag : uint8_t
{
    CTF                                            = 0,
    CTF                                            = 1,
    CTF                                            = 2,
    CTF                                            = 3,
    CTF                                            = 4

};


// Enum  PhysicsCore.ELinearConstraintMotion
enum class ELinearConstraintMotion : uint8_t
{
    LCM                                            = 0,
    LCM                                            = 1,
    LCM                                            = 2,
    LCM                                            = 3

};


// Enum  PhysicsCore.EConstraintFrame
enum class EConstraintFrame : uint8_t
{
    Frame1                                         = 0,
    Frame2                                         = 1,
    EConstraintFrame                               = 2

};


// Enum  PhysicsCore.EAngularConstraintMotion
enum class EAngularConstraintMotion : uint8_t
{
    ACM                                            = 0,
    ACM                                            = 1,
    ACM                                            = 2,
    ACM                                            = 3

};


// Enum  PhysicsCore.ESleepFamily
enum class ESleepFamily : uint8_t
{
    Normal                                         = 0,
    Sensitive                                      = 1,
    Custom                                         = 2,
    ESleepFamily                                   = 3

};


// Enum  PhysicsCore.ERadialImpulseFalloff
enum class ERadialImpulseFalloff : uint8_t
{
    RIF                                            = 0,
    RIF                                            = 1,
    RIF                                            = 2

};


// Enum  PhysicsCore.EPhysicalSurface
enum class EPhysicalSurface : uint8_t
{
    SurfaceType                                    = 0,
    SurfaceType1                                   = 1,
    SurfaceType2                                   = 2,
    SurfaceType3                                   = 3,
    SurfaceType4                                   = 4,
    SurfaceType5                                   = 5,
    SurfaceType6                                   = 6,
    SurfaceType7                                   = 7,
    SurfaceType8                                   = 8,
    SurfaceType9                                   = 9,
    SurfaceType10                                  = 10,
    SurfaceType11                                  = 11,
    SurfaceType12                                  = 12,
    SurfaceType13                                  = 13,
    SurfaceType14                                  = 14,
    SurfaceType15                                  = 15,
    SurfaceType16                                  = 16,
    SurfaceType17                                  = 17,
    SurfaceType18                                  = 18,
    SurfaceType19                                  = 19,
    SurfaceType20                                  = 20,
    SurfaceType21                                  = 21,
    SurfaceType22                                  = 22,
    SurfaceType23                                  = 23,
    SurfaceType24                                  = 24,
    SurfaceType25                                  = 25,
    SurfaceType26                                  = 26,
    SurfaceType27                                  = 27,
    SurfaceType28                                  = 28,
    SurfaceType29                                  = 29,
    SurfaceType30                                  = 30,
    SurfaceType31                                  = 31,
    SurfaceType32                                  = 32,
    SurfaceType33                                  = 33,
    SurfaceType34                                  = 34,
    SurfaceType35                                  = 35,
    SurfaceType36                                  = 36,
    SurfaceType37                                  = 37,
    SurfaceType38                                  = 38,
    SurfaceType39                                  = 39,
    SurfaceType40                                  = 40,
    SurfaceType41                                  = 41,
    SurfaceType42                                  = 42,
    SurfaceType43                                  = 43,
    SurfaceType44                                  = 44,
    SurfaceType45                                  = 45,
    SurfaceType46                                  = 46,
    SurfaceType47                                  = 47,
    SurfaceType48                                  = 48,
    SurfaceType49                                  = 49,
    SurfaceType50                                  = 50,
    SurfaceType51                                  = 51,
    SurfaceType52                                  = 52,
    SurfaceType53                                  = 53,
    SurfaceType54                                  = 54,
    SurfaceType55                                  = 55,
    SurfaceType56                                  = 56,
    SurfaceType57                                  = 57,
    SurfaceType58                                  = 58,
    SurfaceType59                                  = 59,
    SurfaceType60                                  = 60,
    SurfaceType61                                  = 61,
    SurfaceType62                                  = 62,
    SurfaceType                                    = 63,
    EPhysicalSurface                               = 64

};


// Enum  PhysicsCore.EFrictionCombineMode
enum class EFrictionCombineMode : uint8_t
{
    Average                                        = 0,
    Min                                            = 1,
    Multiply                                       = 2,
    Max                                            = 3,
    EFrictionCombineMode                           = 4

};


// Enum  Engine.ERelativeTransformSpace
enum class ERelativeTransformSpace : uint8_t
{
    RTS                                            = 0,
    RTS                                            = 1,
    RTS                                            = 2,
    RTS                                            = 3,
    RTS                                            = 4

};


// Enum  Engine.EAttachLocation
enum class EAttachLocation : uint8_t
{
    KeepRelativeOffset                             = 0,
    KeepWorldPosition                              = 1,
    SnapToTarget                                   = 2,
    SnapToTargetIncludingScale                     = 3,
    EAttachLocation                                = 4

};


// Enum  Engine.EAttachmentRule
enum class EAttachmentRule : uint8_t
{
    KeepRelative                                   = 0,
    KeepWorld                                      = 1,
    SnapToTarget                                   = 2,
    EAttachmentRule                                = 3

};


// Enum  Engine.EDetachmentRule
enum class EDetachmentRule : uint8_t
{
    KeepRelative                                   = 0,
    KeepWorld                                      = 1,
    EDetachmentRule                                = 2

};


// Enum  Engine.EComponentMobility
enum class EComponentMobility : uint8_t
{
    Static                                         = 0,
    Stationary                                     = 1,
    Movable                                        = 2,
    EComponentMobility                             = 3

};


// Enum  Engine.EDetailMode
enum class EDetailMode : uint8_t
{
    DM                                             = 0,
    DM                                             = 1,
    DM                                             = 2,
    DM                                             = 3,
    DM                                             = 4

};


// Enum  MRMesh.EMeshTrackerVertexColorMode
enum class EMeshTrackerVertexColorMode : uint8_t
{
    None                                           = 0,
    Confidence                                     = 1,
    Block                                          = 2,
    EMeshTrackerVertexColorMode                    = 3

};


// Enum  AugmentedReality.EARTrackingState
enum class EARTrackingState : uint8_t
{
    Unknown                                        = 0,
    Tracking                                       = 1,
    NotTracking                                    = 2,
    StoppedTracking                                = 3,
    EARTrackingState                               = 4

};


// Enum  AugmentedReality.EGeoAnchorComponentDebugMode
enum class EGeoAnchorComponentDebugMode : uint8_t
{
    None                                           = 0,
    ShowGeoData                                    = 1,
    EGeoAnchorComponentDebugMode                   = 2

};


// Enum  AugmentedReality.EPoseComponentDebugMode
enum class EPoseComponentDebugMode : uint8_t
{
    None                                           = 0,
    ShowSkeleton                                   = 1,
    EPoseComponentDebugMode                        = 2

};


// Enum  AugmentedReality.EQRCodeComponentDebugMode
enum class EQRCodeComponentDebugMode : uint8_t
{
    None                                           = 0,
    ShowQRCode                                     = 1,
    EQRCodeComponentDebugMode                      = 2

};


// Enum  AugmentedReality.EImageComponentDebugMode
enum class EImageComponentDebugMode : uint8_t
{
    None                                           = 0,
    ShowDetectedImage                              = 1,
    EImageComponentDebugMode                       = 2

};


// Enum  AugmentedReality.EARFaceTransformMixing
enum class EARFaceTransformMixing : uint8_t
{
    ComponentOnly                                  = 0,
    ComponentLocationTrackedRotation               = 1,
    ComponentWithTracked                           = 2,
    TrackingOnly                                   = 3,
    EARFaceTransformMixing                         = 4

};


// Enum  AugmentedReality.EFaceComponentDebugMode
enum class EFaceComponentDebugMode : uint8_t
{
    None                                           = 0,
    ShowEyeVectors                                 = 1,
    ShowFaceMesh                                   = 2,
    EFaceComponentDebugMode                        = 3

};


// Enum  AugmentedReality.EPlaneComponentDebugMode
enum class EPlaneComponentDebugMode : uint8_t
{
    None                                           = 0,
    ShowNetworkRole                                = 1,
    ShowClassification                             = 2,
    EPlaneComponentDebugMode                       = 3

};


// Enum  AugmentedReality.EARSessionConfigFlags
enum class EARSessionConfigFlags : uint8_t
{
    None                                           = 0,
    GenerateMeshData                               = 1,
    RenderMeshDataInWireframe                      = 2,
    GenerateCollisionForMeshData                   = 4,
    GenerateNavMeshForMeshData                     = 8,
    UseMeshDataForOcclusion                        = 16,
    EARSessionConfigFlags                          = 17

};


// Enum  AugmentedReality.EARServicePermissionRequestResult
enum class EARServicePermissionRequestResult : uint8_t
{
    Granted                                        = 0,
    Denied                                         = 1,
    EARServicePermissionRequestResult              = 2

};


// Enum  AugmentedReality.EARServiceInstallRequestResult
enum class EARServiceInstallRequestResult : uint8_t
{
    Installed                                      = 0,
    DeviceNotCompatible                            = 1,
    UserDeclinedInstallation                       = 2,
    FatalError                                     = 3,
    EARServiceInstallRequestResult                 = 4

};


// Enum  AugmentedReality.EARServiceAvailability
enum class EARServiceAvailability : uint8_t
{
    UnknownError                                   = 0,
    UnknownChecking                                = 1,
    UnknownTimedOut                                = 2,
    UnsupportedDeviceNotCapable                    = 3,
    SupportedNotInstalled                          = 4,
    SupportedVersionTooOld                         = 5,
    SupportedInstalled                             = 6,
    EARServiceAvailability                         = 7

};


// Enum  AugmentedReality.EARGeoTrackingAccuracy
enum class EARGeoTrackingAccuracy : uint8_t
{
    Undetermined                                   = 0,
    Low                                            = 1,
    Medium                                         = 2,
    High                                           = 3,
    EARGeoTrackingAccuracy                         = 4

};


// Enum  AugmentedReality.EARGeoTrackingStateReason
enum class EARGeoTrackingStateReason : uint8_t
{
    None                                           = 0,
    NotAvailableAtLocation                         = 1,
    NeedLocationPermissions                        = 2,
    DevicePointedTooLow                            = 3,
    WorldTrackingUnstable                          = 4,
    WaitingForLocation                             = 5,
    GeoDataNotLoaded                               = 6,
    VisualLocalizationFailed                       = 7,
    WaitingForAvailabilityCheck                    = 8,
    EARGeoTrackingStateReason                      = 9

};


// Enum  AugmentedReality.EARGeoTrackingState
enum class EARGeoTrackingState : uint8_t
{
    Initializing                                   = 0,
    Localized                                      = 1,
    Localizing                                     = 2,
    NotAvailable                                   = 3,
    EARGeoTrackingState                            = 4

};


// Enum  AugmentedReality.EARSceneReconstruction
enum class EARSceneReconstruction : uint8_t
{
    None                                           = 0,
    MeshOnly                                       = 1,
    MeshWithClassification                         = 2,
    EARSceneReconstruction                         = 3

};


// Enum  AugmentedReality.EARSessionTrackingFeature
enum class EARSessionTrackingFeature : uint8_t
{
    None                                           = 0,
    PoseDetection2D                                = 1,
    PersonSegmentation                             = 2,
    PersonSegmentationWithDepth                    = 3,
    SceneDepth                                     = 4,
    SmoothedSceneDepth                             = 5,
    EARSessionTrackingFeature                      = 6

};


// Enum  AugmentedReality.EARFaceTrackingUpdate
enum class EARFaceTrackingUpdate : uint8_t
{
    CurvesAndGeo                                   = 0,
    CurvesOnly                                     = 1,
    EARFaceTrackingUpdate                          = 2

};


// Enum  AugmentedReality.EAREnvironmentCaptureProbeType
enum class EAREnvironmentCaptureProbeType : uint8_t
{
    None                                           = 0,
    Manual                                         = 1,
    Automatic                                      = 2,
    EAREnvironmentCaptureProbeType                 = 3

};


// Enum  AugmentedReality.EARFrameSyncMode
enum class EARFrameSyncMode : uint8_t
{
    SyncTickWithCameraImage                        = 0,
    SyncTickWithoutCameraImage                     = 1,
    EARFrameSyncMode                               = 2

};


// Enum  AugmentedReality.EARLightEstimationMode
enum class EARLightEstimationMode : uint8_t
{
    None                                           = 0,
    AmbientLightEstimate                           = 1,
    DirectionalLightEstimate                       = 2,
    EARLightEstimationMode                         = 3

};


// Enum  AugmentedReality.EARPlaneDetectionMode
enum class EARPlaneDetectionMode : uint8_t
{
    None                                           = 0,
    HorizontalPlaneDetection                       = 1,
    VerticalPlaneDetection                         = 2,
    EARPlaneDetectionMode                          = 3

};


// Enum  AugmentedReality.EARSessionType
enum class EARSessionType : uint8_t
{
    None                                           = 0,
    Orientation                                    = 1,
    World                                          = 2,
    Face                                           = 3,
    Image                                          = 4,
    ObjectScanning                                 = 5,
    PoseTracking                                   = 6,
    GeoTracking                                    = 7,
    EARSessionType                                 = 8

};


// Enum  AugmentedReality.EARWorldAlignment
enum class EARWorldAlignment : uint8_t
{
    Gravity                                        = 0,
    GravityAndHeading                              = 1,
    Camera                                         = 2,
    EARWorldAlignment                              = 3

};


// Enum  AugmentedReality.EARDepthAccuracy
enum class EARDepthAccuracy : uint8_t
{
    Unkown                                         = 0,
    Approximate                                    = 1,
    Accurate                                       = 2,
    EARDepthAccuracy                               = 3

};


// Enum  AugmentedReality.EARDepthQuality
enum class EARDepthQuality : uint8_t
{
    Unkown                                         = 0,
    Low                                            = 1,
    High                                           = 2,
    EARDepthQuality                                = 3

};


// Enum  AugmentedReality.EARTextureType
enum class EARTextureType : uint8_t
{
    Unknown                                        = 0,
    CameraImage                                    = 1,
    CameraDepth                                    = 2,
    EnvironmentCapture                             = 3,
    PersonSegmentationImage                        = 4,
    PersonSegmentationDepth                        = 5,
    SceneDepthMap                                  = 6,
    SceneDepthConfidenceMap                        = 7,
    EARTextureType                                 = 8

};


// Enum  AugmentedReality.EAREye
enum class EAREye : uint8_t
{
    LeftEye                                        = 0,
    RightEye                                       = 1,
    EAREye                                         = 2

};


// Enum  AugmentedReality.EARFaceBlendShape
enum class EARFaceBlendShape : uint8_t
{
    EyeBlinkLeft                                   = 0,
    EyeLookDownLeft                                = 1,
    EyeLookInLeft                                  = 2,
    EyeLookOutLeft                                 = 3,
    EyeLookUpLeft                                  = 4,
    EyeSquintLeft                                  = 5,
    EyeWideLeft                                    = 6,
    EyeBlinkRight                                  = 7,
    EyeLookDownRight                               = 8,
    EyeLookInRight                                 = 9,
    EyeLookOutRight                                = 10,
    EyeLookUpRight                                 = 11,
    EyeSquintRight                                 = 12,
    EyeWideRight                                   = 13,
    JawForward                                     = 14,
    JawLeft                                        = 15,
    JawRight                                       = 16,
    JawOpen                                        = 17,
    MouthClose                                     = 18,
    MouthFunnel                                    = 19,
    MouthPucker                                    = 20,
    MouthLeft                                      = 21,
    MouthRight                                     = 22,
    MouthSmileLeft                                 = 23,
    MouthSmileRight                                = 24,
    MouthFrownLeft                                 = 25,
    MouthFrownRight                                = 26,
    MouthDimpleLeft                                = 27,
    MouthDimpleRight                               = 28,
    MouthStretchLeft                               = 29,
    MouthStretchRight                              = 30,
    MouthRollLower                                 = 31,
    MouthRollUpper                                 = 32,
    MouthShrugLower                                = 33,
    MouthShrugUpper                                = 34,
    MouthPressLeft                                 = 35,
    MouthPressRight                                = 36,
    MouthLowerDownLeft                             = 37,
    MouthLowerDownRight                            = 38,
    MouthUpperUpLeft                               = 39,
    MouthUpperUpRight                              = 40,
    BrowDownLeft                                   = 41,
    BrowDownRight                                  = 42,
    BrowInnerUp                                    = 43,
    BrowOuterUpLeft                                = 44,
    BrowOuterUpRight                               = 45,
    CheekPuff                                      = 46,
    CheekSquintLeft                                = 47,
    CheekSquintRight                               = 48,
    NoseSneerLeft                                  = 49,
    NoseSneerRight                                 = 50,
    TongueOut                                      = 51,
    HeadYaw                                        = 52,
    HeadPitch                                      = 53,
    HeadRoll                                       = 54,
    LeftEyeYaw                                     = 55,
    LeftEyePitch                                   = 56,
    LeftEyeRoll                                    = 57,
    RightEyeYaw                                    = 58,
    RightEyePitch                                  = 59,
    RightEyeRoll                                   = 60,
    MAX                                            = 61

};


// Enum  AugmentedReality.EARFaceTrackingDirection
enum class EARFaceTrackingDirection : uint8_t
{
    FaceRelative                                   = 0,
    FaceMirrored                                   = 1,
    EARFaceTrackingDirection                       = 2

};


// Enum  AugmentedReality.EARCandidateImageOrientation
enum class EARCandidateImageOrientation : uint8_t
{
    Landscape                                      = 0,
    Portrait                                       = 1,
    EARCandidateImageOrientation                   = 2

};


// Enum  AugmentedReality.EARAltitudeSource
enum class EARAltitudeSource : uint8_t
{
    Precise                                        = 0,
    Coarse                                         = 1,
    UserDefined                                    = 2,
    Unknown                                        = 3,
    EARAltitudeSource                              = 4

};


// Enum  AugmentedReality.EARJointTransformSpace
enum class EARJointTransformSpace : uint8_t
{
    Model                                          = 0,
    ParentJoint                                    = 1,
    EARJointTransformSpace                         = 2

};


// Enum  AugmentedReality.EARSpatialMeshUsageFlags
enum class EARSpatialMeshUsageFlags : uint8_t
{
    NotApplicable                                  = 0,
    Visible                                        = 1,
    Collision                                      = 2,
    EARSpatialMeshUsageFlags                       = 3

};


// Enum  AugmentedReality.EARObjectClassification
enum class EARObjectClassification : uint8_t
{
    NotApplicable                                  = 0,
    Unknown                                        = 1,
    Wall                                           = 2,
    Ceiling                                        = 3,
    Floor                                          = 4,
    Table                                          = 5,
    Seat                                           = 6,
    Face                                           = 7,
    Image                                          = 8,
    World                                          = 9,
    SceneObject                                    = 10,
    HandMesh                                       = 11,
    Door                                           = 12,
    Window                                         = 13,
    EARObjectClassification                        = 14

};


// Enum  AugmentedReality.EARPlaneOrientation
enum class EARPlaneOrientation : uint8_t
{
    Horizontal                                     = 0,
    Vertical                                       = 1,
    Diagonal                                       = 2,
    EARPlaneOrientation                            = 3

};


// Enum  AugmentedReality.EARWorldMappingState
enum class EARWorldMappingState : uint8_t
{
    NotAvailable                                   = 0,
    StillMappingNotRelocalizable                   = 1,
    StillMappingRelocalizable                      = 2,
    Mapped                                         = 3,
    EARWorldMappingState                           = 4

};


// Enum  AugmentedReality.EARSessionStatus
enum class EARSessionStatus : uint8_t
{
    NotStarted                                     = 0,
    Running                                        = 1,
    NotSupported                                   = 2,
    FatalError                                     = 3,
    PermissionNotGranted                           = 4,
    UnsupportedConfiguration                       = 5,
    Other                                          = 6,
    EARSessionStatus                               = 7

};


// Enum  AugmentedReality.EARTrackingQualityReason
enum class EARTrackingQualityReason : uint8_t
{
    None                                           = 0,
    Initializing                                   = 1,
    Relocalizing                                   = 2,
    ExcessiveMotion                                = 3,
    InsufficientFeatures                           = 4,
    InsufficientLight                              = 5,
    BadState                                       = 6,
    EARTrackingQualityReason                       = 7

};


// Enum  AugmentedReality.EARTrackingQuality
enum class EARTrackingQuality : uint8_t
{
    NotTracking                                    = 0,
    OrientationOnly                                = 1,
    OrientationAndPosition                         = 2,
    EARTrackingQuality                             = 3

};


// Enum  AugmentedReality.EARLineTraceChannels
enum class EARLineTraceChannels : uint8_t
{
    None                                           = 0,
    FeaturePoint                                   = 1,
    GroundPlane                                    = 2,
    PlaneUsingExtent                               = 4,
    PlaneUsingBoundaryPolygon                      = 8,
    EARLineTraceChannels                           = 9

};


// Enum  AugmentedReality.EARCaptureType
enum class EARCaptureType : uint8_t
{
    Camera                                         = 0,
    QRCode                                         = 1,
    SpatialMapping                                 = 2,
    SceneUnderstanding                             = 3,
    HandMesh                                       = 4,
    EARCaptureType                                 = 5

};


// Enum  HeadMountedDisplay.EXRVisualType
enum class EXRVisualType : uint8_t
{
    Controller                                     = 0,
    Hand                                           = 1,
    EXRVisualType                                  = 2

};


// Enum  HeadMountedDisplay.EHandKeypoint
enum class EHandKeypoint : uint8_t
{
    Palm                                           = 0,
    Wrist                                          = 1,
    ThumbMetacarpal                                = 2,
    ThumbProximal                                  = 3,
    ThumbDistal                                    = 4,
    ThumbTip                                       = 5,
    IndexMetacarpal                                = 6,
    IndexProximal                                  = 7,
    IndexIntermediate                              = 8,
    IndexDistal                                    = 9,
    IndexTip                                       = 10,
    MiddleMetacarpal                               = 11,
    MiddleProximal                                 = 12,
    MiddleIntermediate                             = 13,
    MiddleDistal                                   = 14,
    MiddleTip                                      = 15,
    RingMetacarpal                                 = 16,
    RingProximal                                   = 17,
    RingIntermediate                               = 18,
    RingDistal                                     = 19,
    RingTip                                        = 20,
    LittleMetacarpal                               = 21,
    LittleProximal                                 = 22,
    LittleIntermediate                             = 23,
    LittleDistal                                   = 24,
    LittleTip                                      = 25,
    EHandKeypoint                                  = 26

};


// Enum  HeadMountedDisplay.EXRTrackedDeviceType
enum class EXRTrackedDeviceType : uint8_t
{
    HeadMountedDisplay                             = 0,
    Controller                                     = 1,
    TrackingReference                              = 2,
    Other                                          = 3,
    Invalid                                        = 254,
    Any                                            = 255,
    EXRTrackedDeviceType                           = 256

};


// Enum  HeadMountedDisplay.ESpectatorScreenMode
enum class ESpectatorScreenMode : uint8_t
{
    Disabled                                       = 0,
    SingleEyeLetterboxed                           = 1,
    Undistorted                                    = 2,
    Distorted                                      = 3,
    SingleEye                                      = 4,
    SingleEyeCroppedToFill                         = 5,
    Texture                                        = 6,
    TexturePlusEye                                 = 7,
    ESpectatorScreenMode                           = 8

};


// Enum  HeadMountedDisplay.EXRSystemFlags
enum class EXRSystemFlags : uint8_t
{
    NoFlags                                        = 0,
    IsAR                                           = 1,
    IsTablet                                       = 2,
    IsHeadMounted                                  = 4,
    SupportsHandTracking                           = 8,
    EXRSystemFlags                                 = 9

};


// Enum  HeadMountedDisplay.EXRDeviceConnectionResult
enum class EXRDeviceConnectionResult : uint8_t
{
    NoTrackingSystem                               = 0,
    FeatureNotSupported                            = 1,
    NoValidViewport                                = 2,
    MiscFailure                                    = 3,
    Success                                        = 4,
    EXRDeviceConnectionResult                      = 5

};


// Enum  HeadMountedDisplay.EHMDWornState
enum class EHMDWornState : uint8_t
{
    Unknown                                        = 0,
    Worn                                           = 1,
    NotWorn                                        = 2,
    EHMDWornState                                  = 3

};


// Enum  HeadMountedDisplay.EHMDTrackingOrigin
enum class EHMDTrackingOrigin : uint8_t
{
    Floor                                          = 0,
    Eye                                            = 1,
    Stage                                          = 2,
    EHMDTrackingOrigin                             = 3

};


// Enum  HeadMountedDisplay.EOrientPositionSelector
enum class EOrientPositionSelector : uint8_t
{
    Orientation                                    = 0,
    Position                                       = 1,
    OrientationAndPosition                         = 2,
    EOrientPositionSelector                        = 3

};


// Enum  HeadMountedDisplay.ETrackingStatus
enum class ETrackingStatus : uint8_t
{
    NotTracked                                     = 0,
    InertialOnly                                   = 1,
    Tracked                                        = 2,
    ETrackingStatus                                = 3

};


// Enum  HeadMountedDisplay.ESpatialInputGestureAxis
enum class ESpatialInputGestureAxis : uint8_t
{
    None                                           = 0,
    Manipulation                                   = 1,
    Navigation                                     = 2,
    NavigationRails                                = 3,
    ESpatialInputGestureAxis                       = 4

};


// Enum  Foliage.EFoliageScaling
enum class EFoliageScaling : uint8_t
{
    Uniform                                        = 0,
    Free                                           = 1,
    LockXY                                         = 2,
    LockXZ                                         = 3,
    LockYZ                                         = 4,
    EFoliageScaling                                = 5

};


// Enum  Foliage.EVertexColorMaskChannel
enum class EVertexColorMaskChannel : uint8_t
{
    Red                                            = 0,
    Green                                          = 1,
    Blue                                           = 2,
    Alpha                                          = 3,
    MAX                                            = 4,
    EVertexColorMaskChannel                        = 5

};


// Enum  Foliage.FoliageVertexColorMask
enum class FoliageVertexColorMask : uint8_t
{
    FOLIAGEVERTEXCOLORMASK                         = 0,
    FOLIAGEVERTEXCOLORMASK                         = 1,
    FOLIAGEVERTEXCOLORMASK                         = 2,
    FOLIAGEVERTEXCOLORMASK                         = 3,
    FOLIAGEVERTEXCOLORMASK                         = 4,
    FOLIAGEVERTEXCOLORMASK                         = 5

};


// Enum  Foliage.ESimulationQuery
enum class ESimulationQuery : uint8_t
{
    None                                           = 0,
    CollisionOverlap                               = 1,
    ShadeOverlap                                   = 2,
    AnyOverlap                                     = 3,
    ESimulationQuery                               = 4

};


// Enum  Foliage.ESimulationOverlap
enum class ESimulationOverlap : uint8_t
{
    CollisionOverlap                               = 0,
    ShadeOverlap                                   = 1,
    None                                           = 2,
    ESimulationOverlap                             = 3

};


// Enum  Landscape.ELandscapeBlendMode
enum class ELandscapeBlendMode : uint8_t
{
    LSBM                                           = 0,
    LSBM                                           = 1,
    LSBM                                           = 2

};


// Enum  Landscape.EWeightmapRTType
enum class EWeightmapRTType : uint8_t
{
    WeightmapRT                                    = 0,
    WeightmapRT                                    = 1,
    WeightmapRT                                    = 2,
    WeightmapRT                                    = 3,
    WeightmapRT                                    = 4,
    WeightmapRT                                    = 5,
    WeightmapRT                                    = 6,
    WeightmapRT                                    = 7,
    WeightmapRT                                    = 8,
    WeightmapRT                                    = 9,
    WeightmapRT                                    = 10,
    WeightmapRT                                    = 11,
    WeightmapRT                                    = 12,
    WeightmapRT                                    = 13

};


// Enum  Landscape.EHeightmapRTType
enum class EHeightmapRTType : uint8_t
{
    HeightmapRT                                    = 0,
    HeightmapRT                                    = 1,
    HeightmapRT                                    = 2,
    HeightmapRT                                    = 3,
    HeightmapRT                                    = 4,
    HeightmapRT                                    = 5,
    HeightmapRT                                    = 6,
    HeightmapRT                                    = 7,
    HeightmapRT                                    = 8,
    HeightmapRT                                    = 9,
    HeightmapRT                                    = 10,
    HeightmapRT                                    = 11,
    HeightmapRT                                    = 12,
    HeightmapRT                                    = 13

};


// Enum  Landscape.ERTDrawingType
enum class ERTDrawingType : uint8_t
{
    RTAtlas                                        = 0,
    RTAtlasToNonAtlas                              = 1,
    RTNonAtlasToAtlas                              = 2,
    RTNonAtlas                                     = 3,
    RTMips                                         = 4,
    ERTDrawingType                                 = 5

};


// Enum  Landscape.ELandscapeSetupErrors
enum class ELandscapeSetupErrors : uint8_t
{
    LSE                                            = 0,
    LSE                                            = 1,
    LSE                                            = 2,
    LSE                                            = 3,
    LSE                                            = 4

};


// Enum  Landscape.ELandscapeClearMode
enum class ELandscapeClearMode : uint8_t
{
    Clear                                          = 1,
    Clear                                          = 2,
    Clear                                          = 3,
    Clear                                          = 4

};


// Enum  Landscape.ELandscapeGizmoType
enum class ELandscapeGizmoType : uint8_t
{
    LGT                                            = 0,
    LGT                                            = 1,
    LGT                                            = 2,
    LGT                                            = 3

};


// Enum  Landscape.EGrassScaling
enum class EGrassScaling : uint8_t
{
    Uniform                                        = 0,
    Free                                           = 1,
    LockXY                                         = 2,
    EGrassScaling                                  = 3

};


// Enum  Landscape.ESplineModulationColorMask
enum class ESplineModulationColorMask : uint8_t
{
    Red                                            = 0,
    Green                                          = 1,
    Blue                                           = 2,
    Alpha                                          = 3,
    ESplineModulationColorMask                     = 4

};


// Enum  Landscape.ELandscapeLODFalloff
enum class ELandscapeLODFalloff : uint8_t
{
    Linear                                         = 0,
    SquareRoot                                     = 1,
    ELandscapeLODFalloff                           = 2

};


// Enum  Landscape.ELandscapeLayerDisplayMode
enum class ELandscapeLayerDisplayMode : uint8_t
{
    Default                                        = 0,
    Alphabetical                                   = 1,
    UserSpecific                                   = 2,
    ELandscapeLayerDisplayMode                     = 3

};


// Enum  Landscape.ELandscapeLayerPaintingRestriction
enum class ELandscapeLayerPaintingRestriction : uint8_t
{
    None                                           = 0,
    UseMaxLayers                                   = 1,
    ExistingOnly                                   = 2,
    UseComponentWhitelist                          = 3,
    ELandscapeLayerPaintingRestriction             = 4

};


// Enum  Landscape.ELandscapeImportAlphamapType
enum class ELandscapeImportAlphamapType : uint8_t
{
    Additive                                       = 0,
    Layered                                        = 1,
    ELandscapeImportAlphamapType                   = 2

};


// Enum  Landscape.LandscapeSplineMeshOrientation
enum class LandscapeSplineMeshOrientation : uint8_t
{
    LSMO                                           = 0,
    LSMO                                           = 1,
    LSMO                                           = 2

};


// Enum  Landscape.ELandscapeLayerBlendType
enum class ELandscapeLayerBlendType : uint8_t
{
    LB                                             = 0,
    LB                                             = 1,
    LB                                             = 2,
    LB                                             = 3

};


// Enum  Landscape.ELandscapeCustomizedCoordType
enum class ELandscapeCustomizedCoordType : uint8_t
{
    LCCT                                           = 0,
    LCCT                                           = 1,
    LCCT                                           = 2,
    LCCT                                           = 3,
    LCCT                                           = 4,
    LCCT                                           = 5

};


// Enum  Landscape.ETerrainCoordMappingType
enum class ETerrainCoordMappingType : uint8_t
{
    TCMT                                           = 0,
    TCMT                                           = 1,
    TCMT                                           = 2,
    TCMT                                           = 3,
    TCMT                                           = 4

};


// Enum  TimeManagement.EFrameNumberDisplayFormats
enum class EFrameNumberDisplayFormats : uint8_t
{
    NonDropFrameTimecode                           = 0,
    DropFrameTimecode                              = 1,
    Seconds                                        = 2,
    Frames                                         = 3,
    MAX                                            = 4,
    EFrameNumberDisplayFormats                     = 5

};


// Enum  TimeManagement.ETimedDataInputState
enum class ETimedDataInputState : uint8_t
{
    Connected                                      = 0,
    Unresponsive                                   = 1,
    Disconnected                                   = 2,
    ETimedDataInputState                           = 3

};


// Enum  TimeManagement.ETimedDataInputEvaluationType
enum class ETimedDataInputEvaluationType : uint8_t
{
    None                                           = 0,
    Timecode                                       = 1,
    PlatformTime                                   = 2,
    ETimedDataInputEvaluationType                  = 3

};


// Enum  MovieScene.EMovieSceneKeyInterpolation
enum class EMovieSceneKeyInterpolation : uint8_t
{
    Auto                                           = 0,
    User                                           = 1,
    Break                                          = 2,
    Linear                                         = 3,
    Constant                                       = 4,
    EMovieSceneKeyInterpolation                    = 5

};


// Enum  MovieScene.EMovieSceneBlendType
enum class EMovieSceneBlendType : uint8_t
{
    Invalid                                        = 0,
    Absolute                                       = 1,
    Additive                                       = 2,
    Relative                                       = 4,
    AdditiveFromBase                               = 8,
    EMovieSceneBlendType                           = 9

};


// Enum  MovieScene.EMovieSceneCompletionMode
enum class EMovieSceneCompletionMode : uint8_t
{
    KeepState                                      = 0,
    RestoreState                                   = 1,
    ProjectDefault                                 = 2,
    EMovieSceneCompletionMode                      = 3

};


// Enum  MovieScene.EMovieSceneBuiltInEasing
enum class EMovieSceneBuiltInEasing : uint8_t
{
    Linear                                         = 0,
    SinIn                                          = 1,
    SinOut                                         = 2,
    SinInOut                                       = 3,
    QuadIn                                         = 4,
    QuadOut                                        = 5,
    QuadInOut                                      = 6,
    CubicIn                                        = 7,
    CubicOut                                       = 8,
    CubicInOut                                     = 9,
    QuartIn                                        = 10,
    QuartOut                                       = 11,
    QuartInOut                                     = 12,
    QuintIn                                        = 13,
    QuintOut                                       = 14,
    QuintInOut                                     = 15,
    ExpoIn                                         = 16,
    ExpoOut                                        = 17,
    ExpoInOut                                      = 18,
    CircIn                                         = 19,
    CircOut                                        = 20,
    CircInOut                                      = 21,
    EMovieSceneBuiltInEasing                       = 22

};


// Enum  MovieScene.EEvaluationMethod
enum class EEvaluationMethod : uint8_t
{
    Static                                         = 0,
    Swept                                          = 1,
    EEvaluationMethod                              = 2

};


// Enum  MovieScene.EMovieSceneServerClientMask
enum class EMovieSceneServerClientMask : uint8_t
{
    None                                           = 0,
    Server                                         = 1,
    Client                                         = 2,
    All                                            = 3,
    EMovieSceneServerClientMask                    = 4

};


// Enum  MovieScene.EMovieSceneSequenceFlags
enum class EMovieSceneSequenceFlags : uint8_t
{
    None                                           = 0,
    Volatile                                       = 1,
    BlockingEvaluation                             = 2,
    InheritedFlags                                 = 1,
    EMovieSceneSequenceFlags                       = 3

};


// Enum  MovieScene.EUpdateClockSource
enum class EUpdateClockSource : uint8_t
{
    Tick                                           = 0,
    Platform                                       = 1,
    Audio                                          = 2,
    RelativeTimecode                               = 3,
    Timecode                                       = 4,
    Custom                                         = 5,
    EUpdateClockSource                             = 6

};


// Enum  MovieScene.EMovieSceneEvaluationType
enum class EMovieSceneEvaluationType : uint8_t
{
    FrameLocked                                    = 0,
    WithSubFrames                                  = 1,
    EMovieSceneEvaluationType                      = 2

};


// Enum  MovieScene.EMovieScenePlayerStatus
enum class EMovieScenePlayerStatus : uint8_t
{
    Stopped                                        = 0,
    Playing                                        = 1,
    Scrubbing                                      = 2,
    Jumping                                        = 3,
    Stepping                                       = 4,
    Paused                                         = 5,
    MAX                                            = 6

};


// Enum  MovieScene.EMovieSceneObjectBindingSpace
enum class EMovieSceneObjectBindingSpace : uint8_t
{
    Local                                          = 0,
    Root                                           = 1,
    Unused                                         = 2,
    EMovieSceneObjectBindingSpace                  = 3

};


// Enum  MovieScene.ESectionEvaluationFlags
enum class ESectionEvaluationFlags : uint8_t
{
    None                                           = 0,
    PreRoll                                        = 1,
    PostRoll                                       = 2,
    ESectionEvaluationFlags                        = 3

};


// Enum  MovieScene.EMovieScenePositionType
enum class EMovieScenePositionType : uint8_t
{
    Frame                                          = 0,
    Time                                           = 1,
    MarkedFrame                                    = 2,
    EMovieScenePositionType                        = 3

};


// Enum  MovieScene.EUpdatePositionMethod
enum class EUpdatePositionMethod : uint8_t
{
    Play                                           = 0,
    Jump                                           = 1,
    Scrub                                          = 2,
    EUpdatePositionMethod                          = 3

};


// Enum  MovieScene.ESpawnOwnership
enum class ESpawnOwnership : uint8_t
{
    InnerSequence                                  = 0,
    MasterSequence                                 = 1,
    External                                       = 2,
    ESpawnOwnership                                = 3

};


// Enum  AnimationCore.ETransformConstraintType
enum class ETransformConstraintType : uint8_t
{
    Translation                                    = 0,
    Rotation                                       = 1,
    Scale                                          = 2,
    Parent                                         = 3,
    ETransformConstraintType                       = 4

};


// Enum  AnimationCore.EConstraintType
enum class EConstraintType : uint8_t
{
    Transform                                      = 0,
    Aim                                            = 1,
    MAX                                            = 2

};


// Enum  AnimGraphRuntime.ESphericalLimitType
enum class ESphericalLimitType : uint8_t
{
    Inner                                          = 0,
    Outer                                          = 1,
    ESphericalLimitType                            = 2

};


// Enum  AnimGraphRuntime.AnimPhysSimSpaceType
enum class AnimPhysSimSpaceType : uint8_t
{
    Component                                      = 0,
    Actor                                          = 1,
    World                                          = 2,
    RootRelative                                   = 3,
    BoneRelative                                   = 4,
    AnimPhysSimSpaceType                           = 5

};


// Enum  AnimGraphRuntime.AnimPhysLinearConstraintType
enum class AnimPhysLinearConstraintType : uint8_t
{
    Free                                           = 0,
    Limited                                        = 1,
    AnimPhysLinearConstraintType                   = 2

};


// Enum  AnimGraphRuntime.AnimPhysAngularConstraintType
enum class AnimPhysAngularConstraintType : uint8_t
{
    Angular                                        = 0,
    Cone                                           = 1,
    AnimPhysAngularConstraintType                  = 2

};


// Enum  AnimGraphRuntime.EBlendListTransitionType
enum class EBlendListTransitionType : uint8_t
{
    StandardBlend                                  = 0,
    Inertialization                                = 1,
    EBlendListTransitionType                       = 2

};


// Enum  AnimGraphRuntime.EDrivenDestinationMode
enum class EDrivenDestinationMode : uint8_t
{
    Bone                                           = 0,
    MorphTarget                                    = 1,
    MaterialParameter                              = 2,
    EDrivenDestinationMode                         = 3

};


// Enum  AnimGraphRuntime.EDrivenBoneModificationMode
enum class EDrivenBoneModificationMode : uint8_t
{
    AddToInput                                     = 0,
    ReplaceComponent                               = 1,
    AddToRefPose                                   = 2,
    EDrivenBoneModificationMode                    = 3

};


// Enum  AnimGraphRuntime.EConstraintOffsetOption
enum class EConstraintOffsetOption : uint8_t
{
    None                                           = 0,
    Offset                                         = 1,
    EConstraintOffsetOption                        = 2

};


// Enum  AnimGraphRuntime.CopyBoneDeltaMode
enum class CopyBoneDeltaMode : uint8_t
{
    Accumulate                                     = 0,
    Copy                                           = 1,
    CopyBoneDeltaMode                              = 2

};


// Enum  AnimGraphRuntime.EInterpolationBlend
enum class EInterpolationBlend : uint8_t
{
    Linear                                         = 0,
    Cubic                                          = 1,
    Sinusoidal                                     = 2,
    EaseInOutExponent2                             = 3,
    EaseInOutExponent3                             = 4,
    EaseInOutExponent4                             = 5,
    EaseInOutExponent5                             = 6,
    MAX                                            = 7

};


// Enum  AnimGraphRuntime.EBoneModificationMode
enum class EBoneModificationMode : uint8_t
{
    BMM                                            = 0,
    BMM                                            = 1,
    BMM                                            = 2,
    BMM                                            = 3

};


// Enum  AnimGraphRuntime.EModifyCurveApplyMode
enum class EModifyCurveApplyMode : uint8_t
{
    Add                                            = 0,
    Scale                                          = 1,
    Blend                                          = 2,
    WeightedMovingAverage                          = 3,
    RemapCurve                                     = 4,
    EModifyCurveApplyMode                          = 5

};


// Enum  AnimGraphRuntime.EPoseDriverOutput
enum class EPoseDriverOutput : uint8_t
{
    DrivePoses                                     = 0,
    DriveCurves                                    = 1,
    EPoseDriverOutput                              = 2

};


// Enum  AnimGraphRuntime.EPoseDriverSource
enum class EPoseDriverSource : uint8_t
{
    Rotation                                       = 0,
    Translation                                    = 1,
    EPoseDriverSource                              = 2

};


// Enum  AnimGraphRuntime.EPoseDriverType
enum class EPoseDriverType : uint8_t
{
    SwingAndTwist                                  = 0,
    SwingOnly                                      = 1,
    Translation                                    = 2,
    EPoseDriverType                                = 3

};


// Enum  AnimGraphRuntime.ESnapshotSourceMode
enum class ESnapshotSourceMode : uint8_t
{
    NamedSnapshot                                  = 0,
    SnapshotPin                                    = 1,
    ESnapshotSourceMode                            = 2

};


// Enum  AnimGraphRuntime.ERefPoseType
enum class ERefPoseType : uint8_t
{
    EIT                                            = 0,
    EIT                                            = 1,
    EIT                                            = 2

};


// Enum  AnimGraphRuntime.ESimulationSpace
enum class ESimulationSpace : uint8_t
{
    ComponentSpace                                 = 0,
    WorldSpace                                     = 1,
    BaseBoneSpace                                  = 2,
    ESimulationSpace                               = 3

};


// Enum  AnimGraphRuntime.EScaleChainInitialLength
enum class EScaleChainInitialLength : uint8_t
{
    FixedDefaultLengthValue                        = 0,
    Distance                                       = 1,
    ChainLength                                    = 2,
    EScaleChainInitialLength                       = 3

};


// Enum  AnimGraphRuntime.ESequenceEvalReinit
enum class ESequenceEvalReinit : uint8_t
{
    NoReset                                        = 0,
    StartPosition                                  = 1,
    ExplicitTime                                   = 2,
    ESequenceEvalReinit                            = 3

};


// Enum  AnimGraphRuntime.ESplineBoneAxis
enum class ESplineBoneAxis : uint8_t
{
    None                                           = 0,
    X                                              = 1,
    Y                                              = 2,
    Z                                              = 3,
    ESplineBoneAxis                                = 4

};


// Enum  AnimGraphRuntime.ERotationComponent
enum class ERotationComponent : uint8_t
{
    EulerX                                         = 0,
    EulerY                                         = 1,
    EulerZ                                         = 2,
    QuaternionAngle                                = 3,
    SwingAngle                                     = 4,
    TwistAngle                                     = 5,
    ERotationComponent                             = 6

};


// Enum  AnimGraphRuntime.EEasingFuncType
enum class EEasingFuncType : uint8_t
{
    Linear                                         = 0,
    Sinusoidal                                     = 1,
    Cubic                                          = 2,
    QuadraticInOut                                 = 3,
    CubicInOut                                     = 4,
    HermiteCubic                                   = 5,
    QuarticInOut                                   = 6,
    QuinticInOut                                   = 7,
    CircularIn                                     = 8,
    CircularOut                                    = 9,
    CircularInOut                                  = 10,
    ExpIn                                          = 11,
    ExpOut                                         = 12,
    ExpInOut                                       = 13,
    CustomCurve                                    = 14,
    EEasingFuncType                                = 15

};


// Enum  AnimGraphRuntime.ERBFNormalizeMethod
enum class ERBFNormalizeMethod : uint8_t
{
    OnlyNormalizeAboveOne                          = 0,
    AlwaysNormalize                                = 1,
    NormalizeWithinMedian                          = 2,
    NoNormalization                                = 3,
    ERBFNormalizeMethod                            = 4

};


// Enum  AnimGraphRuntime.ERBFDistanceMethod
enum class ERBFDistanceMethod : uint8_t
{
    Euclidean                                      = 0,
    Quaternion                                     = 1,
    SwingAngle                                     = 2,
    TwistAngle                                     = 3,
    DefaultMethod                                  = 4,
    ERBFDistanceMethod                             = 5

};


// Enum  AnimGraphRuntime.ERBFFunctionType
enum class ERBFFunctionType : uint8_t
{
    Gaussian                                       = 0,
    Exponential                                    = 1,
    Linear                                         = 2,
    Cubic                                          = 3,
    Quintic                                        = 4,
    DefaultFunction                                = 5,
    ERBFFunctionType                               = 6

};


// Enum  AnimGraphRuntime.ERBFSolverType
enum class ERBFSolverType : uint8_t
{
    Additive                                       = 0,
    Interpolative                                  = 1,
    ERBFSolverType                                 = 2

};


// Enum  MovieSceneTracks.MovieScene3DPathSection
enum class MovieScene3DPathSection : uint8_t
{
    MovieScene3DPathSection                        = 0,
    MovieScene3DPathSection                        = 1,
    MovieScene3DPathSection                        = 2,
    MovieScene3DPathSection                        = 3,
    MovieScene3DPathSection                        = 4,
    MovieScene3DPathSection                        = 5,
    MovieScene3DPathSection                        = 6

};


// Enum  MovieSceneTracks.EFireEventsAtPosition
enum class EFireEventsAtPosition : uint8_t
{
    AtStartOfEvaluation                            = 0,
    AtEndOfEvaluation                              = 1,
    AfterSpawn                                     = 2,
    EFireEventsAtPosition                          = 3

};


// Enum  MovieSceneTracks.ELevelVisibility
enum class ELevelVisibility : uint8_t
{
    Visible                                        = 0,
    Hidden                                         = 1,
    ELevelVisibility                               = 2

};


// Enum  MovieSceneTracks.EParticleKey
enum class EParticleKey : uint8_t
{
    Activate                                       = 0,
    Deactivate                                     = 1,
    Trigger                                        = 2,
    EParticleKey                                   = 3

};


// Enum  UMG.EDragPivot
enum class EDragPivot : uint8_t
{
    MouseDown                                      = 0,
    TopLeft                                        = 1,
    TopCenter                                      = 2,
    TopRight                                       = 3,
    CenterLeft                                     = 4,
    CenterCenter                                   = 5,
    CenterRight                                    = 6,
    BottomLeft                                     = 7,
    BottomCenter                                   = 8,
    BottomRight                                    = 9,
    EDragPivot                                     = 10

};


// Enum  UMG.EDynamicBoxType
enum class EDynamicBoxType : uint8_t
{
    Horizontal                                     = 0,
    Vertical                                       = 1,
    Wrap                                           = 2,
    VerticalWrap                                   = 3,
    Radial                                         = 4,
    Overlay                                        = 5,
    EDynamicBoxType                                = 6

};


// Enum  UMG.ESlateSizeRule
enum class ESlateSizeRule : uint8_t
{
    Automatic                                      = 0,
    Fill                                           = 1,
    ESlateSizeRule                                 = 2

};


// Enum  UMG.EWidgetDesignFlags
enum class EWidgetDesignFlags : uint8_t
{
    None                                           = 0,
    Designing                                      = 1,
    ShowOutline                                    = 2,
    ExecutePreConstruct                            = 4,
    EWidgetDesignFlags                             = 5

};


// Enum  UMG.EBindingKind
enum class EBindingKind : uint8_t
{
    Function                                       = 0,
    Property                                       = 1,
    EBindingKind                                   = 2

};


// Enum  UMG.ETickMode
enum class ETickMode : uint8_t
{
    Disabled                                       = 0,
    Enabled                                        = 1,
    Automatic                                      = 2,
    ETickMode                                      = 3

};


// Enum  UMG.EWindowVisibility
enum class EWindowVisibility : uint8_t
{
    Visible                                        = 0,
    SelfHitTestInvisible                           = 1,
    EWindowVisibility                              = 2

};


// Enum  UMG.EWidgetGeometryMode
enum class EWidgetGeometryMode : uint8_t
{
    Plane                                          = 0,
    Cylinder                                       = 1,
    EWidgetGeometryMode                            = 2

};


// Enum  UMG.EWidgetBlendMode
enum class EWidgetBlendMode : uint8_t
{
    Opaque                                         = 0,
    Masked                                         = 1,
    Transparent                                    = 2,
    EWidgetBlendMode                               = 3

};


// Enum  UMG.EWidgetTimingPolicy
enum class EWidgetTimingPolicy : uint8_t
{
    RealTime                                       = 0,
    GameTime                                       = 1,
    EWidgetTimingPolicy                            = 2

};


// Enum  UMG.EWidgetSpace
enum class EWidgetSpace : uint8_t
{
    World                                          = 0,
    Screen                                         = 1,
    EWidgetSpace                                   = 2

};


// Enum  UMG.EWidgetInteractionSource
enum class EWidgetInteractionSource : uint8_t
{
    World                                          = 0,
    Mouse                                          = 1,
    CenterScreen                                   = 2,
    Custom                                         = 3,
    EWidgetInteractionSource                       = 4

};


// Enum  CinematicCamera.ECameraFocusMethod
enum class ECameraFocusMethod : uint8_t
{
    DoNotOverride                                  = 0,
    Manual                                         = 1,
    Tracking                                       = 2,
    Disable                                        = 3,
    MAX                                            = 4

};


// Enum  AudioPlatformConfiguration.ESoundwaveSampleRateSettings
enum class ESoundwaveSampleRateSettings : uint8_t
{
    Max                                            = 0,
    High                                           = 1,
    Medium                                         = 2,
    Low                                            = 3,
    Min                                            = 4,
    MatchDevice                                    = 5,
    ESoundwaveSampleRateSettings                   = 6

};


// Enum  AudioMixer.EMusicalNoteName
enum class EMusicalNoteName : uint8_t
{
    C                                              = 0,
    Db                                             = 1,
    D                                              = 2,
    Eb                                             = 3,
    E                                              = 4,
    F                                              = 5,
    Gb                                             = 6,
    G                                              = 7,
    Ab                                             = 8,
    A                                              = 9,
    Bb                                             = 10,
    B                                              = 11,
    EMusicalNoteName                               = 12

};


// Enum  AudioMixer.ESubmixEffectDynamicsKeySource
enum class ESubmixEffectDynamicsKeySource : uint8_t
{
    Default                                        = 0,
    AudioBus                                       = 1,
    Submix                                         = 2,
    Count                                          = 3,
    ESubmixEffectDynamicsKeySource                 = 4

};


// Enum  AudioMixer.ESubmixEffectDynamicsChannelLinkMode
enum class ESubmixEffectDynamicsChannelLinkMode : uint8_t
{
    Disabled                                       = 0,
    Average                                        = 1,
    Peak                                           = 2,
    Count                                          = 3,
    ESubmixEffectDynamicsChannelLinkMode           = 4

};


// Enum  AudioMixer.ESubmixEffectDynamicsPeakMode
enum class ESubmixEffectDynamicsPeakMode : uint8_t
{
    MeanSquared                                    = 0,
    RootMeanSquared                                = 1,
    Peak                                           = 2,
    Count                                          = 3,
    ESubmixEffectDynamicsPeakMode                  = 4

};


// Enum  AudioMixer.ESubmixEffectDynamicsProcessorType
enum class ESubmixEffectDynamicsProcessorType : uint8_t
{
    Compressor                                     = 0,
    Limiter                                        = 1,
    Expander                                       = 2,
    Gate                                           = 3,
    Count                                          = 4,
    ESubmixEffectDynamicsProcessorType             = 5

};


// Enum  AudioMixer.EQuarztClockManagerType
enum class EQuarztClockManagerType : uint8_t
{
    AudioEngine                                    = 0,
    QuartzSubsystem                                = 1,
    Count                                          = 2,
    EQuarztClockManagerType                        = 3

};


// Enum  GameplayTags.EGameplayTagQueryExprType
enum class EGameplayTagQueryExprType : uint8_t
{
    Undefined                                      = 0,
    AnyTagsMatch                                   = 1,
    AllTagsMatch                                   = 2,
    NoTagsMatch                                    = 3,
    AnyExprMatch                                   = 4,
    AllExprMatch                                   = 5,
    NoExprMatch                                    = 6,
    EGameplayTagQueryExprType                      = 7

};


// Enum  GameplayTags.EGameplayContainerMatchType
enum class EGameplayContainerMatchType : uint8_t
{
    Any                                            = 0,
    All                                            = 1,
    EGameplayContainerMatchType                    = 2

};


// Enum  GameplayTags.EGameplayTagMatchType
enum class EGameplayTagMatchType : uint8_t
{
    Explicit                                       = 0,
    IncludeParentTags                              = 1,
    EGameplayTagMatchType                          = 2

};


// Enum  GameplayTags.EGameplayTagSelectionType
enum class EGameplayTagSelectionType : uint8_t
{
    None                                           = 0,
    NonRestrictedOnly                              = 1,
    RestrictedOnly                                 = 2,
    All                                            = 3,
    EGameplayTagSelectionType                      = 4

};


// Enum  GameplayTags.EGameplayTagSourceType
enum class EGameplayTagSourceType : uint8_t
{
    Native                                         = 0,
    DefaultTagList                                 = 1,
    TagList                                        = 2,
    RestrictedTagList                              = 3,
    DataTable                                      = 4,
    Invalid                                        = 5,
    EGameplayTagSourceType                         = 6

};


// Enum  MeshDescription.EComputeNTBsOptions
enum class EComputeNTBsOptions : uint8_t
{
    None                                           = 0,
    Normals                                        = 1,
    Tangents                                       = 2,
    WeightedNTBs                                   = 4,
    EComputeNTBsOptions                            = 5

};


// Enum  JsonUtilities.EJsonCasing
enum class EJsonCasing : uint8_t
{
    MatchSource                                    = 0,
    Camel                                          = 1,
    Snake                                          = 2,
    EJsonCasing                                    = 3

};


// Enum  PropertyAccess.EPropertyAccessCopyBatch
enum class EPropertyAccessCopyBatch : uint8_t
{
    InternalUnbatched                              = 0,
    ExternalUnbatched                              = 1,
    InternalBatched                                = 2,
    ExternalBatched                                = 3,
    Count                                          = 4,
    EPropertyAccessCopyBatch                       = 5

};


// Enum  PropertyAccess.EPropertyAccessCopyType
enum class EPropertyAccessCopyType : uint8_t
{
    None                                           = 0,
    Plain                                          = 1,
    Complex                                        = 2,
    Bool                                           = 3,
    Struct                                         = 4,
    Object                                         = 5,
    Name                                           = 6,
    Array                                          = 7,
    PromoteBoolToByte                              = 8,
    PromoteBoolToInt32                             = 9,
    PromoteBoolToInt64                             = 10,
    PromoteBoolToFloat                             = 11,
    PromoteByteToInt32                             = 12,
    PromoteByteToInt64                             = 13,
    PromoteByteToFloat                             = 14,
    PromoteInt32ToInt64                            = 15,
    PromoteInt32ToFloat                            = 16,
    EPropertyAccessCopyType                        = 17

};


// Enum  PropertyAccess.EPropertyAccessObjectType
enum class EPropertyAccessObjectType : uint8_t
{
    None                                           = 0,
    Object                                         = 1,
    WeakObject                                     = 2,
    SoftObject                                     = 3,
    EPropertyAccessObjectType                      = 4

};


// Enum  PropertyAccess.EPropertyAccessIndirectionType
enum class EPropertyAccessIndirectionType : uint8_t
{
    Offset                                         = 0,
    Object                                         = 1,
    Array                                          = 2,
    ScriptFunction                                 = 3,
    NativeFunction                                 = 4,
    EPropertyAccessIndirectionType                 = 5

};


// Enum  MediaUtils.EMediaPlayerOptionBooleanOverride
enum class EMediaPlayerOptionBooleanOverride : uint8_t
{
    UseMediaPlayerSetting                          = 0,
    Enabled                                        = 1,
    Disabled                                       = 2,
    EMediaPlayerOptionBooleanOverride              = 3

};


// Enum  MediaAssets.EMediaWebcamCaptureDeviceFilter
enum class EMediaWebcamCaptureDeviceFilter : uint8_t
{
    None                                           = 0,
    DepthSensor                                    = 1,
    Front                                          = 2,
    Rear                                           = 4,
    Unknown                                        = 8,
    EMediaWebcamCaptureDeviceFilter                = 9

};


// Enum  MediaAssets.EMediaVideoCaptureDeviceFilter
enum class EMediaVideoCaptureDeviceFilter : uint8_t
{
    None                                           = 0,
    Card                                           = 1,
    Software                                       = 2,
    Unknown                                        = 4,
    Webcam                                         = 8,
    EMediaVideoCaptureDeviceFilter                 = 9

};


// Enum  MediaAssets.EMediaAudioCaptureDeviceFilter
enum class EMediaAudioCaptureDeviceFilter : uint8_t
{
    None                                           = 0,
    Card                                           = 1,
    Microphone                                     = 2,
    Software                                       = 4,
    Unknown                                        = 8,
    EMediaAudioCaptureDeviceFilter                 = 9

};


// Enum  MediaAssets.EMediaPlayerTrack
enum class EMediaPlayerTrack : uint8_t
{
    Audio                                          = 0,
    Caption                                        = 1,
    Metadata                                       = 2,
    Script                                         = 3,
    Subtitle                                       = 4,
    Text                                           = 5,
    Video                                          = 6,
    EMediaPlayerTrack                              = 7

};


// Enum  MediaAssets.EMediaSoundComponentFFTSize
enum class EMediaSoundComponentFFTSize : uint8_t
{
    Min                                            = 0,
    Small                                          = 1,
    Medium                                         = 2,
    Large                                          = 3,
    EMediaSoundComponentFFTSize                    = 4

};


// Enum  MediaAssets.EMediaSoundChannels
enum class EMediaSoundChannels : uint8_t
{
    Mono                                           = 0,
    Stereo                                         = 1,
    Surround                                       = 2,
    EMediaSoundChannels                            = 3

};


// Enum  MediaAssets.MediaTextureOrientation
enum class MediaTextureOrientation : uint8_t
{
    MTORI                                          = 0,
    MTORI                                          = 1,
    MTORI                                          = 2,
    MTORI                                          = 3,
    MTORI                                          = 4

};


// Enum  MediaAssets.MediaTextureOutputFormat
enum class MediaTextureOutputFormat : uint8_t
{
    MTOF                                           = 0,
    MTOF                                           = 1,
    MTOF                                           = 2

};


// Enum  MovieSceneCapture.EHDRCaptureGamut
enum class EHDRCaptureGamut : uint8_t
{
    HCGM                                           = 0,
    HCGM                                           = 1,
    HCGM                                           = 2,
    HCGM                                           = 3,
    HCGM                                           = 4,
    HCGM                                           = 5,
    HCGM                                           = 6

};


// Enum  MovieSceneCapture.EMovieSceneCaptureProtocolState
enum class EMovieSceneCaptureProtocolState : uint8_t
{
    Idle                                           = 0,
    Initialized                                    = 1,
    Capturing                                      = 2,
    Finalizing                                     = 3,
    EMovieSceneCaptureProtocolState                = 4

};


// Enum  MoviePlayer.EMoviePlaybackType
enum class EMoviePlaybackType : uint8_t
{
    MT                                             = 0,
    MT                                             = 1,
    MT                                             = 2,
    MT                                             = 3

};


// Enum  Engine.EActorUpdateOverlapsMethod
enum class EActorUpdateOverlapsMethod : uint8_t
{
    UseConfigDefault                               = 0,
    AlwaysUpdate                                   = 1,
    OnlyUpdateMovable                              = 2,
    NeverUpdate                                    = 3,
    EActorUpdateOverlapsMethod                     = 4

};


// Enum  Engine.EUpdateTransformFlags
enum class EUpdateTransformFlags : uint8_t
{
    None                                           = 0,
    SkipPhysicsUpdate                              = 1,
    PropagateFromParent                            = 2,
    OnlyUpdateIfUsingSocket                        = 4,
    EUpdateTransformFlags                          = 5

};


// Enum  Engine.EAlphaBlendOption
enum class EAlphaBlendOption : uint8_t
{
    Linear                                         = 0,
    Cubic                                          = 1,
    HermiteCubic                                   = 2,
    Sinusoidal                                     = 3,
    QuadraticInOut                                 = 4,
    CubicInOut                                     = 5,
    QuarticInOut                                   = 6,
    QuinticInOut                                   = 7,
    CircularIn                                     = 8,
    CircularOut                                    = 9,
    CircularInOut                                  = 10,
    ExpIn                                          = 11,
    ExpOut                                         = 12,
    ExpInOut                                       = 13,
    Custom                                         = 14,
    EAlphaBlendOption                              = 15

};


// Enum  Engine.EAnimSyncGroupScope
enum class EAnimSyncGroupScope : uint8_t
{
    Local                                          = 0,
    Component                                      = 1,
    EAnimSyncGroupScope                            = 2

};


// Enum  Engine.EAnimGroupRole
enum class EAnimGroupRole : uint8_t
{
    CanBeLeader                                    = 0,
    AlwaysFollower                                 = 1,
    AlwaysLeader                                   = 2,
    TransitionLeader                               = 3,
    TransitionFollower                             = 4,
    EAnimGroupRole                                 = 5

};


// Enum  Engine.EPreviewAnimationBlueprintApplicationMethod
enum class EPreviewAnimationBlueprintApplicationMethod : uint8_t
{
    LinkedLayers                                   = 0,
    LinkedAnimGraph                                = 1,
    EPreviewAnimationBlueprintApplicationMethod    = 2

};


// Enum  Engine.AnimationKeyFormat
enum class AnimationKeyFormat : uint8_t
{
    AKF                                            = 0,
    AKF                                            = 1,
    AKF                                            = 2,
    AKF                                            = 3

};


// Enum  Engine.ERawCurveTrackTypes
enum class ERawCurveTrackTypes : uint8_t
{
    RCT                                            = 0,
    RCT                                            = 1,
    RCT                                            = 2,
    RCT                                            = 3

};


// Enum  Engine.EAnimAssetCurveFlags
enum class EAnimAssetCurveFlags : uint8_t
{
    AACF                                           = 0,
    AACF                                           = 1,
    AACF                                           = 2,
    AACF                                           = 4,
    AACF                                           = 8,
    AACF                                           = 16,
    AACF                                           = 32,
    AACF                                           = 64,
    AACF                                           = 65

};


// Enum  Engine.AnimationCompressionFormat
enum class AnimationCompressionFormat : uint8_t
{
    ACF                                            = 0,
    ACF                                            = 1,
    ACF                                            = 2,
    ACF                                            = 3,
    ACF                                            = 4,
    ACF                                            = 5,
    ACF                                            = 6,
    ACF                                            = 7

};


// Enum  Engine.EAdditiveBasePoseType
enum class EAdditiveBasePoseType : uint8_t
{
    ABPT                                           = 0,
    ABPT                                           = 1,
    ABPT                                           = 2,
    ABPT                                           = 3,
    ABPT                                           = 4

};


// Enum  Engine.ERootMotionMode
enum class ERootMotionMode : uint8_t
{
    NoRootMotionExtraction                         = 0,
    IgnoreRootMotion                               = 1,
    RootMotionFromEverything                       = 2,
    RootMotionFromMontagesOnly                     = 3,
    ERootMotionMode                                = 4

};


// Enum  Engine.ERootMotionRootLock
enum class ERootMotionRootLock : uint8_t
{
    RefPose                                        = 0,
    AnimFirstFrame                                 = 1,
    Zero                                           = 2,
    ERootMotionRootLock                            = 3

};


// Enum  Engine.EMontagePlayReturnType
enum class EMontagePlayReturnType : uint8_t
{
    MontageLength                                  = 0,
    Duration                                       = 1,
    EMontagePlayReturnType                         = 2

};


// Enum  Engine.EDrawDebugItemType
enum class EDrawDebugItemType : uint8_t
{
    DirectionalArrow                               = 0,
    Sphere                                         = 1,
    Line                                           = 2,
    OnScreenMessage                                = 3,
    CoordinateSystem                               = 4,
    EDrawDebugItemType                             = 5

};


// Enum  Engine.EAnimLinkMethod
enum class EAnimLinkMethod : uint8_t
{
    Absolute                                       = 0,
    Relative                                       = 1,
    Proportional                                   = 2,
    EAnimLinkMethod                                = 3

};


// Enum  Engine.EMontageSubStepResult
enum class EMontageSubStepResult : uint8_t
{
    Moved                                          = 0,
    NotMoved                                       = 1,
    InvalidSection                                 = 2,
    InvalidMontage                                 = 3,
    EMontageSubStepResult                          = 4

};


// Enum  Engine.EAnimNotifyEventType
enum class EAnimNotifyEventType : uint8_t
{
    Begin                                          = 0,
    End                                            = 1,
    EAnimNotifyEventType                           = 2

};


// Enum  Engine.EInertializationSpace
enum class EInertializationSpace : uint8_t
{
    Default                                        = 0,
    WorldSpace                                     = 1,
    WorldRotation                                  = 2,
    EInertializationSpace                          = 3

};


// Enum  Engine.EInertializationBoneState
enum class EInertializationBoneState : uint8_t
{
    Invalid                                        = 0,
    Valid                                          = 1,
    Excluded                                       = 2,
    EInertializationBoneState                      = 3

};


// Enum  Engine.EInertializationState
enum class EInertializationState : uint8_t
{
    Inactive                                       = 0,
    Pending                                        = 1,
    Active                                         = 2,
    EInertializationState                          = 3

};


// Enum  Engine.EEvaluatorMode
enum class EEvaluatorMode : uint8_t
{
    EM                                             = 0,
    EM                                             = 1,
    EM                                             = 2,
    EM                                             = 3

};


// Enum  Engine.EEvaluatorDataSource
enum class EEvaluatorDataSource : uint8_t
{
    EDS                                            = 0,
    EDS                                            = 1,
    EDS                                            = 2

};


// Enum  Engine.EPostCopyOperation
enum class EPostCopyOperation : uint8_t
{
    None                                           = 0,
    LogicalNegateBool                              = 1,
    EPostCopyOperation                             = 2

};


// Enum  Engine.EPinHidingMode
enum class EPinHidingMode : uint8_t
{
    NeverAsPin                                     = 0,
    PinHiddenByDefault                             = 1,
    PinShownByDefault                              = 2,
    AlwaysAsPin                                    = 3,
    EPinHidingMode                                 = 4

};


// Enum  Engine.AnimPhysCollisionType
enum class AnimPhysCollisionType : uint8_t
{
    CoM                                            = 0,
    CustomSphere                                   = 1,
    InnerSphere                                    = 2,
    OuterSphere                                    = 3,
    AnimPhysCollisionType                          = 4

};


// Enum  Engine.AnimPhysTwistAxis
enum class AnimPhysTwistAxis : uint8_t
{
    AxisX                                          = 0,
    AxisY                                          = 1,
    AxisZ                                          = 2,
    AnimPhysTwistAxis                              = 3

};


// Enum  Engine.ETypeAdvanceAnim
enum class ETypeAdvanceAnim : uint8_t
{
    ETAA                                           = 0,
    ETAA                                           = 1,
    ETAA                                           = 2,
    ETAA                                           = 3

};


// Enum  Engine.ETransitionLogicType
enum class ETransitionLogicType : uint8_t
{
    TLT                                            = 0,
    TLT                                            = 1,
    TLT                                            = 2,
    TLT                                            = 3

};


// Enum  Engine.ETransitionBlendMode
enum class ETransitionBlendMode : uint8_t
{
    TBM                                            = 0,
    TBM                                            = 1,
    TBM                                            = 2

};


// Enum  Engine.EComponentType
enum class EComponentType : uint8_t
{
    None                                           = 0,
    TranslationX                                   = 1,
    TranslationY                                   = 2,
    TranslationZ                                   = 3,
    RotationX                                      = 4,
    RotationY                                      = 5,
    RotationZ                                      = 6,
    Scale                                          = 7,
    ScaleX                                         = 8,
    ScaleY                                         = 9,
    ScaleZ                                         = 10,
    EComponentType                                 = 11

};


// Enum  Engine.EAxisOption
enum class EAxisOption : uint8_t
{
    X                                              = 0,
    Y                                              = 1,
    Z                                              = 2,
    X                                              = 3,
    Y                                              = 4,
    Z                                              = 5,
    Custom                                         = 6,
    EAxisOption                                    = 7

};


// Enum  Engine.EAnimInterpolationType
enum class EAnimInterpolationType : uint8_t
{
    Linear                                         = 0,
    Step                                           = 1,
    EAnimInterpolationType                         = 2

};


// Enum  Engine.ECurveBlendOption
enum class ECurveBlendOption : uint8_t
{
    Override                                       = 0,
    DoNotOverride                                  = 1,
    NormalizeByWeight                              = 2,
    BlendByWeight                                  = 3,
    UseBasePose                                    = 4,
    UseMaxValue                                    = 5,
    UseMinValue                                    = 6,
    ECurveBlendOption                              = 7

};


// Enum  Engine.EAdditiveAnimationType
enum class EAdditiveAnimationType : uint8_t
{
    AAT                                            = 0,
    AAT                                            = 1,
    AAT                                            = 2,
    AAT                                            = 3

};


// Enum  Engine.ENotifyFilterType
enum class ENotifyFilterType : uint8_t
{
    NoFiltering                                    = 0,
    LOD                                            = 1,
    ENotifyFilterType                              = 2

};


// Enum  Engine.EMontageNotifyTickType
enum class EMontageNotifyTickType : uint8_t
{
    Queued                                         = 0,
    BranchingPoint                                 = 1,
    EMontageNotifyTickType                         = 2

};


// Enum  Engine.EBoneRotationSource
enum class EBoneRotationSource : uint8_t
{
    BRS                                            = 0,
    BRS                                            = 1,
    BRS                                            = 2,
    BRS                                            = 3

};


// Enum  Engine.EBoneControlSpace
enum class EBoneControlSpace : uint8_t
{
    BCS                                            = 0,
    BCS                                            = 1,
    BCS                                            = 2,
    BCS                                            = 3,
    BCS                                            = 4

};


// Enum  Engine.EBoneAxis
enum class EBoneAxis : uint8_t
{
    BA                                             = 0,
    BA                                             = 1,
    BA                                             = 2,
    BA                                             = 3

};


// Enum  Engine.EPrimaryAssetCookCategory
enum class EPrimaryAssetCookCategory : uint8_t
{
    Unknown                                        = 0,
    Core                                           = 1,
    Character                                      = 2,
    PrototypeCharacter                             = 3,
    Charms                                         = 4,
    Skins                                          = 5,
    Milestones                                     = 6,
    Sprays                                         = 7,
    Console                                        = 8,
    TestMap                                        = 9,
    InDevelopmentMap                               = 10,
    NPE                                            = 11,
    HURM                                           = 12,
    AscentMap                                      = 13,
    BonsaiMap                                      = 14,
    DualityMap                                     = 15,
    PortMap                                        = 16,
    PovegliaMap                                    = 17,
    TriadMap                                       = 18,
    FoxtrotMap                                     = 19,
    CanyonMap                                      = 20,
    PittMap                                        = 21,
    JamMap                                         = 22,
    JuliettMap                                     = 23,
    InfinityMap                                    = 24,
    EPrimaryAssetCookCategory                      = 25

};


// Enum  Engine.EPrimaryAssetCookPlatform
enum class EPrimaryAssetCookPlatform : uint8_t
{
    Unspecified                                    = 0,
    Desktop                                        = 1,
    Mobile                                         = 2,
    Console                                        = 4,
    First                                          = 1,
    Last                                           = 4,
    All                                            = 7,
    EPrimaryAssetCookPlatform                      = 8

};


// Enum  Engine.EPrimaryAssetCookRule
enum class EPrimaryAssetCookRule : uint8_t
{
    Unknown                                        = 0,
    NeverCook                                      = 1,
    DevelopmentCook                                = 2,
    DevelopmentAlwaysCook                          = 3,
    AlwaysCook                                     = 4,
    EPrimaryAssetCookRule                          = 5

};


// Enum  Engine.ENaturalSoundFalloffMode
enum class ENaturalSoundFalloffMode : uint8_t
{
    Continues                                      = 0,
    Silent                                         = 1,
    Hold                                           = 2,
    ENaturalSoundFalloffMode                       = 3

};


// Enum  Engine.EAttenuationShape
enum class EAttenuationShape : uint8_t
{
    Sphere                                         = 0,
    Capsule                                        = 1,
    Box                                            = 2,
    Cone                                           = 3,
    EAttenuationShape                              = 4

};


// Enum  Engine.EAttenuationDistanceModel
enum class EAttenuationDistanceModel : uint8_t
{
    Linear                                         = 0,
    Logarithmic                                    = 1,
    Inverse                                        = 2,
    LogReverse                                     = 3,
    NaturalSound                                   = 4,
    Custom                                         = 5,
    EAttenuationDistanceModel                      = 6

};


// Enum  Engine.EAudioBusChannels
enum class EAudioBusChannels : uint8_t
{
    Mono                                           = 0,
    Stereo                                         = 1,
    EAudioBusChannels                              = 2

};


// Enum  Engine.EAudioFaderCurve
enum class EAudioFaderCurve : uint8_t
{
    Linear                                         = 0,
    Logarithmic                                    = 1,
    SCurve                                         = 2,
    Sin                                            = 3,
    Count                                          = 4,
    EAudioFaderCurve                               = 5

};


// Enum  Engine.EAudioOutputTarget
enum class EAudioOutputTarget : uint8_t
{
    Speaker                                        = 0,
    Controller                                     = 1,
    ControllerFallbackToSpeaker                    = 2,
    EAudioOutputTarget                             = 3

};


// Enum  Engine.EMonoChannelUpmixMethod
enum class EMonoChannelUpmixMethod : uint8_t
{
    Linear                                         = 0,
    EqualPower                                     = 1,
    FullVolume                                     = 2,
    EMonoChannelUpmixMethod                        = 3

};


// Enum  Engine.EPanningMethod
enum class EPanningMethod : uint8_t
{
    Linear                                         = 0,
    EqualPower                                     = 1,
    EPanningMethod                                 = 2

};


// Enum  Engine.EVoiceSampleRate
enum class EVoiceSampleRate : uint8_t
{
    Low16000Hz                                     = 16000,
    Normal24000Hz                                  = 24000,
    EVoiceSampleRate                               = 24001

};


// Enum  Engine.EAudioVolumeLocationState
enum class EAudioVolumeLocationState : uint8_t
{
    InsideTheVolume                                = 0,
    OutsideTheVolume                               = 1,
    EAudioVolumeLocationState                      = 2

};


// Enum  Engine.EBlendableLocation
enum class EBlendableLocation : uint8_t
{
    BL                                             = 0,
    BL                                             = 1,
    BL                                             = 2,
    BL                                             = 3,
    BL                                             = 4,
    BL                                             = 5

};


// Enum  Engine.ENotifyTriggerMode
enum class ENotifyTriggerMode : uint8_t
{
    AllAnimations                                  = 0,
    HighestWeightedAnimation                       = 1,
    None                                           = 2,
    ENotifyTriggerMode                             = 3

};


// Enum  Engine.ERemappingMode
enum class ERemappingMode : uint8_t
{
    Update                                         = 0,
    Keep                                           = 1,
    ERemappingMode                                 = 2

};


// Enum  Engine.EBlendSpaceAxis
enum class EBlendSpaceAxis : uint8_t
{
    BSA                                            = 0,
    BSA                                            = 1,
    BSA                                            = 2,
    BSA                                            = 3,
    BSA                                            = 4

};


// Enum  Engine.EBlueprintNativizationFlag
enum class EBlueprintNativizationFlag : uint8_t
{
    Disabled                                       = 0,
    Dependency                                     = 1,
    ExplicitlyEnabled                              = 2,
    EBlueprintNativizationFlag                     = 3

};


// Enum  Engine.EBlueprintCompileMode
enum class EBlueprintCompileMode : uint8_t
{
    Default                                        = 0,
    Development                                    = 1,
    FinalRelease                                   = 2,
    EBlueprintCompileMode                          = 3

};


// Enum  Engine.EBlueprintType
enum class EBlueprintType : uint8_t
{
    BPTYPE                                         = 0,
    BPTYPE                                         = 1,
    BPTYPE                                         = 2,
    BPTYPE                                         = 3,
    BPTYPE                                         = 4,
    BPTYPE                                         = 5,
    BPTYPE                                         = 6

};


// Enum  Engine.EBlueprintStatus
enum class EBlueprintStatus : uint8_t
{
    BS                                             = 0,
    BS                                             = 1,
    BS                                             = 2,
    BS                                             = 3,
    BS                                             = 4,
    BS                                             = 5,
    BS                                             = 6

};


// Enum  Engine.EDOFMode
enum class EDOFMode : uint8_t
{
    Default                                        = 0,
    SixDOF                                         = 1,
    YZPlane                                        = 2,
    XZPlane                                        = 3,
    XYPlane                                        = 4,
    CustomPlane                                    = 5,
    None                                           = 6,
    EDOFMode                                       = 7

};


// Enum  Engine.EBrushType
enum class EBrushType : uint8_t
{
    Brush                                          = 0,
    Brush                                          = 1,
    Brush                                          = 2,
    Brush                                          = 3

};


// Enum  Engine.ECsgOper
enum class ECsgOper : uint8_t
{
    CSG                                            = 0,
    CSG                                            = 1,
    CSG                                            = 2,
    CSG                                            = 3,
    CSG                                            = 4,
    CSG                                            = 5,
    CSG                                            = 6

};


// Enum  Engine.ECameraShakeDurationType
enum class ECameraShakeDurationType : uint8_t
{
    Fixed                                          = 0,
    Infinite                                       = 1,
    Custom                                         = 2,
    ECameraShakeDurationType                       = 3

};


// Enum  Engine.ECameraShakeUpdateResultFlags
enum class ECameraShakeUpdateResultFlags : uint8_t
{
    ApplyAsAbsolute                                = 1,
    SkipAutoScale                                  = 2,
    SkipAutoPlaySpace                              = 4,
    Default                                        = 0,
    ECameraShakeUpdateResultFlags                  = 5

};


// Enum  Engine.ECameraShakeAttenuation
enum class ECameraShakeAttenuation : uint8_t
{
    Linear                                         = 0,
    Quadratic                                      = 1,
    ECameraShakeAttenuation                        = 2

};


// Enum  Engine.ECameraAlphaBlendMode
enum class ECameraAlphaBlendMode : uint8_t
{
    CABM                                           = 0,
    CABM                                           = 1,
    CABM                                           = 2

};


// Enum  Engine.ECameraShakePlaySpace
enum class ECameraShakePlaySpace : uint8_t
{
    CameraLocal                                    = 0,
    World                                          = 1,
    UserDefined                                    = 2,
    ECameraShakePlaySpace                          = 3

};


// Enum  Engine.ECameraProjectionMode
enum class ECameraProjectionMode : uint8_t
{
    Perspective                                    = 0,
    Orthographic                                   = 1,
    ECameraProjectionMode                          = 2

};


// Enum  Engine.ECorrectionReason
enum class ECorrectionReason : uint8_t
{
    None                                           = 0,
    Crouch                                         = 1,
    Position                                       = 2,
    Count                                          = 3,
    ECorrectionReason                              = 4

};


// Enum  Engine.ECloudStorageDelegate
enum class ECloudStorageDelegate : uint8_t
{
    CSD                                            = 0,
    CSD                                            = 1,
    CSD                                            = 2,
    CSD                                            = 3,
    CSD                                            = 4,
    CSD                                            = 5,
    CSD                                            = 6,
    CSD                                            = 7

};


// Enum  Engine.EAngularDriveMode
enum class EAngularDriveMode : uint8_t
{
    SLERP                                          = 0,
    TwistAndSwing                                  = 1,
    EAngularDriveMode                              = 2

};


// Enum  Engine.ECurveTableMode
enum class ECurveTableMode : uint8_t
{
    Empty                                          = 0,
    SimpleCurves                                   = 1,
    RichCurves                                     = 2,
    ECurveTableMode                                = 3

};


// Enum  Engine.ECustomAttributeBlendType
enum class ECustomAttributeBlendType : uint8_t
{
    Override                                       = 0,
    Blend                                          = 1,
    ECustomAttributeBlendType                      = 2

};


// Enum  Engine.FDataDrivenCVarType
enum class FDataDrivenCVarType : uint8_t
{
    CVarFloat                                      = 0,
    CVarInt                                        = 1,
    CVarBool                                       = 2,
    FDataDrivenCVarType                            = 3

};


// Enum  Engine.EEvaluateCurveTableResult
enum class EEvaluateCurveTableResult : uint8_t
{
    RowFound                                       = 0,
    RowNotFound                                    = 1,
    EEvaluateCurveTableResult                      = 2

};


// Enum  Engine.EMaterialDebugViewMode
enum class EMaterialDebugViewMode : uint8_t
{
    MDM                                            = 0,
    MDM                                            = 1,
    MDM                                            = 2,
    MDM                                            = 3,
    MDM                                            = 4,
    MDM                                            = 5,
    MDM                                            = 6,
    MDM                                            = 7

};


// Enum  Engine.EDecalLightColorType
enum class EDecalLightColorType : uint8_t
{
    FullIntegral                                   = 0,
    Average                                        = 1,
    EDecalLightColorType                           = 2

};


// Enum  Engine.EGrammaticalNumber
enum class EGrammaticalNumber : uint8_t
{
    Singular                                       = 0,
    Plural                                         = 1,
    EGrammaticalNumber                             = 2

};


// Enum  Engine.EGrammaticalGender
enum class EGrammaticalGender : uint8_t
{
    Neuter                                         = 0,
    Masculine                                      = 1,
    Feminine                                       = 2,
    Mixed                                          = 3,
    EGrammaticalGender                             = 4

};


// Enum  Engine.DistributionParamMode
enum class DistributionParamMode : uint8_t
{
    DPM                                            = 0,
    DPM                                            = 1,
    DPM                                            = 2,
    DPM                                            = 3

};


// Enum  Engine.EDistributionVectorMirrorFlags
enum class EDistributionVectorMirrorFlags : uint8_t
{
    EDVMF                                          = 0,
    EDVMF                                          = 1,
    EDVMF                                          = 2,
    EDVMF                                          = 3

};


// Enum  Engine.EDistributionVectorLockFlags
enum class EDistributionVectorLockFlags : uint8_t
{
    EDVLF                                          = 0,
    EDVLF                                          = 1,
    EDVLF                                          = 2,
    EDVLF                                          = 3,
    EDVLF                                          = 4,
    EDVLF                                          = 5

};


// Enum  Engine.ENodeEnabledState
enum class ENodeEnabledState : uint8_t
{
    Enabled                                        = 0,
    Disabled                                       = 1,
    DevelopmentOnly                                = 2,
    AutomationOnly                                 = 3,
    ENodeEnabledState                              = 4

};


// Enum  Engine.ENodeAdvancedPins
enum class ENodeAdvancedPins : uint8_t
{
    NoPins                                         = 0,
    Shown                                          = 1,
    Hidden                                         = 2,
    ENodeAdvancedPins                              = 3

};


// Enum  Engine.ENodeTitleType
enum class ENodeTitleType : uint8_t
{
    FullTitle                                      = 0,
    ListView                                       = 1,
    EditableTitle                                  = 2,
    MenuTitle                                      = 3,
    MAX                                            = 4,
    ENodeTitleType                                 = 5

};


// Enum  Engine.EPinContainerType
enum class EPinContainerType : uint8_t
{
    None                                           = 0,
    Array                                          = 1,
    Set                                            = 2,
    Map                                            = 3,
    EPinContainerType                              = 4

};


// Enum  Engine.EEdGraphPinDirection
enum class EEdGraphPinDirection : uint8_t
{
    EGPD                                           = 0,
    EGPD                                           = 1,
    EGPD                                           = 2

};


// Enum  Engine.EBlueprintPinStyleType
enum class EBlueprintPinStyleType : uint8_t
{
    BPST                                           = 0,
    BPST                                           = 1,
    BPST                                           = 2

};


// Enum  Engine.ECanCreateConnectionResponse
enum class ECanCreateConnectionResponse : uint8_t
{
    CONNECT                                        = 0,
    CONNECT                                        = 1,
    CONNECT                                        = 2,
    CONNECT                                        = 3,
    CONNECT                                        = 4,
    CONNECT                                        = 5,
    CONNECT                                        = 6

};


// Enum  Engine.EGraphType
enum class EGraphType : uint8_t
{
    GT                                             = 0,
    GT                                             = 1,
    GT                                             = 2,
    GT                                             = 3,
    GT                                             = 4,
    GT                                             = 5

};


// Enum  Engine.ETransitionType
enum class ETransitionType : uint8_t
{
    None                                           = 0,
    Paused                                         = 1,
    Loading                                        = 2,
    Saving                                         = 3,
    Connecting                                     = 4,
    Precaching                                     = 5,
    WaitingToConnect                               = 6,
    MAX                                            = 7

};


// Enum  Engine.EFullyLoadPackageType
enum class EFullyLoadPackageType : uint8_t
{
    FULLYLOAD                                      = 0,
    FULLYLOAD                                      = 1,
    FULLYLOAD                                      = 2,
    FULLYLOAD                                      = 3,
    FULLYLOAD                                      = 4,
    FULLYLOAD                                      = 5

};


// Enum  Engine.EViewModeIndex
enum class EViewModeIndex : uint8_t
{
    VMI                                            = 0,
    VMI                                            = 1,
    VMI                                            = 2,
    VMI                                            = 3,
    VMI                                            = 4,
    VMI                                            = 5,
    VMI                                            = 6,
    VMI                                            = 8,
    VMI                                            = 9,
    VMI                                            = 10,
    VMI                                            = 11,
    VMI                                            = 12,
    VMI                                            = 14,
    VMI                                            = 15,
    VMI                                            = 16,
    VMI                                            = 18,
    VMI                                            = 19,
    VMI                                            = 20,
    VMI                                            = 21,
    VMI                                            = 22,
    VMI                                            = 23,
    VMI                                            = 24,
    VMI                                            = 25,
    VMI                                            = 26,
    VMI                                            = 27,
    VMI                                            = 28,
    VMI                                            = 31,
    VMI                                            = 32,
    VMI                                            = 33,
    VMI                                            = 34,
    VMI                                            = 35,
    VMI                                            = 36,
    VMI                                            = 37,
    VMI                                            = 38,
    VMI                                            = 39,
    VMI                                            = 40,
    VMI                                            = 41,
    VMI                                            = 42,
    VMI                                            = 43,
    VMI                                            = 44,
    VMI                                            = 45,
    VMI                                            = 46,
    VMI                                            = 47,
    VMI                                            = 48,
    VMI                                            = 49,
    VMI                                            = 255,
    VMI                                            = 256

};


// Enum  Engine.EDemoPlayFailure
enum class EDemoPlayFailure : uint8_t
{
    Generic                                        = 0,
    DemoNotFound                                   = 1,
    Corrupt                                        = 2,
    InvalidVersion                                 = 3,
    InitBase                                       = 4,
    GameSpecificHeader                             = 5,
    ReplayStreamerInternal                         = 6,
    LoadMap                                        = 7,
    Serialization                                  = 8,
    EDemoPlayFailure                               = 9

};


// Enum  Engine.ETravelType
enum class ETravelType : uint8_t
{
    TRAVEL                                         = 0,
    TRAVEL                                         = 1,
    TRAVEL                                         = 2,
    TRAVEL                                         = 3

};


// Enum  Engine.ENetworkLagState
enum class ENetworkLagState : uint8_t
{
    NotLagging                                     = 0,
    Lagging                                        = 1,
    ENetworkLagState                               = 2

};


// Enum  Engine.EMouseCaptureMode
enum class EMouseCaptureMode : uint8_t
{
    NoCapture                                      = 0,
    CapturePermanently                             = 1,
    CapturePermanently                             = 2,
    CaptureDuringMouseDown                         = 3,
    CaptureDuringRightMouseDown                    = 4,
    EMouseCaptureMode                              = 5

};


// Enum  Engine.ECustomTimeStepSynchronizationState
enum class ECustomTimeStepSynchronizationState : uint8_t
{
    Closed                                         = 0,
    Error                                          = 1,
    Synchronized                                   = 2,
    Synchronizing                                  = 3,
    ECustomTimeStepSynchronizationState            = 4

};


// Enum  Engine.ELHMMirroringIgnoreType
enum class ELHMMirroringIgnoreType : uint8_t
{
    None                                           = 0,
    YAxis                                          = 1,
    YAxisAndTransform                              = 2,
    XAxis                                          = 3,
    XAxisAndTransform                              = 4,
    ELHMMirroringIgnoreType                        = 5

};


// Enum  Engine.EAresOutlineMode
enum class EAresOutlineMode : uint8_t
{
    None                                           = 0,
    Outline                                        = 1,
    Block                                          = 2,
    Enemy                                          = 3,
    AlwaysOutline                                  = 4,
    AlwaysEnemy                                    = 5,
    EAresOutlineMode                               = 6

};


// Enum  Engine.EMeshBufferAccess
enum class EMeshBufferAccess : uint8_t
{
    Default                                        = 0,
    ForceCPUAndGPU                                 = 1,
    EMeshBufferAccess                              = 2

};


// Enum  Engine.ESpawnActorCollisionHandlingMethod
enum class ESpawnActorCollisionHandlingMethod : uint8_t
{
    Undefined                                      = 0,
    AlwaysSpawn                                    = 1,
    AdjustIfPossibleButAlwaysSpawn                 = 2,
    AdjustIfPossibleButDontSpawnIfColliding        = 3,
    DontSpawnIfColliding                           = 4,
    ESpawnActorCollisionHandlingMethod             = 5

};


// Enum  Engine.EComponentSocketType
enum class EComponentSocketType : uint8_t
{
    Invalid                                        = 0,
    Bone                                           = 1,
    Socket                                         = 2,
    EComponentSocketType                           = 3

};


// Enum  Engine.EPhysicalMaterialMaskColor
enum class EPhysicalMaterialMaskColor : uint8_t
{
    Red                                            = 0,
    Green                                          = 1,
    Blue                                           = 2,
    Cyan                                           = 3,
    Magenta                                        = 4,
    Yellow                                         = 5,
    White                                          = 6,
    Black                                          = 7,
    MAX                                            = 8

};


// Enum  Engine.EWalkableSlopeBehavior
enum class EWalkableSlopeBehavior : uint8_t
{
    WalkableSlope                                  = 0,
    WalkableSlope                                  = 1,
    WalkableSlope                                  = 2,
    WalkableSlope                                  = 3,
    WalkableSlope                                  = 4,
    WalkableSlope                                  = 5

};


// Enum  Engine.ERotatorQuantization
enum class ERotatorQuantization : uint8_t
{
    ByteComponents                                 = 0,
    ShortComponents                                = 1,
    ERotatorQuantization                           = 2

};


// Enum  Engine.EVectorQuantization
enum class EVectorQuantization : uint8_t
{
    RoundWholeNumber                               = 0,
    RoundOneDecimal                                = 1,
    RoundTwoDecimals                               = 2,
    EVectorQuantization                            = 3

};


// Enum  Engine.EAutoPossessAI
enum class EAutoPossessAI : uint8_t
{
    Disabled                                       = 0,
    PlacedInWorld                                  = 1,
    Spawned                                        = 2,
    PlacedInWorldOrSpawned                         = 3,
    EAutoPossessAI                                 = 4

};


// Enum  Engine.EAutoReceiveInput
enum class EAutoReceiveInput : uint8_t
{
    Disabled                                       = 0,
    Player0                                        = 1,
    Player1                                        = 2,
    Player2                                        = 3,
    Player3                                        = 4,
    Player4                                        = 5,
    Player5                                        = 6,
    Player6                                        = 7,
    Player7                                        = 8,
    EAutoReceiveInput                              = 9

};


// Enum  Engine.ENetDormancy
enum class ENetDormancy : uint8_t
{
    DORM                                           = 0,
    DORM                                           = 1,
    DORM                                           = 2,
    DORM                                           = 3,
    DORM                                           = 4,
    DORM                                           = 5

};


// Enum  Engine.EUpdateRateShiftBucket
enum class EUpdateRateShiftBucket : uint8_t
{
    ShiftBucket0                                   = 0,
    ShiftBucket1                                   = 1,
    ShiftBucket2                                   = 2,
    ShiftBucket3                                   = 3,
    ShiftBucket4                                   = 4,
    ShiftBucket5                                   = 5,
    ShiftBucketMax                                 = 6,
    EUpdateRateShiftBucket                         = 7

};


// Enum  Engine.EShadowMapFlags
enum class EShadowMapFlags : uint8_t
{
    SMF                                            = 0,
    SMF                                            = 1,
    SMF                                            = 2

};


// Enum  Engine.ELightMapPaddingType
enum class ELightMapPaddingType : uint8_t
{
    LMPT                                           = 0,
    LMPT                                           = 1,
    LMPT                                           = 2,
    LMPT                                           = 3

};


// Enum  Engine.ECollisionEnabled
enum class ECollisionEnabled : uint8_t
{
    NoCollision                                    = 0,
    QueryOnly                                      = 1,
    PhysicsOnly                                    = 2,
    QueryAndPhysics                                = 3,
    ECollisionEnabled                              = 4

};


// Enum  Engine.ETimelineSigType
enum class ETimelineSigType : uint8_t
{
    ETS                                            = 0,
    ETS                                            = 1,
    ETS                                            = 2,
    ETS                                            = 3,
    ETS                                            = 4,
    ETS                                            = 5

};


// Enum  Engine.EFilterInterpolationType
enum class EFilterInterpolationType : uint8_t
{
    BSIT                                           = 0,
    BSIT                                           = 1,
    BSIT                                           = 2,
    BSIT                                           = 3

};


// Enum  Engine.ECollisionResponse
enum class ECollisionResponse : uint8_t
{
    ECR                                            = 0,
    ECR                                            = 1,
    ECR                                            = 2,
    ECR                                            = 3

};


// Enum  Engine.EOverlapFilterOption
enum class EOverlapFilterOption : uint8_t
{
    OverlapFilter                                  = 0,
    OverlapFilter                                  = 1,
    OverlapFilter                                  = 2,
    OverlapFilter                                  = 3

};


// Enum  Engine.ECollisionChannel
enum class ECollisionChannel : uint8_t
{
    ECC                                            = 0,
    ECC                                            = 1,
    ECC                                            = 2,
    ECC                                            = 3,
    ECC                                            = 4,
    ECC                                            = 5,
    ECC                                            = 6,
    ECC                                            = 7,
    ECC                                            = 8,
    ECC                                            = 9,
    ECC                                            = 10,
    ECC                                            = 11,
    ECC                                            = 12,
    ECC                                            = 13,
    ECC                                            = 14,
    ECC                                            = 15,
    ECC                                            = 16,
    ECC                                            = 17,
    ECC                                            = 18,
    ECC                                            = 19,
    ECC                                            = 20,
    ECC                                            = 21,
    ECC                                            = 22,
    ECC                                            = 23,
    ECC                                            = 24,
    ECC                                            = 25,
    ECC                                            = 26,
    ECC                                            = 27,
    ECC                                            = 28,
    ECC                                            = 29,
    ECC                                            = 30,
    ECC                                            = 31,
    ECC                                            = 32,
    ECC                                            = 33

};


// Enum  Engine.ENetworkSmoothingMode
enum class ENetworkSmoothingMode : uint8_t
{
    Disabled                                       = 0,
    Linear                                         = 1,
    Exponential                                    = 2,
    Replay                                         = 3,
    ENetworkSmoothingMode                          = 4

};


// Enum  Engine.ELightingBuildQuality
enum class ELightingBuildQuality : uint8_t
{
    Quality                                        = 0,
    Quality                                        = 1,
    Quality                                        = 2,
    Quality                                        = 3,
    Quality                                        = 4

};


// Enum  Engine.EMaterialShadingRate
enum class EMaterialShadingRate : uint8_t
{
    MSR                                            = 0,
    MSR                                            = 1,
    MSR                                            = 2,
    MSR                                            = 3,
    MSR                                            = 4,
    MSR                                            = 5,
    MSR                                            = 6,
    MSR                                            = 7,
    MSR                                            = 8

};


// Enum  Engine.EMaterialStencilCompare
enum class EMaterialStencilCompare : uint8_t
{
    MSC                                            = 0,
    MSC                                            = 1,
    MSC                                            = 2,
    MSC                                            = 3,
    MSC                                            = 4,
    MSC                                            = 5,
    MSC                                            = 6,
    MSC                                            = 7,
    MSC                                            = 8,
    MSC                                            = 9

};


// Enum  Engine.EMaterialSamplerType
enum class EMaterialSamplerType : uint8_t
{
    SAMPLERTYPE                                    = 0,
    SAMPLERTYPE                                    = 1,
    SAMPLERTYPE                                    = 2,
    SAMPLERTYPE                                    = 3,
    SAMPLERTYPE                                    = 4,
    SAMPLERTYPE                                    = 5,
    SAMPLERTYPE                                    = 6,
    SAMPLERTYPE                                    = 7,
    SAMPLERTYPE                                    = 8,
    SAMPLERTYPE                                    = 9,
    SAMPLERTYPE                                    = 10,
    SAMPLERTYPE                                    = 11,
    SAMPLERTYPE                                    = 12,
    SAMPLERTYPE                                    = 13,
    SAMPLERTYPE                                    = 14,
    SAMPLERTYPE                                    = 15,
    SAMPLERTYPE                                    = 16,
    SAMPLERTYPE                                    = 17

};


// Enum  Engine.EMaterialTessellationMode
enum class EMaterialTessellationMode : uint8_t
{
    MTM                                            = 0,
    MTM                                            = 1,
    MTM                                            = 2,
    MTM                                            = 3

};


// Enum  Engine.EMaterialAresEnvironmentType
enum class EMaterialAresEnvironmentType : uint8_t
{
    MAET                                           = 0,
    MAET                                           = 1,
    MAET                                           = 2,
    MAET                                           = 3,
    MAET                                           = 4,
    MAET                                           = 5

};


// Enum  Engine.EMaterialCubemapSource
enum class EMaterialCubemapSource : uint8_t
{
    MCSRC                                          = 0,
    MCSRC                                          = 1,
    MCSRC                                          = 2,
    MCSRC                                          = 3,
    MCSRC                                          = 4

};


// Enum  Engine.EMaterialCubemapMode
enum class EMaterialCubemapMode : uint8_t
{
    MCM                                            = 0,
    MCM                                            = 1,
    MCM                                            = 2

};


// Enum  Engine.EMaterialSpecularModel
enum class EMaterialSpecularModel : uint8_t
{
    MSPC                                           = 0,
    MSPC                                           = 1,
    MSPC                                           = 2,
    MSPC                                           = 3

};


// Enum  Engine.EAresTranslucencyDepthMode
enum class EAresTranslucencyDepthMode : uint8_t
{
    ATDM                                           = 0,
    ATDM                                           = 1,
    ATDM                                           = 2,
    ATDM                                           = 3

};


// Enum  Engine.EMaterialLightingSourceDirectionality
enum class EMaterialLightingSourceDirectionality : uint8_t
{
    MLSD                                           = 0,
    MLSD                                           = 1,
    MLSD                                           = 2,
    MLSD                                           = 3,
    MLSD                                           = 4,
    MLSD                                           = 5,
    MLSD                                           = 6

};


// Enum  Engine.EMaterialLightingSourceColor
enum class EMaterialLightingSourceColor : uint8_t
{
    MLSC                                           = 0,
    MLSC                                           = 1,
    MLSC                                           = 2,
    MLSC                                           = 3,
    MLSC                                           = 4,
    MLSC                                           = 5,
    MLSC                                           = 6

};


// Enum  Engine.EMaterialLightingSource
enum class EMaterialLightingSource : uint8_t
{
    MLS                                            = 0,
    MLS                                            = 1,
    MLS                                            = 2,
    MLS                                            = 3,
    MLS                                            = 4,
    MLS                                            = 5,
    MLS                                            = 6,
    MLS                                            = 7,
    MLS                                            = 8

};


// Enum  Engine.EMaterialShadingModel
enum class EMaterialShadingModel : uint8_t
{
    MSM                                            = 0,
    MSM                                            = 1,
    MSM                                            = 2,
    MSM                                            = 3,
    MSM                                            = 4,
    MSM                                            = 5,
    MSM                                            = 6,
    MSM                                            = 7,
    MSM                                            = 8,
    MSM                                            = 9,
    MSM                                            = 10,
    MSM                                            = 11,
    MSM                                            = 12,
    MSM                                            = 13,
    MSM                                            = 14,
    MSM                                            = 15,
    MSM                                            = 16,
    MSM                                            = 17

};


// Enum  Engine.EParticleCollisionMode
enum class EParticleCollisionMode : uint8_t
{
    SceneDepth                                     = 0,
    DistanceField                                  = 1,
    EParticleCollisionMode                         = 2

};


// Enum  Engine.ETrailWidthMode
enum class ETrailWidthMode : uint8_t
{
    ETrailWidthMode                                = 0,
    ETrailWidthMode                                = 1,
    ETrailWidthMode                                = 2,
    ETrailWidthMode                                = 3

};


// Enum  Engine.EGBufferFormat
enum class EGBufferFormat : uint8_t
{
    Force8BitsPerChannel                           = 0,
    Default                                        = 1,
    HighPrecisionNormals                           = 3,
    Force16BitsPerChannel                          = 5,
    EGBufferFormat                                 = 6

};


// Enum  Engine.ESceneCaptureCompositeMode
enum class ESceneCaptureCompositeMode : uint8_t
{
    SCCM                                           = 0,
    SCCM                                           = 1,
    SCCM                                           = 2,
    SCCM                                           = 3

};


// Enum  Engine.ESceneCaptureSource
enum class ESceneCaptureSource : uint8_t
{
    SCS                                            = 0,
    SCS                                            = 1,
    SCS                                            = 2,
    SCS                                            = 3,
    SCS                                            = 4,
    SCS                                            = 5,
    SCS                                            = 6,
    SCS                                            = 7,
    SCS                                            = 8,
    SCS                                            = 9,
    SCS                                            = 10,
    SCS                                            = 11,
    SCS                                            = 12

};


// Enum  Engine.ETranslucentSortPolicy
enum class ETranslucentSortPolicy : uint8_t
{
    SortByDistance                                 = 0,
    SortByProjectedZ                               = 1,
    SortAlongAxis                                  = 2,
    ETranslucentSortPolicy                         = 3

};


// Enum  Engine.ERefractionMode
enum class ERefractionMode : uint8_t
{
    RM                                             = 0,
    RM                                             = 1,
    RM                                             = 2

};


// Enum  Engine.ETranslucencyLightingMode
enum class ETranslucencyLightingMode : uint8_t
{
    TLM                                            = 0,
    TLM                                            = 1,
    TLM                                            = 2,
    TLM                                            = 3,
    TLM                                            = 4,
    TLM                                            = 5,
    TLM                                            = 6

};


// Enum  Engine.ESamplerSourceMode
enum class ESamplerSourceMode : uint8_t
{
    SSM                                            = 0,
    SSM                                            = 1,
    SSM                                            = 2,
    SSM                                            = 3

};


// Enum  Engine.EBlendMode
enum class EBlendMode : uint8_t
{
    BLEND                                          = 0,
    BLEND                                          = 1,
    BLEND                                          = 2,
    BLEND                                          = 3,
    BLEND                                          = 4,
    BLEND                                          = 5,
    BLEND                                          = 6,
    BLEND                                          = 7

};


// Enum  Engine.EOcclusionCombineMode
enum class EOcclusionCombineMode : uint8_t
{
    OCM                                            = 0,
    OCM                                            = 1,
    OCM                                            = 2

};


// Enum  Engine.ELightmapType
enum class ELightmapType : uint8_t
{
    Default                                        = 0,
    ForceSurface                                   = 1,
    ForceVolumetric                                = 2,
    ELightmapType                                  = 3

};


// Enum  Engine.EIndirectLightingCacheQuality
enum class EIndirectLightingCacheQuality : uint8_t
{
    ILCQ                                           = 0,
    ILCQ                                           = 1,
    ILCQ                                           = 2,
    ILCQ                                           = 3

};


// Enum  Engine.ESceneDepthPriorityGroup
enum class ESceneDepthPriorityGroup : uint8_t
{
    SDPG                                           = 0,
    SDPG                                           = 1,
    SDPG                                           = 2

};


// Enum  Engine.EAspectRatioAxisConstraint
enum class EAspectRatioAxisConstraint : uint8_t
{
    AspectRatio                                    = 0,
    AspectRatio                                    = 1,
    AspectRatio                                    = 2,
    AspectRatio                                    = 3

};


// Enum  Engine.EFontCacheType
enum class EFontCacheType : uint8_t
{
    Offline                                        = 0,
    Runtime                                        = 1,
    EFontCacheType                                 = 2

};


// Enum  Engine.EFontImportCharacterSet
enum class EFontImportCharacterSet : uint8_t
{
    FontICS                                        = 0,
    FontICS                                        = 1,
    FontICS                                        = 2,
    FontICS                                        = 3

};


// Enum  Engine.EStandbyType
enum class EStandbyType : uint8_t
{
    STDBY                                          = 0,
    STDBY                                          = 1,
    STDBY                                          = 2,
    STDBY                                          = 3

};


// Enum  Engine.ESuggestProjVelocityTraceOption
enum class ESuggestProjVelocityTraceOption : uint8_t
{
    DoNotTrace                                     = 0,
    TraceFullPath                                  = 1,
    OnlyTraceWhileAscending                        = 2,
    ESuggestProjVelocityTraceOption                = 3

};


// Enum  Engine.EWindowMode
enum class EWindowMode : uint8_t
{
    Fullscreen                                     = 0,
    WindowedFullscreen                             = 1,
    Windowed                                       = 2,
    EWindowMode                                    = 3

};


// Enum  Engine.EHitProxyPriority
enum class EHitProxyPriority : uint8_t
{
    HPP                                            = 0,
    HPP                                            = 1,
    HPP                                            = 2,
    HPP                                            = 3,
    HPP                                            = 4

};


// Enum  Engine.EImportanceWeight
enum class EImportanceWeight : uint8_t
{
    Luminance                                      = 0,
    Red                                            = 1,
    Green                                          = 2,
    Blue                                           = 3,
    Alpha                                          = 4,
    EImportanceWeight                              = 5

};


// Enum  Engine.EAdManagerDelegate
enum class EAdManagerDelegate : uint8_t
{
    AMD                                            = 0,
    AMD                                            = 1,
    AMD                                            = 2

};


// Enum  Engine.EControllerAnalogStick
enum class EControllerAnalogStick : uint8_t
{
    CAS                                            = 0,
    CAS                                            = 1,
    CAS                                            = 2

};


// Enum  Engine.EAnimAlphaInputType
enum class EAnimAlphaInputType : uint8_t
{
    Float                                          = 0,
    Bool                                           = 1,
    Curve                                          = 2,
    EAnimAlphaInputType                            = 3

};


// Enum  Engine.ETrackActiveCondition
enum class ETrackActiveCondition : uint8_t
{
    ETAC                                           = 0,
    ETAC                                           = 1,
    ETAC                                           = 2,
    ETAC                                           = 3

};


// Enum  Engine.EInterpTrackMoveRotMode
enum class EInterpTrackMoveRotMode : uint8_t
{
    IMR                                            = 0,
    IMR                                            = 1,
    IMR                                            = 2,
    IMR                                            = 3

};


// Enum  Engine.EInterpMoveAxis
enum class EInterpMoveAxis : uint8_t
{
    AXIS                                           = 0,
    AXIS                                           = 1,
    AXIS                                           = 2,
    AXIS                                           = 3,
    AXIS                                           = 4,
    AXIS                                           = 5,
    AXIS                                           = 6

};


// Enum  Engine.ETrackToggleAction
enum class ETrackToggleAction : uint8_t
{
    ETTA                                           = 0,
    ETTA                                           = 1,
    ETTA                                           = 2,
    ETTA                                           = 3,
    ETTA                                           = 4

};


// Enum  Engine.EVisibilityTrackCondition
enum class EVisibilityTrackCondition : uint8_t
{
    EVTC                                           = 0,
    EVTC                                           = 1,
    EVTC                                           = 2,
    EVTC                                           = 3

};


// Enum  Engine.EVisibilityTrackAction
enum class EVisibilityTrackAction : uint8_t
{
    EVTA                                           = 0,
    EVTA                                           = 1,
    EVTA                                           = 2,
    EVTA                                           = 3

};


// Enum  Engine.ESlateGesture
enum class ESlateGesture : uint8_t
{
    None                                           = 0,
    Scroll                                         = 1,
    Magnify                                        = 2,
    Swipe                                          = 3,
    Rotate                                         = 4,
    LongPress                                      = 5,
    ESlateGesture                                  = 6

};


// Enum  Engine.EMIDCreationFlags
enum class EMIDCreationFlags : uint8_t
{
    None                                           = 0,
    Transient                                      = 1,
    EMIDCreationFlags                              = 2

};


// Enum  Engine.EMatrixColumns
enum class EMatrixColumns : uint8_t
{
    First                                          = 0,
    Second                                         = 1,
    Third                                          = 2,
    Fourth                                         = 3,
    EMatrixColumns                                 = 4

};


// Enum  Engine.ELerpInterpolationMode
enum class ELerpInterpolationMode : uint8_t
{
    QuatInterp                                     = 0,
    EulerInterp                                    = 1,
    DualQuatInterp                                 = 2,
    ELerpInterpolationMode                         = 3

};


// Enum  Engine.EEasingFunc
enum class EEasingFunc : uint8_t
{
    Linear                                         = 0,
    Step                                           = 1,
    SinusoidalIn                                   = 2,
    SinusoidalOut                                  = 3,
    SinusoidalInOut                                = 4,
    EaseIn                                         = 5,
    EaseOut                                        = 6,
    EaseInOut                                      = 7,
    ExpoIn                                         = 8,
    ExpoOut                                        = 9,
    ExpoInOut                                      = 10,
    CircularIn                                     = 11,
    CircularOut                                    = 12,
    CircularInOut                                  = 13,
    EEasingFunc                                    = 14

};


// Enum  Engine.EStreamingVolumeUsage
enum class EStreamingVolumeUsage : uint8_t
{
    SVB                                            = 0,
    SVB                                            = 1,
    SVB                                            = 2,
    SVB                                            = 3,
    SVB                                            = 4,
    SVB                                            = 5

};


// Enum  Engine.ESyncOption
enum class ESyncOption : uint8_t
{
    Drive                                          = 0,
    Passive                                        = 1,
    Disabled                                       = 2,
    ESyncOption                                    = 3

};


// Enum  Engine.EMaterialDecalResponse
enum class EMaterialDecalResponse : uint8_t
{
    MDR                                            = 0,
    MDR                                            = 1,
    MDR                                            = 2,
    MDR                                            = 3,
    MDR                                            = 4,
    MDR                                            = 5,
    MDR                                            = 6,
    MDR                                            = 7,
    MDR                                            = 8

};


// Enum  Engine.EDecalBlendMode
enum class EDecalBlendMode : uint8_t
{
    DBM                                            = 0,
    DBM                                            = 1,
    DBM                                            = 2,
    DBM                                            = 3,
    DBM                                            = 4,
    DBM                                            = 5,
    DBM                                            = 6,
    DBM                                            = 7,
    DBM                                            = 8,
    DBM                                            = 9,
    DBM                                            = 10,
    DBM                                            = 11,
    DBM                                            = 12,
    DBM                                            = 13,
    DBM                                            = 14,
    DBM                                            = 15,
    DBM                                            = 16,
    DBM                                            = 17,
    DBM                                            = 18,
    DBM                                            = 19

};


// Enum  Engine.ETextureColorChannel
enum class ETextureColorChannel : uint8_t
{
    TCC                                            = 0,
    TCC                                            = 1,
    TCC                                            = 2,
    TCC                                            = 3,
    TCC                                            = 4

};


// Enum  Engine.EAresStencilMode
enum class EAresStencilMode : uint8_t
{
    ASM                                            = 0,
    ASM                                            = 1,
    ASM                                            = 2,
    ASM                                            = 3,
    ASM                                            = 4,
    ASM                                            = 5,
    ASM                                            = 6,
    ASM                                            = 7,
    ASM                                            = 8,
    ASM                                            = 9,
    ASM                                            = 10,
    ASM                                            = 11

};


// Enum  Engine.EMaterialAttributeBlend
enum class EMaterialAttributeBlend : uint8_t
{
    Blend                                          = 0,
    UseA                                           = 1,
    UseB                                           = 2,
    EMaterialAttributeBlend                        = 3

};


// Enum  Engine.EChannelMaskParameterColor
enum class EChannelMaskParameterColor : uint8_t
{
    Red                                            = 0,
    Green                                          = 1,
    Blue                                           = 2,
    Alpha                                          = 3,
    EChannelMaskParameterColor                     = 4

};


// Enum  Engine.EClampMode
enum class EClampMode : uint8_t
{
    CMODE                                          = 0,
    CMODE                                          = 1,
    CMODE                                          = 2,
    CMODE                                          = 3

};


// Enum  Engine.ECustomMaterialOutputType
enum class ECustomMaterialOutputType : uint8_t
{
    CMOT                                           = 0,
    CMOT                                           = 1,
    CMOT                                           = 2,
    CMOT                                           = 3,
    CMOT                                           = 4,
    CMOT                                           = 5

};


// Enum  Engine.EDepthOfFieldFunctionValue
enum class EDepthOfFieldFunctionValue : uint8_t
{
    TDOF                                           = 0,
    TDOF                                           = 1,
    TDOF                                           = 2,
    TDOF                                           = 3,
    TDOF                                           = 4

};


// Enum  Engine.EFunctionInputType
enum class EFunctionInputType : uint8_t
{
    FunctionInput                                  = 0,
    FunctionInput                                  = 1,
    FunctionInput                                  = 2,
    FunctionInput                                  = 3,
    FunctionInput                                  = 4,
    FunctionInput                                  = 5,
    FunctionInput                                  = 6,
    FunctionInput                                  = 7,
    FunctionInput                                  = 8,
    FunctionInput                                  = 9,
    FunctionInput                                  = 10,
    FunctionInput                                  = 11

};


// Enum  Engine.ENoiseFunction
enum class ENoiseFunction : uint8_t
{
    NOISEFUNCTION                                  = 0,
    NOISEFUNCTION                                  = 1,
    NOISEFUNCTION                                  = 2,
    NOISEFUNCTION                                  = 3,
    NOISEFUNCTION                                  = 4,
    NOISEFUNCTION                                  = 5,
    NOISEFUNCTION                                  = 6

};


// Enum  Engine.ERuntimeVirtualTextureTextureAddressMode
enum class ERuntimeVirtualTextureTextureAddressMode : uint8_t
{
    RVTTA                                          = 0,
    RVTTA                                          = 1,
    RVTTA                                          = 2

};


// Enum  Engine.ERuntimeVirtualTextureMipValueMode
enum class ERuntimeVirtualTextureMipValueMode : uint8_t
{
    RVTMVM                                         = 0,
    RVTMVM                                         = 1,
    RVTMVM                                         = 2,
    RVTMVM                                         = 3

};


// Enum  Engine.EMaterialSceneAttributeInputMode
enum class EMaterialSceneAttributeInputMode : uint8_t
{
    Coordinates                                    = 0,
    OffsetFraction                                 = 1,
    EMaterialSceneAttributeInputMode               = 2

};


// Enum  Engine.ESpeedTreeLODType
enum class ESpeedTreeLODType : uint8_t
{
    STLOD                                          = 0,
    STLOD                                          = 1,
    STLOD                                          = 2

};


// Enum  Engine.ESpeedTreeWindType
enum class ESpeedTreeWindType : uint8_t
{
    STW                                            = 0,
    STW                                            = 1,
    STW                                            = 2,
    STW                                            = 3,
    STW                                            = 4,
    STW                                            = 5,
    STW                                            = 6,
    STW                                            = 7

};


// Enum  Engine.ESpeedTreeGeometryType
enum class ESpeedTreeGeometryType : uint8_t
{
    STG                                            = 0,
    STG                                            = 1,
    STG                                            = 2,
    STG                                            = 3,
    STG                                            = 4,
    STG                                            = 5

};


// Enum  Engine.EMaterialExposedTextureProperty
enum class EMaterialExposedTextureProperty : uint8_t
{
    TMTM                                           = 0,
    TMTM                                           = 1,
    TMTM                                           = 2

};


// Enum  Engine.ETextureMipValueMode
enum class ETextureMipValueMode : uint8_t
{
    TMVM                                           = 0,
    TMVM                                           = 1,
    TMVM                                           = 2,
    TMVM                                           = 3,
    TMVM                                           = 4

};


// Enum  Engine.EMaterialVectorCoordTransform
enum class EMaterialVectorCoordTransform : uint8_t
{
    TRANSFORM                                      = 0,
    TRANSFORM                                      = 1,
    TRANSFORM                                      = 2,
    TRANSFORM                                      = 3,
    TRANSFORM                                      = 4,
    TRANSFORM                                      = 5,
    TRANSFORM                                      = 6

};


// Enum  Engine.EMaterialVectorCoordTransformSource
enum class EMaterialVectorCoordTransformSource : uint8_t
{
    TRANSFORMSOURCE                                = 0,
    TRANSFORMSOURCE                                = 1,
    TRANSFORMSOURCE                                = 2,
    TRANSFORMSOURCE                                = 3,
    TRANSFORMSOURCE                                = 4,
    TRANSFORMSOURCE                                = 5,
    TRANSFORMSOURCE                                = 6

};


// Enum  Engine.EMaterialPositionTransformSource
enum class EMaterialPositionTransformSource : uint8_t
{
    TRANSFORMPOSSOURCE                             = 0,
    TRANSFORMPOSSOURCE                             = 1,
    TRANSFORMPOSSOURCE                             = 2,
    TRANSFORMPOSSOURCE                             = 3,
    TRANSFORMPOSSOURCE                             = 4,
    TRANSFORMPOSSOURCE                             = 5,
    TRANSFORMPOSSOURCE                             = 6

};


// Enum  Engine.EVectorNoiseFunction
enum class EVectorNoiseFunction : uint8_t
{
    VNF                                            = 0,
    VNF                                            = 1,
    VNF                                            = 2,
    VNF                                            = 3,
    VNF                                            = 4,
    VNF                                            = 5

};


// Enum  Engine.EMaterialExposedViewProperty
enum class EMaterialExposedViewProperty : uint8_t
{
    MEVP                                           = 0,
    MEVP                                           = 1,
    MEVP                                           = 2,
    MEVP                                           = 3,
    MEVP                                           = 4,
    MEVP                                           = 5,
    MEVP                                           = 6,
    MEVP                                           = 7,
    MEVP                                           = 8,
    MEVP                                           = 9,
    MEVP                                           = 10,
    MEVP                                           = 11,
    MEVP                                           = 12,
    MEVP                                           = 13,
    MEVP                                           = 14

};


// Enum  Engine.EWorldPositionIncludedOffsets
enum class EWorldPositionIncludedOffsets : uint8_t
{
    WPT                                            = 0,
    WPT                                            = 1,
    WPT                                            = 2,
    WPT                                            = 3,
    WPT                                            = 4

};


// Enum  Engine.EMaterialFunctionUsage
enum class EMaterialFunctionUsage : uint8_t
{
    Default                                        = 0,
    MaterialLayer                                  = 1,
    MaterialLayerBlend                             = 2,
    EMaterialFunctionUsage                         = 3

};


// Enum  Engine.EMaterialUsage
enum class EMaterialUsage : uint8_t
{
    MATUSAGE                                       = 0,
    MATUSAGE                                       = 1,
    MATUSAGE                                       = 2,
    MATUSAGE                                       = 3,
    MATUSAGE                                       = 4,
    MATUSAGE                                       = 5,
    MATUSAGE                                       = 6,
    MATUSAGE                                       = 7,
    MATUSAGE                                       = 8,
    MATUSAGE                                       = 9,
    MATUSAGE                                       = 10,
    MATUSAGE                                       = 11,
    MATUSAGE                                       = 12,
    MATUSAGE                                       = 13,
    MATUSAGE                                       = 14,
    MATUSAGE                                       = 15,
    MATUSAGE                                       = 16,
    MATUSAGE                                       = 17,
    MATUSAGE                                       = 18

};


// Enum  Engine.EMaterialLayerLinkState
enum class EMaterialLayerLinkState : uint8_t
{
    Uninitialized                                  = 0,
    LinkedToParent                                 = 1,
    UnlinkedFromParent                             = 2,
    NotFromParent                                  = 3,
    EMaterialLayerLinkState                        = 4

};


// Enum  Engine.EMaterialParameterAssociation
enum class EMaterialParameterAssociation : uint8_t
{
    LayerParameter                                 = 0,
    BlendParameter                                 = 1,
    GlobalParameter                                = 2,
    EMaterialParameterAssociation                  = 3

};


// Enum  Engine.EMaterialMergeType
enum class EMaterialMergeType : uint8_t
{
    MaterialMergeType                              = 0,
    MaterialMergeType                              = 1,
    MaterialMergeType                              = 2

};


// Enum  Engine.ETextureSizingType
enum class ETextureSizingType : uint8_t
{
    TextureSizingType                              = 0,
    TextureSizingType                              = 1,
    TextureSizingType                              = 2,
    TextureSizingType                              = 3,
    TextureSizingType                              = 4

};


// Enum  Engine.ESceneTextureId
enum class ESceneTextureId : uint8_t
{
    PPI                                            = 0,
    PPI                                            = 1,
    PPI                                            = 2,
    PPI                                            = 3,
    PPI                                            = 4,
    PPI                                            = 5,
    PPI                                            = 6,
    PPI                                            = 7,
    PPI                                            = 8,
    PPI                                            = 9,
    PPI                                            = 10,
    PPI                                            = 11,
    PPI                                            = 12,
    PPI                                            = 13,
    PPI                                            = 14,
    PPI                                            = 15,
    PPI                                            = 16,
    PPI                                            = 17,
    PPI                                            = 18,
    PPI                                            = 19,
    PPI                                            = 20,
    PPI                                            = 21,
    PPI                                            = 22,
    PPI                                            = 23,
    PPI                                            = 24,
    PPI                                            = 25,
    PPI                                            = 26,
    PPI                                            = 27,
    PPI                                            = 28,
    PPI                                            = 29,
    PPI                                            = 30,
    PPI                                            = 31,
    PPI                                            = 32

};


// Enum  Engine.EMaterialDomain
enum class EMaterialDomain : uint8_t
{
    MD                                             = 0,
    MD                                             = 1,
    MD                                             = 2,
    MD                                             = 3,
    MD                                             = 4,
    MD                                             = 5,
    MD                                             = 6,
    MD                                             = 7

};


// Enum  Engine.EMeshInstancingReplacementMethod
enum class EMeshInstancingReplacementMethod : uint8_t
{
    RemoveOriginalActors                           = 0,
    KeepOriginalActorsAsEditorOnly                 = 1,
    EMeshInstancingReplacementMethod               = 2

};


// Enum  Engine.EUVOutput
enum class EUVOutput : uint8_t
{
    DoNotOutputChannel                             = 0,
    OutputChannel                                  = 1,
    EUVOutput                                      = 2

};


// Enum  Engine.EMeshMergeType
enum class EMeshMergeType : uint8_t
{
    MeshMergeType                                  = 0,
    MeshMergeType                                  = 1,
    MeshMergeType                                  = 2

};


// Enum  Engine.EMeshLODSelectionType
enum class EMeshLODSelectionType : uint8_t
{
    AllLODs                                        = 0,
    SpecificLOD                                    = 1,
    CalculateLOD                                   = 2,
    LowestDetailLOD                                = 3,
    EMeshLODSelectionType                          = 4

};


// Enum  Engine.EProxyNormalComputationMethod
enum class EProxyNormalComputationMethod : uint8_t
{
    AngleWeighted                                  = 0,
    AreaWeighted                                   = 1,
    EqualWeighted                                  = 2,
    EProxyNormalComputationMethod                  = 3

};


// Enum  Engine.ELandscapeCullingPrecision
enum class ELandscapeCullingPrecision : uint8_t
{
    High                                           = 0,
    Medium                                         = 1,
    Low                                            = 2,
    ELandscapeCullingPrecision                     = 3

};


// Enum  Engine.EStaticMeshReductionTerimationCriterion
enum class EStaticMeshReductionTerimationCriterion : uint8_t
{
    Triangles                                      = 0,
    Vertices                                       = 1,
    Any                                            = 2,
    EStaticMeshReductionTerimationCriterion        = 3

};


// Enum  Engine.EMeshFeatureImportance
enum class EMeshFeatureImportance : uint8_t
{
    Off                                            = 0,
    Lowest                                         = 1,
    Low                                            = 2,
    Normal                                         = 3,
    High                                           = 4,
    Highest                                        = 5,
    EMeshFeatureImportance                         = 6

};


// Enum  Engine.EVertexPaintAxis
enum class EVertexPaintAxis : uint8_t
{
    X                                              = 0,
    Y                                              = 1,
    Z                                              = 2,
    EVertexPaintAxis                               = 3

};


// Enum  Engine.EMicroTransactionResult
enum class EMicroTransactionResult : uint8_t
{
    MTR                                            = 0,
    MTR                                            = 1,
    MTR                                            = 2,
    MTR                                            = 3,
    MTR                                            = 4

};


// Enum  Engine.EMicroTransactionDelegate
enum class EMicroTransactionDelegate : uint8_t
{
    MTD                                            = 0,
    MTD                                            = 1,
    MTD                                            = 2

};


// Enum  Engine.FNavigationSystemRunMode
enum class FNavigationSystemRunMode : uint8_t
{
    InvalidMode                                    = 0,
    GameMode                                       = 1,
    EditorMode                                     = 2,
    SimulationMode                                 = 3,
    PIEMode                                        = 4,
    InferFromWorldMode                             = 5,
    FNavigationSystemRunMode                       = 6

};


// Enum  Engine.ENavigationQueryResult
enum class ENavigationQueryResult : uint8_t
{
    Invalid                                        = 0,
    Error                                          = 1,
    Fail                                           = 2,
    Success                                        = 3,
    ENavigationQueryResult                         = 4

};


// Enum  Engine.ENavPathEvent
enum class ENavPathEvent : uint8_t
{
    Cleared                                        = 0,
    NewPath                                        = 1,
    UpdatedDueToGoalMoved                          = 2,
    UpdatedDueToNavigationChanged                  = 3,
    Invalidated                                    = 4,
    RePathFailed                                   = 5,
    MetaPathUpdate                                 = 6,
    Custom                                         = 7,
    ENavPathEvent                                  = 8

};


// Enum  Engine.ENavDataGatheringModeConfig
enum class ENavDataGatheringModeConfig : uint8_t
{
    Invalid                                        = 0,
    Instant                                        = 1,
    Lazy                                           = 2,
    ENavDataGatheringModeConfig                    = 3

};


// Enum  Engine.ENavDataGatheringMode
enum class ENavDataGatheringMode : uint8_t
{
    Default                                        = 0,
    Instant                                        = 1,
    Lazy                                           = 2,
    ENavDataGatheringMode                          = 3

};


// Enum  Engine.ENavigationOptionFlag
enum class ENavigationOptionFlag : uint8_t
{
    Default                                        = 0,
    Enable                                         = 1,
    Disable                                        = 2,
    MAX                                            = 3

};


// Enum  Engine.ENavLinkDirection
enum class ENavLinkDirection : uint8_t
{
    BothWays                                       = 0,
    LeftToRight                                    = 1,
    RightToLeft                                    = 2,
    ENavLinkDirection                              = 3

};


// Enum  Engine.EEmitterRenderMode
enum class EEmitterRenderMode : uint8_t
{
    ERM                                            = 0,
    ERM                                            = 1,
    ERM                                            = 2,
    ERM                                            = 3,
    ERM                                            = 4,
    ERM                                            = 5

};


// Enum  Engine.EParticleSubUVInterpMethod
enum class EParticleSubUVInterpMethod : uint8_t
{
    PSUVIM                                         = 0,
    PSUVIM                                         = 1,
    PSUVIM                                         = 2,
    PSUVIM                                         = 3,
    PSUVIM                                         = 4,
    PSUVIM                                         = 5

};


// Enum  Engine.EParticleBurstMethod
enum class EParticleBurstMethod : uint8_t
{
    EPBM                                           = 0,
    EPBM                                           = 1,
    EPBM                                           = 2

};


// Enum  Engine.EParticleSystemInsignificanceReaction
enum class EParticleSystemInsignificanceReaction : uint8_t
{
    Auto                                           = 0,
    Complete                                       = 1,
    DisableTick                                    = 2,
    DisableTickAndKill                             = 3,
    Num                                            = 4,
    EParticleSystemInsignificanceReaction          = 5

};


// Enum  Engine.EParticleSignificanceLevel
enum class EParticleSignificanceLevel : uint8_t
{
    Low                                            = 0,
    Medium                                         = 1,
    High                                           = 2,
    Critical                                       = 3,
    Num                                            = 4,
    EParticleSignificanceLevel                     = 5

};


// Enum  Engine.EParticleDetailMode
enum class EParticleDetailMode : uint8_t
{
    PDM                                            = 0,
    PDM                                            = 1,
    PDM                                            = 2,
    PDM                                            = 3,
    PDM                                            = 4

};


// Enum  Engine.EParticleSourceSelectionMethod
enum class EParticleSourceSelectionMethod : uint8_t
{
    EPSSM                                          = 0,
    EPSSM                                          = 1,
    EPSSM                                          = 2

};


// Enum  Engine.EModuleType
enum class EModuleType : uint8_t
{
    EPMT                                           = 0,
    EPMT                                           = 1,
    EPMT                                           = 2,
    EPMT                                           = 3,
    EPMT                                           = 4,
    EPMT                                           = 5,
    EPMT                                           = 6,
    EPMT                                           = 7,
    EPMT                                           = 8,
    EPMT                                           = 9

};


// Enum  Engine.EAttractorParticleSelectionMethod
enum class EAttractorParticleSelectionMethod : uint8_t
{
    EAPSM                                          = 0,
    EAPSM                                          = 1,
    EAPSM                                          = 2

};


// Enum  Engine.Beam2SourceTargetTangentMethod
enum class Beam2SourceTargetTangentMethod : uint8_t
{
    PEB2STTM                                       = 0,
    PEB2STTM                                       = 1,
    PEB2STTM                                       = 2,
    PEB2STTM                                       = 3,
    PEB2STTM                                       = 4

};


// Enum  Engine.Beam2SourceTargetMethod
enum class Beam2SourceTargetMethod : uint8_t
{
    PEB2STM                                        = 0,
    PEB2STM                                        = 1,
    PEB2STM                                        = 2,
    PEB2STM                                        = 3,
    PEB2STM                                        = 4,
    PEB2STM                                        = 5,
    PEB2STM                                        = 6

};


// Enum  Engine.BeamModifierType
enum class BeamModifierType : uint8_t
{
    PEB2MT                                         = 0,
    PEB2MT                                         = 1,
    PEB2MT                                         = 2

};


// Enum  Engine.EParticleCameraOffsetUpdateMethod
enum class EParticleCameraOffsetUpdateMethod : uint8_t
{
    EPCOUM                                         = 0,
    EPCOUM                                         = 1,
    EPCOUM                                         = 2,
    EPCOUM                                         = 3

};


// Enum  Engine.EParticleCollisionComplete
enum class EParticleCollisionComplete : uint8_t
{
    EPCC                                           = 0,
    EPCC                                           = 1,
    EPCC                                           = 2,
    EPCC                                           = 3,
    EPCC                                           = 4,
    EPCC                                           = 5,
    EPCC                                           = 6

};


// Enum  Engine.EParticleCollisionResponse
enum class EParticleCollisionResponse : uint8_t
{
    Bounce                                         = 0,
    Stop                                           = 1,
    Kill                                           = 2,
    EParticleCollisionResponse                     = 3

};


// Enum  Engine.EAresParticleVariantColor
enum class EAresParticleVariantColor : uint8_t
{
    AresVariantBaseColor                           = 0,
    AresVariant1Color                              = 1,
    AresVariant2Color                              = 2,
    AresVariant3Color                              = 3,
    AresVariantRadiantColor                        = 4,
    EAresParticleVariantColor                      = 5

};


// Enum  Engine.ELocationBoneSocketSelectionMethod
enum class ELocationBoneSocketSelectionMethod : uint8_t
{
    BONESOCKETSEL                                  = 0,
    BONESOCKETSEL                                  = 1,
    BONESOCKETSEL                                  = 2

};


// Enum  Engine.ELocationBoneSocketSource
enum class ELocationBoneSocketSource : uint8_t
{
    BONESOCKETSOURCE                               = 0,
    BONESOCKETSOURCE                               = 1,
    BONESOCKETSOURCE                               = 2

};


// Enum  Engine.ELocationEmitterSelectionMethod
enum class ELocationEmitterSelectionMethod : uint8_t
{
    ELESM                                          = 0,
    ELESM                                          = 1,
    ELESM                                          = 2

};


// Enum  Engine.CylinderHeightAxis
enum class CylinderHeightAxis : uint8_t
{
    PMLPC                                          = 0,
    PMLPC                                          = 1,
    PMLPC                                          = 2,
    PMLPC                                          = 3

};


// Enum  Engine.ELocationSkelVertSurfaceSource
enum class ELocationSkelVertSurfaceSource : uint8_t
{
    VERTSURFACESOURCE                              = 0,
    VERTSURFACESOURCE                              = 1,
    VERTSURFACESOURCE                              = 2

};


// Enum  Engine.EOrbitChainMode
enum class EOrbitChainMode : uint8_t
{
    EOChainMode                                    = 0,
    EOChainMode                                    = 1,
    EOChainMode                                    = 2,
    EOChainMode                                    = 3

};


// Enum  Engine.EParticleAxisLock
enum class EParticleAxisLock : uint8_t
{
    EPAL                                           = 0,
    EPAL                                           = 1,
    EPAL                                           = 2,
    EPAL                                           = 3,
    EPAL                                           = 4,
    EPAL                                           = 5,
    EPAL                                           = 6,
    EPAL                                           = 7,
    EPAL                                           = 8,
    EPAL                                           = 9,
    EPAL                                           = 10

};


// Enum  Engine.EEmitterDynamicParameterValue
enum class EEmitterDynamicParameterValue : uint8_t
{
    EDPV                                           = 0,
    EDPV                                           = 1,
    EDPV                                           = 2,
    EDPV                                           = 3,
    EDPV                                           = 4,
    EDPV                                           = 5,
    EDPV                                           = 6

};


// Enum  Engine.EEmitterNormalsMode
enum class EEmitterNormalsMode : uint8_t
{
    ENM                                            = 0,
    ENM                                            = 1,
    ENM                                            = 2,
    ENM                                            = 3

};


// Enum  Engine.EParticleSortMode
enum class EParticleSortMode : uint8_t
{
    PSORTMODE                                      = 0,
    PSORTMODE                                      = 1,
    PSORTMODE                                      = 2,
    PSORTMODE                                      = 3,
    PSORTMODE                                      = 4,
    PSORTMODE                                      = 5

};


// Enum  Engine.EParticleUVFlipMode
enum class EParticleUVFlipMode : uint8_t
{
    None                                           = 0,
    FlipUV                                         = 1,
    FlipUOnly                                      = 2,
    FlipVOnly                                      = 3,
    RandomFlipUV                                   = 4,
    RandomFlipUOnly                                = 5,
    RandomFlipVOnly                                = 6,
    RandomFlipUVIndependent                        = 7,
    EParticleUVFlipMode                            = 8

};


// Enum  Engine.ETrail2SourceMethod
enum class ETrail2SourceMethod : uint8_t
{
    PET2SRCM                                       = 0,
    PET2SRCM                                       = 1,
    PET2SRCM                                       = 2,
    PET2SRCM                                       = 3

};


// Enum  Engine.EBeamTaperMethod
enum class EBeamTaperMethod : uint8_t
{
    PEBTM                                          = 0,
    PEBTM                                          = 1,
    PEBTM                                          = 2,
    PEBTM                                          = 3

};


// Enum  Engine.EBeam2Method
enum class EBeam2Method : uint8_t
{
    PEB2M                                          = 0,
    PEB2M                                          = 1,
    PEB2M                                          = 2,
    PEB2M                                          = 3

};


// Enum  Engine.EMeshCameraFacingOptions
enum class EMeshCameraFacingOptions : uint8_t
{
    XAxisFacing                                    = 0,
    XAxisFacing                                    = 1,
    XAxisFacing                                    = 2,
    XAxisFacing                                    = 3,
    XAxisFacing                                    = 4,
    LockedAxis                                     = 5,
    LockedAxis                                     = 6,
    LockedAxis                                     = 7,
    LockedAxis                                     = 8,
    VelocityAligned                                = 9,
    VelocityAligned                                = 10,
    VelocityAligned                                = 11,
    VelocityAligned                                = 12,
    EMeshCameraFacingOptions                       = 13

};


// Enum  Engine.EMeshCameraFacingUpAxis
enum class EMeshCameraFacingUpAxis : uint8_t
{
    CameraFacing                                   = 0,
    CameraFacing                                   = 1,
    CameraFacing                                   = 2,
    CameraFacing                                   = 3,
    CameraFacing                                   = 4,
    CameraFacing                                   = 5

};


// Enum  Engine.EMeshScreenAlignment
enum class EMeshScreenAlignment : uint8_t
{
    PSMA                                           = 0,
    PSMA                                           = 1,
    PSMA                                           = 2,
    PSMA                                           = 3

};


// Enum  Engine.ETrailsRenderAxisOption
enum class ETrailsRenderAxisOption : uint8_t
{
    Trails                                         = 0,
    Trails                                         = 1,
    Trails                                         = 2,
    Trails                                         = 3

};


// Enum  Engine.EParticleScreenAlignment
enum class EParticleScreenAlignment : uint8_t
{
    PSA                                            = 0,
    PSA                                            = 1,
    PSA                                            = 2,
    PSA                                            = 3,
    PSA                                            = 4,
    PSA                                            = 5,
    PSA                                            = 6,
    PSA                                            = 7

};


// Enum  Engine.EParticleSystemOcclusionBoundsMethod
enum class EParticleSystemOcclusionBoundsMethod : uint8_t
{
    EPSOBM                                         = 0,
    EPSOBM                                         = 1,
    EPSOBM                                         = 2,
    EPSOBM                                         = 3

};


// Enum  Engine.ParticleSystemLODMethod
enum class ParticleSystemLODMethod : uint8_t
{
    PARTICLESYSTEMLODMETHOD                        = 0,
    PARTICLESYSTEMLODMETHOD                        = 1,
    PARTICLESYSTEMLODMETHOD                        = 2,
    PARTICLESYSTEMLODMETHOD                        = 3

};


// Enum  Engine.EParticleSystemUpdateMode
enum class EParticleSystemUpdateMode : uint8_t
{
    EPSUM                                          = 0,
    EPSUM                                          = 1,
    EPSUM                                          = 2

};


// Enum  Engine.EParticlePreviewTeamColor
enum class EParticlePreviewTeamColor : uint8_t
{
    Base                                           = 0,
    DefaultEnemy                                   = 1,
    TritanopiaEnemy                                = 2,
    DeuteranopiaEnemy                              = 3,
    ProtanopiaEnemy                                = 4,
    Defender                                       = 5,
    CustomColor                                    = 6,
    EParticlePreviewTeamColor                      = 7

};


// Enum  Engine.EParticleEventType
enum class EParticleEventType : uint8_t
{
    EPET                                           = 0,
    EPET                                           = 1,
    EPET                                           = 2,
    EPET                                           = 3,
    EPET                                           = 4,
    EPET                                           = 5,
    EPET                                           = 6

};


// Enum  Engine.ParticleReplayState
enum class ParticleReplayState : uint8_t
{
    PRS                                            = 0,
    PRS                                            = 1,
    PRS                                            = 2,
    PRS                                            = 3

};


// Enum  Engine.EParticleSysParamType
enum class EParticleSysParamType : uint8_t
{
    PSPT                                           = 0,
    PSPT                                           = 1,
    PSPT                                           = 2,
    PSPT                                           = 3,
    PSPT                                           = 4,
    PSPT                                           = 5,
    PSPT                                           = 6,
    PSPT                                           = 7,
    PSPT                                           = 8,
    PSPT                                           = 9

};


// Enum  Engine.EPhysicsAssetSolverType
enum class EPhysicsAssetSolverType : uint8_t
{
    RBAN                                           = 0,
    World                                          = 1,
    EPhysicsAssetSolverType                        = 2

};


// Enum  Engine.ESettingsLockedAxis
enum class ESettingsLockedAxis : uint8_t
{
    None                                           = 0,
    X                                              = 1,
    Y                                              = 2,
    Z                                              = 3,
    Invalid                                        = 4,
    ESettingsLockedAxis                            = 5

};


// Enum  Engine.ESettingsDOF
enum class ESettingsDOF : uint8_t
{
    Full3D                                         = 0,
    YZPlane                                        = 1,
    XZPlane                                        = 2,
    XYPlane                                        = 3,
    ESettingsDOF                                   = 4

};


// Enum  Engine.EDynamicForceFeedbackAction
enum class EDynamicForceFeedbackAction : uint8_t
{
    Start                                          = 0,
    Update                                         = 1,
    Stop                                           = 2,
    EDynamicForceFeedbackAction                    = 3

};


// Enum  Engine.ERendererStencilMask
enum class ERendererStencilMask : uint8_t
{
    ERSM                                           = 0,
    ERSM                                           = 1,
    ERSM                                           = 2,
    ERSM                                           = 3,
    ERSM                                           = 4,
    ERSM                                           = 5,
    ERSM                                           = 6,
    ERSM                                           = 7,
    ERSM                                           = 8,
    ERSM                                           = 9,
    ERSM                                           = 10

};


// Enum  Engine.EHasCustomNavigableGeometry
enum class EHasCustomNavigableGeometry : uint8_t
{
    No                                             = 0,
    Yes                                            = 1,
    EvenIfNotCollidable                            = 2,
    DontExport                                     = 3,
    EHasCustomNavigableGeometry                    = 4

};


// Enum  Engine.ECanBeCharacterBase
enum class ECanBeCharacterBase : uint8_t
{
    ECB                                            = 0,
    ECB                                            = 1,
    ECB                                            = 2,
    ECB                                            = 3

};


// Enum  Engine.EPrepassCullMode
enum class EPrepassCullMode : uint8_t
{
    PCM                                            = 0,
    PCM                                            = 1,
    PCM                                            = 2,
    PCM                                            = 3

};


// Enum  Engine.EUmbraComponentMode
enum class EUmbraComponentMode : uint8_t
{
    UCM                                            = 0,
    UCM                                            = 1,
    UCM                                            = 2,
    UCM                                            = 3

};


// Enum  Engine.EQuarztQuantizationReference
enum class EQuarztQuantizationReference : uint8_t
{
    BarRelative                                    = 0,
    TransportRelative                              = 1,
    CurrentTimeRelative                            = 2,
    Count                                          = 3,
    EQuarztQuantizationReference                   = 4

};


// Enum  Engine.EQuartzDelegateType
enum class EQuartzDelegateType : uint8_t
{
    MetronomeTick                                  = 0,
    CommandEvent                                   = 1,
    Count                                          = 2,
    EQuartzDelegateType                            = 3

};


// Enum  Engine.EQuartzTimeSignatureQuantization
enum class EQuartzTimeSignatureQuantization : uint8_t
{
    HalfNote                                       = 0,
    QuarterNote                                    = 1,
    EighthNote                                     = 2,
    SixteenthNote                                  = 3,
    ThirtySecondNote                               = 4,
    Count                                          = 5,
    EQuartzTimeSignatureQuantization               = 6

};


// Enum  Engine.ERichCurveExtrapolation
enum class ERichCurveExtrapolation : uint8_t
{
    RCCE                                           = 0,
    RCCE                                           = 1,
    RCCE                                           = 2,
    RCCE                                           = 3,
    RCCE                                           = 4,
    RCCE                                           = 5,
    RCCE                                           = 6

};


// Enum  Engine.ERichCurveInterpMode
enum class ERichCurveInterpMode : uint8_t
{
    RCIM                                           = 0,
    RCIM                                           = 1,
    RCIM                                           = 2,
    RCIM                                           = 3,
    RCIM                                           = 4

};


// Enum  Engine.EMobileReflectionCompression
enum class EMobileReflectionCompression : uint8_t
{
    Default                                        = 0,
    On                                             = 1,
    Off                                            = 2,
    EMobileReflectionCompression                   = 3

};


// Enum  Engine.EReflectionSourceType
enum class EReflectionSourceType : uint8_t
{
    CapturedScene                                  = 0,
    SpecifiedCubemap                               = 1,
    EReflectionSourceType                          = 2

};


// Enum  Engine.EFixedFoveationLevels
enum class EFixedFoveationLevels : uint8_t
{
    Disabled                                       = 0,
    Low                                            = 1,
    Medium                                         = 2,
    High                                           = 3,
    EFixedFoveationLevels                          = 4

};


// Enum  Engine.EDefaultBackBufferPixelFormat
enum class EDefaultBackBufferPixelFormat : uint8_t
{
    DBBPF                                          = 0,
    DBBPF                                          = 1,
    DBBPF                                          = 2,
    DBBPF                                          = 3,
    DBBPF                                          = 4,
    DBBPF                                          = 5

};


// Enum  Engine.EAutoExposureMethodUI
enum class EAutoExposureMethodUI : uint8_t
{
    AEM                                            = 0,
    AEM                                            = 1,
    AEM                                            = 2,
    AEM                                            = 3

};


// Enum  Engine.EAlphaChannelMode
enum class EAlphaChannelMode : uint8_t
{
    Disabled                                       = 0,
    LinearColorSpaceOnly                           = 1,
    AllowThroughTonemapper                         = 2,
    EAlphaChannelMode                              = 3

};


// Enum  Engine.EEarlyZPass
enum class EEarlyZPass : uint8_t
{
    None                                           = 0,
    OpaqueOnly                                     = 1,
    OpaqueAndMasked                                = 2,
    Auto                                           = 3,
    EEarlyZPass                                    = 4

};


// Enum  Engine.ECustomDepthStencil
enum class ECustomDepthStencil : uint8_t
{
    Disabled                                       = 0,
    Enabled                                        = 1,
    EnabledOnDemand                                = 2,
    EnabledWithStencil                             = 3,
    ECustomDepthStencil                            = 4

};


// Enum  Engine.EMobileMSAASampleCount
enum class EMobileMSAASampleCount : uint8_t
{
    One                                            = 1,
    Two                                            = 2,
    Four                                           = 4,
    Eight                                          = 8,
    EMobileMSAASampleCount                         = 9

};


// Enum  Engine.ECompositingSampleCount
enum class ECompositingSampleCount : uint8_t
{
    One                                            = 1,
    Two                                            = 2,
    Four                                           = 4,
    Eight                                          = 8,
    ECompositingSampleCount                        = 9

};


// Enum  Engine.EClearSceneOptions
enum class EClearSceneOptions : uint8_t
{
    NoClear                                        = 0,
    HardwareClear                                  = 1,
    QuadAtMaxZ                                     = 2,
    EClearSceneOptions                             = 3

};


// Enum  Engine.EReporterLineStyle
enum class EReporterLineStyle : uint8_t
{
    Line                                           = 0,
    Dash                                           = 1,
    EReporterLineStyle                             = 2

};


// Enum  Engine.ELegendPosition
enum class ELegendPosition : uint8_t
{
    Outside                                        = 0,
    Inside                                         = 1,
    ELegendPosition                                = 2

};


// Enum  Engine.EGraphDataStyle
enum class EGraphDataStyle : uint8_t
{
    Lines                                          = 0,
    Filled                                         = 1,
    EGraphDataStyle                                = 2

};


// Enum  Engine.EGraphAxisStyle
enum class EGraphAxisStyle : uint8_t
{
    Lines                                          = 0,
    Notches                                        = 1,
    Grid                                           = 2,
    EGraphAxisStyle                                = 3

};


// Enum  Engine.ReverbPreset
enum class ReverbPreset : uint8_t
{
    REVERB                                         = 0,
    REVERB                                         = 1,
    REVERB                                         = 2,
    REVERB                                         = 3,
    REVERB                                         = 4,
    REVERB                                         = 5,
    REVERB                                         = 6,
    REVERB                                         = 7,
    REVERB                                         = 8,
    REVERB                                         = 9,
    REVERB                                         = 10,
    REVERB                                         = 11,
    REVERB                                         = 12,
    REVERB                                         = 13,
    REVERB                                         = 14,
    REVERB                                         = 15,
    REVERB                                         = 16,
    REVERB                                         = 17,
    REVERB                                         = 18,
    REVERB                                         = 19,
    REVERB                                         = 20,
    REVERB                                         = 21,
    REVERB                                         = 22,
    REVERB                                         = 23

};


// Enum  Engine.ERichCurveKeyTimeCompressionFormat
enum class ERichCurveKeyTimeCompressionFormat : uint8_t
{
    RCKTCF                                         = 0,
    RCKTCF                                         = 1,
    RCKTCF                                         = 2

};


// Enum  Engine.ERichCurveCompressionFormat
enum class ERichCurveCompressionFormat : uint8_t
{
    RCCF                                           = 0,
    RCCF                                           = 1,
    RCCF                                           = 2,
    RCCF                                           = 3,
    RCCF                                           = 4,
    RCCF                                           = 5,
    RCCF                                           = 6

};


// Enum  Engine.ERichCurveTangentWeightMode
enum class ERichCurveTangentWeightMode : uint8_t
{
    RCTWM                                          = 0,
    RCTWM                                          = 1,
    RCTWM                                          = 2,
    RCTWM                                          = 3,
    RCTWM                                          = 4

};


// Enum  Engine.ERichCurveTangentMode
enum class ERichCurveTangentMode : uint8_t
{
    RCTM                                           = 0,
    RCTM                                           = 1,
    RCTM                                           = 2,
    RCTM                                           = 3,
    RCTM                                           = 4

};


// Enum  Engine.EConstraintTransform
enum class EConstraintTransform : uint8_t
{
    Absolute                                       = 0,
    Relative                                       = 1,
    EConstraintTransform                           = 2

};


// Enum  Engine.EControlConstraint
enum class EControlConstraint : uint8_t
{
    Orientation                                    = 0,
    Translation                                    = 1,
    MAX                                            = 2

};


// Enum  Engine.ERootMotionFinishVelocityMode
enum class ERootMotionFinishVelocityMode : uint8_t
{
    MaintainLastRootMotionVelocity                 = 0,
    SetVelocity                                    = 1,
    ClampVelocity                                  = 2,
    ERootMotionFinishVelocityMode                  = 3

};


// Enum  Engine.ERootMotionSourceSettingsFlags
enum class ERootMotionSourceSettingsFlags : uint8_t
{
    UseSensitiveLiftoffCheck                       = 1,
    DisablePartialEndTick                          = 2,
    IgnoreZAccumulate                              = 4,
    ERootMotionSourceSettingsFlags                 = 5

};


// Enum  Engine.ERootMotionSourceStatusFlags
enum class ERootMotionSourceStatusFlags : uint8_t
{
    Prepared                                       = 1,
    Finished                                       = 2,
    MarkedForRemoval                               = 4,
    ERootMotionSourceStatusFlags                   = 5

};


// Enum  Engine.ERootMotionAccumulateMode
enum class ERootMotionAccumulateMode : uint8_t
{
    Override                                       = 0,
    Additive                                       = 1,
    ERootMotionAccumulateMode                      = 2

};


// Enum  Engine.ERuntimeVirtualTextureMainPassType
enum class ERuntimeVirtualTextureMainPassType : uint8_t
{
    Never                                          = 0,
    Exclusive                                      = 1,
    Always                                         = 2,
    ERuntimeVirtualTextureMainPassType             = 3

};


// Enum  Engine.ERuntimeVirtualTextureMaterialType
enum class ERuntimeVirtualTextureMaterialType : uint8_t
{
    BaseColor                                      = 0,
    BaseColor                                      = 1,
    BaseColor                                      = 2,
    BaseColor                                      = 3,
    BaseColor                                      = 4,
    WorldHeight                                    = 5,
    Count                                          = 6,
    ERuntimeVirtualTextureMaterialType             = 7

};


// Enum  Engine.EMobilePixelProjectedReflectionQuality
enum class EMobilePixelProjectedReflectionQuality : uint8_t
{
    Disabled                                       = 0,
    BestPerformance                                = 1,
    BetterQuality                                  = 2,
    BestQuality                                    = 3,
    EMobilePixelProjectedReflectionQuality         = 4

};


// Enum  Engine.EMobilePlanarReflectionMode
enum class EMobilePlanarReflectionMode : uint8_t
{
    Usual                                          = 0,
    MobilePPRExclusive                             = 1,
    MobilePPR                                      = 2,
    EMobilePlanarReflectionMode                    = 3

};


// Enum  Engine.EAresClarityBlendMode
enum class EAresClarityBlendMode : uint8_t
{
    SoftLight                                      = 0,
    Overlay                                        = 1,
    HardLight                                      = 2,
    Multiply                                       = 3,
    VividLight                                     = 4,
    LinearLight                                    = 5,
    Addition                                       = 6,
    EAresClarityBlendMode                          = 7

};


// Enum  Engine.EReflectedAndRefractedRayTracedShadows
enum class EReflectedAndRefractedRayTracedShadows : uint8_t
{
    Disabled                                       = 0,
    Hard                                           = 1,
    Area                                           = 2,
    EReflectedAndRefractedRayTracedShadows         = 3

};


// Enum  Engine.ERayTracingGlobalIlluminationType
enum class ERayTracingGlobalIlluminationType : uint8_t
{
    Disabled                                       = 0,
    BruteForce                                     = 1,
    FinalGather                                    = 2,
    ERayTracingGlobalIlluminationType              = 3

};


// Enum  Engine.ETranslucencyType
enum class ETranslucencyType : uint8_t
{
    Raster                                         = 0,
    RayTracing                                     = 1,
    ETranslucencyType                              = 2

};


// Enum  Engine.EReflectionsType
enum class EReflectionsType : uint8_t
{
    ScreenSpace                                    = 0,
    RayTracing                                     = 1,
    EReflectionsType                               = 2

};


// Enum  Engine.ELightUnits
enum class ELightUnits : uint8_t
{
    Unitless                                       = 0,
    Candelas                                       = 1,
    Lumens                                         = 2,
    ELightUnits                                    = 3

};


// Enum  Engine.ETemperatureMethod
enum class ETemperatureMethod : uint8_t
{
    TEMP                                           = 0,
    TEMP                                           = 1,
    TEMP                                           = 2

};


// Enum  Engine.EBloomMethod
enum class EBloomMethod : uint8_t
{
    BM                                             = 0,
    BM                                             = 1,
    BM                                             = 2

};


// Enum  Engine.EAutoExposureMethod
enum class EAutoExposureMethod : uint8_t
{
    AEM                                            = 0,
    AEM                                            = 1,
    AEM                                            = 2,
    AEM                                            = 3

};


// Enum  Engine.EAntiAliasingMethod
enum class EAntiAliasingMethod : uint8_t
{
    AAM                                            = 0,
    AAM                                            = 1,
    AAM                                            = 2,
    AAM                                            = 3,
    AAM                                            = 4

};


// Enum  Engine.EDepthOfFieldMethod
enum class EDepthOfFieldMethod : uint8_t
{
    DOFM                                           = 0,
    DOFM                                           = 1,
    DOFM                                           = 2,
    DOFM                                           = 3

};


// Enum  Engine.ESceneCapturePrimitiveRenderMode
enum class ESceneCapturePrimitiveRenderMode : uint8_t
{
    PRM                                            = 0,
    PRM                                            = 1,
    PRM                                            = 2,
    PRM                                            = 3

};


// Enum  Engine.EMaterialProperty
enum class EMaterialProperty : uint8_t
{
    MP                                             = 0,
    MP                                             = 1,
    MP                                             = 2,
    MP                                             = 3,
    MP                                             = 4,
    MP                                             = 5,
    MP                                             = 6,
    MP                                             = 7,
    MP                                             = 8,
    MP                                             = 9,
    MP                                             = 10,
    MP                                             = 11,
    MP                                             = 12,
    MP                                             = 13,
    MP                                             = 14,
    MP                                             = 15,
    MP                                             = 16,
    MP                                             = 17,
    MP                                             = 18,
    MP                                             = 19,
    MP                                             = 20,
    MP                                             = 21,
    MP                                             = 22,
    MP                                             = 23,
    MP                                             = 24,
    MP                                             = 25,
    MP                                             = 26,
    MP                                             = 27,
    MP                                             = 28,
    MP                                             = 29,
    MP                                             = 30,
    MP                                             = 31,
    MP                                             = 32,
    MP                                             = 33,
    MP                                             = 34,
    MP                                             = 35,
    MP                                             = 36,
    MP                                             = 37,
    MP                                             = 38

};


// Enum  Engine.EMaterialQualityLevel
enum class EMaterialQualityLevel : uint8_t
{
    Low                                            = 0,
    High                                           = 1,
    Medium                                         = 2,
    Epic                                           = 3,
    Num                                            = 4,
    EMaterialQualityLevel                          = 5

};


// Enum  Engine.ESkinCacheDefaultBehavior
enum class ESkinCacheDefaultBehavior : uint8_t
{
    Exclusive                                      = 0,
    Inclusive                                      = 1,
    ESkinCacheDefaultBehavior                      = 2

};


// Enum  Engine.ESkinCacheUsage
enum class ESkinCacheUsage : uint8_t
{
    Auto                                           = 0,
    Disabled                                       = 255,
    Enabled                                        = 1,
    ESkinCacheUsage                                = 256

};


// Enum  Engine.EPhysicsTransformUpdateMode
enum class EPhysicsTransformUpdateMode : uint8_t
{
    SimulationUpatesComponentTransform             = 0,
    ComponentTransformIsKinematic                  = 1,
    EPhysicsTransformUpdateMode                    = 2

};


// Enum  Engine.EAnimationMode
enum class EAnimationMode : uint8_t
{
    AnimationBlueprint                             = 0,
    AnimationSingleNode                            = 1,
    AnimationCustomMode                            = 2,
    EAnimationMode                                 = 3

};


// Enum  Engine.EKinematicBonesUpdateToPhysics
enum class EKinematicBonesUpdateToPhysics : uint8_t
{
    SkipSimulatingBones                            = 0,
    SkipAllBones                                   = 1,
    EKinematicBonesUpdateToPhysics                 = 2

};


// Enum  Engine.ECustomBoneAttributeLookup
enum class ECustomBoneAttributeLookup : uint8_t
{
    BoneOnly                                       = 0,
    ImmediateParent                                = 1,
    ParentHierarchy                                = 2,
    ECustomBoneAttributeLookup                     = 3

};


// Enum  Engine.EAnimCurveType
enum class EAnimCurveType : uint8_t
{
    AttributeCurve                                 = 0,
    MaterialCurve                                  = 1,
    MorphTargetCurve                               = 2,
    MaxAnimCurveType                               = 3,
    EAnimCurveType                                 = 4

};


// Enum  Engine.ESkeletalMeshSkinningImportVersions
enum class ESkeletalMeshSkinningImportVersions : uint8_t
{
    Before                                         = 0,
    SkeletalMeshBuildRefactor                      = 1,
    VersionPlusOne                                 = 2,
    LatestVersion                                  = 1,
    ESkeletalMeshSkinningImportVersions            = 3

};


// Enum  Engine.ESkeletalMeshGeoImportVersions
enum class ESkeletalMeshGeoImportVersions : uint8_t
{
    Before                                         = 0,
    SkeletalMeshBuildRefactor                      = 1,
    VersionPlusOne                                 = 2,
    LatestVersion                                  = 1,
    ESkeletalMeshGeoImportVersions                 = 3

};


// Enum  Engine.EBoneFilterActionOption
enum class EBoneFilterActionOption : uint8_t
{
    Remove                                         = 0,
    Keep                                           = 1,
    Invalid                                        = 2,
    EBoneFilterActionOption                        = 3

};


// Enum  Engine.SkeletalMeshOptimizationImportance
enum class SkeletalMeshOptimizationImportance : uint8_t
{
    SMOI                                           = 0,
    SMOI                                           = 1,
    SMOI                                           = 2,
    SMOI                                           = 3,
    SMOI                                           = 4,
    SMOI                                           = 5,
    SMOI                                           = 6

};


// Enum  Engine.SkeletalMeshOptimizationType
enum class SkeletalMeshOptimizationType : uint8_t
{
    SMOT                                           = 0,
    SMOT                                           = 1,
    SMOT                                           = 2,
    SMOT                                           = 3

};


// Enum  Engine.SkeletalMeshTerminationCriterion
enum class SkeletalMeshTerminationCriterion : uint8_t
{
    SMTC                                           = 0,
    SMTC                                           = 1,
    SMTC                                           = 2,
    SMTC                                           = 3,
    SMTC                                           = 4,
    SMTC                                           = 5,
    SMTC                                           = 6

};


// Enum  Engine.EBoneTranslationRetargetingMode
enum class EBoneTranslationRetargetingMode : uint8_t
{
    Animation                                      = 0,
    Skeleton                                       = 1,
    AnimationScaled                                = 2,
    AnimationRelative                              = 3,
    OrientAndScale                                 = 4,
    EBoneTranslationRetargetingMode                = 5

};


// Enum  Engine.EDedicatedServerAnimationStatus
enum class EDedicatedServerAnimationStatus : uint8_t
{
    Automatic                                      = 0,
    AnimateOnServer                                = 1,
    DoNotAnimateOnServer                           = 2,
    EDedicatedServerAnimationStatus                = 3

};


// Enum  Engine.EVertexOffsetUsageType
enum class EVertexOffsetUsageType : uint8_t
{
    None                                           = 0,
    PreSkinningOffset                              = 1,
    PostSkinningOffset                             = 2,
    EVertexOffsetUsageType                         = 3

};


// Enum  Engine.EBoneSpaces
enum class EBoneSpaces : uint8_t
{
    WorldSpace                                     = 0,
    ComponentSpace                                 = 1,
    EBoneSpaces                                    = 2

};


// Enum  Engine.EVisibilityBasedAnimTickOption
enum class EVisibilityBasedAnimTickOption : uint8_t
{
    AlwaysTickPoseAndRefreshBones                  = 0,
    AlwaysTickPose                                 = 1,
    OnlyTickMontagesWhenNotRendered                = 2,
    OnlyTickPoseWhenRendered                       = 3,
    EVisibilityBasedAnimTickOption                 = 4

};


// Enum  Engine.EPhysBodyOp
enum class EPhysBodyOp : uint8_t
{
    PBO                                            = 0,
    PBO                                            = 1,
    PBO                                            = 2

};


// Enum  Engine.EBoneVisibilityStatus
enum class EBoneVisibilityStatus : uint8_t
{
    BVS                                            = 0,
    BVS                                            = 1,
    BVS                                            = 2,
    BVS                                            = 3

};


// Enum  Engine.ESkyAtmosphereTransformMode
enum class ESkyAtmosphereTransformMode : uint8_t
{
    PlanetTopAtAbsoluteWorldOrigin                 = 0,
    PlanetTopAtComponentTransform                  = 1,
    PlanetCenterAtComponentTransform               = 2,
    ESkyAtmosphereTransformMode                    = 3

};


// Enum  Engine.ESkyLightSourceType
enum class ESkyLightSourceType : uint8_t
{
    SLS                                            = 0,
    SLS                                            = 1,
    SLS                                            = 2

};


// Enum  Engine.EPriorityAttenuationMethod
enum class EPriorityAttenuationMethod : uint8_t
{
    Linear                                         = 0,
    CustomCurve                                    = 1,
    Manual                                         = 2,
    EPriorityAttenuationMethod                     = 3

};


// Enum  Engine.ESubmixSendMethod
enum class ESubmixSendMethod : uint8_t
{
    Linear                                         = 0,
    CustomCurve                                    = 1,
    Manual                                         = 2,
    ESubmixSendMethod                              = 3

};


// Enum  Engine.EReverbSendMethod
enum class EReverbSendMethod : uint8_t
{
    Linear                                         = 0,
    CustomCurve                                    = 1,
    Manual                                         = 2,
    EReverbSendMethod                              = 3

};


// Enum  Engine.EAirAbsorptionMethod
enum class EAirAbsorptionMethod : uint8_t
{
    Linear                                         = 0,
    CustomCurve                                    = 1,
    EAirAbsorptionMethod                           = 2

};


// Enum  Engine.ESoundSpatializationAlgorithm
enum class ESoundSpatializationAlgorithm : uint8_t
{
    SPATIALIZATION                                 = 0,
    SPATIALIZATION                                 = 1,
    SPATIALIZATION                                 = 2

};


// Enum  Engine.ESoundDistanceCalc
enum class ESoundDistanceCalc : uint8_t
{
    SOUNDDISTANCE                                  = 0,
    SOUNDDISTANCE                                  = 1,
    SOUNDDISTANCE                                  = 2,
    SOUNDDISTANCE                                  = 3,
    SOUNDDISTANCE                                  = 4

};


// Enum  Engine.EVirtualizationMode
enum class EVirtualizationMode : uint8_t
{
    Disabled                                       = 0,
    PlayWhenSilent                                 = 1,
    Restart                                        = 2,
    EVirtualizationMode                            = 3

};


// Enum  Engine.EConcurrencyVolumeScaleMode
enum class EConcurrencyVolumeScaleMode : uint8_t
{
    Default                                        = 0,
    Distance                                       = 1,
    Priority                                       = 2,
    EConcurrencyVolumeScaleMode                    = 3

};


// Enum  Engine.EMaxConcurrentResolutionRule
enum class EMaxConcurrentResolutionRule : uint8_t
{
    PreventNew                                     = 0,
    StopOldest                                     = 1,
    StopFarthestThenPreventNew                     = 2,
    StopFarthestThenOldest                         = 3,
    StopLowestPriority                             = 4,
    StopQuietest                                   = 5,
    StopLowestPriorityThenPreventNew               = 6,
    Count                                          = 7,
    EMaxConcurrentResolutionRule                   = 8

};


// Enum  Engine.ESoundGroup
enum class ESoundGroup : uint8_t
{
    SOUNDGROUP                                     = 0,
    SOUNDGROUP                                     = 1,
    SOUNDGROUP                                     = 2,
    SOUNDGROUP                                     = 3,
    SOUNDGROUP                                     = 4,
    SOUNDGROUP                                     = 5,
    SOUNDGROUP                                     = 6,
    SOUNDGROUP                                     = 7,
    SOUNDGROUP                                     = 8,
    SOUNDGROUP                                     = 9,
    SOUNDGROUP                                     = 10,
    SOUNDGROUP                                     = 11,
    SOUNDGROUP                                     = 12,
    SOUNDGROUP                                     = 13,
    SOUNDGROUP                                     = 14,
    SOUNDGROUP                                     = 15,
    SOUNDGROUP                                     = 16,
    SOUNDGROUP                                     = 17,
    SOUNDGROUP                                     = 18,
    SOUNDGROUP                                     = 19,
    SOUNDGROUP                                     = 20,
    SOUNDGROUP                                     = 21,
    SOUNDGROUP                                     = 22,
    SOUNDGROUP                                     = 23,
    SOUNDGROUP                                     = 24,
    SOUNDGROUP                                     = 25

};


// Enum  Engine.EModulationRouting
enum class EModulationRouting : uint8_t
{
    Disable                                        = 0,
    Inherit                                        = 1,
    Override                                       = 2,
    EModulationRouting                             = 3

};


// Enum  Engine.ModulationParamMode
enum class ModulationParamMode : uint8_t
{
    MPM                                            = 0,
    MPM                                            = 1,
    MPM                                            = 2,
    MPM                                            = 3

};


// Enum  Engine.ESourceBusChannels
enum class ESourceBusChannels : uint8_t
{
    Mono                                           = 0,
    Stereo                                         = 1,
    ESourceBusChannels                             = 2

};


// Enum  Engine.ESourceBusSendLevelControlMethod
enum class ESourceBusSendLevelControlMethod : uint8_t
{
    Linear                                         = 0,
    CustomCurve                                    = 1,
    Manual                                         = 2,
    ESourceBusSendLevelControlMethod               = 3

};


// Enum  Engine.EGainParamMode
enum class EGainParamMode : uint8_t
{
    Linear                                         = 0,
    Decibels                                       = 1,
    EGainParamMode                                 = 2

};


// Enum  Engine.EAudioSpectrumType
enum class EAudioSpectrumType : uint8_t
{
    MagnitudeSpectrum                              = 0,
    PowerSpectrum                                  = 1,
    Decibel                                        = 2,
    EAudioSpectrumType                             = 3

};


// Enum  Engine.EFFTWindowType
enum class EFFTWindowType : uint8_t
{
    None                                           = 0,
    Hamming                                        = 1,
    Hann                                           = 2,
    Blackman                                       = 3,
    EFFTWindowType                                 = 4

};


// Enum  Engine.EFFTPeakInterpolationMethod
enum class EFFTPeakInterpolationMethod : uint8_t
{
    NearestNeighbor                                = 0,
    Linear                                         = 1,
    Quadratic                                      = 2,
    ConstantQ                                      = 3,
    EFFTPeakInterpolationMethod                    = 4

};


// Enum  Engine.EFFTSize
enum class EFFTSize : uint8_t
{
    DefaultSize                                    = 0,
    Min                                            = 1,
    Small                                          = 2,
    Medium                                         = 3,
    Large                                          = 4,
    VeryLarge                                      = 5,
    Max                                            = 6,
    EFFTSize                                       = 7

};


// Enum  Engine.ESubmixSendStage
enum class ESubmixSendStage : uint8_t
{
    PostDistanceAttenuation                        = 0,
    PreDistanceAttenuation                         = 1,
    ESubmixSendStage                               = 2

};


// Enum  Engine.ESendLevelControlMethod
enum class ESendLevelControlMethod : uint8_t
{
    Linear                                         = 0,
    CustomCurve                                    = 1,
    Manual                                         = 2,
    ESendLevelControlMethod                        = 3

};


// Enum  Engine.EAudioRecordingExportType
enum class EAudioRecordingExportType : uint8_t
{
    SoundWave                                      = 0,
    WavFile                                        = 1,
    EAudioRecordingExportType                      = 2

};


// Enum  Engine.EAudioSpectrumBandPresetType
enum class EAudioSpectrumBandPresetType : uint8_t
{
    KickDrum                                       = 0,
    SnareDrum                                      = 1,
    Voice                                          = 2,
    Cymbals                                        = 3,
    EAudioSpectrumBandPresetType                   = 4

};


// Enum  Engine.ESoundWaveFFTSize
enum class ESoundWaveFFTSize : uint8_t
{
    VerySmall                                      = 0,
    Small                                          = 1,
    Medium                                         = 2,
    Large                                          = 3,
    VeryLarge                                      = 4,
    ESoundWaveFFTSize                              = 5

};


// Enum  Engine.EDecompressionType
enum class EDecompressionType : uint8_t
{
    DTYPE                                          = 0,
    DTYPE                                          = 1,
    DTYPE                                          = 2,
    DTYPE                                          = 3,
    DTYPE                                          = 4,
    DTYPE                                          = 5,
    DTYPE                                          = 6,
    DTYPE                                          = 7,
    DTYPE                                          = 8

};


// Enum  Engine.ESoundWaveLoadingBehavior
enum class ESoundWaveLoadingBehavior : uint8_t
{
    Inherited                                      = 0,
    RetainOnLoad                                   = 1,
    PrimeOnLoad                                    = 2,
    LoadOnDemand                                   = 3,
    ForceInline                                    = 4,
    Uninitialized                                  = 255,
    ESoundWaveLoadingBehavior                      = 256

};


// Enum  Engine.ESplineCoordinateSpace
enum class ESplineCoordinateSpace : uint8_t
{
    Local                                          = 0,
    World                                          = 1,
    ESplineCoordinateSpace                         = 2

};


// Enum  Engine.ESplinePointType
enum class ESplinePointType : uint8_t
{
    Linear                                         = 0,
    Curve                                          = 1,
    Constant                                       = 2,
    CurveClamped                                   = 3,
    CurveCustomTangent                             = 4,
    ESplinePointType                               = 5

};


// Enum  Engine.ESplineMeshAxis
enum class ESplineMeshAxis : uint8_t
{
    X                                              = 0,
    Y                                              = 1,
    Z                                              = 2,
    ESplineMeshAxis                                = 3

};


// Enum  Engine.EOptimizationType
enum class EOptimizationType : uint8_t
{
    OT                                             = 0,
    OT                                             = 1,
    OT                                             = 2

};


// Enum  Engine.EImportanceLevel
enum class EImportanceLevel : uint8_t
{
    IL                                             = 0,
    IL                                             = 1,
    IL                                             = 2,
    IL                                             = 3,
    IL                                             = 4,
    IL                                             = 5,
    TEMP                                           = 6,
    EImportanceLevel                               = 7

};


// Enum  Engine.ENormalMode
enum class ENormalMode : uint8_t
{
    NM                                             = 0,
    NM                                             = 1,
    NM                                             = 2,
    NM                                             = 3,
    TEMP                                           = 4,
    ENormalMode                                    = 5

};


// Enum  Engine.EStereoLayerShape
enum class EStereoLayerShape : uint8_t
{
    SLSH                                           = 0,
    SLSH                                           = 1,
    SLSH                                           = 2,
    SLSH                                           = 3,
    SLSH                                           = 4

};


// Enum  Engine.EStereoLayerType
enum class EStereoLayerType : uint8_t
{
    SLT                                            = 0,
    SLT                                            = 1,
    SLT                                            = 2,
    SLT                                            = 3

};


// Enum  Engine.EOpacitySourceMode
enum class EOpacitySourceMode : uint8_t
{
    OSM                                            = 0,
    OSM                                            = 1,
    OSM                                            = 2,
    OSM                                            = 3,
    OSM                                            = 4,
    OSM                                            = 5

};


// Enum  Engine.ESubUVBoundingVertexCount
enum class ESubUVBoundingVertexCount : uint8_t
{
    BVC                                            = 0,
    BVC                                            = 1,
    BVC                                            = 2

};


// Enum  Engine.EVerticalTextAligment
enum class EVerticalTextAligment : uint8_t
{
    EVRTA                                          = 0,
    EVRTA                                          = 1,
    EVRTA                                          = 2,
    EVRTA                                          = 3,
    EVRTA                                          = 4

};


// Enum  Engine.EHorizTextAligment
enum class EHorizTextAligment : uint8_t
{
    EHTA                                           = 0,
    EHTA                                           = 1,
    EHTA                                           = 2,
    EHTA                                           = 3

};


// Enum  Engine.ETextureStreamingImportance
enum class ETextureStreamingImportance : uint8_t
{
    TSI                                            = 0,
    TSI                                            = 1,
    TSI                                            = 2,
    TSI                                            = 3,
    TSI                                            = 4,
    TSI                                            = 5,
    TSI                                            = 6

};


// Enum  Engine.ETextureCompressionQuality
enum class ETextureCompressionQuality : uint8_t
{
    TCQ                                            = 0,
    TCQ                                            = 1,
    TCQ                                            = 2,
    TCQ                                            = 3,
    TCQ                                            = 4,
    TCQ                                            = 5,
    TCQ                                            = 6

};


// Enum  Engine.ETextureSourceFormat
enum class ETextureSourceFormat : uint8_t
{
    TSF                                            = 0,
    TSF                                            = 1,
    TSF                                            = 2,
    TSF                                            = 3,
    TSF                                            = 4,
    TSF                                            = 5,
    TSF                                            = 6,
    TSF                                            = 7,
    TSF                                            = 8,
    TSF                                            = 9

};


// Enum  Engine.ETextureSourceArtType
enum class ETextureSourceArtType : uint8_t
{
    TSAT                                           = 0,
    TSAT                                           = 1,
    TSAT                                           = 2,
    TSAT                                           = 3

};


// Enum  Engine.ETextureMipCount
enum class ETextureMipCount : uint8_t
{
    TMC                                            = 0,
    TMC                                            = 1,
    TMC                                            = 2,
    TMC                                            = 3

};


// Enum  Engine.ECompositeTextureMode
enum class ECompositeTextureMode : uint8_t
{
    CTM                                            = 0,
    CTM                                            = 1,
    CTM                                            = 2,
    CTM                                            = 3,
    CTM                                            = 4,
    CTM                                            = 5

};


// Enum  Engine.TextureAddress
enum class TextureAddress : uint8_t
{
    TA                                             = 0,
    TA                                             = 1,
    TA                                             = 2,
    TA                                             = 3

};


// Enum  Engine.TextureFilter
enum class TextureFilter : uint8_t
{
    TF                                             = 0,
    TF                                             = 1,
    TF                                             = 2,
    TF                                             = 3,
    TF                                             = 4

};


// Enum  Engine.TextureCompressionSettings
enum class TextureCompressionSettings : uint8_t
{
    TC                                             = 0,
    TC                                             = 1,
    TC                                             = 2,
    TC                                             = 3,
    TC                                             = 4,
    TC                                             = 5,
    TC                                             = 6,
    TC                                             = 7,
    TC                                             = 8,
    TC                                             = 9,
    TC                                             = 10,
    TC                                             = 11,
    TC                                             = 12,
    TC                                             = 13,
    TC                                             = 14

};


// Enum  Engine.ETextureLossyCompressionAmount
enum class ETextureLossyCompressionAmount : uint8_t
{
    TLCA                                           = 0,
    TLCA                                           = 1,
    TLCA                                           = 2,
    TLCA                                           = 3,
    TLCA                                           = 4,
    TLCA                                           = 5,
    TLCA                                           = 6,
    TLCA                                           = 7

};


// Enum  Engine.ETextureDownscaleOptions
enum class ETextureDownscaleOptions : uint8_t
{
    Default                                        = 0,
    Unfiltered                                     = 1,
    SimpleAverage                                  = 2,
    Sharpen0                                       = 3,
    Sharpen1                                       = 4,
    Sharpen2                                       = 5,
    Sharpen3                                       = 6,
    Sharpen4                                       = 7,
    Sharpen5                                       = 8,
    Sharpen6                                       = 9,
    Sharpen7                                       = 10,
    Sharpen8                                       = 11,
    Sharpen9                                       = 12,
    Sharpen10                                      = 13,
    ETextureDownscaleOptions                       = 14

};


// Enum  Engine.ETextureMipLoadOptions
enum class ETextureMipLoadOptions : uint8_t
{
    Default                                        = 0,
    AllMips                                        = 1,
    OnlyFirstMip                                   = 2,
    ETextureMipLoadOptions                         = 3

};


// Enum  Engine.ETextureSamplerFilter
enum class ETextureSamplerFilter : uint8_t
{
    Point                                          = 0,
    Bilinear                                       = 1,
    Trilinear                                      = 2,
    AnisotropicPoint                               = 3,
    AnisotropicLinear                              = 4,
    ETextureSamplerFilter                          = 5

};


// Enum  Engine.ETexturePowerOfTwoSetting
enum class ETexturePowerOfTwoSetting : uint8_t
{
    None                                           = 0,
    PadToPowerOfTwo                                = 1,
    PadToSquarePowerOfTwo                          = 2,
    ETexturePowerOfTwoSetting                      = 3

};


// Enum  Engine.TextureMipGenSettings
enum class TextureMipGenSettings : uint8_t
{
    TMGS                                           = 0,
    TMGS                                           = 1,
    TMGS                                           = 2,
    TMGS                                           = 3,
    TMGS                                           = 4,
    TMGS                                           = 5,
    TMGS                                           = 6,
    TMGS                                           = 7,
    TMGS                                           = 8,
    TMGS                                           = 9,
    TMGS                                           = 10,
    TMGS                                           = 11,
    TMGS                                           = 12,
    TMGS                                           = 13,
    TMGS                                           = 14,
    TMGS                                           = 15,
    TMGS                                           = 16,
    TMGS                                           = 17,
    TMGS                                           = 18,
    TMGS                                           = 19,
    TMGS                                           = 20,
    TMGS                                           = 21

};


// Enum  Engine.TextureGroup
enum class TextureGroup : uint8_t
{
    TEXTUREGROUP                                   = 0,
    TEXTUREGROUP                                   = 1,
    TEXTUREGROUP                                   = 2,
    TEXTUREGROUP                                   = 3,
    TEXTUREGROUP                                   = 4,
    TEXTUREGROUP                                   = 5,
    TEXTUREGROUP                                   = 6,
    TEXTUREGROUP                                   = 7,
    TEXTUREGROUP                                   = 8,
    TEXTUREGROUP                                   = 9,
    TEXTUREGROUP                                   = 10,
    TEXTUREGROUP                                   = 11,
    TEXTUREGROUP                                   = 12,
    TEXTUREGROUP                                   = 13,
    TEXTUREGROUP                                   = 14,
    TEXTUREGROUP                                   = 15,
    TEXTUREGROUP                                   = 16,
    TEXTUREGROUP                                   = 17,
    TEXTUREGROUP                                   = 18,
    TEXTUREGROUP                                   = 19,
    TEXTUREGROUP                                   = 20,
    TEXTUREGROUP                                   = 21,
    TEXTUREGROUP                                   = 22,
    TEXTUREGROUP                                   = 23,
    TEXTUREGROUP                                   = 24,
    TEXTUREGROUP                                   = 25,
    TEXTUREGROUP                                   = 26,
    TEXTUREGROUP                                   = 27,
    TEXTUREGROUP                                   = 28,
    TEXTUREGROUP                                   = 29,
    TEXTUREGROUP                                   = 30,
    TEXTUREGROUP                                   = 31,
    TEXTUREGROUP                                   = 32,
    TEXTUREGROUP                                   = 33,
    TEXTUREGROUP                                   = 34,
    TEXTUREGROUP                                   = 35,
    TEXTUREGROUP                                   = 36,
    TEXTUREGROUP                                   = 37,
    TEXTUREGROUP                                   = 38,
    TEXTUREGROUP                                   = 39,
    TEXTUREGROUP                                   = 40,
    TEXTUREGROUP                                   = 41,
    TEXTUREGROUP                                   = 42,
    TEXTUREGROUP                                   = 43,
    TEXTUREGROUP                                   = 44,
    TEXTUREGROUP                                   = 45,
    TEXTUREGROUP                                   = 46,
    TEXTUREGROUP                                   = 47,
    TEXTUREGROUP                                   = 48,
    TEXTUREGROUP                                   = 49

};


// Enum  Engine.ETextureRenderTargetFormat
enum class ETextureRenderTargetFormat : uint8_t
{
    RTF                                            = 0,
    RTF                                            = 1,
    RTF                                            = 2,
    RTF                                            = 3,
    RTF                                            = 4,
    RTF                                            = 5,
    RTF                                            = 6,
    RTF                                            = 7,
    RTF                                            = 8,
    RTF                                            = 9,
    RTF                                            = 10,
    RTF                                            = 11

};


// Enum  Engine.ETimecodeProviderSynchronizationState
enum class ETimecodeProviderSynchronizationState : uint8_t
{
    Closed                                         = 0,
    Error                                          = 1,
    Synchronized                                   = 2,
    Synchronizing                                  = 3,
    ETimecodeProviderSynchronizationState          = 4

};


// Enum  Engine.ETimelineDirection
enum class ETimelineDirection : uint8_t
{
    Forward                                        = 0,
    Backward                                       = 1,
    ETimelineDirection                             = 2

};


// Enum  Engine.ETimelineLengthMode
enum class ETimelineLengthMode : uint8_t
{
    TL                                             = 0,
    TL                                             = 1,
    TL                                             = 2

};


// Enum  Engine.ETimeStretchCurveMapping
enum class ETimeStretchCurveMapping : uint8_t
{
    T                                              = 0,
    T                                              = 1,
    T                                              = 2,
    MAX                                            = 3

};


// Enum  Engine.ETwitterIntegrationDelegate
enum class ETwitterIntegrationDelegate : uint8_t
{
    TID                                            = 0,
    TID                                            = 1,
    TID                                            = 2,
    TID                                            = 3

};


// Enum  Engine.ETwitterRequestMethod
enum class ETwitterRequestMethod : uint8_t
{
    TRM                                            = 0,
    TRM                                            = 1,
    TRM                                            = 2,
    TRM                                            = 3

};


// Enum  Engine.EUserDefinedStructureStatus
enum class EUserDefinedStructureStatus : uint8_t
{
    UDSS                                           = 0,
    UDSS                                           = 1,
    UDSS                                           = 2,
    UDSS                                           = 3,
    UDSS                                           = 4

};


// Enum  Engine.EUIScalingRule
enum class EUIScalingRule : uint8_t
{
    ShortestSide                                   = 0,
    LongestSide                                    = 1,
    Horizontal                                     = 2,
    Vertical                                       = 3,
    ScaleToFit                                     = 4,
    Custom                                         = 5,
    EUIScalingRule                                 = 6

};


// Enum  Engine.ERenderFocusRule
enum class ERenderFocusRule : uint8_t
{
    Always                                         = 0,
    NonPointer                                     = 1,
    NavigationOnly                                 = 2,
    Never                                          = 3,
    ERenderFocusRule                               = 4

};


// Enum  Engine.EVectorFieldConstructionOp
enum class EVectorFieldConstructionOp : uint8_t
{
    VFCO                                           = 0,
    VFCO                                           = 1,
    VFCO                                           = 2

};


// Enum  Engine.EWindSourceType
enum class EWindSourceType : uint8_t
{
    Directional                                    = 0,
    Point                                          = 1,
    EWindSourceType                                = 2

};


// Enum  Engine.EPSCPoolMethod
enum class EPSCPoolMethod : uint8_t
{
    None                                           = 0,
    AutoRelease                                    = 1,
    ManualRelease                                  = 2,
    ManualRelease                                  = 3,
    FreeInPool                                     = 4,
    EPSCPoolMethod                                 = 5

};


// Enum  Engine.EVolumeLightingMethod
enum class EVolumeLightingMethod : uint8_t
{
    VLM                                            = 0,
    VLM                                            = 1,
    VLM                                            = 2

};


// Enum  Engine.EVisibilityAggressiveness
enum class EVisibilityAggressiveness : uint8_t
{
    VIS                                            = 0,
    VIS                                            = 1,
    VIS                                            = 2,
    VIS                                            = 3,
    VIS                                            = 4

};


// Enum  ClothingSystemRuntimeCommon.EClothMassMode
enum class EClothMassMode : uint8_t
{
    UniformMass                                    = 0,
    TotalMass                                      = 1,
    Density                                        = 2,
    MaxClothMassMode                               = 3,
    EClothMassMode                                 = 4

};


// Enum  ClothingSystemRuntimeCommon.EClothingWindMethod
enum class EClothingWindMethod : uint8_t
{
    EClothingWindMethod                            = 0,
    EClothingWindMethod                            = 1,
    EClothingWindMethod                            = 2

};


// Enum  ClothingSystemRuntimeCommon.EWeightMapTargetCommon
enum class EWeightMapTargetCommon : uint8_t
{
    None                                           = 0,
    MaxDistance                                    = 1,
    BackstopDistance                               = 2,
    BackstopRadius                                 = 3,
    AnimDriveStiffness                             = 4,
    AnimDriveDamping                               = 5,
    EWeightMapTargetCommon                         = 6

};


// Enum  ClothingSystemRuntimeNv.EClothingWindMethodNv
enum class EClothingWindMethodNv : uint8_t
{
    Legacy                                         = 0,
    Accurate                                       = 1,
    EClothingWindMethodNv                          = 2

};


// Enum  NavigationSystem.ERuntimeGenerationType
enum class ERuntimeGenerationType : uint8_t
{
    Static                                         = 0,
    DynamicModifiersOnly                           = 1,
    Dynamic                                        = 2,
    LegacyGeneration                               = 3,
    ERuntimeGenerationType                         = 4

};


// Enum  NavigationSystem.ENavCostDisplay
enum class ENavCostDisplay : uint8_t
{
    TotalCost                                      = 0,
    HeuristicOnly                                  = 1,
    RealCostOnly                                   = 2,
    ENavCostDisplay                                = 3

};


// Enum  NavigationSystem.ENavSystemOverridePolicy
enum class ENavSystemOverridePolicy : uint8_t
{
    Override                                       = 0,
    Append                                         = 1,
    Skip                                           = 2,
    ENavSystemOverridePolicy                       = 3

};


// Enum  NavigationSystem.ERecastPartitioning
enum class ERecastPartitioning : uint8_t
{
    Monotone                                       = 0,
    Watershed                                      = 1,
    ChunkyMonotone                                 = 2,
    ERecastPartitioning                            = 3

};


// Enum  GameplayTasks.EGameplayTaskState
enum class EGameplayTaskState : uint8_t
{
    Uninitialized                                  = 0,
    AwaitingActivation                             = 1,
    Paused                                         = 2,
    Active                                         = 3,
    Finished                                       = 4,
    EGameplayTaskState                             = 5

};


// Enum  ChaosSolverEngine.EClusterConnectionTypeEnum
enum class EClusterConnectionTypeEnum : uint8_t
{
    Chaos                                          = 0,
    Chaos                                          = 1,
    Chaos                                          = 2,
    Chaos                                          = 3,
    Chaos                                          = 4,
    Chaos                                          = 5,
    Chaos                                          = 6

};


// Enum  GeometryCollectionEngine.EChaosBreakingSortMethod
enum class EChaosBreakingSortMethod : uint8_t
{
    SortNone                                       = 0,
    SortByHighestMass                              = 1,
    SortByHighestSpeed                             = 2,
    SortByNearestFirst                             = 3,
    Count                                          = 4,
    EChaosBreakingSortMethod                       = 5

};


// Enum  GeometryCollectionEngine.EChaosCollisionSortMethod
enum class EChaosCollisionSortMethod : uint8_t
{
    SortNone                                       = 0,
    SortByHighestMass                              = 1,
    SortByHighestSpeed                             = 2,
    SortByHighestImpulse                           = 3,
    SortByNearestFirst                             = 4,
    Count                                          = 5,
    EChaosCollisionSortMethod                      = 6

};


// Enum  GeometryCollectionEngine.EChaosTrailingSortMethod
enum class EChaosTrailingSortMethod : uint8_t
{
    SortNone                                       = 0,
    SortByHighestMass                              = 1,
    SortByHighestSpeed                             = 2,
    SortByNearestFirst                             = 3,
    Count                                          = 4,
    EChaosTrailingSortMethod                       = 5

};


// Enum  GeometryCollectionEngine.EGeometryCollectionDebugDrawActorHideGeometry
enum class EGeometryCollectionDebugDrawActorHideGeometry : uint8_t
{
    HideNone                                       = 0,
    HideWithCollision                              = 1,
    HideSelected                                   = 2,
    HideWholeCollection                            = 3,
    HideAll                                        = 4,
    EGeometryCollectionDebugDrawActorHideGeometry  = 5

};


// Enum  GeometryCollectionEngine.ECollectionGroupEnum
enum class ECollectionGroupEnum : uint8_t
{
    Chaos                                          = 0,
    Chaos                                          = 1,
    Chaos                                          = 2

};


// Enum  GeometryCollectionEngine.ECollectionAttributeEnum
enum class ECollectionAttributeEnum : uint8_t
{
    Chaos                                          = 0,
    Chaos                                          = 1,
    Chaos                                          = 2,
    Chaos                                          = 3,
    Chaos                                          = 4

};


// Enum  AIModule.EAISenseActorSize
enum class EAISenseActorSize : uint8_t
{
    AISize                                         = 0,
    AISize                                         = 1,
    AISize                                         = 2,
    AISize                                         = 3

};


// Enum  AIModule.EAISenseNotifyType
enum class EAISenseNotifyType : uint8_t
{
    OnEveryPerception                              = 0,
    OnPerceptionChange                             = 1,
    EAISenseNotifyType                             = 2

};


// Enum  AIModule.EAITaskPriority
enum class EAITaskPriority : uint8_t
{
    Lowest                                         = 0,
    Low                                            = 64,
    AutonomousAI                                   = 127,
    High                                           = 192,
    Ultimate                                       = 254,
    EAITaskPriority                                = 255

};


// Enum  AIModule.EGenericAICheck
enum class EGenericAICheck : uint8_t
{
    Less                                           = 0,
    LessOrEqual                                    = 1,
    Equal                                          = 2,
    NotEqual                                       = 3,
    GreaterOrEqual                                 = 4,
    Greater                                        = 5,
    IsTrue                                         = 6,
    MAX                                            = 7

};


// Enum  AIModule.EAILockSource
enum class EAILockSource : uint8_t
{
    Animation                                      = 0,
    Logic                                          = 1,
    Script                                         = 2,
    Gameplay                                       = 3,
    MAX                                            = 4

};


// Enum  AIModule.EAIRequestPriority
enum class EAIRequestPriority : uint8_t
{
    SoftScript                                     = 0,
    Logic                                          = 1,
    HardScript                                     = 2,
    Reaction                                       = 3,
    Ultimate                                       = 4,
    MAX                                            = 5

};


// Enum  AIModule.EPawnActionEventType
enum class EPawnActionEventType : uint8_t
{
    Invalid                                        = 0,
    FailedToStart                                  = 1,
    InstantAbort                                   = 2,
    FinishedAborting                               = 3,
    FinishedExecution                              = 4,
    Push                                           = 5,
    EPawnActionEventType                           = 6

};


// Enum  AIModule.EPawnActionResult
enum class EPawnActionResult : uint8_t
{
    NotStarted                                     = 0,
    InProgress                                     = 1,
    Success                                        = 2,
    Failed                                         = 3,
    Aborted                                        = 4,
    EPawnActionResult                              = 5

};


// Enum  AIModule.EPawnActionAbortState
enum class EPawnActionAbortState : uint8_t
{
    NeverStarted                                   = 0,
    NotBeingAborted                                = 1,
    MarkPendingAbort                               = 2,
    LatentAbortInProgress                          = 3,
    AbortDone                                      = 4,
    MAX                                            = 5

};


// Enum  AIModule.FAIDistanceType
enum class FAIDistanceType : uint8_t
{
    Distance3D                                     = 0,
    Distance2D                                     = 1,
    DistanceZ                                      = 2,
    MAX                                            = 3

};


// Enum  AIModule.EAIOptionFlag
enum class EAIOptionFlag : uint8_t
{
    Default                                        = 0,
    Enable                                         = 1,
    Disable                                        = 2,
    MAX                                            = 3

};


// Enum  AIModule.EBTFlowAbortMode
enum class EBTFlowAbortMode : uint8_t
{
    None                                           = 0,
    LowerPriority                                  = 1,
    Self                                           = 2,
    Both                                           = 3,
    EBTFlowAbortMode                               = 4

};


// Enum  AIModule.EBTNodeResult
enum class EBTNodeResult : uint8_t
{
    Succeeded                                      = 0,
    Failed                                         = 1,
    Aborted                                        = 2,
    InProgress                                     = 3,
    EBTNodeResult                                  = 4

};


// Enum  AIModule.ETextKeyOperation
enum class ETextKeyOperation : uint8_t
{
    Equal                                          = 0,
    NotEqual                                       = 1,
    Contain                                        = 2,
    NotContain                                     = 3,
    ETextKeyOperation                              = 4

};


// Enum  AIModule.EArithmeticKeyOperation
enum class EArithmeticKeyOperation : uint8_t
{
    Equal                                          = 0,
    NotEqual                                       = 1,
    Less                                           = 2,
    LessOrEqual                                    = 3,
    Greater                                        = 4,
    GreaterOrEqual                                 = 5,
    EArithmeticKeyOperation                        = 6

};


// Enum  AIModule.EBasicKeyOperation
enum class EBasicKeyOperation : uint8_t
{
    Set                                            = 0,
    NotSet                                         = 1,
    EBasicKeyOperation                             = 2

};


// Enum  AIModule.EBTParallelMode
enum class EBTParallelMode : uint8_t
{
    AbortBackground                                = 0,
    WaitForBackground                              = 1,
    EBTParallelMode                                = 2

};


// Enum  AIModule.EBTDecoratorLogic
enum class EBTDecoratorLogic : uint8_t
{
    Invalid                                        = 0,
    Test                                           = 1,
    And                                            = 2,
    Or                                             = 3,
    Not                                            = 4,
    EBTDecoratorLogic                              = 5

};


// Enum  AIModule.EBTChildIndex
enum class EBTChildIndex : uint8_t
{
    FirstNode                                      = 0,
    TaskNode                                       = 1,
    EBTChildIndex                                  = 2

};


// Enum  AIModule.EBTBlackboardRestart
enum class EBTBlackboardRestart : uint8_t
{
    ValueChange                                    = 0,
    ResultChange                                   = 1,
    EBTBlackboardRestart                           = 2

};


// Enum  AIModule.EBlackBoardEntryComparison
enum class EBlackBoardEntryComparison : uint8_t
{
    Equal                                          = 0,
    NotEqual                                       = 1,
    EBlackBoardEntryComparison                     = 2

};


// Enum  AIModule.EPathExistanceQueryType
enum class EPathExistanceQueryType : uint8_t
{
    NavmeshRaycast2D                               = 0,
    HierarchicalQuery                              = 1,
    RegularPathFinding                             = 2,
    EPathExistanceQueryType                        = 3

};


// Enum  AIModule.EPointOnCircleSpacingMethod
enum class EPointOnCircleSpacingMethod : uint8_t
{
    BySpaceBetween                                 = 0,
    ByNumberOfPoints                               = 1,
    EPointOnCircleSpacingMethod                    = 2

};


// Enum  AIModule.EEQSNormalizationType
enum class EEQSNormalizationType : uint8_t
{
    Absolute                                       = 0,
    RelativeToScores                               = 1,
    EEQSNormalizationType                          = 2

};


// Enum  AIModule.EEnvTestDistance
enum class EEnvTestDistance : uint8_t
{
    Distance3D                                     = 0,
    Distance2D                                     = 1,
    DistanceZ                                      = 2,
    DistanceAbsoluteZ                              = 3,
    EEnvTestDistance                               = 4

};


// Enum  AIModule.EEnvTestDot
enum class EEnvTestDot : uint8_t
{
    Dot3D                                          = 0,
    Dot2D                                          = 1,
    EEnvTestDot                                    = 2

};


// Enum  AIModule.EEnvTestPathfinding
enum class EEnvTestPathfinding : uint8_t
{
    PathExist                                      = 0,
    PathCost                                       = 1,
    PathLength                                     = 2,
    EEnvTestPathfinding                            = 3

};


// Enum  AIModule.EEnvQueryTestClamping
enum class EEnvQueryTestClamping : uint8_t
{
    None                                           = 0,
    SpecifiedValue                                 = 1,
    FilterThreshold                                = 2,
    EEnvQueryTestClamping                          = 3

};


// Enum  AIModule.EEnvDirection
enum class EEnvDirection : uint8_t
{
    TwoPoints                                      = 0,
    Rotation                                       = 1,
    EEnvDirection                                  = 2

};


// Enum  AIModule.EEnvOverlapShape
enum class EEnvOverlapShape : uint8_t
{
    Box                                            = 0,
    Sphere                                         = 1,
    Capsule                                        = 2,
    EEnvOverlapShape                               = 3

};


// Enum  AIModule.EEnvTraceShape
enum class EEnvTraceShape : uint8_t
{
    Line                                           = 0,
    Box                                            = 1,
    Sphere                                         = 2,
    Capsule                                        = 3,
    EEnvTraceShape                                 = 4

};


// Enum  AIModule.EEnvQueryTrace
enum class EEnvQueryTrace : uint8_t
{
    None                                           = 0,
    Navigation                                     = 1,
    Geometry                                       = 2,
    NavigationOverLedges                           = 3,
    EEnvQueryTrace                                 = 4

};


// Enum  AIModule.EAIParamType
enum class EAIParamType : uint8_t
{
    Float                                          = 0,
    Int                                            = 1,
    Bool                                           = 2,
    MAX                                            = 3

};


// Enum  AIModule.EEnvQueryParam
enum class EEnvQueryParam : uint8_t
{
    Float                                          = 0,
    Int                                            = 1,
    Bool                                           = 2,
    EEnvQueryParam                                 = 3

};


// Enum  AIModule.EEnvQueryRunMode
enum class EEnvQueryRunMode : uint8_t
{
    SingleResult                                   = 0,
    RandomBest5Pct                                 = 1,
    RandomBest25Pct                                = 2,
    AllMatching                                    = 3,
    EEnvQueryRunMode                               = 4

};


// Enum  AIModule.EEnvTestScoreOperator
enum class EEnvTestScoreOperator : uint8_t
{
    AverageScore                                   = 0,
    MinScore                                       = 1,
    MaxScore                                       = 2,
    Multiply                                       = 3,
    EEnvTestScoreOperator                          = 4

};


// Enum  AIModule.EEnvTestFilterOperator
enum class EEnvTestFilterOperator : uint8_t
{
    AllPass                                        = 0,
    AnyPass                                        = 1,
    EEnvTestFilterOperator                         = 2

};


// Enum  AIModule.EEnvTestCost
enum class EEnvTestCost : uint8_t
{
    Low                                            = 0,
    Medium                                         = 1,
    High                                           = 2,
    EEnvTestCost                                   = 3

};


// Enum  AIModule.EEnvTestWeight
enum class EEnvTestWeight : uint8_t
{
    None                                           = 0,
    Square                                         = 1,
    Inverse                                        = 2,
    Unused                                         = 3,
    Constant                                       = 4,
    Skip                                           = 5,
    EEnvTestWeight                                 = 6

};


// Enum  AIModule.EEnvTestScoreEquation
enum class EEnvTestScoreEquation : uint8_t
{
    Linear                                         = 0,
    Square                                         = 1,
    InverseLinear                                  = 2,
    SquareRoot                                     = 3,
    Constant                                       = 4,
    EEnvTestScoreEquation                          = 5

};


// Enum  AIModule.EEnvTestFilterType
enum class EEnvTestFilterType : uint8_t
{
    Minimum                                        = 0,
    Maximum                                        = 1,
    Range                                          = 2,
    Match                                          = 3,
    EEnvTestFilterType                             = 4

};


// Enum  AIModule.EEnvTestPurpose
enum class EEnvTestPurpose : uint8_t
{
    Filter                                         = 0,
    Score                                          = 1,
    FilterAndScore                                 = 2,
    EEnvTestPurpose                                = 3

};


// Enum  AIModule.EEnvQueryHightlightMode
enum class EEnvQueryHightlightMode : uint8_t
{
    All                                            = 0,
    Best5Pct                                       = 1,
    Best25Pct                                      = 2,
    EEnvQueryHightlightMode                        = 3

};


// Enum  AIModule.ETeamAttitude
enum class ETeamAttitude : uint8_t
{
    Friendly                                       = 0,
    Neutral                                        = 1,
    Hostile                                        = 2,
    ETeamAttitude                                  = 3

};


// Enum  AIModule.EPathFollowingRequestResult
enum class EPathFollowingRequestResult : uint8_t
{
    Failed                                         = 0,
    AlreadyAtGoal                                  = 1,
    RequestSuccessful                              = 2,
    EPathFollowingRequestResult                    = 3

};


// Enum  AIModule.EPathFollowingAction
enum class EPathFollowingAction : uint8_t
{
    Error                                          = 0,
    NoMove                                         = 1,
    DirectMove                                     = 2,
    PartialPath                                    = 3,
    PathToGoal                                     = 4,
    EPathFollowingAction                           = 5

};


// Enum  AIModule.EPathFollowingStatus
enum class EPathFollowingStatus : uint8_t
{
    Idle                                           = 0,
    Waiting                                        = 1,
    Paused                                         = 2,
    Moving                                         = 3,
    EPathFollowingStatus                           = 4

};


// Enum  AIModule.EPawnActionFailHandling
enum class EPawnActionFailHandling : uint8_t
{
    RequireSuccess                                 = 0,
    IgnoreFailure                                  = 1,
    EPawnActionFailHandling                        = 2

};


// Enum  AIModule.EPawnSubActionTriggeringPolicy
enum class EPawnSubActionTriggeringPolicy : uint8_t
{
    CopyBeforeTriggering                           = 0,
    ReuseInstances                                 = 1,
    EPawnSubActionTriggeringPolicy                 = 2

};


// Enum  AIModule.EPawnActionMoveMode
enum class EPawnActionMoveMode : uint8_t
{
    UsePathfinding                                 = 0,
    StraightLine                                   = 1,
    EPawnActionMoveMode                            = 2

};


// Enum  InteractiveToolsFramework.EInputCaptureState
enum class EInputCaptureState : uint8_t
{
    Begin                                          = 1,
    Continue                                       = 2,
    End                                            = 3,
    Ignore                                         = 4,
    EInputCaptureState                             = 5

};


// Enum  InteractiveToolsFramework.EInputCaptureRequestType
enum class EInputCaptureRequestType : uint8_t
{
    Begin                                          = 1,
    Ignore                                         = 2,
    EInputCaptureRequestType                       = 3

};


// Enum  InteractiveToolsFramework.EInputCaptureSide
enum class EInputCaptureSide : uint8_t
{
    None                                           = 0,
    Left                                           = 1,
    Right                                          = 2,
    Both                                           = 3,
    Any                                            = 99,
    EInputCaptureSide                              = 100

};


// Enum  InteractiveToolsFramework.EInputDevices
enum class EInputDevices : uint8_t
{
    None                                           = 0,
    Keyboard                                       = 1,
    Mouse                                          = 2,
    Gamepad                                        = 4,
    OculusTouch                                    = 8,
    HTCViveWands                                   = 16,
    AnySpatialDevice                               = 24,
    TabletFingers                                  = 1024,
    EInputDevices                                  = 1025

};


// Enum  InteractiveToolsFramework.ETransformGizmoSubElements
enum class ETransformGizmoSubElements : uint8_t
{
    None                                           = 0,
    TranslateAxisX                                 = 2,
    TranslateAxisY                                 = 4,
    TranslateAxisZ                                 = 8,
    TranslateAllAxes                               = 14,
    TranslatePlaneXY                               = 16,
    TranslatePlaneXZ                               = 32,
    TranslatePlaneYZ                               = 64,
    TranslateAllPlanes                             = 112,
    RotateAxisX                                    = 128,
    RotateAxisY                                    = 256,
    RotateAxisZ                                    = 512,
    RotateAllAxes                                  = 896,
    ScaleAxisX                                     = 1024,
    ScaleAxisY                                     = 2048,
    ScaleAxisZ                                     = 4096,
    ScaleAllAxes                                   = 7168,
    ScalePlaneYZ                                   = 8192,
    ScalePlaneXZ                                   = 16384,
    ScalePlaneXY                                   = 32768,
    ScaleAllPlanes                                 = 57344,
    ScaleUniform                                   = 65536,
    StandardTranslateRotate                        = 1022,
    TranslateRotateUniformScale                    = 66558,
    FullTranslateRotateScale                       = 131070,
    ETransformGizmoSubElements                     = 131071

};


// Enum  InteractiveToolsFramework.EToolChangeTrackingMode
enum class EToolChangeTrackingMode : uint8_t
{
    NoChangeTracking                               = 1,
    UndoToExit                                     = 2,
    FullUndoRedo                                   = 3,
    EToolChangeTrackingMode                        = 4

};


// Enum  InteractiveToolsFramework.EToolSide
enum class EToolSide : uint8_t
{
    Left                                           = 1,
    Mouse                                          = 1,
    Right                                          = 2,
    EToolSide                                      = 3

};


// Enum  InteractiveToolsFramework.EViewInteractionState
enum class EViewInteractionState : uint8_t
{
    None                                           = 0,
    Hovered                                        = 1,
    Focused                                        = 2,
    EViewInteractionState                          = 3

};


// Enum  InteractiveToolsFramework.ESelectedObjectsModificationType
enum class ESelectedObjectsModificationType : uint8_t
{
    Replace                                        = 0,
    Add                                            = 1,
    Remove                                         = 2,
    Clear                                          = 3,
    ESelectedObjectsModificationType               = 4

};


// Enum  InteractiveToolsFramework.EToolMessageLevel
enum class EToolMessageLevel : uint8_t
{
    Internal                                       = 0,
    UserMessage                                    = 1,
    UserNotification                               = 2,
    UserWarning                                    = 3,
    UserError                                      = 4,
    EToolMessageLevel                              = 5

};


// Enum  InteractiveToolsFramework.EToolContextCoordinateSystem
enum class EToolContextCoordinateSystem : uint8_t
{
    World                                          = 0,
    Local                                          = 1,
    EToolContextCoordinateSystem                   = 2

};


// Enum  InteractiveToolsFramework.EStandardToolContextMaterials
enum class EStandardToolContextMaterials : uint8_t
{
    VertexColorMaterial                            = 1,
    EStandardToolContextMaterials                  = 2

};


// Enum  InteractiveToolsFramework.ESceneSnapQueryTargetType
enum class ESceneSnapQueryTargetType : uint8_t
{
    None                                           = 0,
    MeshVertex                                     = 1,
    MeshEdge                                       = 2,
    Grid                                           = 4,
    All                                            = 7,
    ESceneSnapQueryTargetType                      = 8

};


// Enum  InteractiveToolsFramework.ESceneSnapQueryType
enum class ESceneSnapQueryType : uint8_t
{
    Position                                       = 1,
    Rotation                                       = 2,
    ESceneSnapQueryType                            = 3

};


// Enum  InputTooling.EAimToolingShotTrajectoryFlags
enum class EAimToolingShotTrajectoryFlags : uint8_t
{
    None                                           = 0,
    IgnoreWeight                                   = 1,
    EAimToolingShotTrajectoryFlags                 = 2

};


// Enum  InputTooling.EAimToolingStrafeAssistCounterStrafeMode
enum class EAimToolingStrafeAssistCounterStrafeMode : uint8_t
{
    CounterMovementDirection                       = 0,
    CounterInputDirection                          = 1,
    CounterMatchingMovementInputDirection          = 2,
    Count                                          = 3,
    Invalid                                        = 254,
    EAimToolingFeature                             = 255,
    EAimToolingStrafeAssistCounterStrafeMode       = 256

};


// Enum  InputTooling.EAimToolingStrafeAssistMode
enum class EAimToolingStrafeAssistMode : uint8_t
{
    AlwaysTowardsTarget                            = 0,
    ConditionalCounterStrafe                       = 1,
    AlwaysCounterStrafe                            = 2,
    Count                                          = 3,
    Invalid                                        = 254,
    EAimToolingFeature                             = 255,
    EAimToolingStrafeAssistMode                    = 256

};


// Enum  InputTooling.EAimToolingTargetFrictionAimingScalarMode
enum class EAimToolingTargetFrictionAimingScalarMode : uint8_t
{
    ApplyBothScalars                               = 0,
    PreferTargetFriction                           = 1,
    PreferAimingScalar                             = 2,
    PreferHighestScalar                            = 3,
    Count                                          = 4,
    Invalid                                        = 254,
    EAimToolingFeature                             = 255,
    EAimToolingTargetFrictionAimingScalarMode      = 256

};


// Enum  InputTooling.EAimToolingBendingMode
enum class EAimToolingBendingMode : uint8_t
{
    SpatialBending                                 = 0,
    TemporalBending                                = 1,
    EAimToolingBendingMode                         = 2

};


// Enum  InputTooling.EAimToolingTargetType
enum class EAimToolingTargetType : uint8_t
{
    Player                                         = 0,
    GenericShootable                               = 1,
    LightStatic                                    = 2,
    HeavyStatic                                    = 3,
    LightMoving                                    = 4,
    HeavyMoving                                    = 5,
    Count                                          = 6,
    Invalid                                        = 254,
    EAimToolingFeature                             = 255,
    EAimToolingTargetType                          = 256

};


// Enum  InputTooling.EAimToolingCurve
enum class EAimToolingCurve : uint8_t
{
    REPLACE                                        = 0,
    Count                                          = 1,
    Invalid                                        = 254,
    EAimToolingCurve                               = 255

};


// Enum  InputTooling.EAimToolingFeature
enum class EAimToolingFeature : uint8_t
{
    TargetManagement                               = 0,
    PullToCenter                                   = 1,
    Bending                                        = 2,
    AimAccelerationDelay                           = 3,
    Deceleration                                   = 4,
    FrameOfReference                               = 5,
    StrafeAssist                                   = 6,
    TargetFriction                                 = 7,
    Guardrails                                     = 8,
    Count                                          = 9,
    Invalid                                        = 254,
    EAimToolingFeature                             = 255

};


// Enum  InputTooling.EMovementToolingFeature
enum class EMovementToolingFeature : uint8_t
{
    ShotRooting                                    = 0,
    FastStrafing                                   = 1,
    FastRelease                                    = 2,
    Count                                          = 3,
    Invalid                                        = 254,
    EMovementToolingFeature                        = 255

};


// Enum  AISpatialAwareness.ELayerBlockBehavior
enum class ELayerBlockBehavior : uint8_t
{
    AffectNone                                     = 0,
    AffectBlockID                                  = 1,
    AffectOtherBlockIDs                            = 2,
    AffectAllBlockIDs                              = 3,
    Count                                          = 4,
    ELayerBlockBehavior                            = 5

};


// Enum  AISpatialAwareness.EInfluenceLayerTag
enum class EInfluenceLayerTag : uint8_t
{
    Debug                                          = 0,
    Hazard                                         = 1,
    Position                                       = 2,
    AllyThreat                                     = 3,
    Count                                          = 4,
    EInfluenceLayerTag                             = 5

};


// Enum  AISpatialAwareness.EInfluenceSourceTag
enum class EInfluenceSourceTag : uint8_t
{
    TestTagA                                       = 0,
    Count                                          = 1,
    EInfluenceSourceTag                            = 2

};


// Enum  AISpatialAwareness.EPropagationModifierTag
enum class EPropagationModifierTag : uint8_t
{
    Count                                          = 0,
    EPropagationModifierTag                        = 1

};


// Enum  AISpatialAwareness.EEnvTestWaypointVisibilityMode
enum class EEnvTestWaypointVisibilityMode : uint8_t
{
    Perception                                     = 0,
    EEnvTestWaypointVisibilityMode                 = 1

};


// Enum  AISpatialAwareness.EWaypointTypeFlags
enum class EWaypointTypeFlags : uint8_t
{
    None                                           = 0,
    RoomEntrance                                   = 1,
    DefensePoint                                   = 2,
    ObjectivePoint                                 = 4,
    All                                            = 255,
    EWaypointTypeFlags                             = 256

};


// Enum  AISpatialAwareness.EWaypointInfluenceQueryReturnType
enum class EWaypointInfluenceQueryReturnType : uint8_t
{
    Sum                                            = 0,
    Average                                        = 1,
    Count                                          = 2,
    EWaypointInfluenceQueryReturnType              = 3

};


// Enum  AISpatialAwareness.ENodeOperation
enum class ENodeOperation : uint8_t
{
    Set                                            = 0,
    SetWithModulation                              = 1,
    Increment                                      = 2,
    Decrement                                      = 3,
    Clear                                          = 4,
    ENodeOperation                                 = 5

};


// Enum  AIJobCoordination.EAIJobCoordination
enum class EAIJobCoordination : uint8_t
{
    EAIJobCoordination                             = 0,
    EAIJobCoordination                             = 1,
    EAIJobCoordination                             = 2,
    EAIJobCoordination                             = 3,
    EAIJobCoordination                             = 4,
    EAIJobCoordination                             = 5,
    EAIJobCoordination                             = 6,
    EAIJobCoordination                             = 7

};


// Enum  VectorVM.EVectorVMOp
enum class EVectorVMOp : uint8_t
{
    done                                           = 0,
    add                                            = 1,
    sub                                            = 2,
    mul                                            = 3,
    div                                            = 4,
    mad                                            = 5,
    lerp                                           = 6,
    rcp                                            = 7,
    rsq                                            = 8,
    sqrt                                           = 9,
    neg                                            = 10,
    abs                                            = 11,
    exp                                            = 12,
    exp2                                           = 13,
    log                                            = 14,
    log2                                           = 15,
    sin                                            = 16,
    cos                                            = 17,
    tan                                            = 18,
    asin                                           = 19,
    acos                                           = 20,
    atan                                           = 21,
    atan2                                          = 22,
    ceil                                           = 23,
    floor                                          = 24,
    fmod                                           = 25,
    frac                                           = 26,
    trunc                                          = 27,
    clamp                                          = 28,
    min                                            = 29,
    max                                            = 30,
    pow                                            = 31,
    round                                          = 32,
    sign                                           = 33,
    step                                           = 34,
    random                                         = 35,
    noise                                          = 36,
    cmplt                                          = 37,
    cmple                                          = 38,
    cmpgt                                          = 39,
    cmpge                                          = 40,
    cmpeq                                          = 41,
    cmpneq                                         = 42,
    select                                         = 43,
    addi                                           = 44,
    subi                                           = 45,
    muli                                           = 46,
    divi                                           = 47,
    clampi                                         = 48,
    mini                                           = 49,
    maxi                                           = 50,
    absi                                           = 51,
    negi                                           = 52,
    signi                                          = 53,
    randomi                                        = 54,
    cmplti                                         = 55,
    cmplei                                         = 56,
    cmpgti                                         = 57,
    cmpgei                                         = 58,
    cmpeqi                                         = 59,
    cmpneqi                                        = 60,
    bit                                            = 61,
    bit                                            = 62,
    bit                                            = 63,
    bit                                            = 64,
    bit                                            = 65,
    bit                                            = 66,
    logic                                          = 67,
    logic                                          = 68,
    logic                                          = 69,
    logic                                          = 70,
    f2i                                            = 71,
    i2f                                            = 72,
    f2b                                            = 73,
    b2f                                            = 74,
    i2b                                            = 75,
    b2i                                            = 76,
    inputdata                                      = 77,
    inputdata                                      = 78,
    inputdata                                      = 79,
    inputdata                                      = 80,
    inputdata                                      = 81,
    inputdata                                      = 82,
    outputdata                                     = 83,
    outputdata                                     = 84,
    outputdata                                     = 85,
    acquireindex                                   = 86,
    external                                       = 87,
    exec                                           = 88,
    noise2D                                        = 89,
    noise3D                                        = 90,
    enter                                          = 91,
    exit                                           = 92,
    update                                         = 93,
    acquire                                        = 94,
    NumOpcodes                                     = 95,
    EVectorVMOp                                    = 96

};


// Enum  VectorVM.EVectorVMOperandLocation
enum class EVectorVMOperandLocation : uint8_t
{
    Register                                       = 0,
    Constant                                       = 1,
    Num                                            = 2,
    EVectorVMOperandLocation                       = 3

};


// Enum  VectorVM.EVectorVMBaseTypes
enum class EVectorVMBaseTypes : uint8_t
{
    Float                                          = 0,
    Int                                            = 1,
    Bool                                           = 2,
    Num                                            = 3,
    EVectorVMBaseTypes                             = 4

};


// Enum  RigVM.ERigVMParameterType
enum class ERigVMParameterType : uint8_t
{
    Input                                          = 0,
    Output                                         = 1,
    Invalid                                        = 2,
    ERigVMParameterType                            = 3

};


// Enum  RigVM.ERigVMOpCode
enum class ERigVMOpCode : uint8_t
{
    Execute                                        = 0,
    Execute                                        = 1,
    Execute                                        = 2,
    Execute                                        = 3,
    Execute                                        = 4,
    Execute                                        = 5,
    Execute                                        = 6,
    Execute                                        = 7,
    Execute                                        = 8,
    Execute                                        = 9,
    Execute                                        = 10,
    Execute                                        = 11,
    Execute                                        = 12,
    Execute                                        = 13,
    Execute                                        = 14,
    Execute                                        = 15,
    Execute                                        = 16,
    Execute                                        = 17,
    Execute                                        = 18,
    Execute                                        = 19,
    Execute                                        = 20,
    Execute                                        = 21,
    Execute                                        = 22,
    Execute                                        = 23,
    Execute                                        = 24,
    Execute                                        = 25,
    Execute                                        = 26,
    Execute                                        = 27,
    Execute                                        = 28,
    Execute                                        = 29,
    Execute                                        = 30,
    Execute                                        = 31,
    Execute                                        = 32,
    Execute                                        = 33,
    Execute                                        = 34,
    Execute                                        = 35,
    Execute                                        = 36,
    Execute                                        = 37,
    Execute                                        = 38,
    Execute                                        = 39,
    Execute                                        = 40,
    Execute                                        = 41,
    Execute                                        = 42,
    Execute                                        = 43,
    Execute                                        = 44,
    Execute                                        = 45,
    Execute                                        = 46,
    Execute                                        = 47,
    Execute                                        = 48,
    Execute                                        = 49,
    Execute                                        = 50,
    Execute                                        = 51,
    Execute                                        = 52,
    Execute                                        = 53,
    Execute                                        = 54,
    Execute                                        = 55,
    Execute                                        = 56,
    Execute                                        = 57,
    Execute                                        = 58,
    Execute                                        = 59,
    Execute                                        = 60,
    Execute                                        = 61,
    Execute                                        = 62,
    Execute                                        = 63,
    Execute                                        = 64,
    Zero                                           = 65,
    BoolFalse                                      = 66,
    BoolTrue                                       = 67,
    Copy                                           = 68,
    Increment                                      = 69,
    Decrement                                      = 70,
    Equals                                         = 71,
    NotEquals                                      = 72,
    JumpAbsolute                                   = 73,
    JumpForward                                    = 74,
    JumpBackward                                   = 75,
    JumpAbsoluteIf                                 = 76,
    JumpForwardIf                                  = 77,
    JumpBackwardIf                                 = 78,
    ChangeType                                     = 79,
    Exit                                           = 80,
    BeginBlock                                     = 81,
    EndBlock                                       = 82,
    Invalid                                        = 83,
    ERigVMOpCode                                   = 84

};


// Enum  RigVM.ERigVMPinDirection
enum class ERigVMPinDirection : uint8_t
{
    Input                                          = 0,
    Output                                         = 1,
    IO                                             = 2,
    Visible                                        = 3,
    Hidden                                         = 4,
    Invalid                                        = 5,
    ERigVMPinDirection                             = 6

};


// Enum  RigVM.ERigVMRegisterType
enum class ERigVMRegisterType : uint8_t
{
    Plain                                          = 0,
    String                                         = 1,
    Name                                           = 2,
    Struct                                         = 3,
    Invalid                                        = 4,
    ERigVMRegisterType                             = 5

};


// Enum  RigVM.ERigVMMemoryType
enum class ERigVMMemoryType : uint8_t
{
    Work                                           = 0,
    Literal                                        = 1,
    External                                       = 2,
    Invalid                                        = 3,
    ERigVMMemoryType                               = 4

};


// UserDefinedEnum  Engine.Default
enum class Default : uint8_t
{

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2,
    Enum                                           = 3

};


// UserDefinedEnum  Aud.Aud
enum class Aud : uint8_t
{
    Aud                                            = 0,
    Aud                                            = 1,
    Aud                                            = 2,
    Aud                                            = 3

};


// UserDefinedEnum  Aud.Aud
enum class Aud : uint8_t
{
    Aud                                            = 0,
    Aud                                            = 1,
    Aud                                            = 2,
    Aud                                            = 3

};


// UserDefinedEnum  Aud.Aud
enum class Aud : uint8_t
{
    Aud                                            = 0,
    Aud                                            = 1,
    Aud                                            = 2,
    Aud                                            = 3

};


// UserDefinedEnum  SharedBackButtonTypes.SharedBackButtonTypes
enum class SharedBackButtonTypes : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    SharedBackButtonTypes                          = 3

};


// UserDefinedEnum  SharedButtonStyles.SharedButtonStyles
enum class SharedButtonStyles : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    SharedButtonStyles                             = 2

};


// UserDefinedEnum  TextColors.TextColors
enum class TextColors : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    NewEnumerator4                                 = 4,
    NewEnumerator5                                 = 5,
    TextColors                                     = 6

};


// UserDefinedEnum  FillColors.FillColors
enum class FillColors : uint8_t
{
    NewEnumerator0                                 = 0,
    FillColors                                     = 1

};


// UserDefinedEnum  ButtonColors.ButtonColors
enum class ButtonColors : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    NewEnumerator4                                 = 4,
    ButtonColors                                   = 5

};


// UserDefinedEnum  VOLanguage.VOLanguage
enum class VOLanguage : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    VOLanguage                                     = 3

};


// UserDefinedEnum  .CharacterID
enum class CharacterID : uint8_t
{
    NewEnumerator8                                 = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator1                                 = 2,
    NewEnumerator2                                 = 3,
    NewEnumerator3                                 = 4,
    NewEnumerator4                                 = 5,
    NewEnumerator5                                 = 6,
    NewEnumerator6                                 = 7,
    NewEnumerator9                                 = 8,
    NewEnumerator7                                 = 9,
    NewEnumerator10                                = 10,
    NewEnumerator11                                = 11,
    NewEnumerator12                                = 12,
    NewEnumerator13                                = 13,
    NewEnumerator14                                = 14,
    NewEnumerator15                                = 15,
    NewEnumerator16                                = 16,
    NewEnumerator17                                = 17,
    NewEnumerator18                                = 18,
    NewEnumerator19                                = 19,
    NewEnumerator20                                = 20,
    NewEnumerator21                                = 21,
    NewEnumerator22                                = 22,
    NewEnumerator23                                = 23,
    NewEnumerator24                                = 24,
    CharacterID                                    = 25

};


// UserDefinedEnum  MapID.MapID
enum class MapID : uint8_t
{
    NewEnumerator3                                 = 0,
    NewEnumerator4                                 = 1,
    NewEnumerator0                                 = 2,
    NewEnumerator1                                 = 3,
    NewEnumerator2                                 = 4,
    NewEnumerator6                                 = 5,
    NewEnumerator7                                 = 6,
    NewEnumerator8                                 = 7,
    NewEnumerator9                                 = 8,
    NewEnumerator10                                = 9,
    NewEnumerator11                                = 10,
    NewEnumerator12                                = 11,
    NewEnumerator13                                = 12,
    MapID                                          = 13

};


// UserDefinedEnum  SettingsNotificationState.SettingsNotificationState
enum class SettingsNotificationState : uint8_t
{
    NewEnumerator3                                 = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator1                                 = 2,
    NewEnumerator2                                 = 3,
    SettingsNotificationState                      = 4

};


// UserDefinedEnum  NonVerbalCommWheelGroupTypes.NonVerbalCommWheelGroupTypes
enum class NonVerbalCommWheelGroupTypes : uint8_t
{
    NewEnumerator10                                = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator1                                 = 2,
    NewEnumerator2                                 = 3,
    NewEnumerator3                                 = 4,
    NewEnumerator4                                 = 5,
    NewEnumerator5                                 = 6,
    NewEnumerator6                                 = 7,
    NewEnumerator7                                 = 8,
    NewEnumerator8                                 = 9,
    NewEnumerator9                                 = 10,
    NonVerbalCommWheelGroupTypes                   = 11

};


// UserDefinedEnum  VoteParticipantStateEnum.VoteParticipantStateEnum
enum class VoteParticipantStateEnum : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    VoteParticipantStateEnum                       = 4

};


// UserDefinedEnum  EAimBotsSwitchType.EAimBotsSwitchType
enum class EAimBotsSwitchType : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    NewEnumerator4                                 = 4,
    NewEnumerator5                                 = 5,
    EAimBotsSwitchType                             = 6

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2,
    Enum                                           = 3

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2,
    Enum                                           = 3

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2,
    Enum                                           = 3,
    Enum                                           = 4,
    Enum                                           = 5

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2,
    Enum                                           = 3,
    Enum                                           = 4,
    Enum                                           = 5,
    Enum                                           = 6,
    Enum                                           = 7

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2,
    Enum                                           = 3,
    Enum                                           = 4,
    Enum                                           = 5,
    Enum                                           = 6,
    Enum                                           = 7,
    Enum                                           = 8,
    Enum                                           = 9,
    Enum                                           = 10,
    Enum                                           = 11,
    Enum                                           = 12,
    Enum                                           = 13,
    Enum                                           = 14,
    Enum                                           = 15,
    Enum                                           = 16

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2,
    Enum                                           = 3

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2,
    Enum                                           = 3,
    Enum                                           = 4,
    Enum                                           = 5,
    Enum                                           = 6,
    Enum                                           = 7,
    Enum                                           = 8

};


// UserDefinedEnum  .BotAggressiveness
enum class BotAggressiveness : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    BotAggressiveness                              = 3

};


// UserDefinedEnum  BombPickupBehaviorWithHumanTeammates.BombPickupBehaviorWithHumanTeammates
enum class BombPickupBehaviorWithHumanTeammates : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    BombPickupBehaviorWithHumanTeammates           = 3

};


// UserDefinedEnum  ShopSections.ShopSections
enum class ShopSections : uint8_t
{
    NewEnumerator1                                 = 0,
    NewEnumerator2                                 = 1,
    NewEnumerator3                                 = 2,
    ShopSections                                   = 3

};


// UserDefinedEnum  SelectMenu.SelectMenu
enum class SelectMenu : uint8_t
{
    SelectMenu                                     = 0,
    SelectMenu                                     = 1,
    SelectMenu                                     = 2,
    SelectMenu                                     = 3

};


// UserDefinedEnum  NPEMissionHUDStates.NPEMissionHUDStates
enum class NPEMissionHUDStates : uint8_t
{
    NPEMissionHUDStates                            = 0,
    NPEMissionHUDStates                            = 1,
    NPEMissionHUDStates                            = 2,
    NPEMissionHUDStates                            = 3,
    NPEMissionHUDStates                            = 4,
    NPEMissionHUDStates                            = 5

};


// UserDefinedEnum  ShopHighlightingSubtextDisplayDirection.ShopHighlightingSubtextDisplayDirection
enum class ShopHighlightingSubtextDisplayDirection : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    ShopHighlightingSubtextDisplayDirection        = 2

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2,
    Enum                                           = 3

};


// UserDefinedEnum  E.E
enum class E : uint8_t
{
    E                                              = 0,
    E                                              = 1,
    E                                              = 2,
    E                                              = 3,
    E                                              = 4

};


// UserDefinedEnum  E.E
enum class E : uint8_t
{
    E                                              = 0,
    E                                              = 1,
    E                                              = 2,
    E                                              = 3

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2,
    Enum                                           = 3,
    Enum                                           = 4,
    Enum                                           = 5

};


// UserDefinedEnum  ContractRewardType.ContractRewardType
enum class ContractRewardType : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    NewEnumerator4                                 = 4,
    ContractRewardType                             = 5

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2,
    Enum                                           = 3

};


// UserDefinedEnum  EAgentBackgroundTextColorMode.EAgentBackgroundTextColorMode
enum class EAgentBackgroundTextColorMode : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    EAgentBackgroundTextColorMode                  = 2

};


// UserDefinedEnum  ETimerAnimationState.ETimerAnimationState
enum class ETimerAnimationState : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator3                                 = 2,
    NewEnumerator4                                 = 3,
    ETimerAnimationState                           = 4

};


// UserDefinedEnum  FlyoutArrowDirection.FlyoutArrowDirection
enum class FlyoutArrowDirection : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    FlyoutArrowDirection                           = 4

};


// UserDefinedEnum  E.E
enum class E : uint8_t
{
    E                                              = 0,
    E                                              = 1,
    E                                              = 2,
    E                                              = 3,
    E                                              = 4,
    E                                              = 5,
    E                                              = 6

};


// UserDefinedEnum  E.E
enum class E : uint8_t
{
    E                                              = 0,
    E                                              = 1,
    E                                              = 2,
    E                                              = 3

};


// UserDefinedEnum  E.E
enum class E : uint8_t
{
    E                                              = 0,
    E                                              = 1,
    E                                              = 2

};


// UserDefinedEnum  MatchHalf.MatchHalf
enum class MatchHalf : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    MatchHalf                                      = 3

};


// UserDefinedEnum  MatchDetailsPlayerHighlightEnum.MatchDetailsPlayerHighlightEnum
enum class MatchDetailsPlayerHighlightEnum : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator9                                 = 1,
    NewEnumerator6                                 = 2,
    NewEnumerator10                                = 3,
    NewEnumerator11                                = 4,
    NewEnumerator4                                 = 5,
    NewEnumerator5                                 = 6,
    NewEnumerator2                                 = 7,
    MatchDetailsPlayerHighlightEnum                = 8

};


// UserDefinedEnum  MatchDetailsHighlightEnum.MatchDetailsHighlightEnum
enum class MatchDetailsHighlightEnum : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    NewEnumerator4                                 = 4,
    NewEnumerator5                                 = 5,
    NewEnumerator6                                 = 6,
    MatchDetailsHighlightEnum                      = 7

};


// UserDefinedEnum  PlayerCardFormat.PlayerCardFormat
enum class PlayerCardFormat : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator2                                 = 1,
    NewEnumerator3                                 = 2,
    PlayerCardFormat                               = 3

};


// UserDefinedEnum  BTEMilestoneState.BTEMilestoneState
enum class BTEMilestoneState : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    BTEMilestoneState                              = 3

};


// UserDefinedEnum  E.E
enum class E : uint8_t
{
    E                                              = 0,
    E                                              = 1,
    E                                              = 2,
    E                                              = 3,
    E                                              = 4,
    E                                              = 5,
    E                                              = 6,
    E                                              = 7,
    E                                              = 8,
    E                                              = 9,
    E                                              = 10,
    E                                              = 11,
    E                                              = 12,
    E                                              = 13,
    E                                              = 14,
    E                                              = 15,
    E                                              = 16,
    E                                              = 17,
    E                                              = 18,
    E                                              = 19

};


// UserDefinedEnum  E.E
enum class E : uint8_t
{
    E                                              = 0,
    E                                              = 1,
    E                                              = 2,
    E                                              = 3,
    E                                              = 4

};


// UserDefinedEnum  E.E
enum class E : uint8_t
{
    E                                              = 0,
    E                                              = 1,
    E                                              = 2,
    E                                              = 3

};


// UserDefinedEnum  HMG.HMG
enum class HMG : uint8_t
{
    HMG                                            = 0,
    HMG                                            = 1,
    HMG                                            = 2

};


// UserDefinedEnum  E.E
enum class E : uint8_t
{
    E                                              = 0,
    E                                              = 1,
    E                                              = 2,
    E                                              = 3

};


// UserDefinedEnum  .GunEjectableType
enum class GunEjectableType : uint8_t
{
    NewEnumerator1                                 = 0,
    NewEnumerator2                                 = 1,
    GunEjectableType                               = 2

};


// UserDefinedEnum  TextureAssetType.TextureAssetType
enum class TextureAssetType : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator2                                 = 1,
    NewEnumerator1                                 = 2,
    NewEnumerator3                                 = 3,
    NewEnumerator4                                 = 4,
    NewEnumerator5                                 = 5,
    NewEnumerator6                                 = 6,
    NewEnumerator7                                 = 7,
    NewEnumerator8                                 = 8,
    NewEnumerator9                                 = 9,
    NewEnumerator11                                = 10,
    TextureAssetType                               = 11

};


// UserDefinedEnum  .GunEmote
enum class GunEmote : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    GunEmote                                       = 2

};


// UserDefinedEnum  .AfterFiringWhileZoomedOption
enum class AfterFiringWhileZoomedOption : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    AfterFiringWhileZoomedOption                   = 2

};


// UserDefinedEnum  .GunFiringState
enum class GunFiringState : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    GunFiringState                                 = 3

};


// UserDefinedEnum  .BulletEnum
enum class BulletEnum : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator5                                 = 1,
    NewEnumerator1                                 = 2,
    NewEnumerator6                                 = 3,
    NewEnumerator7                                 = 4,
    NewEnumerator2                                 = 5,
    NewEnumerator3                                 = 6,
    NewEnumerator8                                 = 7,
    NewEnumerator9                                 = 8,
    NewEnumerator4                                 = 9,
    NewEnumerator10                                = 10,
    NewEnumerator11                                = 11,
    NewEnumerator12                                = 12,
    NewEnumerator13                                = 13,
    BulletEnum                                     = 14

};


// UserDefinedEnum  .PreviousFiringParticleBehaviorEnum
enum class PreviousFiringParticleBehaviorEnum : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    PreviousFiringParticleBehaviorEnum             = 3

};


// UserDefinedEnum  .FiringParticleFrequencyEnum
enum class FiringParticleFrequencyEnum : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    FiringParticleFrequencyEnum                    = 2

};


// UserDefinedEnum  FXCPlayspaceVisibilityParentType.FXCPlayspaceVisibilityParentType
enum class FXCPlayspaceVisibilityParentType : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    FXCPlayspaceVisibilityParentType               = 4

};


// UserDefinedEnum  MatchVOEnum.MatchVOEnum
enum class MatchVOEnum : uint8_t
{
    NewEnumerator5                                 = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator1                                 = 2,
    NewEnumerator2                                 = 3,
    NewEnumerator7                                 = 4,
    NewEnumerator8                                 = 5,
    MatchVOEnum                                    = 6

};


// UserDefinedEnum  VOTacEnum.VOTacEnum
enum class VOTacEnum : uint8_t
{
    NewEnumerator3                                 = 0,
    NewEnumerator6                                 = 1,
    NewEnumerator10                                = 2,
    NewEnumerator11                                = 3,
    NewEnumerator12                                = 4,
    NewEnumerator13                                = 5,
    NewEnumerator14                                = 6,
    NewEnumerator17                                = 7,
    NewEnumerator18                                = 8,
    NewEnumerator19                                = 9,
    NewEnumerator20                                = 10,
    NewEnumerator21                                = 11,
    VOTacEnum                                      = 12

};


// UserDefinedEnum  VOEmoteEnum.VOEmoteEnum
enum class VOEmoteEnum : uint8_t
{
    NewEnumerator17                                = 0,
    NewEnumerator2                                 = 1,
    NewEnumerator4                                 = 2,
    NewEnumerator5                                 = 3,
    NewEnumerator8                                 = 4,
    NewEnumerator9                                 = 5,
    NewEnumerator15                                = 6,
    NewEnumerator16                                = 7,
    NewEnumerator19                                = 8,
    NewEnumerator20                                = 9,
    VOEmoteEnum                                    = 10

};


// UserDefinedEnum  TagAllianceVOEnum.TagAllianceVOEnum
enum class TagAllianceVOEnum : uint8_t
{
    NewEnumerator8                                 = 0,
    NewEnumerator5                                 = 1,
    NewEnumerator6                                 = 2,
    TagAllianceVOEnum                              = 3

};


// UserDefinedEnum  TacticalVOEnum.TacticalVOEnum
enum class TacticalVOEnum : uint8_t
{
    NewEnumerator45                                = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator24                                = 2,
    NewEnumerator1                                 = 3,
    NewEnumerator2                                 = 4,
    NewEnumerator3                                 = 5,
    NewEnumerator5                                 = 6,
    NewEnumerator6                                 = 7,
    NewEnumerator7                                 = 8,
    NewEnumerator8                                 = 9,
    NewEnumerator9                                 = 10,
    NewEnumerator10                                = 11,
    NewEnumerator11                                = 12,
    NewEnumerator12                                = 13,
    NewEnumerator13                                = 14,
    NewEnumerator14                                = 15,
    NewEnumerator15                                = 16,
    NewEnumerator16                                = 17,
    NewEnumerator17                                = 18,
    NewEnumerator18                                = 19,
    NewEnumerator19                                = 20,
    NewEnumerator20                                = 21,
    NewEnumerator21                                = 22,
    NewEnumerator22                                = 23,
    NewEnumerator23                                = 24,
    NewEnumerator25                                = 25,
    NewEnumerator26                                = 26,
    NewEnumerator27                                = 27,
    NewEnumerator28                                = 28,
    NewEnumerator29                                = 29,
    NewEnumerator30                                = 30,
    NewEnumerator31                                = 31,
    NewEnumerator32                                = 32,
    NewEnumerator33                                = 33,
    NewEnumerator34                                = 34,
    NewEnumerator35                                = 35,
    NewEnumerator36                                = 36,
    NewEnumerator37                                = 37,
    NewEnumerator38                                = 38,
    NewEnumerator39                                = 39,
    NewEnumerator40                                = 40,
    NewEnumerator41                                = 41,
    NewEnumerator42                                = 42,
    NewEnumerator43                                = 43,
    NewEnumerator44                                = 44,
    NewEnumerator46                                = 45,
    NewEnumerator47                                = 46,
    NewEnumerator48                                = 47,
    NewEnumerator49                                = 48,
    NewEnumerator50                                = 49,
    NewEnumerator51                                = 50,
    NewEnumerator52                                = 51,
    NewEnumerator53                                = 52,
    NewEnumerator54                                = 53,
    NewEnumerator55                                = 54,
    NewEnumerator56                                = 55,
    NewEnumerator57                                = 56,
    NewEnumerator58                                = 57,
    NewEnumerator59                                = 58,
    NewEnumerator60                                = 59,
    NewEnumerator61                                = 60,
    NewEnumerator62                                = 61,
    NewEnumerator63                                = 62,
    NewEnumerator64                                = 63,
    NewEnumerator65                                = 64,
    NewEnumerator66                                = 65,
    NewEnumerator67                                = 66,
    NewEnumerator68                                = 67,
    NewEnumerator69                                = 68,
    NewEnumerator70                                = 69,
    NewEnumerator71                                = 70,
    NewEnumerator72                                = 71,
    NewEnumerator73                                = 72,
    NewEnumerator74                                = 73,
    NewEnumerator75                                = 74,
    NewEnumerator76                                = 75,
    NewEnumerator77                                = 76,
    NewEnumerator78                                = 77,
    NewEnumerator79                                = 78,
    NewEnumerator80                                = 79,
    NewEnumerator82                                = 80,
    NewEnumerator83                                = 81,
    NewEnumerator84                                = 82,
    NewEnumerator85                                = 83,
    NewEnumerator86                                = 84,
    NewEnumerator87                                = 85,
    NewEnumerator88                                = 86,
    NewEnumerator89                                = 87,
    NewEnumerator90                                = 88,
    NewEnumerator93                                = 89,
    NewEnumerator94                                = 90,
    NewEnumerator95                                = 91,
    NewEnumerator96                                = 92,
    NewEnumerator97                                = 93,
    NewEnumerator98                                = 94,
    NewEnumerator99                                = 95,
    NewEnumerator100                               = 96,
    NewEnumerator101                               = 97,
    NewEnumerator102                               = 98,
    NewEnumerator103                               = 99,
    NewEnumerator104                               = 100,
    NewEnumerator105                               = 101,
    NewEnumerator106                               = 102,
    NewEnumerator107                               = 103,
    NewEnumerator108                               = 104,
    NewEnumerator109                               = 105,
    NewEnumerator110                               = 106,
    NewEnumerator111                               = 107,
    NewEnumerator112                               = 108,
    NewEnumerator113                               = 109,
    NewEnumerator114                               = 110,
    NewEnumerator115                               = 111,
    NewEnumerator116                               = 112,
    NewEnumerator117                               = 113,
    NewEnumerator146                               = 114,
    NewEnumerator195                               = 115,
    NewEnumerator196                               = 116,
    NewEnumerator197                               = 117,
    NewEnumerator198                               = 118,
    TacticalVOEnum                                 = 119

};


// UserDefinedEnum  RoundStartVOEnum.RoundStartVOEnum
enum class RoundStartVOEnum : uint8_t
{
    NewEnumerator9                                 = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator7                                 = 2,
    NewEnumerator2                                 = 3,
    NewEnumerator3                                 = 4,
    NewEnumerator5                                 = 5,
    NewEnumerator6                                 = 6,
    NewEnumerator8                                 = 7,
    RoundStartVOEnum                               = 8

};


// UserDefinedEnum  MapRelationMatchVOEnum.MapRelationMatchVOEnum
enum class MapRelationMatchVOEnum : uint8_t
{
    NewEnumerator5                                 = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator6                                 = 2,
    MapRelationMatchVOEnum                         = 3

};


// UserDefinedEnum  EffortVOEnum.EffortVOEnum
enum class EffortVOEnum : uint8_t
{
    NewEnumerator11                                = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator1                                 = 2,
    NewEnumerator2                                 = 3,
    NewEnumerator3                                 = 4,
    NewEnumerator5                                 = 5,
    NewEnumerator6                                 = 6,
    NewEnumerator7                                 = 7,
    NewEnumerator8                                 = 8,
    NewEnumerator9                                 = 9,
    NewEnumerator10                                = 10,
    EffortVOEnum                                   = 11

};


// UserDefinedEnum  DeathMatchVOEnum.DeathMatchVOEnum
enum class DeathMatchVOEnum : uint8_t
{
    NewEnumerator16                                = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator1                                 = 2,
    NewEnumerator18                                = 3,
    DeathMatchVOEnum                               = 4

};


// UserDefinedEnum  CharacterRelationRoundStartVOEnum.CharacterRelationRoundStartVOEnum
enum class CharacterRelationRoundStartVOEnum : uint8_t
{
    NewEnumerator8                                 = 0,
    NewEnumerator5                                 = 1,
    NewEnumerator6                                 = 2,
    NewEnumerator7                                 = 3,
    CharacterRelationRoundStartVOEnum              = 4

};


// UserDefinedEnum  CharacterRelationRoundEndVOEnum.CharacterRelationRoundEndVOEnum
enum class CharacterRelationRoundEndVOEnum : uint8_t
{
    NewEnumerator8                                 = 0,
    NewEnumerator5                                 = 1,
    CharacterRelationRoundEndVOEnum                = 2

};


// UserDefinedEnum  CharacterRelationKillsVOEnum.CharacterRelationKillsVOEnum
enum class CharacterRelationKillsVOEnum : uint8_t
{
    NewEnumerator5                                 = 0,
    NewEnumerator6                                 = 1,
    CharacterRelationKillsVOEnum                   = 2

};


// UserDefinedEnum  CharacterRelationEmoteVOEnum.CharacterRelationEmoteVOEnum
enum class CharacterRelationEmoteVOEnum : uint8_t
{
    NewEnumerator5                                 = 0,
    CharacterRelationEmoteVOEnum                   = 1

};


// UserDefinedEnum  CharacterConvoVOEnum.CharacterConvoVOEnum
enum class CharacterConvoVOEnum : uint8_t
{
    NewEnumerator8                                 = 0,
    NewEnumerator5                                 = 1,
    NewEnumerator6                                 = 2,
    CharacterConvoVOEnum                           = 3

};


// UserDefinedEnum  AbilitiesVOEnum.AbilitiesVOEnum
enum class AbilitiesVOEnum : uint8_t
{
    NewEnumerator16                                = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator1                                 = 2,
    NewEnumerator2                                 = 3,
    NewEnumerator9                                 = 4,
    NewEnumerator10                                = 5,
    NewEnumerator30                                = 6,
    NewEnumerator31                                = 7,
    NewEnumerator11                                = 8,
    NewEnumerator17                                = 9,
    NewEnumerator18                                = 10,
    NewEnumerator19                                = 11,
    NewEnumerator20                                = 12,
    NewEnumerator21                                = 13,
    NewEnumerator22                                = 14,
    NewEnumerator23                                = 15,
    NewEnumerator24                                = 16,
    NewEnumerator25                                = 17,
    NewEnumerator26                                = 18,
    NewEnumerator27                                = 19,
    NewEnumerator29                                = 20,
    NewEnumerator28                                = 21,
    AbilitiesVOEnum                                = 22

};


// UserDefinedEnum  RoundEndVOEnum.RoundEndVOEnum
enum class RoundEndVOEnum : uint8_t
{
    NewEnumerator16                                = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator1                                 = 2,
    NewEnumerator2                                 = 3,
    NewEnumerator9                                 = 4,
    NewEnumerator10                                = 5,
    NewEnumerator12                                = 6,
    NewEnumerator13                                = 7,
    NewEnumerator14                                = 8,
    NewEnumerator15                                = 9,
    NewEnumerator17                                = 10,
    RoundEndVOEnum                                 = 11

};


// UserDefinedEnum  KillsVOEnum.KillsVOEnum
enum class KillsVOEnum : uint8_t
{
    NewEnumerator16                                = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator1                                 = 2,
    NewEnumerator2                                 = 3,
    NewEnumerator9                                 = 4,
    NewEnumerator10                                = 5,
    NewEnumerator11                                = 6,
    NewEnumerator12                                = 7,
    NewEnumerator13                                = 8,
    NewEnumerator17                                = 9,
    NewEnumerator18                                = 10,
    NewEnumerator19                                = 11,
    NewEnumerator20                                = 12,
    NewEnumerator21                                = 13,
    NewEnumerator22                                = 14,
    KillsVOEnum                                    = 15

};


// UserDefinedEnum  .Variant
enum class Variant : uint8_t
{
    Variant                                        = 0,
    Variant                                        = 1,
    Variant                                        = 2,
    Variant                                        = 3,
    Variant                                        = 4,
    Variant                                        = 5

};


// UserDefinedEnum  .EquippableParticleToggleEnum
enum class EquippableParticleToggleEnum : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    EquippableParticleToggleEnum                   = 2

};


// UserDefinedEnum  .EAres
enum class EAres : uint8_t
{
    EAres                                          = 0,
    EAres                                          = 1,
    EAres                                          = 2

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2,
    Enum                                           = 3

};


// UserDefinedEnum  TacticalCommTypesEnum.TacticalCommTypesEnum
enum class TacticalCommTypesEnum : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    NewEnumerator4                                 = 4,
    NewEnumerator5                                 = 5,
    NewEnumerator6                                 = 6,
    NewEnumerator7                                 = 7,
    NewEnumerator8                                 = 8,
    NewEnumerator9                                 = 9,
    NewEnumerator10                                = 10,
    TacticalCommTypesEnum                          = 11

};


// UserDefinedEnum  EmoteVOEnum.EmoteVOEnum
enum class EmoteVOEnum : uint8_t
{
    NewEnumerator10                                = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator1                                 = 2,
    NewEnumerator2                                 = 3,
    NewEnumerator3                                 = 4,
    NewEnumerator6                                 = 5,
    NewEnumerator7                                 = 6,
    NewEnumerator8                                 = 7,
    NewEnumerator12                                = 8,
    NewEnumerator13                                = 9,
    EmoteVOEnum                                    = 10

};


// UserDefinedEnum  InWorldTeamVisionActorState.InWorldTeamVisionActorState
enum class InWorldTeamVisionActorState : uint8_t
{
    NewEnumerator4                                 = 0,
    NewEnumerator3                                 = 1,
    NewEnumerator0                                 = 2,
    NewEnumerator2                                 = 3,
    InWorldTeamVisionActorState                    = 4

};


// UserDefinedEnum  MaxbotVOEnum.MaxbotVOEnum
enum class MaxbotVOEnum : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator45                                = 1,
    NewEnumerator46                                = 2,
    NewEnumerator47                                = 3,
    NewEnumerator48                                = 4,
    NewEnumerator49                                = 5,
    NewEnumerator50                                = 6,
    NewEnumerator51                                = 7,
    NewEnumerator52                                = 8,
    NewEnumerator53                                = 9,
    NewEnumerator54                                = 10,
    NewEnumerator55                                = 11,
    NewEnumerator56                                = 12,
    NewEnumerator57                                = 13,
    NewEnumerator58                                = 14,
    NewEnumerator59                                = 15,
    NewEnumerator60                                = 16,
    NewEnumerator61                                = 17,
    NewEnumerator62                                = 18,
    NewEnumerator63                                = 19,
    NewEnumerator64                                = 20,
    NewEnumerator65                                = 21,
    NewEnumerator66                                = 22,
    NewEnumerator67                                = 23,
    NewEnumerator70                                = 24,
    NewEnumerator71                                = 25,
    NewEnumerator72                                = 26,
    NewEnumerator73                                = 27,
    NewEnumerator74                                = 28,
    NewEnumerator75                                = 29,
    NewEnumerator76                                = 30,
    NewEnumerator77                                = 31,
    NewEnumerator79                                = 32,
    NewEnumerator80                                = 33,
    NewEnumerator81                                = 34,
    NewEnumerator85                                = 35,
    NewEnumerator82                                = 36,
    NewEnumerator83                                = 37,
    NewEnumerator84                                = 38,
    MaxbotVOEnum                                   = 39

};


// UserDefinedEnum  CharacterRelationMatchVOEnum.CharacterRelationMatchVOEnum
enum class CharacterRelationMatchVOEnum : uint8_t
{
    NewEnumerator5                                 = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator1                                 = 2,
    CharacterRelationMatchVOEnum                   = 3

};


// UserDefinedEnum  CharacterRelationBubbleDownVOEnum.CharacterRelationBubbleDownVOEnum
enum class CharacterRelationBubbleDownVOEnum : uint8_t
{
    NewEnumerator8                                 = 0,
    NewEnumerator5                                 = 1,
    NewEnumerator6                                 = 2,
    CharacterRelationBubbleDownVOEnum              = 3

};


// UserDefinedEnum  AnnouncerMatchVOEnum.AnnouncerMatchVOEnum
enum class AnnouncerMatchVOEnum : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator11                                = 1,
    NewEnumerator12                                = 2,
    NewEnumerator13                                = 3,
    NewEnumerator22                                = 4,
    NewEnumerator14                                = 5,
    NewEnumerator15                                = 6,
    NewEnumerator16                                = 7,
    NewEnumerator17                                = 8,
    NewEnumerator18                                = 9,
    NewEnumerator19                                = 10,
    NewEnumerator21                                = 11,
    NewEnumerator23                                = 12,
    NewEnumerator25                                = 13,
    NewEnumerator24                                = 14,
    NewEnumerator33                                = 15,
    NewEnumerator26                                = 16,
    NewEnumerator29                                = 17,
    NewEnumerator39                                = 18,
    NewEnumerator40                                = 19,
    NewEnumerator27                                = 20,
    NewEnumerator30                                = 21,
    NewEnumerator31                                = 22,
    NewEnumerator32                                = 23,
    NewEnumerator34                                = 24,
    NewEnumerator35                                = 25,
    NewEnumerator36                                = 26,
    NewEnumerator37                                = 27,
    NewEnumerator38                                = 28,
    NewEnumerator41                                = 29,
    AnnouncerMatchVOEnum                           = 30

};


// UserDefinedEnum  AnnouncerKillsVOEnum.AnnouncerKillsVOEnum
enum class AnnouncerKillsVOEnum : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    NewEnumerator4                                 = 4,
    NewEnumerator5                                 = 5,
    NewEnumerator6                                 = 6,
    NewEnumerator28                                = 7,
    NewEnumerator7                                 = 8,
    NewEnumerator20                                = 9,
    NewEnumerator10                                = 10,
    NewEnumerator8                                 = 11,
    NewEnumerator9                                 = 12,
    NewEnumerator41                                = 13,
    NewEnumerator43                                = 14,
    NewEnumerator44                                = 15,
    NewEnumerator45                                = 16,
    NewEnumerator46                                = 17,
    NewEnumerator47                                = 18,
    NewEnumerator48                                = 19,
    AnnouncerKillsVOEnum                           = 20

};


// UserDefinedEnum  EBombRoundEndReason.EBombRoundEndReason
enum class EBombRoundEndReason : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    EBombRoundEndReason                            = 4

};


// UserDefinedEnum  VOPriorityEnum.VOPriorityEnum
enum class VOPriorityEnum : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    NewEnumerator5                                 = 4,
    NewEnumerator4                                 = 5,
    VOPriorityEnum                                 = 6

};


// UserDefinedEnum  CeremonyIdentifier.CeremonyIdentifier
enum class CeremonyIdentifier : uint8_t
{
    NewEnumerator1                                 = 0,
    NewEnumerator2                                 = 1,
    NewEnumerator0                                 = 2,
    NewEnumerator3                                 = 3,
    NewEnumerator4                                 = 4,
    NewEnumerator5                                 = 5,
    NewEnumerator7                                 = 6,
    CeremonyIdentifier                             = 7

};


// UserDefinedEnum  EIconPromptType.EIconPromptType
enum class EIconPromptType : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    EIconPromptType                                = 3

};


// UserDefinedEnum  SpeakingStates.SpeakingStates
enum class SpeakingStates : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    SpeakingStates                                 = 4

};


// UserDefinedEnum  ArmMovementType.ArmMovementType
enum class ArmMovementType : uint8_t
{
    NewEnumerator15                                = 0,
    NewEnumerator28                                = 1,
    NewEnumerator5                                 = 2,
    NewEnumerator1                                 = 3,
    NewEnumerator30                                = 4,
    NewEnumerator2                                 = 5,
    NewEnumerator31                                = 6,
    NewEnumerator25                                = 7,
    NewEnumerator50                                = 8,
    NewEnumerator32                                = 9,
    NewEnumerator3                                 = 10,
    NewEnumerator34                                = 11,
    NewEnumerator6                                 = 12,
    NewEnumerator24                                = 13,
    NewEnumerator49                                = 14,
    NewEnumerator23                                = 15,
    NewEnumerator48                                = 16,
    NewEnumerator29                                = 17,
    NewEnumerator0                                 = 18,
    NewEnumerator4                                 = 19,
    NewEnumerator33                                = 20,
    NewEnumerator10                                = 21,
    NewEnumerator38                                = 22,
    NewEnumerator35                                = 23,
    NewEnumerator7                                 = 24,
    NewEnumerator36                                = 25,
    NewEnumerator8                                 = 26,
    NewEnumerator37                                = 27,
    NewEnumerator9                                 = 28,
    NewEnumerator39                                = 29,
    NewEnumerator11                                = 30,
    NewEnumerator40                                = 31,
    NewEnumerator12                                = 32,
    NewEnumerator41                                = 33,
    NewEnumerator13                                = 34,
    NewEnumerator14                                = 35,
    NewEnumerator16                                = 36,
    NewEnumerator17                                = 37,
    NewEnumerator42                                = 38,
    NewEnumerator18                                = 39,
    NewEnumerator43                                = 40,
    NewEnumerator22                                = 41,
    NewEnumerator47                                = 42,
    NewEnumerator27                                = 43,
    NewEnumerator52                                = 44,
    NewEnumerator19                                = 45,
    NewEnumerator44                                = 46,
    NewEnumerator20                                = 47,
    NewEnumerator45                                = 48,
    NewEnumerator21                                = 49,
    NewEnumerator46                                = 50,
    ArmMovementType                                = 51

};


// UserDefinedEnum  BombDefusingState.BombDefusingState
enum class BombDefusingState : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator3                                 = 2,
    BombDefusingState                              = 3

};


// UserDefinedEnum  EPlantedBombState.EPlantedBombState
enum class EPlantedBombState : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    EPlantedBombState                              = 2

};


// UserDefinedEnum  EBombTickState.EBombTickState
enum class EBombTickState : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator4                                 = 3,
    NewEnumerator5                                 = 4,
    NewEnumerator3                                 = 5,
    EBombTickState                                 = 6

};


// UserDefinedEnum  BombSiteEnum.BombSiteEnum
enum class BombSiteEnum : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    BombSiteEnum                                   = 3

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2,
    Enum                                           = 3,
    Enum                                           = 4,
    Enum                                           = 5,
    Enum                                           = 6

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2

};


// UserDefinedEnum  EKillBannerAnimation.EKillBannerAnimation
enum class EKillBannerAnimation : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    EKillBannerAnimation                           = 3

};


// UserDefinedEnum  PersonalizationSkinRarity.PersonalizationSkinRarity
enum class PersonalizationSkinRarity : uint8_t
{
    NewEnumerator6                                 = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator1                                 = 2,
    NewEnumerator2                                 = 3,
    NewEnumerator3                                 = 4,
    NewEnumerator4                                 = 5,
    NewEnumerator5                                 = 6,
    PersonalizationSkinRarity                      = 7

};


// UserDefinedEnum  BubbleDownVOEnum.BubbleDownVOEnum
enum class BubbleDownVOEnum : uint8_t
{
    NewEnumerator11                                = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator7                                 = 2,
    BubbleDownVOEnum                               = 3

};


// UserDefinedEnum  Struct.Struct
enum class Struct : uint8_t
{
    Struct                                         = 0,
    Struct                                         = 1,
    Struct                                         = 2

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2,
    Enum                                           = 3

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2

};


// UserDefinedEnum  .ErrorTypeEnum
enum class ErrorTypeEnum : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    ErrorTypeEnum                                  = 3

};


// UserDefinedEnum  JumpThroughWallsEndPosResult.JumpThroughWallsEndPosResult
enum class JumpThroughWallsEndPosResult : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    JumpThroughWallsEndPosResult                   = 4

};


// UserDefinedEnum  NonVerbalCommTypesEnum.NonVerbalCommTypesEnum
enum class NonVerbalCommTypesEnum : uint8_t
{
    NewEnumerator67                                = 0,
    NewEnumerator5                                 = 1,
    NewEnumerator8                                 = 2,
    NewEnumerator7                                 = 3,
    NewEnumerator11                                = 4,
    NewEnumerator12                                = 5,
    NewEnumerator21                                = 6,
    NewEnumerator13                                = 7,
    NewEnumerator14                                = 8,
    NewEnumerator24                                = 9,
    NewEnumerator25                                = 10,
    NewEnumerator26                                = 11,
    NewEnumerator27                                = 12,
    NewEnumerator28                                = 13,
    NewEnumerator29                                = 14,
    NewEnumerator30                                = 15,
    NewEnumerator31                                = 16,
    NewEnumerator32                                = 17,
    NewEnumerator33                                = 18,
    NewEnumerator34                                = 19,
    NewEnumerator35                                = 20,
    NewEnumerator36                                = 21,
    NewEnumerator37                                = 22,
    NewEnumerator38                                = 23,
    NewEnumerator39                                = 24,
    NewEnumerator40                                = 25,
    NewEnumerator41                                = 26,
    NewEnumerator42                                = 27,
    NewEnumerator43                                = 28,
    NewEnumerator45                                = 29,
    NewEnumerator47                                = 30,
    NewEnumerator48                                = 31,
    NewEnumerator49                                = 32,
    NewEnumerator50                                = 33,
    NewEnumerator57                                = 34,
    NewEnumerator59                                = 35,
    NewEnumerator60                                = 36,
    NewEnumerator61                                = 37,
    NewEnumerator62                                = 38,
    NewEnumerator64                                = 39,
    NewEnumerator65                                = 40,
    NewEnumerator66                                = 41,
    NewEnumerator68                                = 42,
    NewEnumerator69                                = 43,
    NewEnumerator70                                = 44,
    NewEnumerator71                                = 45,
    NewEnumerator72                                = 46,
    NewEnumerator73                                = 47,
    NewEnumerator74                                = 48,
    NewEnumerator75                                = 49,
    NewEnumerator76                                = 50,
    NewEnumerator77                                = 51,
    NewEnumerator78                                = 52,
    NewEnumerator79                                = 53,
    NewEnumerator80                                = 54,
    NewEnumerator81                                = 55,
    NewEnumerator82                                = 56,
    NewEnumerator83                                = 57,
    NewEnumerator84                                = 58,
    NewEnumerator85                                = 59,
    NewEnumerator86                                = 60,
    NewEnumerator87                                = 61,
    NewEnumerator88                                = 62,
    NewEnumerator89                                = 63,
    NewEnumerator90                                = 64,
    NewEnumerator91                                = 65,
    NewEnumerator92                                = 66,
    NewEnumerator93                                = 67,
    NewEnumerator94                                = 68,
    NewEnumerator95                                = 69,
    NewEnumerator96                                = 70,
    NewEnumerator97                                = 71,
    NewEnumerator98                                = 72,
    NewEnumerator99                                = 73,
    NewEnumerator100                               = 74,
    NewEnumerator101                               = 75,
    NewEnumerator102                               = 76,
    NewEnumerator103                               = 77,
    NewEnumerator104                               = 78,
    NewEnumerator105                               = 79,
    NewEnumerator106                               = 80,
    NewEnumerator107                               = 81,
    NewEnumerator108                               = 82,
    NewEnumerator109                               = 83,
    NewEnumerator110                               = 84,
    NewEnumerator111                               = 85,
    NewEnumerator112                               = 86,
    NewEnumerator113                               = 87,
    NewEnumerator114                               = 88,
    NewEnumerator115                               = 89,
    NewEnumerator116                               = 90,
    NewEnumerator127                               = 91,
    NewEnumerator128                               = 92,
    NewEnumerator129                               = 93,
    NewEnumerator130                               = 94,
    NewEnumerator131                               = 95,
    NewEnumerator132                               = 96,
    NewEnumerator133                               = 97,
    NonVerbalCommTypesEnum                         = 98

};


// UserDefinedEnum  .ECharacterAbilityStatisticList
enum class ECharacterAbilityStatisticList : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    NewEnumerator6                                 = 4,
    NewEnumerator8                                 = 5,
    NewEnumerator9                                 = 6,
    NewEnumerator10                                = 7,
    NewEnumerator11                                = 8,
    NewEnumerator12                                = 9,
    NewEnumerator13                                = 10,
    NewEnumerator14                                = 11,
    NewEnumerator15                                = 12,
    NewEnumerator16                                = 13,
    NewEnumerator17                                = 14,
    NewEnumerator18                                = 15,
    NewEnumerator19                                = 16,
    NewEnumerator20                                = 17,
    NewEnumerator21                                = 18,
    NewEnumerator22                                = 19,
    NewEnumerator23                                = 20,
    NewEnumerator24                                = 21,
    NewEnumerator25                                = 22,
    NewEnumerator26                                = 23,
    NewEnumerator27                                = 24,
    NewEnumerator28                                = 25,
    NewEnumerator29                                = 26,
    NewEnumerator30                                = 27,
    NewEnumerator31                                = 28,
    NewEnumerator32                                = 29,
    NewEnumerator33                                = 30,
    NewEnumerator34                                = 31,
    NewEnumerator35                                = 32,
    NewEnumerator36                                = 33,
    NewEnumerator37                                = 34,
    NewEnumerator38                                = 35,
    NewEnumerator39                                = 36,
    NewEnumerator40                                = 37,
    NewEnumerator41                                = 38,
    NewEnumerator42                                = 39,
    NewEnumerator43                                = 40,
    NewEnumerator44                                = 41,
    NewEnumerator45                                = 42,
    NewEnumerator46                                = 43,
    NewEnumerator47                                = 44,
    NewEnumerator48                                = 45,
    NewEnumerator50                                = 46,
    NewEnumerator51                                = 47,
    NewEnumerator52                                = 48,
    NewEnumerator53                                = 49,
    NewEnumerator54                                = 50,
    NewEnumerator55                                = 51,
    NewEnumerator56                                = 52,
    NewEnumerator57                                = 53,
    NewEnumerator58                                = 54,
    NewEnumerator59                                = 55,
    NewEnumerator60                                = 56,
    NewEnumerator62                                = 57,
    NewEnumerator63                                = 58,
    NewEnumerator64                                = 59,
    ECharacterAbilityStatisticList                 = 60

};


// UserDefinedEnum  .EAbilityStatisticAccumulationType
enum class EAbilityStatisticAccumulationType : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    EAbilityStatisticAccumulationType              = 2

};


// UserDefinedEnum  DirectionEnum.DirectionEnum
enum class DirectionEnum : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    DirectionEnum                                  = 4

};


// UserDefinedEnum  PartyPingStatus.PartyPingStatus
enum class PartyPingStatus : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    PartyPingStatus                                = 4

};


// UserDefinedEnum  EPartyMemberAction.EPartyMemberAction
enum class EPartyMemberAction : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    NewEnumerator4                                 = 4,
    NewEnumerator5                                 = 5,
    NewEnumerator7                                 = 6,
    NewEnumerator8                                 = 7,
    NewEnumerator9                                 = 8,
    NewEnumerator11                                = 9,
    NewEnumerator12                                = 10,
    NewEnumerator13                                = 11,
    NewEnumerator14                                = 12,
    NewEnumerator15                                = 13,
    NewEnumerator16                                = 14,
    EPartyMemberAction                             = 15

};


// UserDefinedEnum  Ability.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2

};


// UserDefinedEnum  HealthStatus.HealthStatus
enum class HealthStatus : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    NewEnumerator2                                 = 2,
    NewEnumerator3                                 = 3,
    HealthStatus                                   = 4

};


// UserDefinedEnum  EAmmoHUDElementState.EAmmoHUDElementState
enum class EAmmoHUDElementState : uint8_t
{
    NewEnumerator0                                 = 0,
    NewEnumerator1                                 = 1,
    EAmmoHUDElementState                           = 2

};


// UserDefinedEnum  ProjectileBendingType.ProjectileBendingType
enum class ProjectileBendingType : uint8_t
{
    NewEnumerator2                                 = 0,
    NewEnumerator0                                 = 1,
    NewEnumerator1                                 = 2,
    ProjectileBendingType                          = 3

};


// UserDefinedEnum  Enum.Enum
enum class Enum : uint8_t
{
    Enum                                           = 0,
    Enum                                           = 1,
    Enum                                           = 2,
    Enum                                           = 3

};


